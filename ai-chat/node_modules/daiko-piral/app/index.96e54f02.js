function _mergeNamespaces(n, m2) {
  for (var i = 0; i < m2.length; i++) {
    const e = m2[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k2 in e) {
        if (k2 !== "default" && !(k2 in n)) {
          const d2 = Object.getOwnPropertyDescriptor(e, k2);
          if (d2) {
            Object.defineProperty(n, k2, d2.get ? d2 : {
              enumerable: true,
              get: () => e[k2]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node2 of mutation.addedNodes) {
        if (node2.tagName === "LINK" && node2.rel === "modulepreload")
          processPreload(node2);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity)
      fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy)
      fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
var jsxDevRuntime = { exports: {} };
var reactJsxDevRuntime_development = {};
var react = { exports: {} };
var react_development = { exports: {} };
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
react_development.exports;
(function(module, exports) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var ReactVersion = "18.3.1";
      var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error2(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName2 = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName2 + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName2);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(publicInstance) {
          return false;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign2 = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      assign2(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName2 = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName2]) {
              error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName2, config.ref);
              didWarnAboutStringRefs[componentName2] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source, owner, props) {
        var element = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: REACT_ELEMENT_TYPE2,
          // Built-in properties that belong on the element
          type,
          key,
          ref,
          props,
          // Record the component responsible for creating this element.
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps2 = type.defaultProps;
          for (propName in defaultProps2) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps2[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === void 0) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign2({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps2;
          if (element.type && element.type.defaultProps) {
            defaultProps2 = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps2 !== void 0) {
                props[propName] = defaultProps2[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0; i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index2) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index2.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE2:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(
                mappedChild,
                // Keep both the (mapped) and old keys if they differ, just as
                // traverseAllChildren used to do for objects as children
                escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                  // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                  // eslint-disable-next-line react-internal/safe-string-coercion
                  escapeUserProvidedKey("" + mappedChild.key) + "/"
                ) : "") + childKey
              );
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i = 0; i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii2 = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii2++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count2 = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count2++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext2(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error3) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error3;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === void 0) {
              error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          // We use these fields to store the result.
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps2;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps2;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps2 = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
          // types supported by any Flight configuration anywhere since
          // we don't know which Flight build this will end up being used
          // with.
          type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare2) {
        {
          if (!isValidElementType(type)) {
            error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare2 === void 0 ? null : compare2
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== void 0) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer2, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer2, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create2, deps);
      }
      function useInsertionEffect2(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create2, deps);
      }
      function useLayoutEffect(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create2, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create2, deps);
      }
      function useImperativeHandle(ref, create2, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create2, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId2() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign2({}, props, {
                value: prevLog
              }),
              info: assign2({}, props, {
                value: prevInfo
              }),
              warn: assign2({}, props, {
                value: prevWarn
              }),
              error: assign2({}, props, {
                value: prevError
              }),
              group: assign2({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign2({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign2({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix2;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix2 === void 0) {
            try {
              throw Error();
            } catch (x) {
              var match2 = x.stack.trim().match(/\n( *(at )?)/);
              prefix2 = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix2 + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (; s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values2, location2, componentName2, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName2 || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName2, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location2, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error2("Failed %s type: %s", location2, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        if (typeof node2 !== "object") {
          return;
        }
        if (isArray(node2)) {
          for (var i = 0; i < node2.length; i++) {
            var child = node2[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node2)) {
          if (node2._store) {
            node2._store.validated = true;
          }
        } else if (node2) {
          var iteratorFn = getIteratorFn(node2);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node2.entries) {
              var iterator = iteratorFn.call(node2);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys2 = Object.keys(fragment.props);
          for (var i = 0; i < keys2.length; i++) {
            var key = keys2[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel();
              channel.port1.onmessage = callback;
              channel.port2.postMessage(void 0);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error3) {
            popActScope(prevActScopeDepth);
            throw error3;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error3) {
                  popActScope(prevActScopeDepth);
                  reject(error3);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error3) {
              reject(error3);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error3) {
              queue = queue.slice(i + 1);
              throw error3;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.act = act;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext2;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId2;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect2;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition2;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(react_development, react_development.exports);
var react_developmentExports = react_development.exports;
{
  react.exports = react_developmentExports;
}
var reactExports = react.exports;
const React = /* @__PURE__ */ getDefaultExportFromCjs(reactExports);
const React$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: React
}, [reactExports]);
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  (function() {
    var React2 = reactExports;
    var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error2(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    }
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function") {
        return true;
      }
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    var assign2 = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign2({}, props, {
              value: prevLog
            }),
            info: assign2({}, props, {
              value: prevInfo
            }),
            warn: assign2({}, props, {
              value: prevWarn
            }),
            error: assign2({}, props, {
              value: prevError
            }),
            group: assign2({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign2({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign2({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix2;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix2 === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
          }
        }
        return "\n" + prefix2 + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values2, location2, componentName2, element) {
      {
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName2 || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName2, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location2, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error2("Failed %s type: %s", location2, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self2) {
      {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName2 = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName2]) {
            error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName2] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    var ReactElement = function(type, key, ref, self2, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE2,
        // Built-in properties that belong on the element
        type,
        key,
        ref,
        props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        });
        Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    function jsxDEV(type, config, maybeKey, source, self2) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== void 0) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = "" + config.key;
        }
        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self2);
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
        if (type && type.defaultProps) {
          var defaultProps2 = type.defaultProps;
          for (propName in defaultProps2) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps2[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function isValidElement(object) {
      {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node2, parentType) {
      {
        if (typeof node2 !== "object") {
          return;
        }
        if (isArray(node2)) {
          for (var i = 0; i < node2.length; i++) {
            var child = node2[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node2)) {
          if (node2._store) {
            node2._store.validated = true;
          }
        } else if (node2) {
          var iteratorFn = getIteratorFn(node2);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node2.entries) {
              var iterator = iteratorFn.call(node2);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string") {
          return;
        }
        var propTypes;
        if (typeof type === "function") {
          propTypes = type.propTypes;
        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          var _name = getComponentNameFromType(type);
          error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
          error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys2 = Object.keys(fragment.props);
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error2("Invalid attribute `ref` supplied to `React.Fragment`.");
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
      {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self2);
        if (element == null) {
          return element;
        }
        if (validType) {
          var children = props.children;
          if (children !== void 0) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        {
          if (hasOwnProperty.call(props, "key")) {
            var componentName2 = getComponentNameFromType(type);
            var keys2 = Object.keys(props).filter(function(k2) {
              return k2 !== "key";
            });
            var beforeExample = keys2.length > 0 ? "{key: someKey, " + keys2.join(": ..., ") + ": ...}" : "{key: someKey}";
            if (!didWarnAboutKeySpread[componentName2 + beforeExample]) {
              var afterExample = keys2.length > 0 ? "{" + keys2.join(": ..., ") + ": ...}" : "{}";
              error2('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName2, afterExample, componentName2);
              didWarnAboutKeySpread[componentName2 + beforeExample] = true;
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    }
    var jsxDEV$1 = jsxWithValidation;
    reactJsxDevRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    reactJsxDevRuntime_development.jsxDEV = jsxDEV$1;
  })();
}
{
  jsxDevRuntime.exports = reactJsxDevRuntime_development;
}
var jsxDevRuntimeExports = jsxDevRuntime.exports;
var reactDom = { exports: {} };
var reactDom_development = {};
var scheduler = { exports: {} };
var scheduler_development = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
(function(exports) {
  {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node2) {
        var index2 = heap.length;
        heap.push(node2);
        siftUp(heap, node2, index2);
      }
      function peek2(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node2, i) {
        var index2 = i;
        while (index2 > 0) {
          var parentIndex = index2 - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare2(parent, node2) > 0) {
            heap[parentIndex] = node2;
            heap[index2] = parent;
            index2 = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node2, i) {
        var index2 = i;
        var length2 = heap.length;
        var halfLength = length2 >>> 1;
        while (index2 < halfLength) {
          var leftIndex = (index2 + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare2(left, node2) < 0) {
            if (rightIndex < length2 && compare2(right, left) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node2;
              index2 = rightIndex;
            } else {
              heap[index2] = left;
              heap[leftIndex] = node2;
              index2 = leftIndex;
            }
          } else if (rightIndex < length2 && compare2(right, node2) < 0) {
            heap[index2] = right;
            heap[rightIndex] = node2;
            index2 = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare2(a, b2) {
        var diff = a.sortIndex - b2.sortIndex;
        return diff !== 0 ? diff : a.id - b2.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5e3;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek2(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek2(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek2(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek2(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          var currentTime;
          if (enableProfiling)
            ;
          else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek2(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek2(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek2(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek2(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek2(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1e3 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
      }
    })();
  }
})(scheduler_development);
{
  scheduler.exports = scheduler_development;
}
var schedulerExports = scheduler.exports;
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  (function() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var React2 = reactExports;
    var Scheduler = schedulerExports;
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
      {
        suppressWarning = newSuppressWarning;
      }
    }
    function warn(format) {
      {
        if (!suppressWarning) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
    }
    function error2(format) {
      {
        if (!suppressWarning) {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    var enableClientRenderFallbackOnTextMismatch = true;
    var enableNewReconciler = false;
    var enableLazyContextPropagation = false;
    var enableLegacyHidden = false;
    var enableSuspenseAvoidThisFallback = false;
    var disableCommentsAsDOMContainers = true;
    var enableCustomElementPropertySupport = false;
    var warnAboutStringRefs = true;
    var enableSchedulingProfiler = true;
    var enableProfilerTimer = true;
    var enableProfilerCommitHooks = true;
    var allNativeEvents = /* @__PURE__ */ new Set();
    var registrationNameDependencies = {};
    var possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
      registerDirectEvent(registrationName, dependencies);
      registerDirectEvent(registrationName + "Capture", dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
      {
        if (registrationNameDependencies[registrationName]) {
          error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        }
      }
      registrationNameDependencies[registrationName] = dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === "onDoubleClick") {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
      for (var i = 0; i < dependencies.length; i++) {
        allNativeEvents.add(dependencies[i]);
      }
    }
    var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkPropStringCoercion(value, propName) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkHtmlStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    function checkFormFieldValueStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var RESERVED = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }
      illegalAttributeNameCache[attributeName] = true;
      {
        error2("Invalid attribute name: `%s`", attributeName);
      }
      return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
        return true;
      }
      return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }
      switch (typeof value) {
        case "function":
        case "symbol":
          return true;
        case "boolean": {
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          } else {
            var prefix3 = name.toLowerCase().slice(0, 5);
            return prefix3 !== "data-" && prefix3 !== "aria-";
          }
        }
        default:
          return false;
      }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === "undefined") {
        return true;
      }
      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }
      if (isCustomComponentTag) {
        return false;
      }
      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;
          case OVERLOADED_BOOLEAN:
            return value === false;
          case NUMERIC:
            return isNaN(value);
          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }
      return false;
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL2;
      this.removeEmptyString = removeEmptyString;
    }
    var properties = {};
    var reservedProps = [
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
    reservedProps.forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        RESERVED,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0], attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEANISH_STRING,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        BOOLEAN,
        true,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        OVERLOADED_BOOLEAN,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        POSITIVE_NUMERIC,
        false,
        // mustUseProperty
        name,
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(
        name,
        NUMERIC,
        false,
        // mustUseProperty
        name.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token2) {
      return token2[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/1999/xlink",
        false,
        // sanitizeURL
        false
      );
    });
    [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(
        name,
        STRING,
        false,
        // mustUseProperty
        attributeName,
        "http://www.w3.org/XML/1998/namespace",
        false,
        // sanitizeURL
        false
      );
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        false,
        // sanitizeURL
        false
      );
    });
    var xlinkHref = "xlinkHref";
    properties[xlinkHref] = new PropertyInfoRecord(
      "xlinkHref",
      STRING,
      false,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      true,
      // sanitizeURL
      false
    );
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(
        attributeName,
        STRING,
        false,
        // mustUseProperty
        attributeName.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        true,
        // sanitizeURL
        true
      );
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
      {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
          didWarn = true;
          error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
      }
    }
    function getValueForProperty(node2, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node2[propertyName];
        } else {
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL("" + expected);
          }
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;
          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node2.hasAttribute(attributeName)) {
              var value = node2.getAttribute(attributeName);
              if (value === "") {
                return true;
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          } else if (node2.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return node2.getAttribute(attributeName);
            }
            if (propertyInfo.type === BOOLEAN) {
              return expected;
            }
            stringValue = node2.getAttribute(attributeName);
          }
          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === "" + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }
        if (!node2.hasAttribute(name)) {
          return expected === void 0 ? void 0 : null;
        }
        var value = node2.getAttribute(name);
        {
          checkAttributeStringCoercion(expected, name);
        }
        if (value === "" + expected) {
          return expected;
        }
        return value;
      }
    }
    function setValueForProperty(node2, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);
      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }
      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      }
      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;
          if (value === null) {
            node2.removeAttribute(_attributeName);
          } else {
            {
              checkAttributeStringCoercion(value, name);
            }
            node2.setAttribute(_attributeName, "" + value);
          }
        }
        return;
      }
      var mustUseProperty = propertyInfo.mustUseProperty;
      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;
        if (value === null) {
          var type = propertyInfo.type;
          node2[propertyName] = type === BOOLEAN ? false : "";
        } else {
          node2[propertyName] = value;
        }
        return;
      }
      var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
      if (value === null) {
        node2.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue;
        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = "";
        } else {
          {
            {
              checkAttributeStringCoercion(value, attributeName);
            }
            attributeValue = "" + value;
          }
          if (propertyInfo.sanitizeURL) {
            sanitizeURL(attributeValue.toString());
          }
        }
        if (attributeNamespace) {
          node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node2.setAttribute(attributeName, attributeValue);
        }
      }
    }
    var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_CACHE_TYPE = Symbol.for("react.cache");
    var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var assign2 = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign2({}, props, {
              value: prevLog
            }),
            info: assign2({}, props, {
              value: prevInfo
            }),
            warn: assign2({}, props, {
              value: prevWarn
            }),
            error: assign2({}, props, {
              value: prevError
            }),
            group: assign2({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign2({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign2({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix2;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix2 === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
          }
        }
        return "\n" + prefix2 + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
      {
        return describeNativeComponentFrame(ctor, true);
      }
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    function describeFiber(fiber) {
      fiber._debugOwner ? fiber._debugOwner.type : null;
      fiber._debugSource;
      switch (fiber.tag) {
        case HostComponent:
          return describeBuiltInComponentFrame(fiber.type);
        case LazyComponent:
          return describeBuiltInComponentFrame("Lazy");
        case SuspenseComponent:
          return describeBuiltInComponentFrame("Suspense");
        case SuspenseListComponent:
          return describeBuiltInComponentFrame("SuspenseList");
        case FunctionComponent:
        case IndeterminateComponent:
        case SimpleMemoComponent:
          return describeFunctionComponentFrame(fiber.type);
        case ForwardRef:
          return describeFunctionComponentFrame(fiber.type.render);
        case ClassComponent:
          return describeClassComponentFrame(fiber.type);
        default:
          return "";
      }
    }
    function getStackByFiberInDevAndProd(workInProgress2) {
      try {
        var info = "";
        var node2 = workInProgress2;
        do {
          info += describeFiber(node2);
          node2 = node2.return;
        } while (node2);
        return info;
      } catch (x) {
        return "\nError generating stack: " + x.message + "\n" + x.stack;
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || "";
      return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromFiber(fiber) {
      var tag = fiber.tag, type = fiber.type;
      switch (tag) {
        case CacheComponent:
          return "Cache";
        case ContextConsumer:
          var context = type;
          return getContextName$1(context) + ".Consumer";
        case ContextProvider:
          var provider = type;
          return getContextName$1(provider._context) + ".Provider";
        case DehydratedFragment:
          return "DehydratedFragment";
        case ForwardRef:
          return getWrappedName$1(type, type.render, "ForwardRef");
        case Fragment:
          return "Fragment";
        case HostComponent:
          return type;
        case HostPortal:
          return "Portal";
        case HostRoot:
          return "Root";
        case HostText:
          return "Text";
        case LazyComponent:
          return getComponentNameFromType(type);
        case Mode:
          if (type === REACT_STRICT_MODE_TYPE) {
            return "StrictMode";
          }
          return "Mode";
        case OffscreenComponent:
          return "Offscreen";
        case Profiler:
          return "Profiler";
        case ScopeComponent:
          return "Scope";
        case SuspenseComponent:
          return "Suspense";
        case SuspenseListComponent:
          return "SuspenseList";
        case TracingMarkerComponent:
          return "TracingMarker";
        case ClassComponent:
        case FunctionComponent:
        case IncompleteClassComponent:
        case IndeterminateComponent:
        case MemoComponent:
        case SimpleMemoComponent:
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          break;
      }
      return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== "undefined") {
          return getComponentNameFromFiber(owner);
        }
      }
      return null;
    }
    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return "";
        }
        return getStackByFiberInDevAndProd(current);
      }
    }
    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
      }
    }
    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
      }
    }
    function getCurrentFiber() {
      {
        return current;
      }
    }
    function setIsRendering(rendering) {
      {
        isRendering = rendering;
      }
    }
    function toString(value) {
      return "" + value;
    }
    function getToStringValue(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return value;
        case "object":
          {
            checkFormFieldValueStringCoercion(value);
          }
          return value;
        default:
          return "";
      }
    }
    var hasReadOnlyValue = {
      button: true,
      checkbox: true,
      image: true,
      hidden: true,
      radio: true,
      reset: true,
      submit: true
    };
    function checkControlledValueProps(tagName, props) {
      {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
          error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        }
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
          error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
        }
      }
    }
    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
    }
    function getTracker(node2) {
      return node2._valueTracker;
    }
    function detachTracker(node2) {
      node2._valueTracker = null;
    }
    function getValueFromNode(node2) {
      var value = "";
      if (!node2) {
        return value;
      }
      if (isCheckable(node2)) {
        value = node2.checked ? "true" : "false";
      } else {
        value = node2.value;
      }
      return value;
    }
    function trackValueOnNode(node2) {
      var valueField = isCheckable(node2) ? "checked" : "value";
      var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
      {
        checkFormFieldValueStringCoercion(node2[valueField]);
      }
      var currentValue = "" + node2[valueField];
      if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
        return;
      }
      var get2 = descriptor.get, set3 = descriptor.set;
      Object.defineProperty(node2, valueField, {
        configurable: true,
        get: function() {
          return get2.call(this);
        },
        set: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
          set3.call(this, value);
        }
      });
      Object.defineProperty(node2, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function() {
          return currentValue;
        },
        setValue: function(value) {
          {
            checkFormFieldValueStringCoercion(value);
          }
          currentValue = "" + value;
        },
        stopTracking: function() {
          detachTracker(node2);
          delete node2[valueField];
        }
      };
      return tracker;
    }
    function track(node2) {
      if (getTracker(node2)) {
        return;
      }
      node2._valueTracker = trackValueOnNode(node2);
    }
    function updateValueIfChanged(node2) {
      if (!node2) {
        return false;
      }
      var tracker = getTracker(node2);
      if (!tracker) {
        return true;
      }
      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node2);
      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }
      return false;
    }
    function getActiveElement(doc) {
      doc = doc || (typeof document !== "undefined" ? document : void 0);
      if (typeof doc === "undefined") {
        return null;
      }
      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
      var usesChecked = props.type === "checkbox" || props.type === "radio";
      return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
      var node2 = element;
      var checked = props.checked;
      var hostProps = assign2({}, props, {
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
        checked: checked != null ? checked : node2._wrapperState.initialChecked
      });
      return hostProps;
    }
    function initWrapperState(element, props) {
      {
        checkControlledValueProps("input", props);
        if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
          error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
          error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node2 = element;
      var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
      node2._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }
    function updateChecked(element, props) {
      var node2 = element;
      var checked = props.checked;
      if (checked != null) {
        setValueForProperty(node2, "checked", checked, false);
      }
    }
    function updateWrapper(element, props) {
      var node2 = element;
      {
        var controlled = isControlled(props);
        if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
          error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnUncontrolledToControlled = true;
        }
        if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
          error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;
      if (value != null) {
        if (type === "number") {
          if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node2.value != value) {
            node2.value = toString(value);
          }
        } else if (node2.value !== toString(value)) {
          node2.value = toString(value);
        }
      } else if (type === "submit" || type === "reset") {
        node2.removeAttribute("value");
        return;
      }
      {
        if (props.hasOwnProperty("value")) {
          setDefaultValue(node2, props.type, value);
        } else if (props.hasOwnProperty("defaultValue")) {
          setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
        }
      }
      {
        if (props.checked == null && props.defaultChecked != null) {
          node2.defaultChecked = !!props.defaultChecked;
        }
      }
    }
    function postMountWrapper(element, props, isHydrating2) {
      var node2 = element;
      if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
        var type = props.type;
        var isButton = type === "submit" || type === "reset";
        if (isButton && (props.value === void 0 || props.value === null)) {
          return;
        }
        var initialValue = toString(node2._wrapperState.initialValue);
        if (!isHydrating2) {
          {
            if (initialValue !== node2.value) {
              node2.value = initialValue;
            }
          }
        }
        {
          node2.defaultValue = initialValue;
        }
      }
      var name = node2.name;
      if (name !== "") {
        node2.name = "";
      }
      {
        node2.defaultChecked = !node2.defaultChecked;
        node2.defaultChecked = !!node2._wrapperState.initialChecked;
      }
      if (name !== "") {
        node2.name = name;
      }
    }
    function restoreControlledState(element, props) {
      var node2 = element;
      updateWrapper(node2, props);
      updateNamedCousins(node2, props);
    }
    function updateNamedCousins(rootNode, props) {
      var name = props.name;
      if (props.type === "radio" && name != null) {
        var queryRoot = rootNode;
        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        }
        {
          checkAttributeStringCoercion(name, "name");
        }
        var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];
          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          }
          var otherProps = getFiberCurrentPropsFromNode(otherNode);
          if (!otherProps) {
            throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
          updateValueIfChanged(otherNode);
          updateWrapper(otherNode, otherProps);
        }
      }
    }
    function setDefaultValue(node2, type, value) {
      if (
        // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
        type !== "number" || getActiveElement(node2.ownerDocument) !== node2
      ) {
        if (value == null) {
          node2.defaultValue = toString(node2._wrapperState.initialValue);
        } else if (node2.defaultValue !== toString(value)) {
          node2.defaultValue = toString(value);
        }
      }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    function validateProps(element, props) {
      {
        if (props.value == null) {
          if (typeof props.children === "object" && props.children !== null) {
            React2.Children.forEach(props.children, function(child) {
              if (child == null) {
                return;
              }
              if (typeof child === "string" || typeof child === "number") {
                return;
              }
              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            });
          } else if (props.dangerouslySetInnerHTML != null) {
            if (!didWarnInvalidInnerHTML) {
              didWarnInvalidInnerHTML = true;
              error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
            }
          }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption) {
          error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
          didWarnSelectedSetOnOption = true;
        }
      }
    }
    function postMountWrapper$1(element, props) {
      if (props.value != null) {
        element.setAttribute("value", toString(getToStringValue(props.value)));
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    {
      didWarnValueDefaultValue$1 = false;
    }
    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();
      if (ownerName) {
        return "\n\nCheck the render method of `" + ownerName + "`.";
      }
      return "";
    }
    var valuePropNames = ["value", "defaultValue"];
    function checkSelectPropTypes(props) {
      {
        checkControlledValueProps("select", props);
        for (var i = 0; i < valuePropNames.length; i++) {
          var propName = valuePropNames[i];
          if (props[propName] == null) {
            continue;
          }
          var propNameIsArray = isArray(props[propName]);
          if (props.multiple && !propNameIsArray) {
            error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
          } else if (!props.multiple && propNameIsArray) {
            error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
          }
        }
      }
    }
    function updateOptions(node2, multiple, propValue, setDefaultSelected) {
      var options2 = node2.options;
      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};
        for (var i = 0; i < selectedValues.length; i++) {
          selectedValue["$" + selectedValues[i]] = true;
        }
        for (var _i2 = 0; _i2 < options2.length; _i2++) {
          var selected = selectedValue.hasOwnProperty("$" + options2[_i2].value);
          if (options2[_i2].selected !== selected) {
            options2[_i2].selected = selected;
          }
          if (selected && setDefaultSelected) {
            options2[_i2].defaultSelected = true;
          }
        }
      } else {
        var _selectedValue = toString(getToStringValue(propValue));
        var defaultSelected = null;
        for (var _i22 = 0; _i22 < options2.length; _i22++) {
          if (options2[_i22].value === _selectedValue) {
            options2[_i22].selected = true;
            if (setDefaultSelected) {
              options2[_i22].defaultSelected = true;
            }
            return;
          }
          if (defaultSelected === null && !options2[_i22].disabled) {
            defaultSelected = options2[_i22];
          }
        }
        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    function getHostProps$1(element, props) {
      return assign2({}, props, {
        value: void 0
      });
    }
    function initWrapperState$1(element, props) {
      var node2 = element;
      {
        checkSelectPropTypes(props);
      }
      node2._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
          error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
          didWarnValueDefaultValue$1 = true;
        }
      }
    }
    function postMountWrapper$2(element, props) {
      var node2 = element;
      node2.multiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node2, !!props.multiple, props.defaultValue, true);
      }
    }
    function postUpdateWrapper(element, props) {
      var node2 = element;
      var wasMultiple = node2._wrapperState.wasMultiple;
      node2._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        if (props.defaultValue != null) {
          updateOptions(node2, !!props.multiple, props.defaultValue, true);
        } else {
          updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
        }
      }
    }
    function restoreControlledState$1(element, props) {
      var node2 = element;
      var value = props.value;
      if (value != null) {
        updateOptions(node2, !!props.multiple, value, false);
      }
    }
    var didWarnValDefaultVal = false;
    function getHostProps$2(element, props) {
      var node2 = element;
      if (props.dangerouslySetInnerHTML != null) {
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
      }
      var hostProps = assign2({}, props, {
        value: void 0,
        defaultValue: void 0,
        children: toString(node2._wrapperState.initialValue)
      });
      return hostProps;
    }
    function initWrapperState$2(element, props) {
      var node2 = element;
      {
        checkControlledValueProps("textarea", props);
        if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
          error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value;
      if (initialValue == null) {
        var children = props.children, defaultValue = props.defaultValue;
        if (children != null) {
          {
            error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          }
          {
            if (defaultValue != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              children = children[0];
            }
            defaultValue = children;
          }
        }
        if (defaultValue == null) {
          defaultValue = "";
        }
        initialValue = defaultValue;
      }
      node2._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }
    function updateWrapper$1(element, props) {
      var node2 = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);
      if (value != null) {
        var newValue = toString(value);
        if (newValue !== node2.value) {
          node2.value = newValue;
        }
        if (props.defaultValue == null && node2.defaultValue !== newValue) {
          node2.defaultValue = newValue;
        }
      }
      if (defaultValue != null) {
        node2.defaultValue = toString(defaultValue);
      }
    }
    function postMountWrapper$3(element, props) {
      var node2 = element;
      var textContent = node2.textContent;
      if (textContent === node2._wrapperState.initialValue) {
        if (textContent !== "" && textContent !== null) {
          node2.value = textContent;
        }
      }
    }
    function restoreControlledState$2(element, props) {
      updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
    var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
    var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
    function getIntrinsicNamespace(type) {
      switch (type) {
        case "svg":
          return SVG_NAMESPACE;
        case "math":
          return MATH_NAMESPACE;
        default:
          return HTML_NAMESPACE;
      }
    }
    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
        return getIntrinsicNamespace(type);
      }
      if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
        return HTML_NAMESPACE;
      }
      return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
      if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
        return function(arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function() {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    };
    var reusableSVGContainer;
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
      if (node2.namespaceURI === SVG_NAMESPACE) {
        if (!("innerHTML" in node2)) {
          reusableSVGContainer = reusableSVGContainer || document.createElement("div");
          reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
          var svgNode = reusableSVGContainer.firstChild;
          while (node2.firstChild) {
            node2.removeChild(node2.firstChild);
          }
          while (svgNode.firstChild) {
            node2.appendChild(svgNode.firstChild);
          }
          return;
        }
      }
      node2.innerHTML = html;
    });
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var setTextContent = function(node2, text) {
      if (text) {
        var firstChild = node2.firstChild;
        if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }
      node2.textContent = text;
    };
    var shorthandToLonghand = {
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
    };
    var isUnitlessNumber = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    function prefixKey(prefix3, key) {
      return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix3) {
        isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
      });
    });
    function dangerousStyleValue(name, value, isCustomProperty3) {
      var isEmpty = value == null || typeof value === "boolean" || value === "";
      if (isEmpty) {
        return "";
      }
      if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + "px";
      }
      {
        checkCSSPropertyStringCoercion(value, name);
      }
      return ("" + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
    }
    var warnValidStyle = function() {
    };
    {
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g;
      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;
      var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character2) {
          return character2.toUpperCase();
        });
      };
      var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error2(
          "Unsupported style property %s. Did you mean %s?",
          name,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
          camelize(name.replace(msPattern$1, "ms-"))
        );
      };
      var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }
        warnedStyleNames[name] = true;
        error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
      };
      var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }
        warnedStyleValues[value] = true;
        error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
      };
      var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) {
          return;
        }
        warnedForNaNValue = true;
        error2("`NaN` is an invalid value for the `%s` css style property.", name);
      };
      var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) {
          return;
        }
        warnedForInfinityValue = true;
        error2("`Infinity` is an invalid value for the `%s` css style property.", name);
      };
      warnValidStyle = function(name, value) {
        if (name.indexOf("-") > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }
        if (typeof value === "number") {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles2) {
      {
        var serialized = "";
        var delimiter2 = "";
        for (var styleName in styles2) {
          if (!styles2.hasOwnProperty(styleName)) {
            continue;
          }
          var styleValue = styles2[styleName];
          if (styleValue != null) {
            var isCustomProperty3 = styleName.indexOf("--") === 0;
            serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
            delimiter2 = ";";
          }
        }
        return serialized || null;
      }
    }
    function setValueForStyles(node2, styles2) {
      var style2 = node2.style;
      for (var styleName in styles2) {
        if (!styles2.hasOwnProperty(styleName)) {
          continue;
        }
        var isCustomProperty3 = styleName.indexOf("--") === 0;
        {
          if (!isCustomProperty3) {
            warnValidStyle$1(styleName, styles2[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty3);
        if (styleName === "float") {
          styleName = "cssFloat";
        }
        if (isCustomProperty3) {
          style2.setProperty(styleName, styleValue);
        } else {
          style2[styleName] = styleValue;
        }
      }
    }
    function isValueEmpty(value) {
      return value == null || typeof value === "boolean" || value === "";
    }
    function expandShorthandMap(styles2) {
      var expanded = {};
      for (var key in styles2) {
        var longhands = shorthandToLonghand[key] || [key];
        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }
      return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      {
        if (!nextStyles) {
          return;
        }
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for (var key in expandedUpdates) {
          var originalKey = expandedUpdates[key];
          var correctOriginalKey = expandedStyles[key];
          if (correctOriginalKey && originalKey !== correctOriginalKey) {
            var warningKey = originalKey + "," + correctOriginalKey;
            if (warnedAbout[warningKey]) {
              continue;
            }
            warnedAbout[warningKey] = true;
            error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
          }
        }
      }
    }
    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    var voidElementTags = assign2({
      menuitem: true
    }, omittedCloseTags);
    var HTML = "__html";
    function assertValidProps(tag, props) {
      if (!props) {
        return;
      }
      if (voidElementTags[tag]) {
        if (props.children != null || props.dangerouslySetInnerHTML != null) {
          throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
      }
      if (props.dangerouslySetInnerHTML != null) {
        if (props.children != null) {
          throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
        if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
          throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
      }
      {
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
          error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        }
      }
      if (props.style != null && typeof props.style !== "object") {
        throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1) {
        return typeof props.is === "string";
      }
      switch (tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var possibleStandardNames = {
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
    };
    var ariaProperties = {
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
    var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
    function validateProperty(tagName, name) {
      {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
          return true;
        }
        if (rARIACamel.test(name)) {
          var ariaName = "aria-" + name.slice(4).toLowerCase();
          var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
          if (correctName == null) {
            error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
            warnedProperties[name] = true;
            return true;
          }
          if (name !== correctName) {
            error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
            warnedProperties[name] = true;
            return true;
          }
        }
        if (rARIA.test(name)) {
          var lowerCasedName = name.toLowerCase();
          var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
          if (standardName == null) {
            warnedProperties[name] = true;
            return false;
          }
          if (name !== standardName) {
            error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties[name] = true;
            return true;
          }
        }
      }
      return true;
    }
    function warnInvalidARIAProps(type, props) {
      {
        var invalidProps = [];
        for (var key in props) {
          var isValid = validateProperty(type, key);
          if (!isValid) {
            invalidProps.push(key);
          }
        }
        var unknownPropString = invalidProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (invalidProps.length === 1) {
          error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        } else if (invalidProps.length > 1) {
          error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        }
      }
    }
    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
      {
        if (type !== "input" && type !== "textarea" && type !== "select") {
          return;
        }
        if (props != null && props.value === null && !didWarnValueNull) {
          didWarnValueNull = true;
          if (type === "select" && props.multiple) {
            error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
          } else {
            error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
          }
        }
      }
    }
    var validateProperty$1 = function() {
    };
    {
      var warnedProperties$1 = {};
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
          error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (eventRegistry != null) {
          var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
          if (registrationNameDependencies2.hasOwnProperty(name)) {
            return true;
          }
          var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
          if (registrationName != null) {
            error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (EVENT_NAME_REGEX.test(name)) {
            error2("Unknown event handler property `%s`. It will be ignored.", name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }
        if (lowerCasedName === "innerhtml") {
          error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "aria") {
          error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
          warnedProperties$1[name] = true;
          return true;
        }
        if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
          error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "number" && isNaN(value)) {
          error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
          warnedProperties$1[name] = true;
          return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];
          if (standardName !== name) {
            error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }
        if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }
          warnedProperties$1[name] = true;
          return true;
        }
        if (isReserved) {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        }
        if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }
        return true;
      };
    }
    var warnUnknownProperties = function(type, props, eventRegistry) {
      {
        var unknownProps = [];
        for (var key in props) {
          var isValid = validateProperty$1(type, key, props[key], eventRegistry);
          if (!isValid) {
            unknownProps.push(key);
          }
        }
        var unknownPropString = unknownProps.map(function(prop) {
          return "`" + prop + "`";
        }).join(", ");
        if (unknownProps.length === 1) {
          error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        } else if (unknownProps.length > 1) {
          error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        }
      }
    };
    function validateProperties$2(type, props, eventRegistry) {
      if (isCustomComponent(type, props)) {
        return;
      }
      warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 1 << 1;
    var IS_CAPTURE_PHASE = 1 << 2;
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
      {
        if (currentReplayingEvent !== null) {
          error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
      {
        if (currentReplayingEvent === null) {
          error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
      return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
      var target = nativeEvent.target || nativeEvent.srcElement || window;
      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      }
      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
      var internalInstance = getInstanceFromNode(target);
      if (!internalInstance) {
        return;
      }
      if (typeof restoreImpl !== "function") {
        throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
      }
      var stateNode = internalInstance.stateNode;
      if (stateNode) {
        var _props = getFiberCurrentPropsFromNode(stateNode);
        restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
      }
    }
    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }
    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }
      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);
      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
      return fn(bookkeeping);
    };
    var flushSyncImpl2 = function() {
    };
    var isInsideEventHandler = false;
    function finishEventHandler() {
      var controlledComponentsHavePendingUpdates = needsStateRestore();
      if (controlledComponentsHavePendingUpdates) {
        flushSyncImpl2();
        restoreStateIfNeeded();
      }
    }
    function batchedUpdates(fn, a, b2) {
      if (isInsideEventHandler) {
        return fn(a, b2);
      }
      isInsideEventHandler = true;
      try {
        return batchedUpdatesImpl(fn, a, b2);
      } finally {
        isInsideEventHandler = false;
        finishEventHandler();
      }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
      batchedUpdatesImpl = _batchedUpdatesImpl;
      flushSyncImpl2 = _flushSyncImpl;
    }
    function isInteractive(tag) {
      return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
    }
    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          return !!(props.disabled && isInteractive(type));
        default:
          return false;
      }
    }
    function getListener(inst, registrationName) {
      var stateNode = inst.stateNode;
      if (stateNode === null) {
        return null;
      }
      var props = getFiberCurrentPropsFromNode(stateNode);
      if (props === null) {
        return null;
      }
      var listener = props[registrationName];
      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }
      if (listener && typeof listener !== "function") {
        throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
      }
      return listener;
    }
    var passiveBrowserEventsSupported = false;
    if (canUseDOM) {
      try {
        var options = {};
        Object.defineProperty(options, "passive", {
          get: function() {
            passiveBrowserEventsSupported = true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (e) {
        passiveBrowserEventsSupported = false;
      }
    }
    function invokeGuardedCallbackProd(name, func, context, a, b2, c, d2, e, f2) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);
      try {
        func.apply(context, funcArgs);
      } catch (error3) {
        this.onError(error3);
      }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    {
      if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
        var fakeNode = document.createElement("react");
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b2, c, d2, e, f2) {
          if (typeof document === "undefined" || document === null) {
            throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
          }
          var evt = document.createEvent("Event");
          var didCall = false;
          var didError = true;
          var windowEvent = window.event;
          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
          function restoreAfterDispatch() {
            fakeNode.removeEventListener(evtType, callCallback2, false);
            if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
              window.event = windowEvent;
            }
          }
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          function callCallback2() {
            didCall = true;
            restoreAfterDispatch();
            func.apply(context, funcArgs);
            didError = false;
          }
          var error3;
          var didSetError = false;
          var isCrossOriginError = false;
          function handleWindowError(event) {
            error3 = event.error;
            didSetError = true;
            if (error3 === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }
            if (event.defaultPrevented) {
              if (error3 != null && typeof error3 === "object") {
                try {
                  error3._suppressLogging = true;
                } catch (inner) {
                }
              }
            }
          }
          var evtType = "react-" + (name ? name : "invokeguardedcallback");
          window.addEventListener("error", handleWindowError);
          fakeNode.addEventListener(evtType, callCallback2, false);
          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);
          if (windowEventDescriptor) {
            Object.defineProperty(window, "event", windowEventDescriptor);
          }
          if (didCall && didError) {
            if (!didSetError) {
              error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
            } else if (isCrossOriginError) {
              error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
            }
            this.onError(error3);
          }
          window.removeEventListener("error", handleWindowError);
          if (!didCall) {
            restoreAfterDispatch();
            return invokeGuardedCallbackProd.apply(this, arguments);
          }
        };
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function(error3) {
        hasError = true;
        caughtError = error3;
      }
    };
    function invokeGuardedCallback(name, func, context, a, b2, c, d2, e, f2) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b2, c, d2, e, f2) {
      invokeGuardedCallback.apply(this, arguments);
      if (hasError) {
        var error3 = clearCaughtError();
        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error3;
        }
      }
    }
    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error3 = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error3;
      }
    }
    function hasCaughtError() {
      return hasError;
    }
    function clearCaughtError() {
      if (hasError) {
        var error3 = caughtError;
        hasError = false;
        caughtError = null;
        return error3;
      } else {
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function get(key) {
      return key._reactInternals;
    }
    function has(key) {
      return key._reactInternals !== void 0;
    }
    function set2(key, value) {
      key._reactInternals = value;
    }
    var NoFlags = (
      /*                      */
      0
    );
    var PerformedWork = (
      /*                */
      1
    );
    var Placement = (
      /*                    */
      2
    );
    var Update = (
      /*                       */
      4
    );
    var ChildDeletion = (
      /*                */
      16
    );
    var ContentReset = (
      /*                 */
      32
    );
    var Callback = (
      /*                     */
      64
    );
    var DidCapture = (
      /*                   */
      128
    );
    var ForceClientRender = (
      /*            */
      256
    );
    var Ref = (
      /*                          */
      512
    );
    var Snapshot = (
      /*                     */
      1024
    );
    var Passive = (
      /*                      */
      2048
    );
    var Hydrating = (
      /*                    */
      4096
    );
    var Visibility = (
      /*                   */
      8192
    );
    var StoreConsistency = (
      /*             */
      16384
    );
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
    var HostEffectMask = (
      /*               */
      32767
    );
    var Incomplete = (
      /*                   */
      32768
    );
    var ShouldCapture = (
      /*                */
      65536
    );
    var ForceUpdateForLegacySuspense = (
      /* */
      131072
    );
    var Forked = (
      /*                       */
      1048576
    );
    var RefStatic = (
      /*                    */
      2097152
    );
    var LayoutStatic = (
      /*                 */
      4194304
    );
    var PassiveStatic = (
      /*                */
      8388608
    );
    var MountLayoutDev = (
      /*               */
      16777216
    );
    var MountPassiveDev = (
      /*              */
      33554432
    );
    var BeforeMutationMask = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      Update | Snapshot | 0
    );
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility;
    var PassiveMask = Passive | ChildDeletion;
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
      var node2 = fiber;
      var nearestMounted = fiber;
      if (!fiber.alternate) {
        var nextNode = node2;
        do {
          node2 = nextNode;
          if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
            nearestMounted = node2.return;
          }
          nextNode = node2.return;
        } while (nextNode);
      } else {
        while (node2.return) {
          node2 = node2.return;
        }
      }
      if (node2.tag === HostRoot) {
        return nearestMounted;
      }
      return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
      if (fiber.tag === SuspenseComponent) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState === null) {
          var current2 = fiber.alternate;
          if (current2 !== null) {
            suspenseState = current2.memoizedState;
          }
        }
        if (suspenseState !== null) {
          return suspenseState.dehydrated;
        }
      }
      return null;
    }
    function getContainerFromFiber(fiber) {
      return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
      return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
      {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance2 = ownerFiber.stateNode;
          if (!instance2._warnedAboutRefsInRender) {
            error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
          }
          instance2._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);
      if (!fiber) {
        return false;
      }
      return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
      if (getNearestMountedFiber(fiber) !== fiber) {
        throw new Error("Unable to find node on an unmounted component.");
      }
    }
    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;
      if (!alternate) {
        var nearestMounted = getNearestMountedFiber(fiber);
        if (nearestMounted === null) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (nearestMounted !== fiber) {
          return null;
        }
        return fiber;
      }
      var a = fiber;
      var b2 = alternate;
      while (true) {
        var parentA = a.return;
        if (parentA === null) {
          break;
        }
        var parentB = parentA.alternate;
        if (parentB === null) {
          var nextParent = parentA.return;
          if (nextParent !== null) {
            a = b2 = nextParent;
            continue;
          }
          break;
        }
        if (parentA.child === parentB.child) {
          var child = parentA.child;
          while (child) {
            if (child === a) {
              assertIsMounted(parentA);
              return fiber;
            }
            if (child === b2) {
              assertIsMounted(parentA);
              return alternate;
            }
            child = child.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.return !== b2.return) {
          a = parentA;
          b2 = parentB;
        } else {
          var didFindChild = false;
          var _child = parentA.child;
          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b2 = parentB;
              break;
            }
            if (_child === b2) {
              didFindChild = true;
              b2 = parentA;
              a = parentB;
              break;
            }
            _child = _child.sibling;
          }
          if (!didFindChild) {
            _child = parentB.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b2 = parentA;
                break;
              }
              if (_child === b2) {
                didFindChild = true;
                b2 = parentB;
                a = parentA;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
            }
          }
        }
        if (a.alternate !== b2) {
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (a.tag !== HostRoot) {
        throw new Error("Unable to find node on an unmounted component.");
      }
      if (a.stateNode.current === a) {
        return fiber;
      }
      return alternate;
    }
    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node2) {
      if (node2.tag === HostComponent || node2.tag === HostText) {
        return node2;
      }
      var child = node2.child;
      while (child !== null) {
        var match2 = findCurrentHostFiberImpl(child);
        if (match2 !== null) {
          return match2;
        }
        child = child.sibling;
      }
      return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);
      return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node2) {
      if (node2.tag === HostComponent || node2.tag === HostText) {
        return node2;
      }
      var child = node2.child;
      while (child !== null) {
        if (child.tag !== HostPortal) {
          var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
          if (match2 !== null) {
            return match2;
          }
        }
        child = child.sibling;
      }
      return null;
    }
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
        return false;
      }
      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (hook.isDisabled) {
        return true;
      }
      if (!hook.supportsFiber) {
        {
          error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
        }
        return true;
      }
      try {
        if (enableSchedulingProfiler) {
          internals = assign2({}, internals, {
            getLaneLabelMap,
            injectProfilingHooks
          });
        }
        rendererID = hook.inject(internals);
        injectedHook = hook;
      } catch (err) {
        {
          error2("React instrumentation encountered an error: %s.", err);
        }
      }
      if (hook.checkDCE) {
        return true;
      } else {
        return false;
      }
    }
    function onScheduleRoot(root3, children) {
      {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
          try {
            injectedHook.onScheduleFiberRoot(rendererID, root3, children);
          } catch (err) {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitRoot(root3, eventPriority) {
      if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
        try {
          var didError = (root3.current.flags & DidCapture) === DidCapture;
          if (enableProfilerTimer) {
            var schedulerPriority;
            switch (eventPriority) {
              case DiscreteEventPriority:
                schedulerPriority = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriority = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriority = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriority = IdlePriority;
                break;
              default:
                schedulerPriority = NormalPriority;
                break;
            }
            injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
          }
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onPostCommitRoot(root3) {
      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
        try {
          injectedHook.onPostCommitFiberRoot(rendererID, root3);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function onCommitUnmount(fiber) {
      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
        try {
          injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
          {
            if (!hasLoggedError) {
              hasLoggedError = true;
              error2("React instrumentation encountered an error: %s", err);
            }
          }
        }
      }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
      {
        if (typeof unstable_yieldValue === "function") {
          unstable_setDisableYieldValue(newIsStrictMode);
          setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === "function") {
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error2("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
    }
    function injectProfilingHooks(profilingHooks) {
      injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
      {
        var map = /* @__PURE__ */ new Map();
        var lane = 1;
        for (var index3 = 0; index3 < TotalLanes; index3++) {
          var label = getLabelForLane(lane);
          map.set(lane, label);
          lane *= 2;
        }
        return map;
      }
    }
    function markCommitStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
          injectedProfilingHooks.markCommitStarted(lanes);
        }
      }
    }
    function markCommitStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
          injectedProfilingHooks.markCommitStopped();
        }
      }
    }
    function markComponentRenderStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
          injectedProfilingHooks.markComponentRenderStarted(fiber);
        }
      }
    }
    function markComponentRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
          injectedProfilingHooks.markComponentRenderStopped();
        }
      }
    }
    function markComponentPassiveEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectMountStopped();
        }
      }
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentPassiveEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
        }
      }
    }
    function markComponentLayoutEffectMountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectMountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectMountStopped();
        }
      }
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
        }
      }
    }
    function markComponentLayoutEffectUnmountStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
          injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
        }
      }
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
          injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
        }
      }
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
          injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
        }
      }
    }
    function markLayoutEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
          injectedProfilingHooks.markLayoutEffectsStarted(lanes);
        }
      }
    }
    function markLayoutEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
          injectedProfilingHooks.markLayoutEffectsStopped();
        }
      }
    }
    function markPassiveEffectsStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
          injectedProfilingHooks.markPassiveEffectsStarted(lanes);
        }
      }
    }
    function markPassiveEffectsStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
          injectedProfilingHooks.markPassiveEffectsStopped();
        }
      }
    }
    function markRenderStarted(lanes) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
          injectedProfilingHooks.markRenderStarted(lanes);
        }
      }
    }
    function markRenderYielded() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
          injectedProfilingHooks.markRenderYielded();
        }
      }
    }
    function markRenderStopped() {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
          injectedProfilingHooks.markRenderStopped();
        }
      }
    }
    function markRenderScheduled(lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
          injectedProfilingHooks.markRenderScheduled(lane);
        }
      }
    }
    function markForceUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
          injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
        }
      }
    }
    function markStateUpdateScheduled(fiber, lane) {
      {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
          injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
        }
      }
    }
    var NoMode = (
      /*                         */
      0
    );
    var ConcurrentMode = (
      /*                 */
      1
    );
    var ProfileMode = (
      /*                    */
      2
    );
    var StrictLegacyMode = (
      /*               */
      8
    );
    var StrictEffectsMode = (
      /*              */
      16
    );
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      var asUint = x >>> 0;
      if (asUint === 0) {
        return 32;
      }
      return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31;
    var NoLanes = (
      /*                        */
      0
    );
    var NoLane = (
      /*                          */
      0
    );
    var SyncLane = (
      /*                        */
      1
    );
    var InputContinuousHydrationLane = (
      /*    */
      2
    );
    var InputContinuousLane = (
      /*             */
      4
    );
    var DefaultHydrationLane = (
      /*            */
      8
    );
    var DefaultLane = (
      /*                     */
      16
    );
    var TransitionHydrationLane = (
      /*                */
      32
    );
    var TransitionLanes = (
      /*                       */
      4194240
    );
    var TransitionLane1 = (
      /*                        */
      64
    );
    var TransitionLane2 = (
      /*                        */
      128
    );
    var TransitionLane3 = (
      /*                        */
      256
    );
    var TransitionLane4 = (
      /*                        */
      512
    );
    var TransitionLane5 = (
      /*                        */
      1024
    );
    var TransitionLane6 = (
      /*                        */
      2048
    );
    var TransitionLane7 = (
      /*                        */
      4096
    );
    var TransitionLane8 = (
      /*                        */
      8192
    );
    var TransitionLane9 = (
      /*                        */
      16384
    );
    var TransitionLane10 = (
      /*                       */
      32768
    );
    var TransitionLane11 = (
      /*                       */
      65536
    );
    var TransitionLane12 = (
      /*                       */
      131072
    );
    var TransitionLane13 = (
      /*                       */
      262144
    );
    var TransitionLane14 = (
      /*                       */
      524288
    );
    var TransitionLane15 = (
      /*                       */
      1048576
    );
    var TransitionLane16 = (
      /*                       */
      2097152
    );
    var RetryLanes = (
      /*                            */
      130023424
    );
    var RetryLane1 = (
      /*                             */
      4194304
    );
    var RetryLane2 = (
      /*                             */
      8388608
    );
    var RetryLane3 = (
      /*                             */
      16777216
    );
    var RetryLane4 = (
      /*                             */
      33554432
    );
    var RetryLane5 = (
      /*                             */
      67108864
    );
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = (
      /*          */
      134217728
    );
    var NonIdleLanes = (
      /*                          */
      268435455
    );
    var IdleHydrationLane = (
      /*               */
      268435456
    );
    var IdleLane = (
      /*                        */
      536870912
    );
    var OffscreenLane = (
      /*                   */
      1073741824
    );
    function getLabelForLane(lane) {
      {
        if (lane & SyncLane) {
          return "Sync";
        }
        if (lane & InputContinuousHydrationLane) {
          return "InputContinuousHydration";
        }
        if (lane & InputContinuousLane) {
          return "InputContinuous";
        }
        if (lane & DefaultHydrationLane) {
          return "DefaultHydration";
        }
        if (lane & DefaultLane) {
          return "Default";
        }
        if (lane & TransitionHydrationLane) {
          return "TransitionHydration";
        }
        if (lane & TransitionLanes) {
          return "Transition";
        }
        if (lane & RetryLanes) {
          return "Retry";
        }
        if (lane & SelectiveHydrationLane) {
          return "SelectiveHydration";
        }
        if (lane & IdleHydrationLane) {
          return "IdleHydration";
        }
        if (lane & IdleLane) {
          return "Idle";
        }
        if (lane & OffscreenLane) {
          return "Offscreen";
        }
      }
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
      switch (getHighestPriorityLane(lanes)) {
        case SyncLane:
          return SyncLane;
        case InputContinuousHydrationLane:
          return InputContinuousHydrationLane;
        case InputContinuousLane:
          return InputContinuousLane;
        case DefaultHydrationLane:
          return DefaultHydrationLane;
        case DefaultLane:
          return DefaultLane;
        case TransitionHydrationLane:
          return TransitionHydrationLane;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return lanes & TransitionLanes;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return lanes & RetryLanes;
        case SelectiveHydrationLane:
          return SelectiveHydrationLane;
        case IdleHydrationLane:
          return IdleHydrationLane;
        case IdleLane:
          return IdleLane;
        case OffscreenLane:
          return OffscreenLane;
        default:
          {
            error2("Should have found matching lanes. This is a bug in React.");
          }
          return lanes;
      }
    }
    function getNextLanes(root3, wipLanes) {
      var pendingLanes = root3.pendingLanes;
      if (pendingLanes === NoLanes) {
        return NoLanes;
      }
      var nextLanes = NoLanes;
      var suspendedLanes = root3.suspendedLanes;
      var pingedLanes = root3.pingedLanes;
      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
      if (nonIdlePendingLanes !== NoLanes) {
        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
        if (nonIdleUnblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        } else {
          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
          if (nonIdlePingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          }
        }
      } else {
        var unblockedLanes = pendingLanes & ~suspendedLanes;
        if (unblockedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(unblockedLanes);
        } else {
          if (pingedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(pingedLanes);
          }
        }
      }
      if (nextLanes === NoLanes) {
        return NoLanes;
      }
      if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (wipLanes & suspendedLanes) === NoLanes) {
        var nextLane = getHighestPriorityLane(nextLanes);
        var wipLane = getHighestPriorityLane(wipLanes);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
        ) {
          return wipLanes;
        }
      }
      if ((nextLanes & InputContinuousLane) !== NoLanes) {
        nextLanes |= pendingLanes & DefaultLane;
      }
      var entangledLanes = root3.entangledLanes;
      if (entangledLanes !== NoLanes) {
        var entanglements = root3.entanglements;
        var lanes = nextLanes & entangledLanes;
        while (lanes > 0) {
          var index3 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index3;
          nextLanes |= entanglements[index3];
          lanes &= ~lane;
        }
      }
      return nextLanes;
    }
    function getMostRecentEventTime(root3, lanes) {
      var eventTimes = root3.eventTimes;
      var mostRecentEventTime = NoTimestamp;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        var eventTime = eventTimes[index3];
        if (eventTime > mostRecentEventTime) {
          mostRecentEventTime = eventTime;
        }
        lanes &= ~lane;
      }
      return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
      switch (lane) {
        case SyncLane:
        case InputContinuousHydrationLane:
        case InputContinuousLane:
          return currentTime + 250;
        case DefaultHydrationLane:
        case DefaultLane:
        case TransitionHydrationLane:
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
          return currentTime + 5e3;
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          return NoTimestamp;
        case SelectiveHydrationLane:
        case IdleHydrationLane:
        case IdleLane:
        case OffscreenLane:
          return NoTimestamp;
        default:
          {
            error2("Should have found matching lanes. This is a bug in React.");
          }
          return NoTimestamp;
      }
    }
    function markStarvedLanesAsExpired(root3, currentTime) {
      var pendingLanes = root3.pendingLanes;
      var suspendedLanes = root3.suspendedLanes;
      var pingedLanes = root3.pingedLanes;
      var expirationTimes = root3.expirationTimes;
      var lanes = pendingLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        var expirationTime = expirationTimes[index3];
        if (expirationTime === NoTimestamp) {
          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
            expirationTimes[index3] = computeExpirationTime(lane, currentTime);
          }
        } else if (expirationTime <= currentTime) {
          root3.expiredLanes |= lane;
        }
        lanes &= ~lane;
      }
    }
    function getHighestPriorityPendingLanes(root3) {
      return getHighestPriorityLanes(root3.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root3) {
      var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
      if (everythingButOffscreen !== NoLanes) {
        return everythingButOffscreen;
      }
      if (everythingButOffscreen & OffscreenLane) {
        return OffscreenLane;
      }
      return NoLanes;
    }
    function includesSyncLane(lanes) {
      return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
      return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
      return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
      return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
      return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root3, lanes) {
      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
      return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root3, lanes) {
      return (lanes & root3.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
      return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
      var lane = nextTransitionLane;
      nextTransitionLane <<= 1;
      if ((nextTransitionLane & TransitionLanes) === NoLanes) {
        nextTransitionLane = TransitionLane1;
      }
      return lane;
    }
    function claimNextRetryLane() {
      var lane = nextRetryLane;
      nextRetryLane <<= 1;
      if ((nextRetryLane & RetryLanes) === NoLanes) {
        nextRetryLane = RetryLane1;
      }
      return lane;
    }
    function getHighestPriorityLane(lanes) {
      return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
      return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
      return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
      return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b2) {
      return (a & b2) !== NoLanes;
    }
    function isSubsetOfLanes(set3, subset) {
      return (set3 & subset) === subset;
    }
    function mergeLanes(a, b2) {
      return a | b2;
    }
    function removeLanes(set3, subset) {
      return set3 & ~subset;
    }
    function intersectLanes(a, b2) {
      return a & b2;
    }
    function laneToLanes(lane) {
      return lane;
    }
    function higherPriorityLane(a, b2) {
      return a !== NoLane && a < b2 ? a : b2;
    }
    function createLaneMap(initial) {
      var laneMap = [];
      for (var i = 0; i < TotalLanes; i++) {
        laneMap.push(initial);
      }
      return laneMap;
    }
    function markRootUpdated(root3, updateLane, eventTime) {
      root3.pendingLanes |= updateLane;
      if (updateLane !== IdleLane) {
        root3.suspendedLanes = NoLanes;
        root3.pingedLanes = NoLanes;
      }
      var eventTimes = root3.eventTimes;
      var index3 = laneToIndex(updateLane);
      eventTimes[index3] = eventTime;
    }
    function markRootSuspended(root3, suspendedLanes) {
      root3.suspendedLanes |= suspendedLanes;
      root3.pingedLanes &= ~suspendedLanes;
      var expirationTimes = root3.expirationTimes;
      var lanes = suspendedLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        expirationTimes[index3] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootPinged(root3, pingedLanes, eventTime) {
      root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root3, remainingLanes) {
      var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
      root3.pendingLanes = remainingLanes;
      root3.suspendedLanes = NoLanes;
      root3.pingedLanes = NoLanes;
      root3.expiredLanes &= remainingLanes;
      root3.mutableReadLanes &= remainingLanes;
      root3.entangledLanes &= remainingLanes;
      var entanglements = root3.entanglements;
      var eventTimes = root3.eventTimes;
      var expirationTimes = root3.expirationTimes;
      var lanes = noLongerPendingLanes;
      while (lanes > 0) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        entanglements[index3] = NoLanes;
        eventTimes[index3] = NoTimestamp;
        expirationTimes[index3] = NoTimestamp;
        lanes &= ~lane;
      }
    }
    function markRootEntangled(root3, entangledLanes) {
      var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
      var entanglements = root3.entanglements;
      var lanes = rootEntangledLanes;
      while (lanes) {
        var index3 = pickArbitraryLaneIndex(lanes);
        var lane = 1 << index3;
        if (
          // Is this one of the newly entangled lanes?
          lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
          entanglements[index3] & entangledLanes
        ) {
          entanglements[index3] |= entangledLanes;
        }
        lanes &= ~lane;
      }
    }
    function getBumpedLaneForHydration(root3, renderLanes2) {
      var renderLane = getHighestPriorityLane(renderLanes2);
      var lane;
      switch (renderLane) {
        case InputContinuousLane:
          lane = InputContinuousHydrationLane;
          break;
        case DefaultLane:
          lane = DefaultHydrationLane;
          break;
        case TransitionLane1:
        case TransitionLane2:
        case TransitionLane3:
        case TransitionLane4:
        case TransitionLane5:
        case TransitionLane6:
        case TransitionLane7:
        case TransitionLane8:
        case TransitionLane9:
        case TransitionLane10:
        case TransitionLane11:
        case TransitionLane12:
        case TransitionLane13:
        case TransitionLane14:
        case TransitionLane15:
        case TransitionLane16:
        case RetryLane1:
        case RetryLane2:
        case RetryLane3:
        case RetryLane4:
        case RetryLane5:
          lane = TransitionHydrationLane;
          break;
        case IdleLane:
          lane = IdleHydrationLane;
          break;
        default:
          lane = NoLane;
          break;
      }
      if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
        return NoLane;
      }
      return lane;
    }
    function addFiberToLanesMap(root3, fiber, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
      while (lanes > 0) {
        var index3 = laneToIndex(lanes);
        var lane = 1 << index3;
        var updaters = pendingUpdatersLaneMap[index3];
        updaters.add(fiber);
        lanes &= ~lane;
      }
    }
    function movePendingFibersToMemoized(root3, lanes) {
      if (!isDevToolsPresent) {
        return;
      }
      var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
      var memoizedUpdaters = root3.memoizedUpdaters;
      while (lanes > 0) {
        var index3 = laneToIndex(lanes);
        var lane = 1 << index3;
        var updaters = pendingUpdatersLaneMap[index3];
        if (updaters.size > 0) {
          updaters.forEach(function(fiber) {
            var alternate = fiber.alternate;
            if (alternate === null || !memoizedUpdaters.has(alternate)) {
              memoizedUpdaters.add(fiber);
            }
          });
          updaters.clear();
        }
        lanes &= ~lane;
      }
    }
    function getTransitionsForLanes(root3, lanes) {
      {
        return null;
      }
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
      return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
      currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
      var previousPriority = currentUpdatePriority;
      try {
        currentUpdatePriority = priority;
        return fn();
      } finally {
        currentUpdatePriority = previousPriority;
      }
    }
    function higherEventPriority(a, b2) {
      return a !== 0 && a < b2 ? a : b2;
    }
    function lowerEventPriority(a, b2) {
      return a === 0 || a > b2 ? a : b2;
    }
    function isHigherEventPriority(a, b2) {
      return a !== 0 && a < b2;
    }
    function lanesToEventPriority(lanes) {
      var lane = getHighestPriorityLane(lanes);
      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
        return DiscreteEventPriority;
      }
      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
        return ContinuousEventPriority;
      }
      if (includesNonIdleWork(lane)) {
        return DefaultEventPriority;
      }
      return IdleEventPriority;
    }
    function isRootDehydrated(root3) {
      var currentState = root3.current.memoizedState;
      return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
      _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
      _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
      attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
      attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
      getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
      attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = false;
    var queuedDiscreteEvents = [];
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = /* @__PURE__ */ new Map();
    var queuedPointerCaptures = /* @__PURE__ */ new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
      return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return {
        blockedOn,
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetContainers: [targetContainer]
      };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
      switch (domEventName) {
        case "focusin":
        case "focusout":
          queuedFocus = null;
          break;
        case "dragenter":
        case "dragleave":
          queuedDrag = null;
          break;
        case "mouseover":
        case "mouseout":
          queuedMouse = null;
          break;
        case "pointerover":
        case "pointerout": {
          var pointerId = nativeEvent.pointerId;
          queuedPointers.delete(pointerId);
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          var _pointerId = nativeEvent.pointerId;
          queuedPointerCaptures.delete(_pointerId);
          break;
        }
      }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn !== null) {
          var _fiber2 = getInstanceFromNode(blockedOn);
          if (_fiber2 !== null) {
            attemptContinuousHydration(_fiber2);
          }
        }
        return queuedEvent;
      }
      existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
      var targetContainers = existingQueuedEvent.targetContainers;
      if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
        targetContainers.push(targetContainer);
      }
      return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      switch (domEventName) {
        case "focusin": {
          var focusEvent = nativeEvent;
          queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
          return true;
        }
        case "dragenter": {
          var dragEvent = nativeEvent;
          queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
          return true;
        }
        case "mouseover": {
          var mouseEvent = nativeEvent;
          queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
          return true;
        }
        case "pointerover": {
          var pointerEvent = nativeEvent;
          var pointerId = pointerEvent.pointerId;
          queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
          return true;
        }
        case "gotpointercapture": {
          var _pointerEvent = nativeEvent;
          var _pointerId2 = _pointerEvent.pointerId;
          queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
          return true;
        }
      }
      return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
      var targetInst = getClosestInstanceFromNode(queuedTarget.target);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted !== null) {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance2 !== null) {
              queuedTarget.blockedOn = instance2;
              attemptHydrationAtPriority(queuedTarget.priority, function() {
                attemptHydrationAtCurrentPriority(nearestMounted);
              });
              return;
            }
          } else if (tag === HostRoot) {
            var root3 = nearestMounted.stateNode;
            if (isRootDehydrated(root3)) {
              queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
              return;
            }
          }
        }
      }
      queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
      var updatePriority = getCurrentUpdatePriority$1();
      var queuedTarget = {
        blockedOn: null,
        target,
        priority: updatePriority
      };
      var i = 0;
      for (; i < queuedExplicitHydrationTargets.length; i++) {
        if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
          break;
        }
      }
      queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
      if (i === 0) {
        attemptExplicitHydrationTarget(queuedTarget);
      }
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
      if (queuedEvent.blockedOn !== null) {
        return false;
      }
      var targetContainers = queuedEvent.targetContainers;
      while (targetContainers.length > 0) {
        var targetContainer = targetContainers[0];
        var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
        if (nextBlockedOn === null) {
          {
            var nativeEvent = queuedEvent.nativeEvent;
            var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
            setReplayingEvent(nativeEventClone);
            nativeEvent.target.dispatchEvent(nativeEventClone);
            resetReplayingEvent();
          }
        } else {
          var _fiber3 = getInstanceFromNode(nextBlockedOn);
          if (_fiber3 !== null) {
            attemptContinuousHydration(_fiber3);
          }
          queuedEvent.blockedOn = nextBlockedOn;
          return false;
        }
        targetContainers.shift();
      }
      return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
      if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
        map.delete(key);
      }
    }
    function replayUnblockedEvents() {
      hasScheduledReplayAttempt = false;
      if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
        queuedFocus = null;
      }
      if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
        queuedDrag = null;
      }
      if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
        queuedMouse = null;
      }
      queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
      queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
        if (!hasScheduledReplayAttempt) {
          hasScheduledReplayAttempt = true;
          Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
        }
      }
    }
    function retryIfBlockedOn(unblocked) {
      if (queuedDiscreteEvents.length > 0) {
        scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
        for (var i = 1; i < queuedDiscreteEvents.length; i++) {
          var queuedEvent = queuedDiscreteEvents[i];
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
          }
        }
      }
      if (queuedFocus !== null) {
        scheduleCallbackIfUnblocked(queuedFocus, unblocked);
      }
      if (queuedDrag !== null) {
        scheduleCallbackIfUnblocked(queuedDrag, unblocked);
      }
      if (queuedMouse !== null) {
        scheduleCallbackIfUnblocked(queuedMouse, unblocked);
      }
      var unblock = function(queuedEvent2) {
        return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
      };
      queuedPointers.forEach(unblock);
      queuedPointerCaptures.forEach(unblock);
      for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
        var queuedTarget = queuedExplicitHydrationTargets[_i2];
        if (queuedTarget.blockedOn === unblocked) {
          queuedTarget.blockedOn = null;
        }
      }
      while (queuedExplicitHydrationTargets.length > 0) {
        var nextExplicitTarget = queuedExplicitHydrationTargets[0];
        if (nextExplicitTarget.blockedOn !== null) {
          break;
        } else {
          attemptExplicitHydrationTarget(nextExplicitTarget);
          if (nextExplicitTarget.blockedOn === null) {
            queuedExplicitHydrationTargets.shift();
          }
        }
      }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var _enabled = true;
    function setEnabled(enabled) {
      _enabled = !!enabled;
    }
    function isEnabled() {
      return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
      var eventPriority = getEventPriority(domEventName);
      var listenerWrapper;
      switch (eventPriority) {
        case DiscreteEventPriority:
          listenerWrapper = dispatchDiscreteEvent;
          break;
        case ContinuousEventPriority:
          listenerWrapper = dispatchContinuousEvent;
          break;
        case DefaultEventPriority:
        default:
          listenerWrapper = dispatchEvent2;
          break;
      }
      return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(DiscreteEventPriority);
        dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = null;
      try {
        setCurrentUpdatePriority(ContinuousEventPriority);
        dispatchEvent2(domEventName, eventSystemFlags, container, nativeEvent);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig.transition = prevTransition;
      }
    }
    function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      if (!_enabled) {
        return;
      }
      {
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      }
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
      if (blockedOn === null) {
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
        clearIfContinuousEvent(domEventName, nativeEvent);
        return;
      }
      if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
        nativeEvent.stopPropagation();
        return;
      }
      clearIfContinuousEvent(domEventName, nativeEvent);
      if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
        while (blockedOn !== null) {
          var fiber = getInstanceFromNode(blockedOn);
          if (fiber !== null) {
            attemptSynchronousHydration(fiber);
          }
          var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (nextBlockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          }
          if (nextBlockedOn === blockedOn) {
            break;
          }
          blockedOn = nextBlockedOn;
        }
        if (blockedOn !== null) {
          nativeEvent.stopPropagation();
        }
        return;
      }
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
      return_targetInst = null;
      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (targetInst !== null) {
        var nearestMounted = getNearestMountedFiber(targetInst);
        if (nearestMounted === null) {
          targetInst = null;
        } else {
          var tag = nearestMounted.tag;
          if (tag === SuspenseComponent) {
            var instance2 = getSuspenseInstanceFromFiber(nearestMounted);
            if (instance2 !== null) {
              return instance2;
            }
            targetInst = null;
          } else if (tag === HostRoot) {
            var root3 = nearestMounted.stateNode;
            if (isRootDehydrated(root3)) {
              return getContainerFromFiber(nearestMounted);
            }
            targetInst = null;
          } else if (nearestMounted !== targetInst) {
            targetInst = null;
          }
        }
      }
      return_targetInst = targetInst;
      return null;
    }
    function getEventPriority(domEventName) {
      switch (domEventName) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return DiscreteEventPriority;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return ContinuousEventPriority;
        case "message": {
          var schedulerPriority = getCurrentPriorityLevel();
          switch (schedulerPriority) {
            case ImmediatePriority:
              return DiscreteEventPriority;
            case UserBlockingPriority:
              return ContinuousEventPriority;
            case NormalPriority:
            case LowPriority:
              return DefaultEventPriority;
            case IdlePriority:
              return IdleEventPriority;
            default:
              return DefaultEventPriority;
          }
        }
        default:
          return DefaultEventPriority;
      }
    }
    function addEventBubbleListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, false);
      return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
      target.addEventListener(eventType, listener, true);
      return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        capture: true,
        passive
      });
      return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
      target.addEventListener(eventType, listener, {
        passive
      });
      return listener;
    }
    var root2 = null;
    var startText = null;
    var fallbackText = null;
    function initialize2(nativeEventTarget) {
      root2 = nativeEventTarget;
      startText = getText();
      return true;
    }
    function reset() {
      root2 = null;
      startText = null;
      fallbackText = null;
    }
    function getData() {
      if (fallbackText) {
        return fallbackText;
      }
      var start;
      var startValue = startText;
      var startLength = startValue.length;
      var end;
      var endValue = getText();
      var endLength = endValue.length;
      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }
      var minEnd = startLength - start;
      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }
      var sliceTail = end > 1 ? 1 - end : void 0;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }
    function getText() {
      if ("value" in root2) {
        return root2.value;
      }
      return root2.textContent;
    }
    function getEventCharCode(nativeEvent) {
      var charCode;
      var keyCode = nativeEvent.keyCode;
      if ("charCode" in nativeEvent) {
        charCode = nativeEvent.charCode;
        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        charCode = keyCode;
      }
      if (charCode === 10) {
        charCode = 13;
      }
      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }
      return 0;
    }
    function functionThatReturnsTrue() {
      return true;
    }
    function functionThatReturnsFalse() {
      return false;
    }
    function createSyntheticEvent(Interface) {
      function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
        this._reactName = reactName;
        this._targetInst = targetInst;
        this.type = reactEventType;
        this.nativeEvent = nativeEvent;
        this.target = nativeEventTarget;
        this.currentTarget = null;
        for (var _propName in Interface) {
          if (!Interface.hasOwnProperty(_propName)) {
            continue;
          }
          var normalize = Interface[_propName];
          if (normalize) {
            this[_propName] = normalize(nativeEvent);
          } else {
            this[_propName] = nativeEvent[_propName];
          }
        }
        var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
        if (defaultPrevented) {
          this.isDefaultPrevented = functionThatReturnsTrue;
        } else {
          this.isDefaultPrevented = functionThatReturnsFalse;
        }
        this.isPropagationStopped = functionThatReturnsFalse;
        return this;
      }
      assign2(SyntheticBaseEvent.prototype, {
        preventDefault: function() {
          this.defaultPrevented = true;
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.preventDefault) {
            event.preventDefault();
          } else if (typeof event.returnValue !== "unknown") {
            event.returnValue = false;
          }
          this.isDefaultPrevented = functionThatReturnsTrue;
        },
        stopPropagation: function() {
          var event = this.nativeEvent;
          if (!event) {
            return;
          }
          if (event.stopPropagation) {
            event.stopPropagation();
          } else if (typeof event.cancelBubble !== "unknown") {
            event.cancelBubble = true;
          }
          this.isPropagationStopped = functionThatReturnsTrue;
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
        isPersistent: functionThatReturnsTrue
      });
      return SyntheticBaseEvent;
    }
    var EventInterface = {
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign2({}, EventInterface, {
      view: 0,
      detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
      if (event !== lastMouseEvent) {
        if (lastMouseEvent && event.type === "mousemove") {
          lastMovementX = event.screenX - lastMouseEvent.screenX;
          lastMovementY = event.screenY - lastMouseEvent.screenY;
        } else {
          lastMovementX = 0;
          lastMovementY = 0;
        }
        lastMouseEvent = event;
      }
    }
    var MouseEventInterface = assign2({}, UIEventInterface, {
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      getModifierState: getEventModifierState,
      button: 0,
      buttons: 0,
      relatedTarget: function(event) {
        if (event.relatedTarget === void 0)
          return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
        return event.relatedTarget;
      },
      movementX: function(event) {
        if ("movementX" in event) {
          return event.movementX;
        }
        updateMouseMovementPolyfillState(event);
        return lastMovementX;
      },
      movementY: function(event) {
        if ("movementY" in event) {
          return event.movementY;
        }
        return lastMovementY;
      }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign2({}, MouseEventInterface, {
      dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign2({}, UIEventInterface, {
      relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign2({}, EventInterface, {
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign2({}, EventInterface, {
      clipboardData: function(event) {
        return "clipboardData" in event ? event.clipboardData : window.clipboardData;
      }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign2({}, EventInterface, {
      data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var SyntheticInputEvent = SyntheticCompositionEvent;
    var normalizeKey = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var translateToKey = {
      "8": "Backspace",
      "9": "Tab",
      "12": "Clear",
      "13": "Enter",
      "16": "Shift",
      "17": "Control",
      "18": "Alt",
      "19": "Pause",
      "20": "CapsLock",
      "27": "Escape",
      "32": " ",
      "33": "PageUp",
      "34": "PageDown",
      "35": "End",
      "36": "Home",
      "37": "ArrowLeft",
      "38": "ArrowUp",
      "39": "ArrowRight",
      "40": "ArrowDown",
      "45": "Insert",
      "46": "Delete",
      "112": "F1",
      "113": "F2",
      "114": "F3",
      "115": "F4",
      "116": "F5",
      "117": "F6",
      "118": "F7",
      "119": "F8",
      "120": "F9",
      "121": "F10",
      "122": "F11",
      "123": "F12",
      "144": "NumLock",
      "145": "ScrollLock",
      "224": "Meta"
    };
    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified") {
          return key;
        }
      }
      if (nativeEvent.type === "keypress") {
        var charCode = getEventCharCode(nativeEvent);
        return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
      }
      if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
        return translateToKey[nativeEvent.keyCode] || "Unidentified";
      }
      return "";
    }
    var modifierKeyToProp = {
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;
      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }
      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }
    var KeyboardEventInterface = assign2({}, UIEventInterface, {
      key: getEventKey,
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        return 0;
      },
      keyCode: function(event) {
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      },
      which: function(event) {
        if (event.type === "keypress") {
          return getEventCharCode(event);
        }
        if (event.type === "keydown" || event.type === "keyup") {
          return event.keyCode;
        }
        return 0;
      }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign2({}, MouseEventInterface, {
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign2({}, UIEventInterface, {
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign2({}, EventInterface, {
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign2({}, MouseEventInterface, {
      deltaX: function(event) {
        return "deltaX" in event ? event.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in event ? -event.wheelDeltaX : 0
        );
      },
      deltaY: function(event) {
        return "deltaY" in event ? event.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in event ? -event.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in event ? -event.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [9, 13, 27, 32];
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
    var documentMode = null;
    if (canUseDOM && "documentMode" in document) {
      documentMode = document.documentMode;
    }
    var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
      registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
    var hasSpaceKeypress = false;
    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
      switch (domEventName) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
      return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
      switch (domEventName) {
        case "keyup":
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
        case "keydown":
          return nativeEvent.keyCode !== START_KEYCODE;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;
      if (typeof detail === "object" && "data" in detail) {
        return detail.data;
      }
      return null;
    }
    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === "ko";
    }
    var isComposing = false;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var eventType;
      var fallbackData;
      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(domEventName);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(domEventName, nativeEvent)) {
          eventType = "onCompositionStart";
        }
      } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
        eventType = "onCompositionEnd";
      }
      if (!eventType) {
        return null;
      }
      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        if (!isComposing && eventType === "onCompositionStart") {
          isComposing = initialize2(nativeEventTarget);
        } else if (eventType === "onCompositionEnd") {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
      if (listeners.length > 0) {
        var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        if (fallbackData) {
          event.data = fallbackData;
        } else {
          var customData = getDataFromCustomEvent(nativeEvent);
          if (customData !== null) {
            event.data = customData;
          }
        }
      }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
      switch (domEventName) {
        case "compositionend":
          return getDataFromCustomEvent(nativeEvent);
        case "keypress":
          var which = nativeEvent.which;
          if (which !== SPACEBAR_CODE) {
            return null;
          }
          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;
        case "textInput":
          var chars = nativeEvent.data;
          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }
          return chars;
        default:
          return null;
      }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
      if (isComposing) {
        if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }
        return null;
      }
      switch (domEventName) {
        case "paste":
          return null;
        case "keypress":
          if (!isKeypressCommand(nativeEvent)) {
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }
          return null;
        case "compositionend":
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
        default:
          return null;
      }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
      var chars;
      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(domEventName, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
      }
      if (!chars) {
        return null;
      }
      var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
      if (listeners.length > 0) {
        var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
        dispatchQueue.push({
          event,
          listeners
        });
        event.data = chars;
      }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      "datetime-local": true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };
    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      if (nodeName === "input") {
        return !!supportedInputTypes[elem.type];
      }
      if (nodeName === "textarea") {
        return true;
      }
      return false;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }
      var eventName = "on" + eventNameSuffix;
      var isSupported = eventName in document;
      if (!isSupported) {
        var element = document.createElement("div");
        element.setAttribute(eventName, "return;");
        isSupported = typeof element[eventName] === "function";
      }
      return isSupported;
    }
    function registerEvents$1() {
      registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
      enqueueStateRestore(target);
      var listeners = accumulateTwoPhaseListeners(inst, "onChange");
      if (listeners.length > 0) {
        var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    var activeElement2 = null;
    var activeElementInst = null;
    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === "select" || nodeName === "input" && elem.type === "file";
    }
    function manualDispatchChangeEvent(nativeEvent) {
      var dispatchQueue = [];
      createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
      batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
      processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance(targetInst);
      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
      if (domEventName === "change") {
        return targetInst;
      }
    }
    var isInputEventSupported = false;
    if (canUseDOM) {
      isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
    }
    function startWatchingForValueChange(target, targetInst) {
      activeElement2 = target;
      activeElementInst = targetInst;
      activeElement2.attachEvent("onpropertychange", handlePropertyChange);
    }
    function stopWatchingForValueChange() {
      if (!activeElement2) {
        return;
      }
      activeElement2.detachEvent("onpropertychange", handlePropertyChange);
      activeElement2 = null;
      activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== "value") {
        return;
      }
      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
      if (domEventName === "focusin") {
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (domEventName === "focusout") {
        stopWatchingForValueChange();
      }
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
      if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
        return getInstIfValueChanged(activeElementInst);
      }
    }
    function shouldUseClickEvent(elem) {
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
      if (domEventName === "click") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
      if (domEventName === "input" || domEventName === "change") {
        return getInstIfValueChanged(targetInst);
      }
    }
    function handleControlledInputBlur(node2) {
      var state = node2._wrapperState;
      if (!state || !state.controlled || node2.type !== "number") {
        return;
      }
      {
        setDefaultValue(node2, "number", node2.value);
      }
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      var getTargetInstFunc, handleEventFunc;
      if (shouldUseChangeEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else if (isTextInputElement(targetNode)) {
        if (isInputEventSupported) {
          getTargetInstFunc = getTargetInstForInputOrChangeEvent;
        } else {
          getTargetInstFunc = getTargetInstForInputEventPolyfill;
          handleEventFunc = handleEventsForInputEventPolyfill;
        }
      } else if (shouldUseClickEvent(targetNode)) {
        getTargetInstFunc = getTargetInstForClickEvent;
      }
      if (getTargetInstFunc) {
        var inst = getTargetInstFunc(domEventName, targetInst);
        if (inst) {
          createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
          return;
        }
      }
      if (handleEventFunc) {
        handleEventFunc(domEventName, targetNode, targetInst);
      }
      if (domEventName === "focusout") {
        handleControlledInputBlur(targetNode);
      }
    }
    function registerEvents$2() {
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
      var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
      if (isOverEvent && !isReplayingEvent(nativeEvent)) {
        var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
        if (related) {
          if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
            return;
          }
        }
      }
      if (!isOutEvent && !isOverEvent) {
        return;
      }
      var win;
      if (nativeEventTarget.window === nativeEventTarget) {
        win = nativeEventTarget;
      } else {
        var doc = nativeEventTarget.ownerDocument;
        if (doc) {
          win = doc.defaultView || doc.parentWindow;
        } else {
          win = window;
        }
      }
      var from2;
      var to;
      if (isOutEvent) {
        var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
        from2 = targetInst;
        to = _related ? getClosestInstanceFromNode(_related) : null;
        if (to !== null) {
          var nearestMounted = getNearestMountedFiber(to);
          if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
            to = null;
          }
        }
      } else {
        from2 = null;
        to = targetInst;
      }
      if (from2 === to) {
        return;
      }
      var SyntheticEventCtor = SyntheticMouseEvent;
      var leaveEventType = "onMouseLeave";
      var enterEventType = "onMouseEnter";
      var eventTypePrefix = "mouse";
      if (domEventName === "pointerout" || domEventName === "pointerover") {
        SyntheticEventCtor = SyntheticPointerEvent;
        leaveEventType = "onPointerLeave";
        enterEventType = "onPointerEnter";
        eventTypePrefix = "pointer";
      }
      var fromNode = from2 == null ? win : getNodeFromInstance(from2);
      var toNode = to == null ? win : getNodeFromInstance(to);
      var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
      leave.target = fromNode;
      leave.relatedTarget = toNode;
      var enter = null;
      var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
      if (nativeTargetInst === targetInst) {
        var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
        enterEvent.target = toNode;
        enterEvent.relatedTarget = fromNode;
        enter = enterEvent;
      }
      accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
    }
    function is2(x, y2) {
      return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
    }
    var objectIs = typeof Object.is === "function" ? Object.is : is2;
    function shallowEqual(objA, objB) {
      if (objectIs(objA, objB)) {
        return true;
      }
      if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
        return false;
      }
      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);
      if (keysA.length !== keysB.length) {
        return false;
      }
      for (var i = 0; i < keysA.length; i++) {
        var currentKey = keysA[i];
        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
          return false;
        }
      }
      return true;
    }
    function getLeafNode(node2) {
      while (node2 && node2.firstChild) {
        node2 = node2.firstChild;
      }
      return node2;
    }
    function getSiblingNode(node2) {
      while (node2) {
        if (node2.nextSibling) {
          return node2.nextSibling;
        }
        node2 = node2.parentNode;
      }
    }
    function getNodeForCharacterOffset(root3, offset2) {
      var node2 = getLeafNode(root3);
      var nodeStart = 0;
      var nodeEnd = 0;
      while (node2) {
        if (node2.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node2.textContent.length;
          if (nodeStart <= offset2 && nodeEnd >= offset2) {
            return {
              node: node2,
              offset: offset2 - nodeStart
            };
          }
          nodeStart = nodeEnd;
        }
        node2 = getLeafNode(getSiblingNode(node2));
      }
    }
    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();
      if (!selection || selection.rangeCount === 0) {
        return null;
      }
      var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
      try {
        anchorNode.nodeType;
        focusNode.nodeType;
      } catch (e) {
        return null;
      }
      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length2 = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node2 = outerNode;
      var parentNode = null;
      outer:
        while (true) {
          var next2 = null;
          while (true) {
            if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
              start = length2 + anchorOffset;
            }
            if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
              end = length2 + focusOffset;
            }
            if (node2.nodeType === TEXT_NODE) {
              length2 += node2.nodeValue.length;
            }
            if ((next2 = node2.firstChild) === null) {
              break;
            }
            parentNode = node2;
            node2 = next2;
          }
          while (true) {
            if (node2 === outerNode) {
              break outer;
            }
            if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
              start = length2;
            }
            if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
              end = length2;
            }
            if ((next2 = node2.nextSibling) !== null) {
              break;
            }
            node2 = parentNode;
            parentNode = node2.parentNode;
          }
          node2 = next2;
        }
      if (start === -1 || end === -1) {
        return null;
      }
      return {
        start,
        end
      };
    }
    function setOffsets(node2, offsets) {
      var doc = node2.ownerDocument || document;
      var win = doc && doc.defaultView || window;
      if (!win.getSelection) {
        return;
      }
      var selection = win.getSelection();
      var length2 = node2.textContent.length;
      var start = Math.min(offsets.start, length2);
      var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }
      var startMarker = getNodeForCharacterOffset(node2, start);
      var endMarker = getNodeForCharacterOffset(node2, end);
      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }
        var range2 = doc.createRange();
        range2.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();
        if (start > end) {
          selection.addRange(range2);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range2.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range2);
        }
      }
    }
    function isTextNode(node2) {
      return node2 && node2.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ("contains" in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }
    function isInDocument(node2) {
      return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
    }
    function isSameOriginFrame(iframe) {
      try {
        return typeof iframe.contentWindow.location.href === "string";
      } catch (err) {
        return false;
      }
    }
    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();
      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }
        element = getActiveElement(win.document);
      }
      return element;
    }
    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
    }
    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
      };
    }
    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;
      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        }
        var ancestors = [];
        var ancestor = priorFocusedElem;
        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }
        if (typeof priorFocusedElem.focus === "function") {
          priorFocusedElem.focus();
        }
        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    function getSelection(input) {
      var selection;
      if ("selectionStart" in input) {
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        selection = getOffsets(input);
      }
      return selection || {
        start: 0,
        end: 0
      };
    }
    function setSelection(input, offsets) {
      var start = offsets.start;
      var end = offsets.end;
      if (end === void 0) {
        end = start;
      }
      if ("selectionStart" in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }
    var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
    function registerEvents$3() {
      registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    function getSelection$1(node2) {
      if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
        return {
          start: node2.selectionStart,
          end: node2.selectionEnd
        };
      } else {
        var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
      var doc = getEventTargetDocument(nativeEventTarget);
      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return;
      }
      var currentSelection = getSelection$1(activeElement$1);
      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.target = activeElement$1;
        }
      }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
            activeElement$1 = targetNode;
            activeElementInst$1 = targetInst;
            lastSelection = null;
          }
          break;
        case "focusout":
          activeElement$1 = null;
          activeElementInst$1 = null;
          lastSelection = null;
          break;
        case "mousedown":
          mouseDown = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent) {
            break;
          }
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
    }
    function makePrefixMap(styleProp, eventName) {
      var prefixes2 = {};
      prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes2["Webkit" + styleProp] = "webkit" + eventName;
      prefixes2["Moz" + styleProp] = "moz" + eventName;
      return prefixes2;
    }
    var vendorPrefixes = {
      animationend: makePrefixMap("Animation", "AnimationEnd"),
      animationiteration: makePrefixMap("Animation", "AnimationIteration"),
      animationstart: makePrefixMap("Animation", "AnimationStart"),
      transitionend: makePrefixMap("Transition", "TransitionEnd")
    };
    var prefixedEventNames = {};
    var style = {};
    if (canUseDOM) {
      style = document.createElement("div").style;
      if (!("AnimationEvent" in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      }
      if (!("TransitionEvent" in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }
      var prefixMap = vendorPrefixes[eventName];
      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }
      return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName("animationend");
    var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
    var ANIMATION_START = getVendorPrefixedEventName("animationstart");
    var TRANSITION_END = getVendorPrefixedEventName("transitionend");
    var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
    var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
    function registerSimpleEvent(domEventName, reactName) {
      topLevelEventsToReactNames.set(domEventName, reactName);
      registerTwoPhaseEvent(reactName, [domEventName]);
    }
    function registerSimpleEvents() {
      for (var i = 0; i < simpleEventPluginEvents.length; i++) {
        var eventName = simpleEventPluginEvents[i];
        var domEventName = eventName.toLowerCase();
        var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
        registerSimpleEvent(domEventName, "on" + capitalizedEvent);
      }
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName === void 0) {
        return;
      }
      var SyntheticEventCtor = SyntheticEvent;
      var reactEventType = domEventName;
      switch (domEventName) {
        case "keypress":
          if (getEventCharCode(nativeEvent) === 0) {
            return;
          }
        case "keydown":
        case "keyup":
          SyntheticEventCtor = SyntheticKeyboardEvent;
          break;
        case "focusin":
          reactEventType = "focus";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "focusout":
          reactEventType = "blur";
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "beforeblur":
        case "afterblur":
          SyntheticEventCtor = SyntheticFocusEvent;
          break;
        case "click":
          if (nativeEvent.button === 2) {
            return;
          }
        case "auxclick":
        case "dblclick":
        case "mousedown":
        case "mousemove":
        case "mouseup":
        case "mouseout":
        case "mouseover":
        case "contextmenu":
          SyntheticEventCtor = SyntheticMouseEvent;
          break;
        case "drag":
        case "dragend":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "dragstart":
        case "drop":
          SyntheticEventCtor = SyntheticDragEvent;
          break;
        case "touchcancel":
        case "touchend":
        case "touchmove":
        case "touchstart":
          SyntheticEventCtor = SyntheticTouchEvent;
          break;
        case ANIMATION_END:
        case ANIMATION_ITERATION:
        case ANIMATION_START:
          SyntheticEventCtor = SyntheticAnimationEvent;
          break;
        case TRANSITION_END:
          SyntheticEventCtor = SyntheticTransitionEvent;
          break;
        case "scroll":
          SyntheticEventCtor = SyntheticUIEvent;
          break;
        case "wheel":
          SyntheticEventCtor = SyntheticWheelEvent;
          break;
        case "copy":
        case "cut":
        case "paste":
          SyntheticEventCtor = SyntheticClipboardEvent;
          break;
        case "gotpointercapture":
        case "lostpointercapture":
        case "pointercancel":
        case "pointerdown":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "pointerup":
          SyntheticEventCtor = SyntheticPointerEvent;
          break;
      }
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      {
        var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
        // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === "scroll";
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
          var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event: _event,
            listeners: _listeners
          });
        }
      }
    }
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
      extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
      if (shouldProcessPolyfillPlugins) {
        extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
    }
    var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
    var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
      var type = event.type || "unknown-event";
      event.currentTarget = currentTarget;
      invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
      event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
      var previousInstance;
      if (inCapturePhase) {
        for (var i = dispatchListeners.length - 1; i >= 0; i--) {
          var _dispatchListeners$i = dispatchListeners[i], instance2 = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
          if (instance2 !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, listener, currentTarget);
          previousInstance = instance2;
        }
      } else {
        for (var _i2 = 0; _i2 < dispatchListeners.length; _i2++) {
          var _dispatchListeners$_i = dispatchListeners[_i2], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
          if (_instance !== previousInstance && event.isPropagationStopped()) {
            return;
          }
          executeDispatch(event, _listener, _currentTarget);
          previousInstance = _instance;
        }
      }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
      var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
      for (var i = 0; i < dispatchQueue.length; i++) {
        var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
        processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
      }
      rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var nativeEventTarget = getEventTarget(nativeEvent);
      var dispatchQueue = [];
      extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
      processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
      {
        if (!nonDelegatedEvents.has(domEventName)) {
          error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var isCapturePhaseListener = false;
      var listenerSet = getEventListenerSet(targetElement);
      var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
      if (!listenerSet.has(listenerSetKey)) {
        addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
        listenerSet.add(listenerSetKey);
      }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
      {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
          error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        }
      }
      var eventSystemFlags = 0;
      if (isCapturePhaseListener) {
        eventSystemFlags |= IS_CAPTURE_PHASE;
      }
      addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
      if (!rootContainerElement[listeningMarker]) {
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
          if (domEventName !== "selectionchange") {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(domEventName, false, rootContainerElement);
            }
            listenToNativeEvent(domEventName, true, rootContainerElement);
          }
        });
        var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        if (ownerDocument !== null) {
          if (!ownerDocument[listeningMarker]) {
            ownerDocument[listeningMarker] = true;
            listenToNativeEvent("selectionchange", false, ownerDocument);
          }
        }
      }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
      var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
      var isPassiveListener = void 0;
      if (passiveBrowserEventsSupported) {
        if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
          isPassiveListener = true;
        }
      }
      targetContainer = targetContainer;
      if (isCapturePhaseListener) {
        if (isPassiveListener !== void 0) {
          addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventCaptureListener(targetContainer, domEventName, listener);
        }
      } else {
        if (isPassiveListener !== void 0) {
          addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        } else {
          addEventBubbleListener(targetContainer, domEventName, listener);
        }
      }
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
      return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
      var ancestorInst = targetInst;
      if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
        var targetContainerNode = targetContainer;
        if (targetInst !== null) {
          var node2 = targetInst;
          mainLoop:
            while (true) {
              if (node2 === null) {
                return;
              }
              var nodeTag = node2.tag;
              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node2.stateNode.containerInfo;
                if (isMatchingRootContainer(container, targetContainerNode)) {
                  break;
                }
                if (nodeTag === HostPortal) {
                  var grandNode = node2.return;
                  while (grandNode !== null) {
                    var grandTag = grandNode.tag;
                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo;
                      if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                        return;
                      }
                    }
                    grandNode = grandNode.return;
                  }
                }
                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container);
                  if (parentNode === null) {
                    return;
                  }
                  var parentTag = parentNode.tag;
                  if (parentTag === HostComponent || parentTag === HostText) {
                    node2 = ancestorInst = parentNode;
                    continue mainLoop;
                  }
                  container = container.parentNode;
                }
              }
              node2 = node2.return;
            }
        }
      }
      batchedUpdates(function() {
        return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
      });
    }
    function createDispatchListener(instance2, listener, currentTarget) {
      return {
        instance: instance2,
        listener,
        currentTarget
      };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
      var captureName = reactName !== null ? reactName + "Capture" : null;
      var reactEventName = inCapturePhase ? captureName : reactName;
      var listeners = [];
      var instance2 = targetFiber;
      var lastHostComponent = null;
      while (instance2 !== null) {
        var _instance2 = instance2, stateNode = _instance2.stateNode, tag = _instance2.tag;
        if (tag === HostComponent && stateNode !== null) {
          lastHostComponent = stateNode;
          if (reactEventName !== null) {
            var listener = getListener(instance2, reactEventName);
            if (listener != null) {
              listeners.push(createDispatchListener(instance2, listener, lastHostComponent));
            }
          }
        }
        if (accumulateTargetOnly) {
          break;
        }
        instance2 = instance2.return;
      }
      return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
      var captureName = reactName + "Capture";
      var listeners = [];
      var instance2 = targetFiber;
      while (instance2 !== null) {
        var _instance3 = instance2, stateNode = _instance3.stateNode, tag = _instance3.tag;
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          var captureListener = getListener(instance2, captureName);
          if (captureListener != null) {
            listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
          }
          var bubbleListener = getListener(instance2, reactName);
          if (bubbleListener != null) {
            listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
          }
        }
        instance2 = instance2.return;
      }
      return listeners;
    }
    function getParent(inst) {
      if (inst === null) {
        return null;
      }
      do {
        inst = inst.return;
      } while (inst && inst.tag !== HostComponent);
      if (inst) {
        return inst;
      }
      return null;
    }
    function getLowestCommonAncestor(instA, instB) {
      var nodeA = instA;
      var nodeB = instB;
      var depthA = 0;
      for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }
      var depthB = 0;
      for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
        depthB++;
      }
      while (depthA - depthB > 0) {
        nodeA = getParent(nodeA);
        depthA--;
      }
      while (depthB - depthA > 0) {
        nodeB = getParent(nodeB);
        depthB--;
      }
      var depth = depthA;
      while (depth--) {
        if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
          return nodeA;
        }
        nodeA = getParent(nodeA);
        nodeB = getParent(nodeB);
      }
      return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
      var registrationName = event._reactName;
      var listeners = [];
      var instance2 = target;
      while (instance2 !== null) {
        if (instance2 === common) {
          break;
        }
        var _instance4 = instance2, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
        if (alternate !== null && alternate === common) {
          break;
        }
        if (tag === HostComponent && stateNode !== null) {
          var currentTarget = stateNode;
          if (inCapturePhase) {
            var captureListener = getListener(instance2, registrationName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance2, captureListener, currentTarget));
            }
          } else if (!inCapturePhase) {
            var bubbleListener = getListener(instance2, registrationName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance2, bubbleListener, currentTarget));
            }
          }
        }
        instance2 = instance2.return;
      }
      if (listeners.length !== 0) {
        dispatchQueue.push({
          event,
          listeners
        });
      }
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
      var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
      if (from2 !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
      }
      if (to !== null && enterEvent !== null) {
        accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
      }
    }
    function getListenerSetKey(domEventName, capture) {
      return domEventName + "__" + (capture ? "capture" : "bubble");
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
    var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
    var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
    var AUTOFOCUS = "autoFocus";
    var CHILDREN = "children";
    var STYLE = "style";
    var HTML$1 = "__html";
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    {
      warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };
      validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
          registrationNameDependencies,
          possibleRegistrationNames
        });
      };
      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
      warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };
      warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
          names.push(name);
        });
        error2("Extra attributes from the server: %s", names);
      };
      warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) {
          error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        } else {
          error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
        }
      };
      normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
      {
        checkHtmlStringCoercion(markup);
      }
      var markupString = typeof markup === "string" ? markup : "" + markup;
      return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
      var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
      var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
      if (normalizedServerText === normalizedClientText) {
        return;
      }
      if (shouldWarnDev) {
        {
          if (!didWarnInvalidHydration) {
            didWarnInvalidHydration = true;
            error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          }
        }
      }
      if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
        throw new Error("Text content does not match server-rendered HTML.");
      }
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop2() {
    }
    function trapClickOnNonInteractiveElement(node2) {
      node2.onclick = noop2;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = nextProps[propKey];
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            var canSetTextContent = tag !== "textarea" || nextProp !== "";
            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === "number") {
            setTextContent(domElement, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];
        if (propKey === STYLE) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag;
      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement;
      var namespaceURI = parentNamespace;
      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }
      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props);
          if (!isCustomComponentTag && type !== type.toLowerCase()) {
            error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
          }
        }
        if (type === "script") {
          var div = ownerDocument.createElement("div");
          div.innerHTML = "<script><\/script>";
          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === "string") {
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          domElement = ownerDocument.createElement(type);
          if (type === "select") {
            var node2 = domElement;
            if (props.multiple) {
              node2.multiple = true;
            } else if (props.size) {
              node2.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }
      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
          }
        }
      }
      return domElement;
    }
    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);
      }
      var props;
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          props = rawProps;
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          props = rawProps;
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          props = rawProps;
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          props = rawProps;
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          props = rawProps;
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          props = rawProps;
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        default:
          props = rawProps;
      }
      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "option":
          postMountWrapper$1(domElement, rawProps);
          break;
        case "select":
          postMountWrapper$2(domElement, rawProps);
          break;
        default:
          if (typeof props.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps;
      var nextProps;
      switch (tag) {
        case "input":
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "select":
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;
        case "textarea":
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;
        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;
          if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      assertValidProps(tag, nextProps);
      var propKey;
      var styleName;
      var styleUpdates = null;
      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }
        if (propKey === STYLE) {
          var lastStyle = lastProps[propKey];
          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }
              styleUpdates[styleName] = "";
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
          ;
        else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (propKey === AUTOFOCUS)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }
      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : void 0;
        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }
        if (propKey === STYLE) {
          {
            if (nextProp) {
              Object.freeze(nextProp);
            }
          }
          if (lastProp) {
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }
              updatePayload.push(propKey, styleUpdates);
            }
            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
          var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, nextHtml);
            }
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === "string" || typeof nextProp === "number") {
            (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
          ;
        else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
          if (!updatePayload && lastProp !== nextProp) {
            updatePayload = [];
          }
        } else {
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }
      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
        }
        (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
      }
      return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }
      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
      switch (tag) {
        case "input":
          updateWrapper(domElement, nextRawProps);
          break;
        case "textarea":
          updateWrapper$1(domElement, nextRawProps);
          break;
        case "select":
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }
    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }
        return possibleStandardNames[lowerCasedName] || null;
      }
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
      var isCustomComponentTag;
      var extraAttributeNames;
      {
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
      }
      switch (tag) {
        case "dialog":
          listenToNonDelegatedEvent("cancel", domElement);
          listenToNonDelegatedEvent("close", domElement);
          break;
        case "iframe":
        case "object":
        case "embed":
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "video":
        case "audio":
          for (var i = 0; i < mediaEventTypes.length; i++) {
            listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
          }
          break;
        case "source":
          listenToNonDelegatedEvent("error", domElement);
          break;
        case "img":
        case "image":
        case "link":
          listenToNonDelegatedEvent("error", domElement);
          listenToNonDelegatedEvent("load", domElement);
          break;
        case "details":
          listenToNonDelegatedEvent("toggle", domElement);
          break;
        case "input":
          initWrapperState(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "option":
          validateProps(domElement, rawProps);
          break;
        case "select":
          initWrapperState$1(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
        case "textarea":
          initWrapperState$2(domElement, rawProps);
          listenToNonDelegatedEvent("invalid", domElement);
          break;
      }
      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = /* @__PURE__ */ new Set();
        var attributes = domElement.attributes;
        for (var _i2 = 0; _i2 < attributes.length; _i2++) {
          var name = attributes[_i2].name.toLowerCase();
          switch (name) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              extraAttributeNames.add(attributes[_i2].name);
          }
        }
      }
      var updatePayload = null;
      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }
        var nextProp = rawProps[propKey];
        if (propKey === CHILDREN) {
          if (typeof nextProp === "string") {
            if (domElement.textContent !== nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === "number") {
            if (domElement.textContent !== "" + nextProp) {
              if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
              }
              updatePayload = [CHILDREN, "" + nextProp];
            }
          }
        } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if (typeof nextProp !== "function") {
              warnForInvalidEventListener(propKey, nextProp);
            }
            if (propKey === "onScroll") {
              listenToNonDelegatedEvent("scroll", domElement);
            }
          }
        } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === "boolean") {
          var serverValue = void 0;
          var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
          if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === "value" || propKey === "checked" || propKey === "selected")
            ;
          else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
            if (nextHtml != null) {
              var expectedHTML = normalizeHTML(domElement, nextHtml);
              if (expectedHTML !== serverHTML) {
                warnForPropDifference(propKey, serverHTML, expectedHTML);
              }
            }
          } else if (propKey === STYLE) {
            extraAttributeNames.delete(propKey);
            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute("style");
              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);
            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;
            if (propertyInfo !== null) {
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;
              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }
              if (ownNamespace === HTML_NAMESPACE) {
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);
                if (standardName !== null && standardName !== propKey) {
                  isMismatchDueToBadCasing = true;
                  extraAttributeNames.delete(standardName);
                }
                extraAttributeNames.delete(propKey);
              }
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }
            var dontWarnCustomElement = enableCustomElementPropertySupport;
            if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }
      {
        if (shouldWarnDev) {
          if (
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
          ) {
            warnForExtraAttributes(extraAttributeNames);
          }
        }
      }
      switch (tag) {
        case "input":
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;
        case "textarea":
          track(domElement);
          postMountWrapper$3(domElement);
          break;
        case "select":
        case "option":
          break;
        default:
          if (typeof rawProps.onClick === "function") {
            trapClickOnNonInteractiveElement(domElement);
          }
          break;
      }
      return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }
    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
      }
    }
    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === "") {
          return;
        }
        if (didWarnInvalidHydration) {
          return;
        }
        didWarnInvalidHydration = true;
        error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }
    function restoreControlledState$3(domElement, tag, props) {
      switch (tag) {
        case "input":
          restoreControlledState(domElement, props);
          return;
        case "textarea":
          restoreControlledState$2(domElement, props);
          return;
        case "select":
          restoreControlledState$1(domElement, props);
          return;
      }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    {
      var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
      var inScopeTags = [
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
      ];
      var buttonScopeTags = inScopeTags.concat(["button"]);
      var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
      updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
        var info = {
          tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        }
        if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === "form") {
          ancestorInfo.formTag = info;
        }
        if (tag === "a") {
          ancestorInfo.aTagInScope = info;
        }
        if (tag === "button") {
          ancestorInfo.buttonTagInScope = info;
        }
        if (tag === "nobr") {
          ancestorInfo.nobrTagInScope = info;
        }
        if (tag === "p") {
          ancestorInfo.pTagInButtonScope = info;
        }
        if (tag === "li") {
          ancestorInfo.listItemTagAutoclosing = info;
        }
        if (tag === "dd" || tag === "dt") {
          ancestorInfo.dlItemTagAutoclosing = info;
        }
        return ancestorInfo;
      };
      var isTagValidWithParent = function(tag, parentTag) {
        switch (parentTag) {
          case "select":
            return tag === "option" || tag === "optgroup" || tag === "#text";
          case "optgroup":
            return tag === "option" || tag === "#text";
          case "option":
            return tag === "#text";
          case "tr":
            return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
          case "colgroup":
            return tag === "col" || tag === "template";
          case "table":
            return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
          case "head":
            return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
          case "html":
            return tag === "head" || tag === "body" || tag === "frameset";
          case "frameset":
            return tag === "frame";
          case "#document":
            return tag === "html";
        }
        switch (tag) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
          case "rp":
          case "rt":
            return impliedEndTags.indexOf(parentTag) === -1;
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return parentTag == null;
        }
        return true;
      };
      var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch (tag) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return ancestorInfo.pTagInButtonScope;
          case "form":
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
          case "li":
            return ancestorInfo.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return ancestorInfo.dlItemTagAutoclosing;
          case "button":
            return ancestorInfo.buttonTagInScope;
          case "a":
            return ancestorInfo.aTagInScope;
          case "nobr":
            return ancestorInfo.nobrTagInScope;
        }
        return null;
      };
      var didWarn$1 = {};
      validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
          if (childTag != null) {
            error2("validateDOMNesting: when childText is passed, childTag should be null");
          }
          childTag = "#text";
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) {
          return;
        }
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
        if (didWarn$1[warnKey]) {
          return;
        }
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = "";
        if (childTag === "#text") {
          if (/\S/.test(childText)) {
            tagDisplayName = "Text nodes";
          } else {
            tagDisplayName = "Whitespace text nodes";
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
          }
        } else {
          tagDisplayName = "<" + childTag + ">";
        }
        if (invalidParent) {
          var info = "";
          if (ancestorTag === "table" && childTag === "tr") {
            info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
          }
          error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else {
          error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
        }
      };
    }
    var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
    var SUSPENSE_START_DATA = "$";
    var SUSPENSE_END_DATA = "/$";
    var SUSPENSE_PENDING_START_DATA = "$?";
    var SUSPENSE_FALLBACK_START_DATA = "$!";
    var STYLE$1 = "style";
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
      var type;
      var namespace;
      var nodeType = rootContainerInstance.nodeType;
      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE: {
          type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
          var root3 = rootContainerInstance.documentElement;
          namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
          break;
        }
        default: {
          var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
          var ownNamespace = container.namespaceURI || null;
          type = container.tagName;
          namespace = getChildNamespace(ownNamespace, type);
          break;
        }
      }
      {
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
          namespace,
          ancestorInfo
        };
      }
    }
    function getPublicInstance(instance2) {
      return instance2;
    }
    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      var activeInstance = null;
      setEnabled(false);
      return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      setEnabled(eventsEnabled);
      eventsEnabled = null;
      selectionInformation = null;
    }
    function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === "string" || typeof props.children === "number") {
          var string = "" + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }
    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return !!props.autoFocus;
        case "img":
          return true;
        default:
          return false;
      }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
          var string = "" + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
      return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }
    function getCurrentEventPriority() {
      var currentEvent = window.event;
      if (currentEvent === void 0) {
        return DefaultEventPriority;
      }
      return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
    var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var noTimeout = -1;
    var localPromise = typeof Promise === "function" ? Promise : void 0;
    var scheduleMicrotask2 = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
      return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error3) {
      setTimeout(function() {
        throw error3;
      });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          if (newProps.autoFocus) {
            domElement.focus();
          }
          return;
        case "img": {
          if (newProps.src) {
            domElement.src = newProps.src;
          }
          return;
        }
      }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      updateProperties(domElement, updatePayload, type, oldProps, newProps);
      updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
      setTextContent(domElement, "");
    }
    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
      var parentNode;
      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      }
      var reactRootContainer = container._reactRootContainer;
      if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
        trapClickOnNonInteractiveElement(parentNode);
      }
    }
    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }
    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node2 = suspenseInstance;
      var depth = 0;
      do {
        var nextNode = node2.nextSibling;
        parentInstance.removeChild(node2);
        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              retryIfBlockedOn(suspenseInstance);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
            depth++;
          }
        }
        node2 = nextNode;
      } while (node2);
      retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      }
      retryIfBlockedOn(container);
    }
    function hideInstance(instance2) {
      instance2 = instance2;
      var style2 = instance2.style;
      if (typeof style2.setProperty === "function") {
        style2.setProperty("display", "none", "important");
      } else {
        style2.display = "none";
      }
    }
    function hideTextInstance(textInstance) {
      textInstance.nodeValue = "";
    }
    function unhideInstance(instance2, props) {
      instance2 = instance2;
      var styleProp = props[STYLE$1];
      var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
      instance2.style.display = dangerousStyleValue("display", display);
    }
    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    }
    function clearContainer(container) {
      if (container.nodeType === ELEMENT_NODE) {
        container.textContent = "";
      } else if (container.nodeType === DOCUMENT_NODE) {
        if (container.documentElement) {
          container.removeChild(container.documentElement);
        }
      }
    }
    function canHydrateInstance(instance2, type, props) {
      if (instance2.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance2.nodeName.toLowerCase()) {
        return null;
      }
      return instance2;
    }
    function canHydrateTextInstance(instance2, text) {
      if (text === "" || instance2.nodeType !== TEXT_NODE) {
        return null;
      }
      return instance2;
    }
    function canHydrateSuspenseInstance(instance2) {
      if (instance2.nodeType !== COMMENT_NODE) {
        return null;
      }
      return instance2;
    }
    function isSuspenseInstancePending(instance2) {
      return instance2.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance2) {
      return instance2.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance2) {
      var dataset = instance2.nextSibling && instance2.nextSibling.dataset;
      var digest, message, stack;
      if (dataset) {
        digest = dataset.dgst;
        {
          message = dataset.msg;
          stack = dataset.stck;
        }
      }
      {
        return {
          message,
          digest,
          stack
        };
      }
    }
    function registerSuspenseInstanceRetry(instance2, callback) {
      instance2._reactRetry = callback;
    }
    function getNextHydratable(node2) {
      for (; node2 != null; node2 = node2.nextSibling) {
        var nodeType = node2.nodeType;
        if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
          break;
        }
        if (nodeType === COMMENT_NODE) {
          var nodeData = node2.data;
          if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
            break;
          }
          if (nodeData === SUSPENSE_END_DATA) {
            return null;
          }
        }
      }
      return node2;
    }
    function getNextHydratableSibling(instance2) {
      return getNextHydratable(instance2.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
      return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
      return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
      return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance2, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, instance2);
      updateFiberProps(instance2, props);
      var parentNamespace;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedProperties(instance2, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
      return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node2 = suspenseInstance.nextSibling;
      var depth = 0;
      while (node2) {
        if (node2.nodeType === COMMENT_NODE) {
          var data = node2.data;
          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node2);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            depth++;
          }
        }
        node2 = node2.nextSibling;
      }
      return null;
    }
    function getParentSuspenseInstance(targetInstance) {
      var node2 = targetInstance.previousSibling;
      var depth = 0;
      while (node2) {
        if (node2.nodeType === COMMENT_NODE) {
          var data = node2.data;
          if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
            if (depth === 0) {
              return node2;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_END_DATA) {
            depth++;
          }
        }
        node2 = node2.previousSibling;
      }
      return null;
    }
    function commitHydratedContainer(container) {
      retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
      retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
      return parentType !== "head" && parentType !== "body";
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
      var shouldWarnDev = true;
      checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
      if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance2) {
      {
        if (instance2.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance2);
        } else if (instance2.nodeType === COMMENT_NODE)
          ;
        else {
          warnForDeletedHydratableText(parentContainer, instance2);
        }
      }
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance2) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
          if (instance2.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentNode, instance2);
          } else if (instance2.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentNode, instance2);
          }
        }
      }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance2, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance2.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance2);
          } else if (instance2.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentInstance, instance2);
          }
        }
      }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedElement(parentNode, type);
      }
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
      {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null)
          warnForInsertedHydratedText(parentNode, text);
      }
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type);
        }
      }
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
      {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text);
        }
      }
    }
    function errorHydratingContainer(parentContainer) {
      {
        error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
      }
    }
    function preparePortalMount(portalInstance) {
      listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = "__reactFiber$" + randomKey;
    var internalPropsKey = "__reactProps$" + randomKey;
    var internalContainerInstanceKey = "__reactContainer$" + randomKey;
    var internalEventHandlersKey = "__reactEvents$" + randomKey;
    var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
    var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
    function detachDeletedInstance(node2) {
      delete node2[internalInstanceKey];
      delete node2[internalPropsKey];
      delete node2[internalEventHandlersKey];
      delete node2[internalEventHandlerListenersKey];
      delete node2[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node2) {
      node2[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node2) {
      node2[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node2) {
      node2[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node2) {
      return !!node2[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
      var targetInst = targetNode[internalInstanceKey];
      if (targetInst) {
        return targetInst;
      }
      var parentNode = targetNode.parentNode;
      while (parentNode) {
        targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
        if (targetInst) {
          var alternate = targetInst.alternate;
          if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
            var suspenseInstance = getParentSuspenseInstance(targetNode);
            while (suspenseInstance !== null) {
              var targetSuspenseInst = suspenseInstance[internalInstanceKey];
              if (targetSuspenseInst) {
                return targetSuspenseInst;
              }
              suspenseInstance = getParentSuspenseInstance(suspenseInstance);
            }
          }
          return targetInst;
        }
        targetNode = parentNode;
        parentNode = targetNode.parentNode;
      }
      return null;
    }
    function getInstanceFromNode(node2) {
      var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
          return inst;
        } else {
          return null;
        }
      }
      return null;
    }
    function getNodeFromInstance(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        return inst.stateNode;
      }
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node2) {
      return node2[internalPropsKey] || null;
    }
    function updateFiberProps(node2, props) {
      node2[internalPropsKey] = props;
    }
    function getEventListenerSet(node2) {
      var elementListenerSet = node2[internalEventHandlersKey];
      if (elementListenerSet === void 0) {
        elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
      }
      return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values2, location2, componentName2, element) {
      {
        var has2 = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has2(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName2 || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName2, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location2, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error2("Failed %s type: %s", location2, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var valueStack = [];
    var fiberStack;
    {
      fiberStack = [];
    }
    var index2 = -1;
    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }
    function pop(cursor2, fiber) {
      if (index2 < 0) {
        {
          error2("Unexpected pop.");
        }
        return;
      }
      {
        if (fiber !== fiberStack[index2]) {
          error2("Unexpected Fiber popped.");
        }
      }
      cursor2.current = valueStack[index2];
      valueStack[index2] = null;
      {
        fiberStack[index2] = null;
      }
      index2--;
    }
    function push(cursor2, value, fiber) {
      index2++;
      valueStack[index2] = cursor2.current;
      {
        fiberStack[index2] = fiber;
      }
      cursor2.current = value;
    }
    var warnedAboutMissingGetChildContext;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    }
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
      {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) {
          return previousContext;
        }
        return contextStackCursor.current;
      }
    }
    function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
      {
        var instance2 = workInProgress2.stateNode;
        instance2.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance2.__reactInternalMemoizedMaskedChildContext = maskedContext;
      }
    }
    function getMaskedContext(workInProgress2, unmaskedContext) {
      {
        var type = workInProgress2.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) {
          return emptyContextObject;
        }
        var instance2 = workInProgress2.stateNode;
        if (instance2 && instance2.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
          return instance2.__reactInternalMemoizedMaskedChildContext;
        }
        var context = {};
        for (var key in contextTypes) {
          context[key] = unmaskedContext[key];
        }
        {
          var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
          checkPropTypes(contextTypes, context, "context", name);
        }
        if (instance2) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return context;
      }
    }
    function hasContextChanged() {
      {
        return didPerformWorkStackCursor.current;
      }
    }
    function isContextProvider(type) {
      {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== void 0;
      }
    }
    function popContext(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function popTopLevelContextObject(fiber) {
      {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
      }
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
      {
        if (contextStackCursor.current !== emptyContextObject) {
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        }
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
      }
    }
    function processChildContext(fiber, type, parentContext) {
      {
        var instance2 = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        if (typeof instance2.getChildContext !== "function") {
          {
            var componentName2 = getComponentNameFromFiber(fiber) || "Unknown";
            if (!warnedAboutMissingGetChildContext[componentName2]) {
              warnedAboutMissingGetChildContext[componentName2] = true;
              error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName2, componentName2);
            }
          }
          return parentContext;
        }
        var childContext = instance2.getChildContext();
        for (var contextKey in childContext) {
          if (!(contextKey in childContextTypes)) {
            throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
          }
        }
        {
          var name = getComponentNameFromFiber(fiber) || "Unknown";
          checkPropTypes(childContextTypes, childContext, "child context", name);
        }
        return assign2({}, parentContext, childContext);
      }
    }
    function pushContextProvider(workInProgress2) {
      {
        var instance2 = workInProgress2.stateNode;
        var memoizedMergedChildContext = instance2 && instance2.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
        return true;
      }
    }
    function invalidateContextProvider(workInProgress2, type, didChange) {
      {
        var instance2 = workInProgress2.stateNode;
        if (!instance2) {
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (didChange) {
          var mergedContext = processChildContext(workInProgress2, type, previousContext);
          instance2.__reactInternalMemoizedMergedChildContext = mergedContext;
          pop(didPerformWorkStackCursor, workInProgress2);
          pop(contextStackCursor, workInProgress2);
          push(contextStackCursor, mergedContext, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        } else {
          pop(didPerformWorkStackCursor, workInProgress2);
          push(didPerformWorkStackCursor, didChange, workInProgress2);
        }
      }
    }
    function findCurrentUnmaskedContext(fiber) {
      {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        }
        var node2 = fiber;
        do {
          switch (node2.tag) {
            case HostRoot:
              return node2.stateNode.context;
            case ClassComponent: {
              var Component = node2.type;
              if (isContextProvider(Component)) {
                return node2.stateNode.__reactInternalMemoizedMergedChildContext;
              }
              break;
            }
          }
          node2 = node2.return;
        } while (node2 !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
      if (syncQueue === null) {
        syncQueue = [callback];
      } else {
        syncQueue.push(callback);
      }
    }
    function scheduleLegacySyncCallback(callback) {
      includesLegacySyncCallbacks = true;
      scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
      if (includesLegacySyncCallbacks) {
        flushSyncCallbacks();
      }
    }
    function flushSyncCallbacks() {
      if (!isFlushingSyncQueue && syncQueue !== null) {
        isFlushingSyncQueue = true;
        var i = 0;
        var previousUpdatePriority = getCurrentUpdatePriority();
        try {
          var isSync = true;
          var queue = syncQueue;
          setCurrentUpdatePriority(DiscreteEventPriority);
          for (; i < queue.length; i++) {
            var callback = queue[i];
            do {
              callback = callback(isSync);
            } while (callback !== null);
          }
          syncQueue = null;
          includesLegacySyncCallbacks = false;
        } catch (error3) {
          if (syncQueue !== null) {
            syncQueue = syncQueue.slice(i + 1);
          }
          scheduleCallback(ImmediatePriority, flushSyncCallbacks);
          throw error3;
        } finally {
          setCurrentUpdatePriority(previousUpdatePriority);
          isFlushingSyncQueue = false;
        }
      }
      return null;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = "";
    function isForkedChild(workInProgress2) {
      warnIfNotHydrating();
      return (workInProgress2.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress2) {
      warnIfNotHydrating();
      return treeForkCount;
    }
    function getTreeId() {
      var overflow = treeContextOverflow;
      var idWithLeadingBit = treeContextId;
      var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
      return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress2, totalChildren) {
      warnIfNotHydrating();
      forkStack[forkStackIndex++] = treeForkCount;
      forkStack[forkStackIndex++] = treeForkProvider;
      treeForkProvider = workInProgress2;
      treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress2, totalChildren, index3) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextProvider = workInProgress2;
      var baseIdWithLeadingBit = treeContextId;
      var baseOverflow = treeContextOverflow;
      var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
      var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
      var slot = index3 + 1;
      var length2 = getBitLength(totalChildren) + baseLength;
      if (length2 > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        var newOverflowBits = (1 << numberOfOverflowBits) - 1;
        var newOverflow = (baseId & newOverflowBits).toString(32);
        var restOfBaseId = baseId >> numberOfOverflowBits;
        var restOfBaseLength = baseLength - numberOfOverflowBits;
        var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
        var restOfNewBits = slot << restOfBaseLength;
        var id = restOfNewBits | restOfBaseId;
        var overflow = newOverflow + baseOverflow;
        treeContextId = 1 << restOfLength | id;
        treeContextOverflow = overflow;
      } else {
        var newBits = slot << baseLength;
        var _id = newBits | baseId;
        var _overflow = baseOverflow;
        treeContextId = 1 << length2 | _id;
        treeContextOverflow = _overflow;
      }
    }
    function pushMaterializedTreeId(workInProgress2) {
      warnIfNotHydrating();
      var returnFiber = workInProgress2.return;
      if (returnFiber !== null) {
        var numberOfForks = 1;
        var slotIndex = 0;
        pushTreeFork(workInProgress2, numberOfForks);
        pushTreeId(workInProgress2, numberOfForks, slotIndex);
      }
    }
    function getBitLength(number) {
      return 32 - clz32(number);
    }
    function getLeadingBit(id) {
      return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress2) {
      while (workInProgress2 === treeForkProvider) {
        treeForkProvider = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
        treeForkCount = forkStack[--forkStackIndex];
        forkStack[forkStackIndex] = null;
      }
      while (workInProgress2 === treeContextProvider) {
        treeContextProvider = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextOverflow = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
        treeContextId = idStack[--idStackIndex];
        idStack[idStackIndex] = null;
      }
    }
    function getSuspendedTreeContext() {
      warnIfNotHydrating();
      if (treeContextProvider !== null) {
        return {
          id: treeContextId,
          overflow: treeContextOverflow
        };
      } else {
        return null;
      }
    }
    function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
      warnIfNotHydrating();
      idStack[idStackIndex++] = treeContextId;
      idStack[idStackIndex++] = treeContextOverflow;
      idStack[idStackIndex++] = treeContextProvider;
      treeContextId = suspendedContext.id;
      treeContextOverflow = suspendedContext.overflow;
      treeContextProvider = workInProgress2;
    }
    function warnIfNotHydrating() {
      {
        if (!getIsHydrating()) {
          error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
        }
      }
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var didSuspendOrErrorDEV = false;
    var hydrationErrors = null;
    function warnIfHydrating() {
      {
        if (isHydrating) {
          error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
        }
      }
    }
    function markDidThrowWhileHydratingDEV() {
      {
        didSuspendOrErrorDEV = true;
      }
    }
    function didSuspendOrErrorWhileHydratingDEV() {
      {
        return didSuspendOrErrorDEV;
      }
    }
    function enterHydrationState(fiber) {
      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
      nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      hydrationErrors = null;
      didSuspendOrErrorDEV = false;
      if (treeContext !== null) {
        restoreSuspendedTreeContext(fiber, treeContext);
      }
      return true;
    }
    function warnUnhydratedInstance(returnFiber, instance2) {
      {
        switch (returnFiber.tag) {
          case HostRoot: {
            didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance2);
            break;
          }
          case HostComponent: {
            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
            didNotHydrateInstance(
              returnFiber.type,
              returnFiber.memoizedProps,
              returnFiber.stateNode,
              instance2,
              // TODO: Delete this argument when we remove the legacy root API.
              isConcurrentMode
            );
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            if (suspenseState.dehydrated !== null)
              didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance2);
            break;
          }
        }
      }
    }
    function deleteHydratableInstance(returnFiber, instance2) {
      warnUnhydratedInstance(returnFiber, instance2);
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance2;
      childToDelete.return = returnFiber;
      var deletions = returnFiber.deletions;
      if (deletions === null) {
        returnFiber.deletions = [childToDelete];
        returnFiber.flags |= ChildDeletion;
      } else {
        deletions.push(childToDelete);
      }
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
      {
        if (didSuspendOrErrorDEV) {
          return;
        }
        switch (returnFiber.tag) {
          case HostRoot: {
            var parentContainer = returnFiber.stateNode.containerInfo;
            switch (fiber.tag) {
              case HostComponent:
                var type = fiber.type;
                fiber.pendingProps;
                didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                break;
              case HostText:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                break;
            }
            break;
          }
          case HostComponent: {
            var parentType = returnFiber.type;
            var parentProps = returnFiber.memoizedProps;
            var parentInstance = returnFiber.stateNode;
            switch (fiber.tag) {
              case HostComponent: {
                var _type = fiber.type;
                var _props = fiber.pendingProps;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _type,
                  _props,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case HostText: {
                var _text = fiber.pendingProps;
                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotFindHydratableTextInstance(
                  parentType,
                  parentProps,
                  parentInstance,
                  _text,
                  // TODO: Delete this argument when we remove the legacy root API.
                  _isConcurrentMode
                );
                break;
              }
            }
            break;
          }
          case SuspenseComponent: {
            var suspenseState = returnFiber.memoizedState;
            var _parentInstance = suspenseState.dehydrated;
            if (_parentInstance !== null)
              switch (fiber.tag) {
                case HostComponent:
                  var _type2 = fiber.type;
                  fiber.pendingProps;
                  didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                  break;
                case HostText:
                  var _text2 = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.flags = fiber.flags & ~Hydrating | Placement;
      warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent: {
          var type = fiber.type;
          fiber.pendingProps;
          var instance2 = canHydrateInstance(nextInstance, type);
          if (instance2 !== null) {
            fiber.stateNode = instance2;
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(instance2);
            return true;
          }
          return false;
        }
        case HostText: {
          var text = fiber.pendingProps;
          var textInstance = canHydrateTextInstance(nextInstance, text);
          if (textInstance !== null) {
            fiber.stateNode = textInstance;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        case SuspenseComponent: {
          var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
          if (suspenseInstance !== null) {
            var suspenseState = {
              dehydrated: suspenseInstance,
              treeContext: getSuspendedTreeContext(),
              retryLane: OffscreenLane
            };
            fiber.memoizedState = suspenseState;
            var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
            dehydratedFragment.return = fiber;
            fiber.child = dehydratedFragment;
            hydrationParentFiber = fiber;
            nextHydratableInstance = null;
            return true;
          }
          return false;
        }
        default:
          return false;
      }
    }
    function shouldClientRenderOnMismatch(fiber) {
      return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }
      var nextInstance = nextHydratableInstance;
      if (!nextInstance) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }
      var firstAttemptedInstance = nextInstance;
      if (!tryHydrate(fiber, nextInstance)) {
        if (shouldClientRenderOnMismatch(fiber)) {
          warnNonhydratedInstance(hydrationParentFiber, fiber);
          throwOnHydrationMismatch();
        }
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);
        var prevHydrationParentFiber = hydrationParentFiber;
        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
      }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      var instance2 = fiber.stateNode;
      var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
      var updatePayload = hydrateInstance(instance2, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
      fiber.updateQueue = updatePayload;
      if (updatePayload !== null) {
        return true;
      }
      return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      if (shouldUpdate) {
        var returnFiber = hydrationParentFiber;
        if (returnFiber !== null) {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedContainerTextInstance(
                parentContainer,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                isConcurrentMode
              );
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotMatchHydratedTextInstance(
                parentType,
                parentProps,
                parentInstance,
                textInstance,
                textContent,
                // TODO: Delete this argument when we remove the legacy root API.
                _isConcurrentMode2
              );
              break;
            }
          }
        }
      }
      return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
      var suspenseState = fiber.memoizedState;
      var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
      if (!suspenseInstance) {
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      }
      return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
      var parent = fiber.return;
      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
        parent = parent.return;
      }
      hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
      if (fiber !== hydrationParentFiber) {
        return false;
      }
      if (!isHydrating) {
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }
      if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
        var nextInstance = nextHydratableInstance;
        if (nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnIfUnhydratedTailNodes(fiber);
            throwOnHydrationMismatch();
          } else {
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
        }
      }
      popToNextHostParent(fiber);
      if (fiber.tag === SuspenseComponent) {
        nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
      } else {
        nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      }
      return true;
    }
    function hasUnhydratedTailNodes() {
      return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
      var nextInstance = nextHydratableInstance;
      while (nextInstance) {
        warnUnhydratedInstance(fiber, nextInstance);
        nextInstance = getNextHydratableSibling(nextInstance);
      }
    }
    function resetHydrationState() {
      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
      didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
      if (hydrationErrors !== null) {
        queueRecoverableErrors(hydrationErrors);
        hydrationErrors = null;
      }
    }
    function getIsHydrating() {
      return isHydrating;
    }
    function queueHydrationError(error3) {
      if (hydrationErrors === null) {
        hydrationErrors = [error3];
      } else {
        hydrationErrors.push(error3);
      }
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
      return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
      recordUnsafeLifecycleWarnings: function(fiber, instance2) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(fiber, instance2) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node2 = fiber;
        while (node2 !== null) {
          if (node2.mode & StrictLegacyMode) {
            maybeStrictRoot = node2;
          }
          node2 = node2.return;
        }
        return maybeStrictRoot;
      };
      var setToSortedString = function(set3) {
        var array = [];
        set3.forEach(function(value) {
          array.push(value);
        });
        return array.sort().join(", ");
      };
      var pendingComponentWillMountWarnings = [];
      var pendingUNSAFE_ComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUNSAFE_ComponentWillUpdateWarnings = [];
      var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance2) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }
        if (typeof instance2.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        instance2.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillMount === "function") {
          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        }
        if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        }
        if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
        if (fiber.mode & StrictLegacyMode && typeof instance2.UNSAFE_componentWillUpdate === "function") {
          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
          pendingComponentWillMountWarnings.forEach(function(fiber) {
            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
          pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
          pendingComponentWillUpdateWarnings.forEach(function(fiber) {
            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutUnsafeLifecycles.add(fiber.type);
          });
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
          error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
          error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
          error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
          warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
          warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
          warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
      };
      var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
      ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance2) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
          error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance2 !== null && typeof instance2.getChildContext === "function") {
          if (warningsForRoot === void 0) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }
          warningsForRoot.push(fiber);
        }
      };
      ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
          if (fiberArray.length === 0) {
            return;
          }
          var firstFiber = fiberArray[0];
          var uniqueNames = /* @__PURE__ */ new Set();
          fiberArray.forEach(function(fiber) {
            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          try {
            setCurrentFiber(firstFiber);
            error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
          } finally {
            resetCurrentFiber();
          }
        });
      };
      ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = /* @__PURE__ */ new Map();
      };
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefs = {};
      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};
      warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== "object") {
          return;
        }
        if (!child._store || child._store.validated || child.key != null) {
          return;
        }
        if (typeof child._store !== "object") {
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        }
        child._store.validated = true;
        var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasKeyUseWarning[componentName2]) {
          return;
        }
        ownerHasKeyUseWarning[componentName2] = true;
        error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
      };
    }
    function isReactClass(type) {
      return type.prototype && type.prototype.isReactComponent;
    }
    function coerceRef(returnFiber, current2, element) {
      var mixedRef = element.ref;
      if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
        {
          if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
          // because these cannot be automatically converted to an arrow function
          // using a codemod. Therefore, we don't have to warn about string refs again.
          !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
          !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
          !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
          element._owner) {
            var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
            if (!didWarnAboutStringRefs[componentName2]) {
              {
                error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName2, mixedRef);
              }
              didWarnAboutStringRefs[componentName2] = true;
            }
          }
        }
        if (element._owner) {
          var owner = element._owner;
          var inst;
          if (owner) {
            var ownerFiber = owner;
            if (ownerFiber.tag !== ClassComponent) {
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            }
            inst = ownerFiber.stateNode;
          }
          if (!inst) {
            throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
          }
          var resolvedInst = inst;
          {
            checkPropStringCoercion(mixedRef, "ref");
          }
          var stringRef = "" + mixedRef;
          if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
            return current2.ref;
          }
          var ref = function(value) {
            var refs = resolvedInst.refs;
            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };
          ref._stringRef = stringRef;
          return ref;
        } else {
          if (typeof mixedRef !== "string") {
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          }
          if (!element._owner) {
            throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
          }
        }
      }
      return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
      var childString = Object.prototype.toString.call(newChild);
      throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
      {
        var componentName2 = getComponentNameFromFiber(returnFiber) || "Component";
        if (ownerHasFunctionTypeWarning[componentName2]) {
          return;
        }
        ownerHasFunctionTypeWarning[componentName2] = true;
        error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function resolveLazy(lazyType) {
      var payload = lazyType._payload;
      var init = lazyType._init;
      return init(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          return;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          return null;
        }
        var childToDelete = currentFirstChild;
        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }
        return null;
      }
      function mapRemainingChildren(returnFiber, currentFirstChild) {
        var existingChildren = /* @__PURE__ */ new Map();
        var existingChild = currentFirstChild;
        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }
          existingChild = existingChild.sibling;
        }
        return existingChildren;
      }
      function useFiber(fiber, pendingProps) {
        var clone = createWorkInProgress(fiber, pendingProps);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }
      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;
        if (!shouldTrackSideEffects) {
          newFiber.flags |= Forked;
          return lastPlacedIndex;
        }
        var current2 = newFiber.alternate;
        if (current2 !== null) {
          var oldIndex = current2.index;
          if (oldIndex < lastPlacedIndex) {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          } else {
            return oldIndex;
          }
        } else {
          newFiber.flags |= Placement;
          return lastPlacedIndex;
        }
      }
      function placeSingleChild(newFiber) {
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.flags |= Placement;
        }
        return newFiber;
      }
      function updateTextNode(returnFiber, current2, textContent, lanes) {
        if (current2 === null || current2.tag !== HostText) {
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, textContent);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateElement(returnFiber, current2, element, lanes) {
        var elementType = element.type;
        if (elementType === REACT_FRAGMENT_TYPE) {
          return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
        }
        if (current2 !== null) {
          if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
          isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
          // We need to do this after the Hot Reloading check above,
          // because hot reloading has different semantics than prod because
          // it doesn't resuspend. So we can't let the call below suspend.
          typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
            var existing = useFiber(current2, element.props);
            existing.ref = coerceRef(returnFiber, current2, element);
            existing.return = returnFiber;
            {
              existing._debugSource = element._source;
              existing._debugOwner = element._owner;
            }
            return existing;
          }
        }
        var created = createFiberFromElement(element, returnFiber.mode, lanes);
        created.ref = coerceRef(returnFiber, current2, element);
        created.return = returnFiber;
        return created;
      }
      function updatePortal2(returnFiber, current2, portal, lanes) {
        if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, portal.children || []);
          existing.return = returnFiber;
          return existing;
        }
      }
      function updateFragment2(returnFiber, current2, fragment, lanes, key) {
        if (current2 === null || current2.tag !== Fragment) {
          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
          created.return = returnFiber;
          return created;
        } else {
          var existing = useFiber(current2, fragment);
          existing.return = returnFiber;
          return existing;
        }
      }
      function createChild(returnFiber, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE2: {
              var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
              _created.ref = coerceRef(returnFiber, null, newChild);
              _created.return = returnFiber;
              return _created;
            }
            case REACT_PORTAL_TYPE: {
              var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
              _created2.return = returnFiber;
              return _created2;
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init = newChild._init;
              return createChild(returnFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
            _created3.return = returnFiber;
            return _created3;
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
        var key = oldFiber !== null ? oldFiber.key : null;
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          if (key !== null) {
            return null;
          }
          return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE2: {
              if (newChild.key === key) {
                return updateElement(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_PORTAL_TYPE: {
              if (newChild.key === key) {
                return updatePortal2(returnFiber, oldFiber, newChild, lanes);
              } else {
                return null;
              }
            }
            case REACT_LAZY_TYPE: {
              var payload = newChild._payload;
              var init = newChild._init;
              return updateSlot(returnFiber, oldFiber, init(payload), lanes);
            }
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }
            return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE2: {
              var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updateElement(returnFiber, _matchedFiber, newChild, lanes);
            }
            case REACT_PORTAL_TYPE: {
              var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
              return updatePortal2(returnFiber, _matchedFiber2, newChild, lanes);
            }
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init = newChild._init;
              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
          }
          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;
            return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return null;
      }
      function warnOnInvalidKey(child, knownKeys, returnFiber) {
        {
          if (typeof child !== "object" || child === null) {
            return knownKeys;
          }
          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE2:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child, returnFiber);
              var key = child.key;
              if (typeof key !== "string") {
                break;
              }
              if (knownKeys === null) {
                knownKeys = /* @__PURE__ */ new Set();
                knownKeys.add(key);
                break;
              }
              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }
              error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
              break;
            case REACT_LAZY_TYPE:
              var payload = child._payload;
              var init = child._init;
              warnOnInvalidKey(init(payload), knownKeys, returnFiber);
              break;
          }
        }
        return knownKeys;
      }
      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
        {
          var knownKeys = null;
          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
            if (_newFiber === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }
            previousNewFiber = _newFiber;
          }
          if (getIsHydrating()) {
            var _numberOfForks = newIdx;
            pushTreeFork(returnFiber, _numberOfForks);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
          if (_newFiber2 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }
            previousNewFiber = _newFiber2;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks2 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks2);
        }
        return resultingFirstChild;
      }
      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (typeof iteratorFn !== "function") {
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === "Generator") {
            if (!didWarnAboutGenerators) {
              error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
            }
            didWarnAboutGenerators = true;
          }
          if (newChildrenIterable.entries === iteratorFn) {
            if (!didWarnAboutMaps) {
              error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
            }
            didWarnAboutMaps = true;
          }
          var _newChildren = iteratorFn.call(newChildrenIterable);
          if (_newChildren) {
            var knownKeys = null;
            var _step = _newChildren.next();
            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        if (newChildren == null) {
          throw new Error("An iterable object provided no iterator.");
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();
        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }
          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
          if (newFiber === null) {
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }
            break;
          }
          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              deleteChild(returnFiber, oldFiber);
            }
          }
          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
          if (previousNewFiber === null) {
            resultingFirstChild = newFiber;
          } else {
            previousNewFiber.sibling = newFiber;
          }
          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }
        if (step.done) {
          deleteRemainingChildren(returnFiber, oldFiber);
          if (getIsHydrating()) {
            var numberOfForks = newIdx;
            pushTreeFork(returnFiber, numberOfForks);
          }
          return resultingFirstChild;
        }
        if (oldFiber === null) {
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, lanes);
            if (_newFiber3 === null) {
              continue;
            }
            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }
            previousNewFiber = _newFiber3;
          }
          if (getIsHydrating()) {
            var _numberOfForks3 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks3);
          }
          return resultingFirstChild;
        }
        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }
            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }
            previousNewFiber = _newFiber4;
          }
        }
        if (shouldTrackSideEffects) {
          existingChildren.forEach(function(child2) {
            return deleteChild(returnFiber, child2);
          });
        }
        if (getIsHydrating()) {
          var _numberOfForks4 = newIdx;
          pushTreeFork(returnFiber, _numberOfForks4);
        }
        return resultingFirstChild;
      }
      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent);
          existing.return = returnFiber;
          return existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
        var key = element.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              if (child.tag === Fragment) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            } else {
              if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var _existing = useFiber(child, element.props);
                _existing.ref = coerceRef(returnFiber, child, element);
                _existing.return = returnFiber;
                {
                  _existing._debugSource = element._source;
                  _existing._debugOwner = element._owner;
                }
                return _existing;
              }
            }
            deleteRemainingChildren(returnFiber, child);
            break;
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }
      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
        var key = portal.key;
        var child = currentFirstChild;
        while (child !== null) {
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || []);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }
          child = child.sibling;
        }
        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
        created.return = returnFiber;
        return created;
      }
      function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
        var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        }
        if (typeof newChild === "object" && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE2:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            case REACT_LAZY_TYPE:
              var payload = newChild._payload;
              var init = newChild._init;
              return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
          }
          if (isArray(newChild)) {
            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
          }
          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
          }
          throwOnInvalidObjectType(returnFiber, newChild);
        }
        if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
        }
        {
          if (typeof newChild === "function") {
            warnOnFunctionType(returnFiber);
          }
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }
      return reconcileChildFibers2;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current2, workInProgress2) {
      if (current2 !== null && workInProgress2.child !== current2.child) {
        throw new Error("Resuming work not yet implemented.");
      }
      if (workInProgress2.child === null) {
        return;
      }
      var currentChild = workInProgress2.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
      workInProgress2.child = newChild;
      newChild.return = workInProgress2;
      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
        newChild.return = workInProgress2;
      }
      newChild.sibling = null;
    }
    function resetChildFibers(workInProgress2, lanes) {
      var child = workInProgress2.child;
      while (child !== null) {
        resetWorkInProgress(child, lanes);
        child = child.sibling;
      }
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    {
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }
    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }
    function pushProvider(providerFiber, context, nextValue) {
      {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
            error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
          }
          context._currentRenderer = rendererSigil;
        }
      }
    }
    function popProvider(context, providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      {
        {
          context._currentValue = currentValue;
        }
      }
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
      var node2 = parent;
      while (node2 !== null) {
        var alternate = node2.alternate;
        if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
          node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
        }
        if (node2 === propagationRoot) {
          break;
        }
        node2 = node2.return;
      }
      {
        if (node2 !== propagationRoot) {
          error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function propagateContextChange(workInProgress2, context, renderLanes2) {
      {
        propagateContextChange_eager(workInProgress2, context, renderLanes2);
      }
    }
    function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
      var fiber = workInProgress2.child;
      if (fiber !== null) {
        fiber.return = workInProgress2;
      }
      while (fiber !== null) {
        var nextFiber = void 0;
        var list = fiber.dependencies;
        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.firstContext;
          while (dependency !== null) {
            if (dependency.context === context) {
              if (fiber.tag === ClassComponent) {
                var lane = pickArbitraryLane(renderLanes2);
                var update = createUpdate(NoTimestamp, lane);
                update.tag = ForceUpdate;
                var updateQueue = fiber.updateQueue;
                if (updateQueue === null)
                  ;
                else {
                  var sharedQueue = updateQueue.shared;
                  var pending = sharedQueue.pending;
                  if (pending === null) {
                    update.next = update;
                  } else {
                    update.next = pending.next;
                    pending.next = update;
                  }
                  sharedQueue.pending = update;
                }
              }
              fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
              list.lanes = mergeLanes(list.lanes, renderLanes2);
              break;
            }
            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
        } else if (fiber.tag === DehydratedFragment) {
          var parentSuspense = fiber.return;
          if (parentSuspense === null) {
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          }
          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
          var _alternate = parentSuspense.alternate;
          if (_alternate !== null) {
            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
          nextFiber = fiber.sibling;
        } else {
          nextFiber = fiber.child;
        }
        if (nextFiber !== null) {
          nextFiber.return = fiber;
        } else {
          nextFiber = fiber;
          while (nextFiber !== null) {
            if (nextFiber === workInProgress2) {
              nextFiber = null;
              break;
            }
            var sibling = nextFiber.sibling;
            if (sibling !== null) {
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            }
            nextFiber = nextFiber.return;
          }
        }
        fiber = nextFiber;
      }
    }
    function prepareToReadContext(workInProgress2, renderLanes2) {
      currentlyRenderingFiber = workInProgress2;
      lastContextDependency = null;
      lastFullyObservedContext = null;
      var dependencies = workInProgress2.dependencies;
      if (dependencies !== null) {
        {
          var firstContext = dependencies.firstContext;
          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes2)) {
              markWorkInProgressReceivedUpdate();
            }
            dependencies.firstContext = null;
          }
        }
      }
    }
    function readContext(context) {
      {
        if (isDisallowedContextReadInDEV) {
          error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        }
      }
      var value = context._currentValue;
      if (lastFullyObservedContext === context)
        ;
      else {
        var contextItem = {
          context,
          memoizedValue: value,
          next: null
        };
        if (lastContextDependency === null) {
          if (currentlyRenderingFiber === null) {
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
          lastContextDependency = contextItem;
          currentlyRenderingFiber.dependencies = {
            lanes: NoLanes,
            firstContext: contextItem
          };
        } else {
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }
      return value;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
      if (concurrentQueues === null) {
        concurrentQueues = [queue];
      } else {
        concurrentQueues.push(queue);
      }
    }
    function finishQueueingConcurrentUpdates() {
      if (concurrentQueues !== null) {
        for (var i = 0; i < concurrentQueues.length; i++) {
          var queue = concurrentQueues[i];
          var lastInterleavedUpdate = queue.interleaved;
          if (lastInterleavedUpdate !== null) {
            queue.interleaved = null;
            var firstInterleavedUpdate = lastInterleavedUpdate.next;
            var lastPendingUpdate = queue.pending;
            if (lastPendingUpdate !== null) {
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = firstInterleavedUpdate;
              lastInterleavedUpdate.next = firstPendingUpdate;
            }
            queue.pending = lastInterleavedUpdate;
          }
        }
        concurrentQueues = null;
      }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
      var interleaved = queue.interleaved;
      if (interleaved === null) {
        update.next = update;
        pushConcurrentUpdateQueue(queue);
      } else {
        update.next = interleaved.next;
        interleaved.next = update;
      }
      queue.interleaved = update;
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
      return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
      var alternate = sourceFiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, lane);
      }
      {
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
      var node2 = sourceFiber;
      var parent = sourceFiber.return;
      while (parent !== null) {
        parent.childLanes = mergeLanes(parent.childLanes, lane);
        alternate = parent.alternate;
        if (alternate !== null) {
          alternate.childLanes = mergeLanes(alternate.childLanes, lane);
        } else {
          {
            if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
        }
        node2 = parent;
        parent = parent.return;
      }
      if (node2.tag === HostRoot) {
        var root3 = node2.stateNode;
        return root3;
      } else {
        return null;
      }
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;
    }
    function initializeUpdateQueue(fiber) {
      var queue = {
        baseState: fiber.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: NoLanes
        },
        effects: null
      };
      fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress2) {
      var queue = workInProgress2.updateQueue;
      var currentQueue = current2.updateQueue;
      if (queue === currentQueue) {
        var clone = {
          baseState: currentQueue.baseState,
          firstBaseUpdate: currentQueue.firstBaseUpdate,
          lastBaseUpdate: currentQueue.lastBaseUpdate,
          shared: currentQueue.shared,
          effects: currentQueue.effects
        };
        workInProgress2.updateQueue = clone;
      }
    }
    function createUpdate(eventTime, lane) {
      var update = {
        eventTime,
        lane,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null
      };
      return update;
    }
    function enqueueUpdate(fiber, update, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return null;
      }
      var sharedQueue = updateQueue.shared;
      {
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
          error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
          didWarnUpdateInsideUpdate = true;
        }
      }
      if (isUnsafeClassRenderPhaseUpdate()) {
        var pending = sharedQueue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        sharedQueue.pending = update;
        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
      } else {
        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
      }
    }
    function entangleTransitions(root3, fiber, lane) {
      var updateQueue = fiber.updateQueue;
      if (updateQueue === null) {
        return;
      }
      var sharedQueue = updateQueue.shared;
      if (isTransitionLane(lane)) {
        var queueLanes = sharedQueue.lanes;
        queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        sharedQueue.lanes = newQueueLanes;
        markRootEntangled(root3, newQueueLanes);
      }
    }
    function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
      var queue = workInProgress2.updateQueue;
      var current2 = workInProgress2.alternate;
      if (current2 !== null) {
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var newFirst = null;
          var newLast = null;
          var firstBaseUpdate = queue.firstBaseUpdate;
          if (firstBaseUpdate !== null) {
            var update = firstBaseUpdate;
            do {
              var clone = {
                eventTime: update.eventTime,
                lane: update.lane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLast === null) {
                newFirst = newLast = clone;
              } else {
                newLast.next = clone;
                newLast = clone;
              }
              update = update.next;
            } while (update !== null);
            if (newLast === null) {
              newFirst = newLast = capturedUpdate;
            } else {
              newLast.next = capturedUpdate;
              newLast = capturedUpdate;
            }
          } else {
            newFirst = newLast = capturedUpdate;
          }
          queue = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = queue;
          return;
        }
      }
      var lastBaseUpdate = queue.lastBaseUpdate;
      if (lastBaseUpdate === null) {
        queue.firstBaseUpdate = capturedUpdate;
      } else {
        lastBaseUpdate.next = capturedUpdate;
      }
      queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance2) {
      switch (update.tag) {
        case ReplaceState: {
          var payload = update.payload;
          if (typeof payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            var nextState = payload.call(instance2, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  payload.call(instance2, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
            return nextState;
          }
          return payload;
        }
        case CaptureUpdate: {
          workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
        }
        case UpdateState: {
          var _payload = update.payload;
          var partialState;
          if (typeof _payload === "function") {
            {
              enterDisallowedContextReadInDEV();
            }
            partialState = _payload.call(instance2, prevState, nextProps);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  _payload.call(instance2, prevState, nextProps);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              exitDisallowedContextReadInDEV();
            }
          } else {
            partialState = _payload;
          }
          if (partialState === null || partialState === void 0) {
            return prevState;
          }
          return assign2({}, prevState, partialState);
        }
        case ForceUpdate: {
          hasForceUpdate = true;
          return prevState;
        }
      }
      return prevState;
    }
    function processUpdateQueue(workInProgress2, props, instance2, renderLanes2) {
      var queue = workInProgress2.updateQueue;
      hasForceUpdate = false;
      {
        currentlyProcessingQueue = queue.shared;
      }
      var firstBaseUpdate = queue.firstBaseUpdate;
      var lastBaseUpdate = queue.lastBaseUpdate;
      var pendingQueue = queue.shared.pending;
      if (pendingQueue !== null) {
        queue.shared.pending = null;
        var lastPendingUpdate = pendingQueue;
        var firstPendingUpdate = lastPendingUpdate.next;
        lastPendingUpdate.next = null;
        if (lastBaseUpdate === null) {
          firstBaseUpdate = firstPendingUpdate;
        } else {
          lastBaseUpdate.next = firstPendingUpdate;
        }
        lastBaseUpdate = lastPendingUpdate;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
          if (currentLastBaseUpdate !== lastBaseUpdate) {
            if (currentLastBaseUpdate === null) {
              currentQueue.firstBaseUpdate = firstPendingUpdate;
            } else {
              currentLastBaseUpdate.next = firstPendingUpdate;
            }
            currentQueue.lastBaseUpdate = lastPendingUpdate;
          }
        }
      }
      if (firstBaseUpdate !== null) {
        var newState = queue.baseState;
        var newLanes = NoLanes;
        var newBaseState = null;
        var newFirstBaseUpdate = null;
        var newLastBaseUpdate = null;
        var update = firstBaseUpdate;
        do {
          var updateLane = update.lane;
          var updateEventTime = update.eventTime;
          if (!isSubsetOfLanes(renderLanes2, updateLane)) {
            var clone = {
              eventTime: updateEventTime,
              lane: updateLane,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            if (newLastBaseUpdate === null) {
              newFirstBaseUpdate = newLastBaseUpdate = clone;
              newBaseState = newState;
            } else {
              newLastBaseUpdate = newLastBaseUpdate.next = clone;
            }
            newLanes = mergeLanes(newLanes, updateLane);
          } else {
            if (newLastBaseUpdate !== null) {
              var _clone = {
                eventTime: updateEventTime,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              newLastBaseUpdate = newLastBaseUpdate.next = _clone;
            }
            newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance2);
            var callback = update.callback;
            if (callback !== null && // If the update was already committed, we should not queue its
            // callback again.
            update.lane !== NoLane) {
              workInProgress2.flags |= Callback;
              var effects = queue.effects;
              if (effects === null) {
                queue.effects = [update];
              } else {
                effects.push(update);
              }
            }
          }
          update = update.next;
          if (update === null) {
            pendingQueue = queue.shared.pending;
            if (pendingQueue === null) {
              break;
            } else {
              var _lastPendingUpdate = pendingQueue;
              var _firstPendingUpdate = _lastPendingUpdate.next;
              _lastPendingUpdate.next = null;
              update = _firstPendingUpdate;
              queue.lastBaseUpdate = _lastPendingUpdate;
              queue.shared.pending = null;
            }
          }
        } while (true);
        if (newLastBaseUpdate === null) {
          newBaseState = newState;
        }
        queue.baseState = newBaseState;
        queue.firstBaseUpdate = newFirstBaseUpdate;
        queue.lastBaseUpdate = newLastBaseUpdate;
        var lastInterleaved = queue.shared.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            newLanes = mergeLanes(newLanes, interleaved.lane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (firstBaseUpdate === null) {
          queue.shared.lanes = NoLanes;
        }
        markSkippedUpdateLanes(newLanes);
        workInProgress2.lanes = newLanes;
        workInProgress2.memoizedState = newState;
      }
      {
        currentlyProcessingQueue = null;
      }
    }
    function callCallback(callback, context) {
      if (typeof callback !== "function") {
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
      }
      callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance2) {
      var effects = finishedQueue.effects;
      finishedQueue.effects = null;
      if (effects !== null) {
        for (var i = 0; i < effects.length; i++) {
          var effect = effects[i];
          var callback = effect.callback;
          if (callback !== null) {
            effect.callback = null;
            callCallback(callback, instance2);
          }
        }
      }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
      if (c === NO_CONTEXT) {
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      }
      return c;
    }
    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
      push(rootInstanceStackCursor, nextRootInstance, fiber);
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance);
      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }
    function pushHostContext(fiber) {
      requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type);
      if (context === nextContext) {
        return;
      }
      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
      return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
      return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
      return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
      return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
      push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
      pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
      var nextState = workInProgress2.memoizedState;
      if (nextState !== null) {
        if (nextState.dehydrated !== null) {
          return true;
        }
        return false;
      }
      workInProgress2.memoizedProps;
      {
        return true;
      }
    }
    function findFirstSuspended(row) {
      var node2 = row;
      while (node2 !== null) {
        if (node2.tag === SuspenseComponent) {
          var state = node2.memoizedState;
          if (state !== null) {
            var dehydrated = state.dehydrated;
            if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
              return node2;
            }
          }
        } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        node2.memoizedProps.revealOrder !== void 0) {
          var didSuspend = (node2.flags & DidCapture) !== NoFlags;
          if (didSuspend) {
            return node2;
          }
        } else if (node2.child !== null) {
          node2.child.return = node2;
          node2 = node2.child;
          continue;
        }
        if (node2 === row) {
          return null;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === row) {
            return null;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
      return null;
    }
    var NoFlags$1 = (
      /*   */
      0
    );
    var HasEffect = (
      /* */
      1
    );
    var Insertion4 = (
      /*  */
      2
    );
    var Layout = (
      /*    */
      4
    );
    var Passive$1 = (
      /*   */
      8
    );
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
      for (var i = 0; i < workInProgressSources.length; i++) {
        var mutableSource = workInProgressSources[i];
        {
          mutableSource._workInProgressVersionPrimary = null;
        }
      }
      workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root3, mutableSource) {
      var getVersion = mutableSource._getVersion;
      var version = getVersion(mutableSource._source);
      if (root3.mutableSourceEagerHydrationData == null) {
        root3.mutableSourceEagerHydrationData = [mutableSource, version];
      } else {
        root3.mutableSourceEagerHydrationData.push(mutableSource, version);
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    {
      didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
    }
    var renderLanes = NoLanes;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var localIdCounter = 0;
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }
    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;
          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }
    function checkDepsAreArrayDev(deps) {
      {
        if (deps !== void 0 && deps !== null && !isArray(deps)) {
          error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
        }
      }
    }
    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName2 = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName2)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName2);
          if (hookTypesDev !== null) {
            var table2 = "";
            var secondColumnStart = 30;
            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + ". " + oldHookName;
              while (row.length < secondColumnStart) {
                row += " ";
              }
              row += newHookName + "\n";
              table2 += row;
            }
            error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName2, table2);
          }
        }
      }
    }
    function throwInvalidHookError() {
      throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
      {
        if (ignorePreviousDependencies) {
          return false;
        }
      }
      if (prevDeps === null) {
        {
          error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
        }
        return false;
      }
      {
        if (nextDeps.length !== prevDeps.length) {
          error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
        }
      }
      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (objectIs(nextDeps[i], prevDeps[i])) {
          continue;
        }
        return false;
      }
      return true;
    }
    function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
      renderLanes = nextRenderLanes;
      currentlyRenderingFiber$1 = workInProgress2;
      {
        hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
      }
      workInProgress2.memoizedState = null;
      workInProgress2.updateQueue = null;
      workInProgress2.lanes = NoLanes;
      {
        if (current2 !== null && current2.memoizedState !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, secondArg);
      if (didScheduleRenderPhaseUpdateDuringThisPass) {
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          numberOfReRenders += 1;
          {
            ignorePreviousDependencies = false;
          }
          currentHook = null;
          workInProgressHook = null;
          workInProgress2.updateQueue = null;
          {
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
          children = Component(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
      }
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      {
        workInProgress2._debugHookTypes = hookTypesDev;
      }
      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
        // and creates false positives. To make this work in legacy mode, we'd
        // need to mark fibers that commit in an incomplete state, somehow. For
        // now I'll disable the warning that most of the bugs that would trigger
        // it are either exclusive to concurrent mode or exist in both.
        (current2.mode & ConcurrentMode) !== NoMode) {
          error2("Internal React error: Expected static flag was missing. Please notify the React team.");
        }
      }
      didScheduleRenderPhaseUpdate = false;
      if (didRenderTooFewHooks) {
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      }
      return children;
    }
    function checkDidRenderIdHook() {
      var didRenderIdHook = localIdCounter !== 0;
      localIdCounter = 0;
      return didRenderIdHook;
    }
    function bailoutHooks(current2, workInProgress2, lanes) {
      workInProgress2.updateQueue = current2.updateQueue;
      if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
        workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
      } else {
        workInProgress2.flags &= ~(Passive | Update);
      }
      current2.lanes = removeLanes(current2.lanes, lanes);
    }
    function resetHooksAfterThrow() {
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      if (didScheduleRenderPhaseUpdate) {
        var hook = currentlyRenderingFiber$1.memoizedState;
        while (hook !== null) {
          var queue = hook.queue;
          if (queue !== null) {
            queue.pending = null;
          }
          hook = hook.next;
        }
        didScheduleRenderPhaseUpdate = false;
      }
      renderLanes = NoLanes;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      workInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
      }
      didScheduleRenderPhaseUpdateDuringThisPass = false;
      localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      if (workInProgressHook === null) {
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
      } else {
        workInProgressHook = workInProgressHook.next = hook;
      }
      return workInProgressHook;
    }
    function updateWorkInProgressHook() {
      var nextCurrentHook;
      if (currentHook === null) {
        var current2 = currentlyRenderingFiber$1.alternate;
        if (current2 !== null) {
          nextCurrentHook = current2.memoizedState;
        } else {
          nextCurrentHook = null;
        }
      } else {
        nextCurrentHook = currentHook.next;
      }
      var nextWorkInProgressHook;
      if (workInProgressHook === null) {
        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
      } else {
        nextWorkInProgressHook = workInProgressHook.next;
      }
      if (nextWorkInProgressHook !== null) {
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
      } else {
        if (nextCurrentHook === null) {
          throw new Error("Rendered more hooks than during the previous render.");
        }
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          baseQueue: currentHook.baseQueue,
          queue: currentHook.queue,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
        } else {
          workInProgressHook = workInProgressHook.next = newHook;
        }
      }
      return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function mountReducer(reducer2, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState;
      if (init !== void 0) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: reducer2,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch2];
    }
    function updateReducer(reducer2, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer2;
      var current2 = currentHook;
      var baseQueue = current2.baseQueue;
      var pendingQueue = queue.pending;
      if (pendingQueue !== null) {
        if (baseQueue !== null) {
          var baseFirst = baseQueue.next;
          var pendingFirst = pendingQueue.next;
          baseQueue.next = pendingFirst;
          pendingQueue.next = baseFirst;
        }
        {
          if (current2.baseQueue !== baseQueue) {
            error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
          }
        }
        current2.baseQueue = baseQueue = pendingQueue;
        queue.pending = null;
      }
      if (baseQueue !== null) {
        var first = baseQueue.next;
        var newState = current2.baseState;
        var newBaseState = null;
        var newBaseQueueFirst = null;
        var newBaseQueueLast = null;
        var update = first;
        do {
          var updateLane = update.lane;
          if (!isSubsetOfLanes(renderLanes, updateLane)) {
            var clone = {
              lane: updateLane,
              action: update.action,
              hasEagerState: update.hasEagerState,
              eagerState: update.eagerState,
              next: null
            };
            if (newBaseQueueLast === null) {
              newBaseQueueFirst = newBaseQueueLast = clone;
              newBaseState = newState;
            } else {
              newBaseQueueLast = newBaseQueueLast.next = clone;
            }
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
            markSkippedUpdateLanes(updateLane);
          } else {
            if (newBaseQueueLast !== null) {
              var _clone = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: NoLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              newBaseQueueLast = newBaseQueueLast.next = _clone;
            }
            if (update.hasEagerState) {
              newState = update.eagerState;
            } else {
              var action = update.action;
              newState = reducer2(newState, action);
            }
          }
          update = update.next;
        } while (update !== null && update !== first);
        if (newBaseQueueLast === null) {
          newBaseState = newState;
        } else {
          newBaseQueueLast.next = newBaseQueueFirst;
        }
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        hook.baseState = newBaseState;
        hook.baseQueue = newBaseQueueLast;
        queue.lastRenderedState = newState;
      }
      var lastInterleaved = queue.interleaved;
      if (lastInterleaved !== null) {
        var interleaved = lastInterleaved;
        do {
          var interleavedLane = interleaved.lane;
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
          markSkippedUpdateLanes(interleavedLane);
          interleaved = interleaved.next;
        } while (interleaved !== lastInterleaved);
      } else if (baseQueue === null) {
        queue.lanes = NoLanes;
      }
      var dispatch2 = queue.dispatch;
      return [hook.memoizedState, dispatch2];
    }
    function rerenderReducer(reducer2, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      if (queue === null) {
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      }
      queue.lastRenderedReducer = reducer2;
      var dispatch2 = queue.dispatch;
      var lastRenderPhaseUpdate = queue.pending;
      var newState = hook.memoizedState;
      if (lastRenderPhaseUpdate !== null) {
        queue.pending = null;
        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
        var update = firstRenderPhaseUpdate;
        do {
          var action = update.action;
          newState = reducer2(newState, action);
          update = update.next;
        } while (update !== firstRenderPhaseUpdate);
        if (!objectIs(newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = newState;
        if (hook.baseQueue === null) {
          hook.baseState = newState;
        }
        queue.lastRenderedState = newState;
      }
      return [newState, dispatch2];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
      {
        return void 0;
      }
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = mountWorkInProgressHook();
      var nextSnapshot;
      var isHydrating2 = getIsHydrating();
      if (isHydrating2) {
        if (getServerSnapshot === void 0) {
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        }
        nextSnapshot = getServerSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            if (nextSnapshot !== getServerSnapshot()) {
              error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
      } else {
        nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error2("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var root3 = getWorkInProgressRoot();
        if (root3 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root3, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      hook.memoizedState = nextSnapshot;
      var inst = {
        value: nextSnapshot,
        getSnapshot
      };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      fiber.flags |= Passive;
      pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
      return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber$1;
      var hook = updateWorkInProgressHook();
      var nextSnapshot = getSnapshot();
      {
        if (!didWarnUncachedGetSnapshot) {
          var cachedSnapshot = getSnapshot();
          if (!objectIs(nextSnapshot, cachedSnapshot)) {
            error2("The result of getSnapshot should be cached to avoid an infinite loop");
            didWarnUncachedGetSnapshot = true;
          }
        }
      }
      var prevSnapshot = hook.memoizedState;
      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
      if (snapshotChanged) {
        hook.memoizedState = nextSnapshot;
        markWorkInProgressReceivedUpdate();
      }
      var inst = hook.queue;
      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
      if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
        var root3 = getWorkInProgressRoot();
        if (root3 === null) {
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        }
        if (!includesBlockingLane(root3, renderLanes)) {
          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
      }
      return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
      fiber.flags |= StoreConsistency;
      var check = {
        getSnapshot,
        value: renderedSnapshot
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.stores = [check];
      } else {
        var stores = componentUpdateQueue.stores;
        if (stores === null) {
          componentUpdateQueue.stores = [check];
        } else {
          stores.push(check);
        }
      }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
      inst.value = nextSnapshot;
      inst.getSnapshot = getSnapshot;
      if (checkIfSnapshotChanged(inst)) {
        forceStoreRerender(fiber);
      }
    }
    function subscribeToStore(fiber, inst, subscribe) {
      var handleStoreChange = function() {
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      };
      return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
      var latestGetSnapshot = inst.getSnapshot;
      var prevValue = inst.value;
      try {
        var nextValue = latestGetSnapshot();
        return !objectIs(prevValue, nextValue);
      } catch (error3) {
        return true;
      }
    }
    function forceStoreRerender(fiber) {
      var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
      if (root3 !== null) {
        scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
      }
    }
    function mountState(initialState) {
      var hook = mountWorkInProgressHook();
      if (typeof initialState === "function") {
        initialState = initialState();
      }
      hook.memoizedState = hook.baseState = initialState;
      var queue = {
        pending: null,
        interleaved: null,
        lanes: NoLanes,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      hook.queue = queue;
      var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch2];
    }
    function updateState(initialState) {
      return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
      return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create2, destroy, deps) {
      var effect = {
        tag,
        create: create2,
        destroy,
        deps,
        // Circular
        next: null
      };
      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var lastEffect = componentUpdateQueue.lastEffect;
        if (lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = lastEffect.next;
          lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }
      return effect;
    }
    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      {
        var _ref2 = {
          current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
      }
    }
    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var destroy = void 0;
      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;
        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
            return;
          }
        }
      }
      currentlyRenderingFiber$1.flags |= fiberFlags;
      hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
    }
    function mountEffect(create2, deps) {
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
      } else {
        return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
      }
    }
    function updateEffect(create2, deps) {
      return updateEffectImpl(Passive, Passive$1, create2, deps);
    }
    function mountInsertionEffect(create2, deps) {
      return mountEffectImpl(Update, Insertion4, create2, deps);
    }
    function updateInsertionEffect(create2, deps) {
      return updateEffectImpl(Update, Insertion4, create2, deps);
    }
    function mountLayoutEffect(create2, deps) {
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, create2, deps);
    }
    function updateLayoutEffect(create2, deps) {
      return updateEffectImpl(Update, Layout, create2, deps);
    }
    function imperativeHandleEffect(create2, ref) {
      if (typeof ref === "function") {
        var refCallback = ref;
        var _inst = create2();
        refCallback(_inst);
        return function() {
          refCallback(null);
        };
      } else if (ref !== null && ref !== void 0) {
        var refObject = ref;
        {
          if (!refObject.hasOwnProperty("current")) {
            error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
          }
        }
        var _inst2 = create2();
        refObject.current = _inst2;
        return function() {
          refObject.current = null;
        };
      }
    }
    function mountImperativeHandle(ref, create2, deps) {
      {
        if (typeof create2 !== "function") {
          error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      var fiberFlags = Update;
      {
        fiberFlags |= LayoutStatic;
      }
      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
        fiberFlags |= MountLayoutDev;
      }
      return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create2, deps) {
      {
        if (typeof create2 !== "function") {
          error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
        }
      }
      var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }
    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === void 0 ? null : deps;
      var prevState = hook.memoizedState;
      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];
          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }
    function mountDeferredValue(value) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = value;
      return value;
    }
    function updateDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      var resolvedCurrentHook = currentHook;
      var prevValue = resolvedCurrentHook.memoizedState;
      return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
      var hook = updateWorkInProgressHook();
      if (currentHook === null) {
        hook.memoizedState = value;
        return value;
      } else {
        var prevValue = currentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
      var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
      if (shouldDeferValue) {
        if (!objectIs(value, prevValue)) {
          var deferredLane = claimNextTransitionLane();
          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
          markSkippedUpdateLanes(deferredLane);
          hook.baseState = true;
        }
        return prevValue;
      } else {
        if (hook.baseState) {
          hook.baseState = false;
          markWorkInProgressReceivedUpdate();
        }
        hook.memoizedState = value;
        return value;
      }
    }
    function startTransition(setPending, callback, options2) {
      var previousPriority = getCurrentUpdatePriority();
      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
      setPending(true);
      var prevTransition = ReactCurrentBatchConfig$2.transition;
      ReactCurrentBatchConfig$2.transition = {};
      var currentTransition = ReactCurrentBatchConfig$2.transition;
      {
        ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
      }
      try {
        setPending(false);
        callback();
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$2.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    function mountTransition() {
      var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
      var start = startTransition.bind(null, setPending);
      var hook = mountWorkInProgressHook();
      hook.memoizedState = start;
      return [isPending, start];
    }
    function updateTransition() {
      var _updateState = updateState(), isPending = _updateState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    function rerenderTransition() {
      var _rerenderState = rerenderState(), isPending = _rerenderState[0];
      var hook = updateWorkInProgressHook();
      var start = hook.memoizedState;
      return [isPending, start];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
      {
        return isUpdatingOpaqueValueInRenderPhase;
      }
    }
    function mountId() {
      var hook = mountWorkInProgressHook();
      var root3 = getWorkInProgressRoot();
      var identifierPrefix = root3.identifierPrefix;
      var id;
      if (getIsHydrating()) {
        var treeId = getTreeId();
        id = ":" + identifierPrefix + "R" + treeId;
        var localId = localIdCounter++;
        if (localId > 0) {
          id += "H" + localId.toString(32);
        }
        id += ":";
      } else {
        var globalClientId = globalClientIdCounter++;
        id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
      }
      hook.memoizedState = id;
      return id;
    }
    function updateId() {
      var hook = updateWorkInProgressHook();
      var id = hook.memoizedState;
      return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root3 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitionUpdate(root3, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
      {
        if (typeof arguments[3] === "function") {
          error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        }
      }
      var lane = requestUpdateLane(fiber);
      var update = {
        lane,
        action,
        hasEagerState: false,
        eagerState: null,
        next: null
      };
      if (isRenderPhaseUpdate(fiber)) {
        enqueueRenderPhaseUpdate(queue, update);
      } else {
        var alternate = fiber.alternate;
        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
          var lastRenderedReducer = queue.lastRenderedReducer;
          if (lastRenderedReducer !== null) {
            var prevDispatcher;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }
            try {
              var currentState = queue.lastRenderedState;
              var eagerState = lastRenderedReducer(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState)) {
                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                return;
              }
            } catch (error3) {
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }
        var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
        if (root3 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitionUpdate(root3, queue, lane);
        }
      }
      markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
      var alternate = fiber.alternate;
      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
      var pending = queue.pending;
      if (pending === null) {
        update.next = update;
      } else {
        update.next = pending.next;
        pending.next = update;
      }
      queue.pending = update;
    }
    function entangleTransitionUpdate(root3, queue, lane) {
      if (isTransitionLane(lane)) {
        var queueLanes = queue.lanes;
        queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
        var newQueueLanes = mergeLanes(queueLanes, lane);
        queue.lanes = newQueueLanes;
        markRootEntangled(root3, newQueueLanes);
      }
    }
    function markUpdateInDevTools(fiber, lane, action) {
      {
        markStateUpdateScheduled(fiber, lane);
      }
    }
    var ContextOnlyDispatcher = {
      readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useInsertionEffect: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError,
      useDeferredValue: throwInvalidHookError,
      useTransition: throwInvalidHookError,
      useMutableSource: throwInvalidHookError,
      useSyncExternalStore: throwInvalidHookError,
      useId: throwInvalidHookError,
      unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    {
      var warnInvalidContextAccess = function() {
        error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      };
      var warnInvalidHookAccess = function() {
        error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          mountHookTypesDev();
          checkDepsAreArrayDev(deps);
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
      InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
          warnInvalidContextAccess();
          return readContext(context);
        },
        useCallback: function(callback, deps) {
          currentHookNameInDev = "useCallback";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function(context) {
          currentHookNameInDev = "useContext";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context);
        },
        useEffect: function(create2, deps) {
          currentHookNameInDev = "useEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create2, deps);
        },
        useImperativeHandle: function(ref, create2, deps) {
          currentHookNameInDev = "useImperativeHandle";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create2, deps);
        },
        useInsertionEffect: function(create2, deps) {
          currentHookNameInDev = "useInsertionEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateInsertionEffect(create2, deps);
        },
        useLayoutEffect: function(create2, deps) {
          currentHookNameInDev = "useLayoutEffect";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create2, deps);
        },
        useMemo: function(create2, deps) {
          currentHookNameInDev = "useMemo";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return updateMemo(create2, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function(reducer2, initialArg, init) {
          currentHookNameInDev = "useReducer";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderReducer(reducer2, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function(initialValue) {
          currentHookNameInDev = "useRef";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef();
        },
        useState: function(initialState) {
          currentHookNameInDev = "useState";
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
          try {
            return rerenderState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function(value, formatterFn) {
          currentHookNameInDev = "useDebugValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue();
        },
        useDeferredValue: function(value) {
          currentHookNameInDev = "useDeferredValue";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderDeferredValue(value);
        },
        useTransition: function() {
          currentHookNameInDev = "useTransition";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
          currentHookNameInDev = "useMutableSource";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          currentHookNameInDev = "useSyncExternalStore";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
          currentHookNameInDev = "useId";
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
      };
    }
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
      return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
      {
        nestedUpdateScheduled = true;
      }
    }
    function resetNestedUpdateFlag() {
      {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
      }
    }
    function syncNestedUpdateFlag() {
      {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
      }
    }
    function getCommitTime() {
      return commitTime;
    }
    function recordCommitTime() {
      commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
      profilerStartTime = now$1();
      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = now$1();
      }
    }
    function stopProfilerTimerIfRunning(fiber) {
      profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (profilerStartTime >= 0) {
        var elapsedTime = now$1() - profilerStartTime;
        fiber.actualDuration += elapsedTime;
        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }
        profilerStartTime = -1;
      }
    }
    function recordLayoutEffectDuration(fiber) {
      if (layoutEffectStartTime >= 0) {
        var elapsedTime = now$1() - layoutEffectStartTime;
        layoutEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root3 = parentFiber.stateNode;
              root3.effectDuration += elapsedTime;
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              parentStateNode.effectDuration += elapsedTime;
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function recordPassiveEffectDuration(fiber) {
      if (passiveEffectStartTime >= 0) {
        var elapsedTime = now$1() - passiveEffectStartTime;
        passiveEffectStartTime = -1;
        var parentFiber = fiber.return;
        while (parentFiber !== null) {
          switch (parentFiber.tag) {
            case HostRoot:
              var root3 = parentFiber.stateNode;
              if (root3 !== null) {
                root3.passiveEffectDuration += elapsedTime;
              }
              return;
            case Profiler:
              var parentStateNode = parentFiber.stateNode;
              if (parentStateNode !== null) {
                parentStateNode.passiveEffectDuration += elapsedTime;
              }
              return;
          }
          parentFiber = parentFiber.return;
        }
      }
    }
    function startLayoutEffectTimer() {
      layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
      passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
      var child = fiber.child;
      while (child) {
        fiber.actualDuration += child.actualDuration;
        child = child.sibling;
      }
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        var props = assign2({}, baseProps);
        var defaultProps2 = Component.defaultProps;
        for (var propName in defaultProps2) {
          if (props[propName] === void 0) {
            props[propName] = defaultProps2[propName];
          }
        }
        return props;
      }
      return baseProps;
    }
    var fakeInternalInstance = {};
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    var didWarnAboutLegacyContext$1;
    {
      didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
      didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
      didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
      didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
      didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
      didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
      var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
      warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === "function") {
          return;
        }
        var key = callerName + "_" + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      };
      warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === void 0) {
          var componentName2 = getComponentNameFromType(type) || "Component";
          if (!didWarnAboutUndefinedDerivedState.has(componentName2)) {
            didWarnAboutUndefinedDerivedState.add(componentName2);
            error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName2);
          }
        }
      };
      Object.defineProperty(fakeInternalInstance, "_processChildContext", {
        enumerable: false,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      });
      Object.freeze(fakeInternalInstance);
    }
    function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress2.memoizedState;
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            partialState = getDerivedStateFromProps(nextProps, prevState);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
      }
      var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
      workInProgress2.memoizedState = memoizedState;
      if (workInProgress2.lanes === NoLanes) {
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = memoizedState;
      }
    }
    var classComponentUpdater = {
      isMounted,
      enqueueSetState: function(inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "setState");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueReplaceState: function(inst, payload, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ReplaceState;
        update.payload = payload;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "replaceState");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markStateUpdateScheduled(fiber, lane);
        }
      },
      enqueueForceUpdate: function(inst, callback) {
        var fiber = get(inst);
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = createUpdate(eventTime, lane);
        update.tag = ForceUpdate;
        if (callback !== void 0 && callback !== null) {
          {
            warnOnInvalidCallback(callback, "forceUpdate");
          }
          update.callback = callback;
        }
        var root3 = enqueueUpdate(fiber, update, lane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
          entangleTransitions(root3, fiber, lane);
        }
        {
          markForceUpdateScheduled(fiber, lane);
        }
      }
    };
    function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance2 = workInProgress2.stateNode;
      if (typeof instance2.shouldComponentUpdate === "function") {
        var shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              shouldUpdate = instance2.shouldComponentUpdate(newProps, newState, nextContext);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          if (shouldUpdate === void 0) {
            error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
          }
        }
        return shouldUpdate;
      }
      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }
      return true;
    }
    function checkClassInstance(workInProgress2, ctor, newProps) {
      var instance2 = workInProgress2.stateNode;
      {
        var name = getComponentNameFromType(ctor) || "Component";
        var renderPresent = instance2.render;
        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === "function") {
            error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
          } else {
            error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
          }
        }
        if (instance2.getInitialState && !instance2.getInitialState.isReactClassApproved && !instance2.state) {
          error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        }
        if (instance2.getDefaultProps && !instance2.getDefaultProps.isReactClassApproved) {
          error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        }
        if (instance2.propTypes) {
          error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        }
        if (instance2.contextType) {
          error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        }
        {
          if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
          // this one.
          (workInProgress2.mode & StrictLegacyMode) === NoMode) {
            didWarnAboutLegacyContext$1.add(ctor);
            error2("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
          }
          if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
          // this one.
          (workInProgress2.mode & StrictLegacyMode) === NoMode) {
            didWarnAboutLegacyContext$1.add(ctor);
            error2("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
          }
          if (instance2.contextTypes) {
            error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
          }
          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
          }
        }
        if (typeof instance2.componentShouldUpdate === "function") {
          error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance2.shouldComponentUpdate !== "undefined") {
          error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
        }
        if (typeof instance2.componentDidUnmount === "function") {
          error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        }
        if (typeof instance2.componentDidReceiveProps === "function") {
          error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        }
        if (typeof instance2.componentWillRecieveProps === "function") {
          error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        }
        if (typeof instance2.UNSAFE_componentWillRecieveProps === "function") {
          error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        }
        var hasMutatedProps = instance2.props !== newProps;
        if (instance2.props !== void 0 && hasMutatedProps) {
          error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        }
        if (instance2.defaultProps) {
          error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function" && typeof instance2.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance2.getDerivedStateFromProps === "function") {
          error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof instance2.getDerivedStateFromError === "function") {
          error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        }
        if (typeof ctor.getSnapshotBeforeUpdate === "function") {
          error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        }
        var _state = instance2.state;
        if (_state && (typeof _state !== "object" || isArray(_state))) {
          error2("%s.state: must be set to an object or null", name);
        }
        if (typeof instance2.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
          error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
        }
      }
    }
    function adoptClassInstance(workInProgress2, instance2) {
      instance2.updater = classComponentUpdater;
      workInProgress2.stateNode = instance2;
      set2(instance2, workInProgress2);
      {
        instance2._reactInternalInstance = fakeInternalInstance;
      }
    }
    function constructClassInstance(workInProgress2, ctor, props) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = emptyContextObject;
      var contextType = ctor.contextType;
      {
        if ("contextType" in ctor) {
          var isValid = (
            // Allow null for conditional declaration
            contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
          );
          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = "";
            if (contextType === void 0) {
              addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
            } else if (typeof contextType !== "object") {
              addendum = " However, it is set to a " + typeof contextType + ".";
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = " Did you accidentally pass the Context.Provider instead?";
            } else if (contextType._context !== void 0) {
              addendum = " Did you accidentally pass the Context.Consumer instead?";
            } else {
              addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            }
            error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
          }
        }
      }
      if (typeof contextType === "object" && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
      }
      var instance2 = new ctor(props, context);
      {
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            instance2 = new ctor(props, context);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      }
      var state = workInProgress2.memoizedState = instance2.state !== null && instance2.state !== void 0 ? instance2.state : null;
      adoptClassInstance(workInProgress2, instance2);
      {
        if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
          var componentName2 = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutUninitializedState.has(componentName2)) {
            didWarnAboutUninitializedState.add(componentName2);
            error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName2, instance2.state === null ? "null" : "undefined", componentName2);
          }
        }
        if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function") {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;
          if (typeof instance2.componentWillMount === "function" && instance2.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = "componentWillMount";
          } else if (typeof instance2.UNSAFE_componentWillMount === "function") {
            foundWillMountName = "UNSAFE_componentWillMount";
          }
          if (typeof instance2.componentWillReceiveProps === "function" && instance2.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = "componentWillReceiveProps";
          } else if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
            foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
          }
          if (typeof instance2.componentWillUpdate === "function" && instance2.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = "componentWillUpdate";
          } else if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
            foundWillUpdateName = "UNSAFE_componentWillUpdate";
          }
          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentNameFromType(ctor) || "Component";
            var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
            }
          }
        }
      }
      if (isLegacyContextConsumer) {
        cacheContext(workInProgress2, unmaskedContext, context);
      }
      return instance2;
    }
    function callComponentWillMount(workInProgress2, instance2) {
      var oldState = instance2.state;
      if (typeof instance2.componentWillMount === "function") {
        instance2.componentWillMount();
      }
      if (typeof instance2.UNSAFE_componentWillMount === "function") {
        instance2.UNSAFE_componentWillMount();
      }
      if (oldState !== instance2.state) {
        {
          error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
        }
        classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
      }
    }
    function callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext) {
      var oldState = instance2.state;
      if (typeof instance2.componentWillReceiveProps === "function") {
        instance2.componentWillReceiveProps(newProps, nextContext);
      }
      if (typeof instance2.UNSAFE_componentWillReceiveProps === "function") {
        instance2.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }
      if (instance2.state !== oldState) {
        {
          var componentName2 = getComponentNameFromFiber(workInProgress2) || "Component";
          if (!didWarnAboutStateAssignmentForComponent.has(componentName2)) {
            didWarnAboutStateAssignmentForComponent.add(componentName2);
            error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName2);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance2, instance2.state, null);
      }
    }
    function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      {
        checkClassInstance(workInProgress2, ctor, newProps);
      }
      var instance2 = workInProgress2.stateNode;
      instance2.props = newProps;
      instance2.state = workInProgress2.memoizedState;
      instance2.refs = {};
      initializeUpdateQueue(workInProgress2);
      var contextType = ctor.contextType;
      if (typeof contextType === "object" && contextType !== null) {
        instance2.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        instance2.context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      {
        if (instance2.state === newProps) {
          var componentName2 = getComponentNameFromType(ctor) || "Component";
          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName2)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName2);
            error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName2);
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance2);
        }
        {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance2);
        }
      }
      instance2.state = workInProgress2.memoizedState;
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        instance2.state = workInProgress2.memoizedState;
      }
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance2.getSnapshotBeforeUpdate !== "function" && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
        callComponentWillMount(workInProgress2, instance2);
        processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
        instance2.state = workInProgress2.memoizedState;
      }
      if (typeof instance2.componentDidMount === "function") {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        workInProgress2.flags |= fiberFlags;
      }
    }
    function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
      var instance2 = workInProgress2.stateNode;
      var oldProps = workInProgress2.memoizedProps;
      instance2.props = oldProps;
      var oldContext = instance2.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance2.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        if (typeof instance2.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillMount === "function" || typeof instance2.componentWillMount === "function")) {
          if (typeof instance2.componentWillMount === "function") {
            instance2.componentWillMount();
          }
          if (typeof instance2.UNSAFE_componentWillMount === "function") {
            instance2.UNSAFE_componentWillMount();
          }
        }
        if (typeof instance2.componentDidMount === "function") {
          var _fiberFlags = Update;
          {
            _fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags;
        }
      } else {
        if (typeof instance2.componentDidMount === "function") {
          var _fiberFlags2 = Update;
          {
            _fiberFlags2 |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            _fiberFlags2 |= MountLayoutDev;
          }
          workInProgress2.flags |= _fiberFlags2;
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance2.props = newProps;
      instance2.state = newState;
      instance2.context = nextContext;
      return shouldUpdate;
    }
    function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
      var instance2 = workInProgress2.stateNode;
      cloneUpdateQueue(current2, workInProgress2);
      var unresolvedOldProps = workInProgress2.memoizedProps;
      var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
      instance2.props = oldProps;
      var unresolvedNewProps = workInProgress2.pendingProps;
      var oldContext = instance2.context;
      var contextType = ctor.contextType;
      var nextContext = emptyContextObject;
      if (typeof contextType === "object" && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
        nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
      }
      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance2.getSnapshotBeforeUpdate === "function";
      if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillReceiveProps === "function" || typeof instance2.componentWillReceiveProps === "function")) {
        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress2, instance2, newProps, nextContext);
        }
      }
      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress2.memoizedState;
      var newState = instance2.state = oldState;
      processUpdateQueue(workInProgress2, newProps, instance2, renderLanes2);
      newState = workInProgress2.memoizedState;
      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
        if (typeof instance2.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        return false;
      }
      if (typeof getDerivedStateFromProps === "function") {
        applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress2.memoizedState;
      }
      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      enableLazyContextPropagation;
      if (shouldUpdate) {
        if (!hasNewLifecycles && (typeof instance2.UNSAFE_componentWillUpdate === "function" || typeof instance2.componentWillUpdate === "function")) {
          if (typeof instance2.componentWillUpdate === "function") {
            instance2.componentWillUpdate(newProps, newState, nextContext);
          }
          if (typeof instance2.UNSAFE_componentWillUpdate === "function") {
            instance2.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }
        }
        if (typeof instance2.componentDidUpdate === "function") {
          workInProgress2.flags |= Update;
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          workInProgress2.flags |= Snapshot;
        }
      } else {
        if (typeof instance2.componentDidUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Update;
          }
        }
        if (typeof instance2.getSnapshotBeforeUpdate === "function") {
          if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
            workInProgress2.flags |= Snapshot;
          }
        }
        workInProgress2.memoizedProps = newProps;
        workInProgress2.memoizedState = newState;
      }
      instance2.props = newProps;
      instance2.state = newState;
      instance2.context = nextContext;
      return shouldUpdate;
    }
    function createCapturedValueAtFiber(value, source) {
      return {
        value,
        source,
        stack: getStackByFiberInDevAndProd(source),
        digest: null
      };
    }
    function createCapturedValue(value, digest, stack) {
      return {
        value,
        source: null,
        stack: stack != null ? stack : null,
        digest: digest != null ? digest : null
      };
    }
    function showErrorDialog(boundary, errorInfo) {
      return true;
    }
    function logCapturedError(boundary, errorInfo) {
      try {
        var logError2 = showErrorDialog(boundary, errorInfo);
        if (logError2 === false) {
          return;
        }
        var error3 = errorInfo.value;
        if (true) {
          var source = errorInfo.source;
          var stack = errorInfo.stack;
          var componentStack = stack !== null ? stack : "";
          if (error3 != null && error3._suppressLogging) {
            if (boundary.tag === ClassComponent) {
              return;
            }
            console["error"](error3);
          }
          var componentName2 = source ? getComponentNameFromFiber(source) : null;
          var componentNameMessage = componentName2 ? "The above error occurred in the <" + componentName2 + "> component:" : "The above error occurred in one of your React components:";
          var errorBoundaryMessage;
          if (boundary.tag === HostRoot) {
            errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
          } else {
            var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
            errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
          }
          var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
          console["error"](combinedMessage);
        }
      } catch (e) {
        setTimeout(function() {
          throw e;
        });
      }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      update.payload = {
        element: null
      };
      var error3 = errorInfo.value;
      update.callback = function() {
        onUncaughtError(error3);
        logCapturedError(fiber, errorInfo);
      };
      return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
      var update = createUpdate(NoTimestamp, lane);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
      if (typeof getDerivedStateFromError === "function") {
        var error$1 = errorInfo.value;
        update.payload = function() {
          return getDerivedStateFromError(error$1);
        };
        update.callback = function() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
        };
      }
      var inst = fiber.stateNode;
      if (inst !== null && typeof inst.componentDidCatch === "function") {
        update.callback = function callback() {
          {
            markFailedErrorBoundaryForHotReloading(fiber);
          }
          logCapturedError(fiber, errorInfo);
          if (typeof getDerivedStateFromError !== "function") {
            markLegacyErrorBoundaryAsFailed(this);
          }
          var error$12 = errorInfo.value;
          var stack = errorInfo.stack;
          this.componentDidCatch(error$12, {
            componentStack: stack !== null ? stack : ""
          });
          {
            if (typeof getDerivedStateFromError !== "function") {
              if (!includesSomeLane(fiber.lanes, SyncLane)) {
                error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
              }
            }
          }
        };
      }
      return update;
    }
    function attachPingListener(root3, wakeable, lanes) {
      var pingCache = root3.pingCache;
      var threadIDs;
      if (pingCache === null) {
        pingCache = root3.pingCache = new PossiblyWeakMap$1();
        threadIDs = /* @__PURE__ */ new Set();
        pingCache.set(wakeable, threadIDs);
      } else {
        threadIDs = pingCache.get(wakeable);
        if (threadIDs === void 0) {
          threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        }
      }
      if (!threadIDs.has(lanes)) {
        threadIDs.add(lanes);
        var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root3, lanes);
          }
        }
        wakeable.then(ping, ping);
      }
    }
    function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
      var wakeables = suspenseBoundary.updateQueue;
      if (wakeables === null) {
        var updateQueue = /* @__PURE__ */ new Set();
        updateQueue.add(wakeable);
        suspenseBoundary.updateQueue = updateQueue;
      } else {
        wakeables.add(wakeable);
      }
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
      var tag = sourceFiber.tag;
      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
        var currentSource = sourceFiber.alternate;
        if (currentSource) {
          sourceFiber.updateQueue = currentSource.updateQueue;
          sourceFiber.memoizedState = currentSource.memoizedState;
          sourceFiber.lanes = currentSource.lanes;
        } else {
          sourceFiber.updateQueue = null;
          sourceFiber.memoizedState = null;
        }
      }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
      var node2 = returnFiber;
      do {
        if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
          return node2;
        }
        node2 = node2.return;
      } while (node2 !== null);
      return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
        if (suspenseBoundary === returnFiber) {
          suspenseBoundary.flags |= ShouldCapture;
        } else {
          suspenseBoundary.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense;
          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;
            if (currentSourceFiber === null) {
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update, SyncLane);
            }
          }
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
        }
        return suspenseBoundary;
      }
      suspenseBoundary.flags |= ShouldCapture;
      suspenseBoundary.lanes = rootRenderLanes;
      return suspenseBoundary;
    }
    function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
      sourceFiber.flags |= Incomplete;
      {
        if (isDevToolsPresent) {
          restorePendingUpdaters(root3, rootRenderLanes);
        }
      }
      if (value !== null && typeof value === "object" && typeof value.then === "function") {
        var wakeable = value;
        resetSuspendedComponent(sourceFiber);
        {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
          }
        }
        var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
        if (suspenseBoundary !== null) {
          suspenseBoundary.flags &= ~ForceClientRender;
          markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
          if (suspenseBoundary.mode & ConcurrentMode) {
            attachPingListener(root3, wakeable, rootRenderLanes);
          }
          attachRetryListener(suspenseBoundary, root3, wakeable);
          return;
        } else {
          if (!includesSyncLane(rootRenderLanes)) {
            attachPingListener(root3, wakeable, rootRenderLanes);
            renderDidSuspendDelayIfPossible();
            return;
          }
          var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          value = uncaughtSuspenseError;
        }
      } else {
        if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
          markDidThrowWhileHydratingDEV();
          var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (_suspenseBoundary !== null) {
            if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
              _suspenseBoundary.flags |= ForceClientRender;
            }
            markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
            queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
            return;
          }
        }
      }
      value = createCapturedValueAtFiber(value, sourceFiber);
      renderDidError(value);
      var workInProgress2 = returnFiber;
      do {
        switch (workInProgress2.tag) {
          case HostRoot: {
            var _errorInfo = value;
            workInProgress2.flags |= ShouldCapture;
            var lane = pickArbitraryLane(rootRenderLanes);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
            enqueueCapturedUpdate(workInProgress2, update);
            return;
          }
          case ClassComponent:
            var errorInfo = value;
            var ctor = workInProgress2.type;
            var instance2 = workInProgress2.stateNode;
            if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance2 !== null && typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2))) {
              workInProgress2.flags |= ShouldCapture;
              var _lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
              var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
              enqueueCapturedUpdate(workInProgress2, _update);
              return;
            }
            break;
        }
        workInProgress2 = workInProgress2.return;
      } while (workInProgress2 !== null);
    }
    function getSuspendedCache() {
      {
        return null;
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    var didWarnAboutDefaultPropsOnFunctionComponent;
    {
      didWarnAboutBadClass = {};
      didWarnAboutModulePatternComponent = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
      didWarnAboutRevealOrder = {};
      didWarnAboutTailOptions = {};
      didWarnAboutDefaultPropsOnFunctionComponent = {};
    }
    function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
      if (current2 === null) {
        workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
      }
    }
    function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
      workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
    }
    function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var render2 = Component.render;
      var ref = workInProgress2.ref;
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      if (current2 === null) {
        var type = Component.type;
        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === void 0) {
          var resolvedType = type;
          {
            resolvedType = resolveFunctionForHotReloading(type);
          }
          workInProgress2.tag = SimpleMemoComponent;
          workInProgress2.type = resolvedType;
          {
            validateFunctionComponentInDev(workInProgress2, type);
          }
          return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
        }
        {
          var innerPropTypes = type.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(type)
            );
          }
          if (Component.defaultProps !== void 0) {
            var componentName2 = getComponentNameFromType(type) || "Unknown";
            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName2]) {
              error2("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName2);
              didWarnAboutDefaultPropsOnFunctionComponent[componentName2] = true;
            }
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
        child.ref = workInProgress2.ref;
        child.return = workInProgress2;
        workInProgress2.child = child;
        return child;
      }
      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) {
          checkPropTypes(
            _innerPropTypes,
            nextProps,
            // Resolved props
            "prop",
            getComponentNameFromType(_type)
          );
        }
      }
      var currentChild = current2.child;
      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
      if (!hasScheduledUpdateOrContext) {
        var prevProps = currentChild.memoizedProps;
        var compare2 = Component.compare;
        compare2 = compare2 !== null ? compare2 : shallowEqual;
        if (compare2(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
      }
      workInProgress2.flags |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps);
      newChild.ref = workInProgress2.ref;
      newChild.return = workInProgress2;
      workInProgress2.child = newChild;
      return newChild;
    }
    function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var outerMemoType = workInProgress2.elementType;
          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            var lazyComponent = outerMemoType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              outerMemoType = init(payload);
            } catch (x) {
              outerMemoType = null;
            }
            var outerPropTypes = outerMemoType && outerMemoType.propTypes;
            if (outerPropTypes) {
              checkPropTypes(
                outerPropTypes,
                nextProps,
                // Resolved (SimpleMemoComponent has no defaultProps)
                "prop",
                getComponentNameFromType(outerMemoType)
              );
            }
          }
        }
      }
      if (current2 !== null) {
        var prevProps = current2.memoizedProps;
        if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
        workInProgress2.type === current2.type) {
          didReceiveUpdate = false;
          workInProgress2.pendingProps = nextProps = prevProps;
          if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
            workInProgress2.lanes = current2.lanes;
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          }
        }
      }
      return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
    }
    function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      var prevState = current2 !== null ? current2.memoizedState : null;
      if (nextProps.mode === "hidden" || enableLegacyHidden) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          var nextState = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = nextState;
          pushRenderLanes(workInProgress2, renderLanes2);
        } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
          var spawnedCachePool = null;
          var nextBaseLanes;
          if (prevState !== null) {
            var prevBaseLanes = prevState.baseLanes;
            nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
          } else {
            nextBaseLanes = renderLanes2;
          }
          workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
          var _nextState = {
            baseLanes: nextBaseLanes,
            cachePool: spawnedCachePool,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState;
          workInProgress2.updateQueue = null;
          pushRenderLanes(workInProgress2, nextBaseLanes);
          return null;
        } else {
          var _nextState2 = {
            baseLanes: NoLanes,
            cachePool: null,
            transitions: null
          };
          workInProgress2.memoizedState = _nextState2;
          var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
          pushRenderLanes(workInProgress2, subtreeRenderLanes2);
        }
      } else {
        var _subtreeRenderLanes;
        if (prevState !== null) {
          _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
          workInProgress2.memoizedState = null;
        } else {
          _subtreeRenderLanes = renderLanes2;
        }
        pushRenderLanes(workInProgress2, _subtreeRenderLanes);
      }
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateFragment(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateMode(current2, workInProgress2, renderLanes2) {
      var nextChildren = workInProgress2.pendingProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateProfiler(current2, workInProgress2, renderLanes2) {
      {
        workInProgress2.flags |= Update;
        {
          var stateNode = workInProgress2.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
      }
      var nextProps = workInProgress2.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markRef(current2, workInProgress2) {
      var ref = workInProgress2.ref;
      if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
    }
    function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      var nextChildren;
      var hasId;
      prepareToReadContext(workInProgress2, renderLanes2);
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        if (workInProgress2.mode & StrictLegacyMode) {
          setIsStrictModeForDevtools(true);
          try {
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      if (current2 !== null && !didReceiveUpdate) {
        bailoutHooks(current2, workInProgress2, renderLanes2);
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      if (getIsHydrating() && hasId) {
        pushMaterializedTreeId(workInProgress2);
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
      {
        switch (shouldError(workInProgress2)) {
          case false: {
            var _instance = workInProgress2.stateNode;
            var ctor = workInProgress2.type;
            var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
            var state = tempInstance.state;
            _instance.updater.enqueueSetState(_instance, state, null);
            break;
          }
          case true: {
            workInProgress2.flags |= DidCapture;
            workInProgress2.flags |= ShouldCapture;
            var error$1 = new Error("Simulated error coming from DevTools");
            var lane = pickArbitraryLane(renderLanes2);
            workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
            var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
            enqueueCapturedUpdate(workInProgress2, update);
            break;
          }
        }
        if (workInProgress2.type !== workInProgress2.elementType) {
          var innerPropTypes = Component.propTypes;
          if (innerPropTypes) {
            checkPropTypes(
              innerPropTypes,
              nextProps,
              // Resolved props
              "prop",
              getComponentNameFromType(Component)
            );
          }
        }
      }
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var instance2 = workInProgress2.stateNode;
      var shouldUpdate;
      if (instance2 === null) {
        resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
        constructClassInstance(workInProgress2, Component, nextProps);
        mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
        shouldUpdate = true;
      } else if (current2 === null) {
        shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      } else {
        shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
      }
      var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
      {
        var inst = workInProgress2.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
          if (!didWarnAboutReassigningProps) {
            error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
          }
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }
    function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
      markRef(current2, workInProgress2);
      var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (!shouldUpdate && !didCaptureError) {
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component, false);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      var instance2 = workInProgress2.stateNode;
      ReactCurrentOwner$1.current = workInProgress2;
      var nextChildren;
      if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
        nextChildren = null;
        {
          stopProfilerTimerIfRunning();
        }
      } else {
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          setIsRendering(true);
          nextChildren = instance2.render();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance2.render();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
      }
      workInProgress2.flags |= PerformedWork;
      if (current2 !== null && didCaptureError) {
        forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      workInProgress2.memoizedState = instance2.state;
      if (hasContext) {
        invalidateContextProvider(workInProgress2, Component, true);
      }
      return workInProgress2.child;
    }
    function pushHostRootContext(workInProgress2) {
      var root3 = workInProgress2.stateNode;
      if (root3.pendingContext) {
        pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
      } else if (root3.context) {
        pushTopLevelContextObject(workInProgress2, root3.context, false);
      }
      pushHostContainer(workInProgress2, root3.containerInfo);
    }
    function updateHostRoot(current2, workInProgress2, renderLanes2) {
      pushHostRootContext(workInProgress2);
      if (current2 === null) {
        throw new Error("Should have a current fiber. This is a bug in React.");
      }
      var nextProps = workInProgress2.pendingProps;
      var prevState = workInProgress2.memoizedState;
      var prevChildren = prevState.element;
      cloneUpdateQueue(current2, workInProgress2);
      processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
      var nextState = workInProgress2.memoizedState;
      workInProgress2.stateNode;
      var nextChildren = nextState.element;
      if (prevState.isDehydrated) {
        var overrideState = {
          element: nextChildren,
          isDehydrated: false,
          cache: nextState.cache,
          pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
          transitions: nextState.transitions
        };
        var updateQueue = workInProgress2.updateQueue;
        updateQueue.baseState = overrideState;
        workInProgress2.memoizedState = overrideState;
        if (workInProgress2.flags & ForceClientRender) {
          var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
        } else if (nextChildren !== prevChildren) {
          var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
          return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
        } else {
          enterHydrationState(workInProgress2);
          var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          workInProgress2.child = child;
          var node2 = child;
          while (node2) {
            node2.flags = node2.flags & ~Placement | Hydrating;
            node2 = node2.sibling;
          }
        }
      } else {
        resetHydrationState();
        if (nextChildren === prevChildren) {
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
      resetHydrationState();
      queueHydrationError(recoverableError);
      workInProgress2.flags |= ForceClientRender;
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostComponent(current2, workInProgress2, renderLanes2) {
      pushHostContext(workInProgress2);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      var type = workInProgress2.type;
      var nextProps = workInProgress2.pendingProps;
      var prevProps = current2 !== null ? current2.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);
      if (isDirectTextChild) {
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        workInProgress2.flags |= ContentReset;
      }
      markRef(current2, workInProgress2);
      reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      return workInProgress2.child;
    }
    function updateHostText(current2, workInProgress2) {
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
      }
      return null;
    }
    function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var lazyComponent = elementType;
      var payload = lazyComponent._payload;
      var init = lazyComponent._init;
      var Component = init(payload);
      workInProgress2.type = Component;
      var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child;
      switch (resolvedTag) {
        case FunctionComponent: {
          {
            validateFunctionComponentInDev(workInProgress2, Component);
            workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
          }
          child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ClassComponent: {
          {
            workInProgress2.type = Component = resolveClassForHotReloading(Component);
          }
          child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case ForwardRef: {
          {
            workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
          }
          child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
          return child;
        }
        case MemoComponent: {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = Component.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  resolvedProps,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          child = updateMemoComponent(
            null,
            workInProgress2,
            Component,
            resolveDefaultProps(Component.type, resolvedProps),
            // The inner type can have defaults too
            renderLanes2
          );
          return child;
        }
      }
      var hint = "";
      {
        if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
          hint = " Did you wrap a component in React.lazy() more than once?";
        }
      }
      throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      workInProgress2.tag = ClassComponent;
      var hasContext;
      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress2);
      } else {
        hasContext = false;
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      constructClassInstance(workInProgress2, Component, nextProps);
      mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
      return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
    }
    function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
      var props = workInProgress2.pendingProps;
      var context;
      {
        var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
        context = getMaskedContext(workInProgress2, unmaskedContext);
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var value;
      var hasId;
      {
        markComponentRenderStarted(workInProgress2);
      }
      {
        if (Component.prototype && typeof Component.prototype.render === "function") {
          var componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutBadClass[componentName2]) {
            error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName2, componentName2);
            didWarnAboutBadClass[componentName2] = true;
          }
        }
        if (workInProgress2.mode & StrictLegacyMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
        }
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress2;
        value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      {
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
          var _componentName = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName]) {
            error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
            didWarnAboutModulePatternComponent[_componentName] = true;
          }
        }
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
      ) {
        {
          var _componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutModulePatternComponent[_componentName2]) {
            error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
            didWarnAboutModulePatternComponent[_componentName2] = true;
          }
        }
        workInProgress2.tag = ClassComponent;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        var hasContext = false;
        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
        initializeUpdateQueue(workInProgress2);
        adoptClassInstance(workInProgress2, value);
        mountClassInstance(workInProgress2, Component, props, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
      } else {
        workInProgress2.tag = FunctionComponent;
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        reconcileChildren(null, workInProgress2, value, renderLanes2);
        {
          validateFunctionComponentInDev(workInProgress2, Component);
        }
        return workInProgress2.child;
      }
    }
    function validateFunctionComponentInDev(workInProgress2, Component) {
      {
        if (Component) {
          if (Component.childContextTypes) {
            error2("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
          }
        }
        if (workInProgress2.ref !== null) {
          var info = "";
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            info += "\n\nCheck the render method of `" + ownerName + "`.";
          }
          var warningKey = ownerName || "";
          var debugSource = workInProgress2._debugSource;
          if (debugSource) {
            warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
          }
          if (!didWarnAboutFunctionRefs[warningKey]) {
            didWarnAboutFunctionRefs[warningKey] = true;
            error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
          }
        }
        if (Component.defaultProps !== void 0) {
          var componentName2 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName2]) {
            error2("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName2);
            didWarnAboutDefaultPropsOnFunctionComponent[componentName2] = true;
          }
        }
        if (typeof Component.getDerivedStateFromProps === "function") {
          var _componentName3 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
            error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
          }
        }
        if (typeof Component.contextType === "object" && Component.contextType !== null) {
          var _componentName4 = getComponentNameFromType(Component) || "Unknown";
          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
            error2("%s: Function components do not support contextType.", _componentName4);
            didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
          }
        }
      }
    }
    var SUSPENDED_MARKER = {
      dehydrated: null,
      treeContext: null,
      retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes2) {
      return {
        baseLanes: renderLanes2,
        cachePool: getSuspendedCache(),
        transitions: null
      };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
      var cachePool = null;
      return {
        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
        cachePool,
        transitions: prevOffscreenState.transitions
      };
    }
    function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        var suspenseState = current2.memoizedState;
        if (suspenseState === null) {
          return false;
        }
      }
      return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
      return removeLanes(current2.childLanes, renderLanes2);
    }
    function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      {
        if (shouldSuspend(workInProgress2)) {
          workInProgress2.flags |= DidCapture;
        }
      }
      var suspenseContext = suspenseStackCursor.current;
      var showFallback = false;
      var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
      if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
        showFallback = true;
        workInProgress2.flags &= ~DidCapture;
      } else {
        if (current2 === null || current2.memoizedState !== null) {
          {
            suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
          }
        }
      }
      suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      pushSuspenseContext(workInProgress2, suspenseContext);
      if (current2 === null) {
        tryToClaimNextHydratableInstance(workInProgress2);
        var suspenseState = workInProgress2.memoizedState;
        if (suspenseState !== null) {
          var dehydrated = suspenseState.dehydrated;
          if (dehydrated !== null) {
            return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
          }
        }
        var nextPrimaryChildren = nextProps.children;
        var nextFallbackChildren = nextProps.fallback;
        if (showFallback) {
          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var primaryChildFragment = workInProgress2.child;
          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackFragment;
        } else {
          return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
        }
      } else {
        var prevState = current2.memoizedState;
        if (prevState !== null) {
          var _dehydrated = prevState.dehydrated;
          if (_dehydrated !== null) {
            return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
          }
        }
        if (showFallback) {
          var _nextFallbackChildren = nextProps.fallback;
          var _nextPrimaryChildren = nextProps.children;
          var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
          var _primaryChildFragment2 = workInProgress2.child;
          var prevOffscreenState = current2.child.memoizedState;
          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        } else {
          var _nextPrimaryChildren2 = nextProps.children;
          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
          workInProgress2.memoizedState = null;
          return _primaryChildFragment3;
        }
      }
    }
    function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
      primaryChildFragment.return = workInProgress2;
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var progressedPrimaryFragment = workInProgress2.child;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      var fallbackChildFragment;
      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = 0;
          primaryChildFragment.treeBaseDuration = 0;
        }
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      } else {
        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
      }
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
      return createWorkInProgress(current2, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
        mode: "visible",
        children: primaryChildren
      });
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        primaryChildFragment.lanes = renderLanes2;
      }
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = null;
      if (currentFallbackChildFragment !== null) {
        var deletions = workInProgress2.deletions;
        if (deletions === null) {
          workInProgress2.deletions = [currentFallbackChildFragment];
          workInProgress2.flags |= ChildDeletion;
        } else {
          deletions.push(currentFallbackChildFragment);
        }
      }
      workInProgress2.child = primaryChildFragment;
      return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var mode = workInProgress2.mode;
      var currentPrimaryChildFragment = current2.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
      var primaryChildProps = {
        mode: "hidden",
        children: primaryChildren
      };
      var primaryChildFragment;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress2.child !== currentPrimaryChildFragment
      ) {
        var progressedPrimaryFragment = workInProgress2.child;
        primaryChildFragment = progressedPrimaryFragment;
        primaryChildFragment.childLanes = NoLanes;
        primaryChildFragment.pendingProps = primaryChildProps;
        if (workInProgress2.mode & ProfileMode) {
          primaryChildFragment.actualDuration = 0;
          primaryChildFragment.actualStartTime = -1;
          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
        }
        workInProgress2.deletions = null;
      } else {
        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
      }
      var fallbackChildFragment;
      if (currentFallbackChildFragment !== null) {
        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
      } else {
        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
      }
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
      if (recoverableError !== null) {
        queueHydrationError(recoverableError);
      }
      reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      var nextProps = workInProgress2.pendingProps;
      var primaryChildren = nextProps.children;
      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
      primaryChildFragment.flags |= Placement;
      workInProgress2.memoizedState = null;
      return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
      var fiberMode = workInProgress2.mode;
      var primaryChildProps = {
        mode: "visible",
        children: primaryChildren
      };
      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
      fallbackChildFragment.flags |= Placement;
      primaryChildFragment.return = workInProgress2;
      fallbackChildFragment.return = workInProgress2;
      primaryChildFragment.sibling = fallbackChildFragment;
      workInProgress2.child = primaryChildFragment;
      if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
      }
      return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        {
          error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
        }
        workInProgress2.lanes = laneToLanes(SyncLane);
      } else if (isSuspenseInstanceFallback(suspenseInstance)) {
        workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
      } else {
        workInProgress2.lanes = laneToLanes(OffscreenLane);
      }
      return null;
    }
    function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
      if (!didSuspend) {
        warnIfHydrating();
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          return retrySuspenseComponentWithoutHydrating(
            current2,
            workInProgress2,
            renderLanes2,
            // TODO: When we delete legacy mode, we should make this error argument
            // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
        }
        if (isSuspenseInstanceFallback(suspenseInstance)) {
          var digest, message, stack;
          {
            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
            digest = _getSuspenseInstanceF.digest;
            message = _getSuspenseInstanceF.message;
            stack = _getSuspenseInstanceF.stack;
          }
          var error3;
          if (message) {
            error3 = new Error(message);
          } else {
            error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
          }
          var capturedValue = createCapturedValue(error3, digest, stack);
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
        }
        var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
        if (didReceiveUpdate || hasContextChanged2) {
          var root3 = getWorkInProgressRoot();
          if (root3 !== null) {
            var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
              suspenseState.retryLane = attemptHydrationAtLane;
              var eventTime = NoTimestamp;
              enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
              scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
            }
          }
          renderDidSuspendDelayIfPossible();
          var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
        } else if (isSuspenseInstancePending(suspenseInstance)) {
          workInProgress2.flags |= DidCapture;
          workInProgress2.child = current2.child;
          var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
          registerSuspenseInstanceRetry(suspenseInstance, retry);
          return null;
        } else {
          reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Hydrating;
          return primaryChildFragment;
        }
      } else {
        if (workInProgress2.flags & ForceClientRender) {
          workInProgress2.flags &= ~ForceClientRender;
          var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
          return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
        } else if (workInProgress2.memoizedState !== null) {
          workInProgress2.child = current2.child;
          workInProgress2.flags |= DidCapture;
          return null;
        } else {
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
          var _primaryChildFragment4 = workInProgress2.child;
          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
          workInProgress2.memoizedState = SUSPENDED_MARKER;
          return fallbackChildFragment;
        }
      }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
      fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
      }
      scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
      var node2 = firstChild;
      while (node2 !== null) {
        if (node2.tag === SuspenseComponent) {
          var state = node2.memoizedState;
          if (state !== null) {
            scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
          }
        } else if (node2.tag === SuspenseListComponent) {
          scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
        } else if (node2.child !== null) {
          node2.child.return = node2;
          node2 = node2.child;
          continue;
        }
        if (node2 === workInProgress2) {
          return;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === workInProgress2) {
            return;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
    }
    function findLastContentRow(firstChild) {
      var row = firstChild;
      var lastContentRow = null;
      while (row !== null) {
        var currentRow = row.alternate;
        if (currentRow !== null && findFirstSuspended(currentRow) === null) {
          lastContentRow = row;
        }
        row = row.sibling;
      }
      return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
      {
        if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
          didWarnAboutRevealOrder[revealOrder] = true;
          if (typeof revealOrder === "string") {
            switch (revealOrder.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              case "forward":
              case "backward": {
                error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                break;
              }
              default:
                error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                break;
            }
          } else {
            error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
          }
        }
      }
    }
    function validateTailOptions(tailMode, revealOrder) {
      {
        if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
          if (tailMode !== "collapsed" && tailMode !== "hidden") {
            didWarnAboutTailOptions[tailMode] = true;
            error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
          } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
            didWarnAboutTailOptions[tailMode] = true;
            error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
          }
        }
      }
    }
    function validateSuspenseListNestedChild(childSlot, index3) {
      {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
        if (isAnArray || isIterable) {
          var type = isAnArray ? "array" : "iterable";
          error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
          return false;
        }
      }
      return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
      {
        if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              if (!validateSuspenseListNestedChild(children[i], i)) {
                return;
              }
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var childrenIterator = iteratorFn.call(children);
              if (childrenIterator) {
                var step = childrenIterator.next();
                var _i2 = 0;
                for (; !step.done; step = childrenIterator.next()) {
                  if (!validateSuspenseListNestedChild(step.value, _i2)) {
                    return;
                  }
                  _i2++;
                }
              }
            } else {
              error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
          }
        }
      }
    }
    function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
      var renderState = workInProgress2.memoizedState;
      if (renderState === null) {
        workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        };
      } else {
        renderState.isBackwards = isBackwards;
        renderState.rendering = null;
        renderState.renderingStartTime = 0;
        renderState.last = lastContentRow;
        renderState.tail = tail;
        renderState.tailMode = tailMode;
      }
    }
    function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
      var nextProps = workInProgress2.pendingProps;
      var revealOrder = nextProps.revealOrder;
      var tailMode = nextProps.tail;
      var newChildren = nextProps.children;
      validateRevealOrder(revealOrder);
      validateTailOptions(tailMode, revealOrder);
      validateSuspenseListChildren(newChildren, revealOrder);
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      var suspenseContext = suspenseStackCursor.current;
      var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      if (shouldForceFallback) {
        suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
        workInProgress2.flags |= DidCapture;
      } else {
        var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
        if (didSuspendBefore) {
          propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
      }
      pushSuspenseContext(workInProgress2, suspenseContext);
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        workInProgress2.memoizedState = null;
      } else {
        switch (revealOrder) {
          case "forwards": {
            var lastContentRow = findLastContentRow(workInProgress2.child);
            var tail;
            if (lastContentRow === null) {
              tail = workInProgress2.child;
              workInProgress2.child = null;
            } else {
              tail = lastContentRow.sibling;
              lastContentRow.sibling = null;
            }
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              tail,
              lastContentRow,
              tailMode
            );
            break;
          }
          case "backwards": {
            var _tail = null;
            var row = workInProgress2.child;
            workInProgress2.child = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                workInProgress2.child = row;
                break;
              }
              var nextRow = row.sibling;
              row.sibling = _tail;
              _tail = row;
              row = nextRow;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              // isBackwards
              _tail,
              null,
              // last
              tailMode
            );
            break;
          }
          case "together": {
            initSuspenseListRenderState(
              workInProgress2,
              false,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default: {
            workInProgress2.memoizedState = null;
          }
        }
      }
      return workInProgress2.child;
    }
    function updatePortalComponent(current2, workInProgress2, renderLanes2) {
      pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
      var nextChildren = workInProgress2.pendingProps;
      if (current2 === null) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      } else {
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
      }
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current2, workInProgress2, renderLanes2) {
      var providerType = workInProgress2.type;
      var context = providerType._context;
      var newProps = workInProgress2.pendingProps;
      var oldProps = workInProgress2.memoizedProps;
      var newValue = newProps.value;
      {
        if (!("value" in newProps)) {
          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
            hasWarnedAboutUsingNoValuePropOnContextProvider = true;
            error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
          }
        }
        var providerPropTypes = workInProgress2.type.propTypes;
        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
        }
      }
      pushProvider(workInProgress2, context, newValue);
      {
        if (oldProps !== null) {
          var oldValue = oldProps.value;
          if (objectIs(oldValue, newValue)) {
            if (oldProps.children === newProps.children && !hasContextChanged()) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          } else {
            propagateContextChange(workInProgress2, context, renderLanes2);
          }
        }
      }
      var newChildren = newProps.children;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current2, workInProgress2, renderLanes2) {
      var context = workInProgress2.type;
      {
        if (context._context === void 0) {
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress2.pendingProps;
      var render2 = newProps.children;
      {
        if (typeof render2 !== "function") {
          error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        }
      }
      prepareToReadContext(workInProgress2, renderLanes2);
      var newValue = readContext(context);
      {
        markComponentRenderStarted(workInProgress2);
      }
      var newChildren;
      {
        ReactCurrentOwner$1.current = workInProgress2;
        setIsRendering(true);
        newChildren = render2(newValue);
        setIsRendering(false);
      }
      {
        markComponentRenderStopped();
      }
      workInProgress2.flags |= PerformedWork;
      reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
      return workInProgress2.child;
    }
    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
      if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
        if (current2 !== null) {
          current2.alternate = null;
          workInProgress2.alternate = null;
          workInProgress2.flags |= Placement;
        }
      }
    }
    function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
      if (current2 !== null) {
        workInProgress2.dependencies = current2.dependencies;
      }
      {
        stopProfilerTimerIfRunning();
      }
      markSkippedUpdateLanes(workInProgress2.lanes);
      if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
        {
          return null;
        }
      }
      cloneChildFibers(current2, workInProgress2);
      return workInProgress2.child;
    }
    function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
      {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) {
          throw new Error("Cannot swap the root fiber.");
        }
        current2.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        if (oldWorkInProgress === returnFiber.child) {
          returnFiber.child = newWorkInProgress;
        } else {
          var prevSibling = returnFiber.child;
          if (prevSibling === null) {
            throw new Error("Expected parent to have a child.");
          }
          while (prevSibling.sibling !== oldWorkInProgress) {
            prevSibling = prevSibling.sibling;
            if (prevSibling === null) {
              throw new Error("Expected to find the previous sibling.");
            }
          }
          prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [current2];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(current2);
        }
        newWorkInProgress.flags |= Placement;
        return newWorkInProgress;
      }
    }
    function checkScheduledUpdateOrContext(current2, renderLanes2) {
      var updateLanes = current2.lanes;
      if (includesSomeLane(updateLanes, renderLanes2)) {
        return true;
      }
      return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
      switch (workInProgress2.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress2);
          workInProgress2.stateNode;
          resetHydrationState();
          break;
        case HostComponent:
          pushHostContext(workInProgress2);
          break;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            pushContextProvider(workInProgress2);
          }
          break;
        }
        case HostPortal:
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          break;
        case ContextProvider: {
          var newValue = workInProgress2.memoizedProps.value;
          var context = workInProgress2.type._context;
          pushProvider(workInProgress2, context, newValue);
          break;
        }
        case Profiler:
          {
            var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (hasChildWork) {
              workInProgress2.flags |= Update;
            }
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          break;
        case SuspenseComponent: {
          var state = workInProgress2.memoizedState;
          if (state !== null) {
            if (state.dehydrated !== null) {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              workInProgress2.flags |= DidCapture;
              return null;
            }
            var primaryChildFragment = workInProgress2.child;
            var primaryChildLanes = primaryChildFragment.childLanes;
            if (includesSomeLane(renderLanes2, primaryChildLanes)) {
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              if (child !== null) {
                return child.sibling;
              } else {
                return null;
              }
            }
          } else {
            pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
          }
          break;
        }
        case SuspenseListComponent: {
          var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
          var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
          if (didSuspendBefore) {
            if (_hasChildWork) {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= DidCapture;
          }
          var renderState = workInProgress2.memoizedState;
          if (renderState !== null) {
            renderState.rendering = null;
            renderState.tail = null;
            renderState.lastEffect = null;
          }
          pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
          if (_hasChildWork) {
            break;
          } else {
            return null;
          }
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          workInProgress2.lanes = NoLanes;
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
    }
    function beginWork(current2, workInProgress2, renderLanes2) {
      {
        if (workInProgress2._debugNeedsRemount && current2 !== null) {
          return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
        }
      }
      if (current2 !== null) {
        var oldProps = current2.memoizedProps;
        var newProps = workInProgress2.pendingProps;
        if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
        workInProgress2.type !== current2.type) {
          didReceiveUpdate = true;
        } else {
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (workInProgress2.flags & DidCapture) === NoFlags) {
            didReceiveUpdate = false;
            return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
          }
          if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
            didReceiveUpdate = true;
          } else {
            didReceiveUpdate = false;
          }
        }
      } else {
        didReceiveUpdate = false;
        if (getIsHydrating() && isForkedChild(workInProgress2)) {
          var slotIndex = workInProgress2.index;
          var numberOfForks = getForksAtLevel();
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      workInProgress2.lanes = NoLanes;
      switch (workInProgress2.tag) {
        case IndeterminateComponent: {
          return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
        }
        case LazyComponent: {
          var elementType = workInProgress2.elementType;
          return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
        }
        case FunctionComponent: {
          var Component = workInProgress2.type;
          var unresolvedProps = workInProgress2.pendingProps;
          var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
          return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
        }
        case ClassComponent: {
          var _Component = workInProgress2.type;
          var _unresolvedProps = workInProgress2.pendingProps;
          var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
          return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
        }
        case HostRoot:
          return updateHostRoot(current2, workInProgress2, renderLanes2);
        case HostComponent:
          return updateHostComponent(current2, workInProgress2, renderLanes2);
        case HostText:
          return updateHostText(current2, workInProgress2);
        case SuspenseComponent:
          return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
        case HostPortal:
          return updatePortalComponent(current2, workInProgress2, renderLanes2);
        case ForwardRef: {
          var type = workInProgress2.type;
          var _unresolvedProps2 = workInProgress2.pendingProps;
          var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
          return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
        }
        case Fragment:
          return updateFragment(current2, workInProgress2, renderLanes2);
        case Mode:
          return updateMode(current2, workInProgress2, renderLanes2);
        case Profiler:
          return updateProfiler(current2, workInProgress2, renderLanes2);
        case ContextProvider:
          return updateContextProvider(current2, workInProgress2, renderLanes2);
        case ContextConsumer:
          return updateContextConsumer(current2, workInProgress2, renderLanes2);
        case MemoComponent: {
          var _type2 = workInProgress2.type;
          var _unresolvedProps3 = workInProgress2.pendingProps;
          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerPropTypes = _type2.propTypes;
              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  _resolvedProps3,
                  // Resolved for outer only
                  "prop",
                  getComponentNameFromType(_type2)
                );
              }
            }
          }
          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
          return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
        }
        case SimpleMemoComponent: {
          return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
        }
        case IncompleteClassComponent: {
          var _Component2 = workInProgress2.type;
          var _unresolvedProps4 = workInProgress2.pendingProps;
          var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
          return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
        }
        case SuspenseListComponent: {
          return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent: {
          return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress2) {
      workInProgress2.flags |= Update;
    }
    function markRef$1(workInProgress2) {
      workInProgress2.flags |= Ref;
      {
        workInProgress2.flags |= RefStatic;
      }
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    {
      appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
        var node2 = workInProgress2.child;
        while (node2 !== null) {
          if (node2.tag === HostComponent || node2.tag === HostText) {
            appendInitialChild(parent, node2.stateNode);
          } else if (node2.tag === HostPortal)
            ;
          else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === workInProgress2) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === workInProgress2) {
              return;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      };
      updateHostContainer = function(current2, workInProgress2) {
      };
      updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
        var oldProps = current2.memoizedProps;
        if (oldProps === newProps) {
          return;
        }
        var instance2 = workInProgress2.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance2, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress2.updateQueue = updatePayload;
        if (updatePayload) {
          markUpdate(workInProgress2);
        }
      };
      updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
        if (oldText !== newText) {
          markUpdate(workInProgress2);
        }
      };
    }
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
      if (getIsHydrating()) {
        return;
      }
      switch (renderState.tailMode) {
        case "hidden": {
          var tailNode = renderState.tail;
          var lastTailNode = null;
          while (tailNode !== null) {
            if (tailNode.alternate !== null) {
              lastTailNode = tailNode;
            }
            tailNode = tailNode.sibling;
          }
          if (lastTailNode === null) {
            renderState.tail = null;
          } else {
            lastTailNode.sibling = null;
          }
          break;
        }
        case "collapsed": {
          var _tailNode = renderState.tail;
          var _lastTailNode = null;
          while (_tailNode !== null) {
            if (_tailNode.alternate !== null) {
              _lastTailNode = _tailNode;
            }
            _tailNode = _tailNode.sibling;
          }
          if (_lastTailNode === null) {
            if (!hasRenderedATailFallback && renderState.tail !== null) {
              renderState.tail.sibling = null;
            } else {
              renderState.tail = null;
            }
          } else {
            _lastTailNode.sibling = null;
          }
          break;
        }
      }
    }
    function bubbleProperties(completedWork) {
      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
      var newChildLanes = NoLanes;
      var subtreeFlags = NoFlags;
      if (!didBailout) {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var actualDuration = completedWork.actualDuration;
          var treeBaseDuration = completedWork.selfBaseDuration;
          var child = completedWork.child;
          while (child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            actualDuration += child.actualDuration;
            treeBaseDuration += child.treeBaseDuration;
            child = child.sibling;
          }
          completedWork.actualDuration = actualDuration;
          completedWork.treeBaseDuration = treeBaseDuration;
        } else {
          var _child = completedWork.child;
          while (_child !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
            subtreeFlags |= _child.subtreeFlags;
            subtreeFlags |= _child.flags;
            _child.return = completedWork;
            _child = _child.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      } else {
        if ((completedWork.mode & ProfileMode) !== NoMode) {
          var _treeBaseDuration = completedWork.selfBaseDuration;
          var _child2 = completedWork.child;
          while (_child2 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
            subtreeFlags |= _child2.subtreeFlags & StaticMask;
            subtreeFlags |= _child2.flags & StaticMask;
            _treeBaseDuration += _child2.treeBaseDuration;
            _child2 = _child2.sibling;
          }
          completedWork.treeBaseDuration = _treeBaseDuration;
        } else {
          var _child3 = completedWork.child;
          while (_child3 !== null) {
            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
            subtreeFlags |= _child3.subtreeFlags & StaticMask;
            subtreeFlags |= _child3.flags & StaticMask;
            _child3.return = completedWork;
            _child3 = _child3.sibling;
          }
        }
        completedWork.subtreeFlags |= subtreeFlags;
      }
      completedWork.childLanes = newChildLanes;
      return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
      if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
        warnIfUnhydratedTailNodes(workInProgress2);
        resetHydrationState();
        workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
        return false;
      }
      var wasHydrated = popHydrationState(workInProgress2);
      if (nextState !== null && nextState.dehydrated !== null) {
        if (current2 === null) {
          if (!wasHydrated) {
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
          }
          prepareToHydrateHostSuspenseInstance(workInProgress2);
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var isTimedOutSuspense = nextState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        } else {
          resetHydrationState();
          if ((workInProgress2.flags & DidCapture) === NoFlags) {
            workInProgress2.memoizedState = null;
          }
          workInProgress2.flags |= Update;
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              var _isTimedOutSuspense = nextState !== null;
              if (_isTimedOutSuspense) {
                var _primaryChildFragment = workInProgress2.child;
                if (_primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return false;
        }
      } else {
        upgradeHydrationErrorsToRecoverable();
        return true;
      }
    }
    function completeWork(current2, workInProgress2, renderLanes2) {
      var newProps = workInProgress2.pendingProps;
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case IndeterminateComponent:
        case LazyComponent:
        case SimpleMemoComponent:
        case FunctionComponent:
        case ForwardRef:
        case Fragment:
        case Mode:
        case Profiler:
        case ContextConsumer:
        case MemoComponent:
          bubbleProperties(workInProgress2);
          return null;
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostRoot: {
          var fiberRoot = workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          if (fiberRoot.pendingContext) {
            fiberRoot.context = fiberRoot.pendingContext;
            fiberRoot.pendingContext = null;
          }
          if (current2 === null || current2.child === null) {
            var wasHydrated = popHydrationState(workInProgress2);
            if (wasHydrated) {
              markUpdate(workInProgress2);
            } else {
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (
                  // Check if this is a client root
                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                  (workInProgress2.flags & ForceClientRender) !== NoFlags
                ) {
                  workInProgress2.flags |= Snapshot;
                  upgradeHydrationErrorsToRecoverable();
                }
              }
            }
          }
          updateHostContainer(current2, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          var rootContainerInstance = getRootHostContainer();
          var type = workInProgress2.type;
          if (current2 !== null && workInProgress2.stateNode != null) {
            updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
            if (current2.ref !== workInProgress2.ref) {
              markRef$1(workInProgress2);
            }
          } else {
            if (!newProps) {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            var currentHostContext = getHostContext();
            var _wasHydrated = popHydrationState(workInProgress2);
            if (_wasHydrated) {
              if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                markUpdate(workInProgress2);
              }
            } else {
              var instance2 = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
              appendAllChildren(instance2, workInProgress2, false, false);
              workInProgress2.stateNode = instance2;
              if (finalizeInitialChildren(instance2, type, newProps, rootContainerInstance)) {
                markUpdate(workInProgress2);
              }
            }
            if (workInProgress2.ref !== null) {
              markRef$1(workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case HostText: {
          var newText = newProps;
          if (current2 && workInProgress2.stateNode != null) {
            var oldText = current2.memoizedProps;
            updateHostText$1(current2, workInProgress2, oldText, newText);
          } else {
            if (typeof newText !== "string") {
              if (workInProgress2.stateNode === null) {
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var _rootContainerInstance = getRootHostContainer();
            var _currentHostContext = getHostContext();
            var _wasHydrated2 = popHydrationState(workInProgress2);
            if (_wasHydrated2) {
              if (prepareToHydrateHostTextInstance(workInProgress2)) {
                markUpdate(workInProgress2);
              }
            } else {
              workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
            }
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var nextState = workInProgress2.memoizedState;
          if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
            var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
            if (!fallthroughToNormalSuspensePath) {
              if (workInProgress2.flags & ShouldCapture) {
                return workInProgress2;
              } else {
                return null;
              }
            }
          }
          if ((workInProgress2.flags & DidCapture) !== NoFlags) {
            workInProgress2.lanes = renderLanes2;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          var nextDidTimeout = nextState !== null;
          var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
          if (nextDidTimeout !== prevDidTimeout) {
            if (nextDidTimeout) {
              var _offscreenFiber2 = workInProgress2.child;
              _offscreenFiber2.flags |= Visibility;
              if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                  renderDidSuspend();
                } else {
                  renderDidSuspendDelayIfPossible();
                }
              }
            }
          }
          var wakeables = workInProgress2.updateQueue;
          if (wakeables !== null) {
            workInProgress2.flags |= Update;
          }
          bubbleProperties(workInProgress2);
          {
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              if (nextDidTimeout) {
                var primaryChildFragment = workInProgress2.child;
                if (primaryChildFragment !== null) {
                  workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
            }
          }
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          updateHostContainer(current2, workInProgress2);
          if (current2 === null) {
            preparePortalMount(workInProgress2.stateNode.containerInfo);
          }
          bubbleProperties(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          bubbleProperties(workInProgress2);
          return null;
        case IncompleteClassComponent: {
          var _Component = workInProgress2.type;
          if (isContextProvider(_Component)) {
            popContext(workInProgress2);
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            bubbleProperties(workInProgress2);
            return null;
          }
          var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
          var renderedTail = renderState.rendering;
          if (renderedTail === null) {
            if (!didSuspendAlready) {
              var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
              if (!cannotBeSuspended) {
                var row = workInProgress2.child;
                while (row !== null) {
                  var suspended = findFirstSuspended(row);
                  if (suspended !== null) {
                    didSuspendAlready = true;
                    workInProgress2.flags |= DidCapture;
                    cutOffTailIfNeeded(renderState, false);
                    var newThenables = suspended.updateQueue;
                    if (newThenables !== null) {
                      workInProgress2.updateQueue = newThenables;
                      workInProgress2.flags |= Update;
                    }
                    workInProgress2.subtreeFlags = NoFlags;
                    resetChildFibers(workInProgress2, renderLanes2);
                    pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                    return workInProgress2.child;
                  }
                  row = row.sibling;
                }
              }
              if (renderState.tail !== null && now() > getRenderTargetTime()) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            } else {
              cutOffTailIfNeeded(renderState, false);
            }
          } else {
            if (!didSuspendAlready) {
              var _suspended = findFirstSuspended(renderedTail);
              if (_suspended !== null) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                var _newThenables = _suspended.updateQueue;
                if (_newThenables !== null) {
                  workInProgress2.updateQueue = _newThenables;
                  workInProgress2.flags |= Update;
                }
                cutOffTailIfNeeded(renderState, true);
                if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
              } else if (
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
              ) {
                workInProgress2.flags |= DidCapture;
                didSuspendAlready = true;
                cutOffTailIfNeeded(renderState, false);
                workInProgress2.lanes = SomeRetryLane;
              }
            }
            if (renderState.isBackwards) {
              renderedTail.sibling = workInProgress2.child;
              workInProgress2.child = renderedTail;
            } else {
              var previousSibling = renderState.last;
              if (previousSibling !== null) {
                previousSibling.sibling = renderedTail;
              } else {
                workInProgress2.child = renderedTail;
              }
              renderState.last = renderedTail;
            }
          }
          if (renderState.tail !== null) {
            var next2 = renderState.tail;
            renderState.rendering = next2;
            renderState.tail = next2.sibling;
            renderState.renderingStartTime = now();
            next2.sibling = null;
            var suspenseContext = suspenseStackCursor.current;
            if (didSuspendAlready) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            } else {
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            return next2;
          }
          bubbleProperties(workInProgress2);
          return null;
        }
        case ScopeComponent: {
          break;
        }
        case OffscreenComponent:
        case LegacyHiddenComponent: {
          popRenderLanes(workInProgress2);
          var _nextState = workInProgress2.memoizedState;
          var nextIsHidden = _nextState !== null;
          if (current2 !== null) {
            var _prevState = current2.memoizedState;
            var prevIsHidden = _prevState !== null;
            if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !enableLegacyHidden) {
              workInProgress2.flags |= Visibility;
            }
          }
          if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
            bubbleProperties(workInProgress2);
          } else {
            if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
              bubbleProperties(workInProgress2);
              {
                if (workInProgress2.subtreeFlags & (Placement | Update)) {
                  workInProgress2.flags |= Visibility;
                }
              }
            }
          }
          return null;
        }
        case CacheComponent: {
          return null;
        }
        case TracingMarkerComponent: {
          return null;
        }
      }
      throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(current2, workInProgress2, renderLanes2) {
      popTreeContext(workInProgress2);
      switch (workInProgress2.tag) {
        case ClassComponent: {
          var Component = workInProgress2.type;
          if (isContextProvider(Component)) {
            popContext(workInProgress2);
          }
          var flags = workInProgress2.flags;
          if (flags & ShouldCapture) {
            workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case HostRoot: {
          workInProgress2.stateNode;
          popHostContainer(workInProgress2);
          popTopLevelContextObject(workInProgress2);
          resetWorkInProgressVersions();
          var _flags = workInProgress2.flags;
          if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
            workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
            return workInProgress2;
          }
          return null;
        }
        case HostComponent: {
          popHostContext(workInProgress2);
          return null;
        }
        case SuspenseComponent: {
          popSuspenseContext(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            if (workInProgress2.alternate === null) {
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
            }
            resetHydrationState();
          }
          var _flags2 = workInProgress2.flags;
          if (_flags2 & ShouldCapture) {
            workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
            if ((workInProgress2.mode & ProfileMode) !== NoMode) {
              transferActualDuration(workInProgress2);
            }
            return workInProgress2;
          }
          return null;
        }
        case SuspenseListComponent: {
          popSuspenseContext(workInProgress2);
          return null;
        }
        case HostPortal:
          popHostContainer(workInProgress2);
          return null;
        case ContextProvider:
          var context = workInProgress2.type._context;
          popProvider(context, workInProgress2);
          return null;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(workInProgress2);
          return null;
        case CacheComponent:
          return null;
        default:
          return null;
      }
    }
    function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
      popTreeContext(interruptedWork);
      switch (interruptedWork.tag) {
        case ClassComponent: {
          var childContextTypes = interruptedWork.type.childContextTypes;
          if (childContextTypes !== null && childContextTypes !== void 0) {
            popContext(interruptedWork);
          }
          break;
        }
        case HostRoot: {
          interruptedWork.stateNode;
          popHostContainer(interruptedWork);
          popTopLevelContextObject(interruptedWork);
          resetWorkInProgressVersions();
          break;
        }
        case HostComponent: {
          popHostContext(interruptedWork);
          break;
        }
        case HostPortal:
          popHostContainer(interruptedWork);
          break;
        case SuspenseComponent:
          popSuspenseContext(interruptedWork);
          break;
        case SuspenseListComponent:
          popSuspenseContext(interruptedWork);
          break;
        case ContextProvider:
          var context = interruptedWork.type._context;
          popProvider(context, interruptedWork);
          break;
        case OffscreenComponent:
        case LegacyHiddenComponent:
          popRenderLanes(interruptedWork);
          break;
      }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
    }
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
    var nextEffect = null;
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error3) {
      {
        invokeGuardedCallback(null, function() {
          throw error3;
        });
        clearCaughtError();
      }
    }
    var callComponentWillUnmountWithTimer = function(current2, instance2) {
      instance2.props = current2.memoizedProps;
      instance2.state = current2.memoizedState;
      if (current2.mode & ProfileMode) {
        try {
          startLayoutEffectTimer();
          instance2.componentWillUnmount();
        } finally {
          recordLayoutEffectDuration(current2);
        }
      } else {
        instance2.componentWillUnmount();
      }
    };
    function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
      try {
        commitHookEffectListMount(Layout, current2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance2) {
      try {
        callComponentWillUnmountWithTimer(current2, instance2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance2) {
      try {
        instance2.componentDidMount();
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyAttachRef(current2, nearestMountedAncestor) {
      try {
        commitAttachRef(current2);
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    function safelyDetachRef(current2, nearestMountedAncestor) {
      var ref = current2.ref;
      if (ref !== null) {
        if (typeof ref === "function") {
          var retVal;
          try {
            if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(null);
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              retVal = ref(null);
            }
          } catch (error3) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error3);
          }
          {
            if (typeof retVal === "function") {
              error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
            }
          }
        } else {
          ref.current = null;
        }
      }
    }
    function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
      try {
        destroy();
      } catch (error3) {
        captureCommitPhaseError(current2, nearestMountedAncestor, error3);
      }
    }
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root3, firstChild) {
      prepareForCommit(root3.containerInfo);
      nextEffect = firstChild;
      commitBeforeMutationEffects_begin();
      var shouldFire = shouldFireAfterActiveInstanceBlur;
      shouldFireAfterActiveInstanceBlur = false;
      return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitBeforeMutationEffects_complete();
        }
      }
    }
    function commitBeforeMutationEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          commitBeforeMutationEffectsOnFiber(fiber);
        } catch (error3) {
          captureCommitPhaseError(fiber, fiber.return, error3);
        }
        resetCurrentFiber();
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      if ((flags & Snapshot) !== NoFlags) {
        setCurrentFiber(finishedWork);
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            break;
          }
          case ClassComponent: {
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              var prevState = current2.memoizedState;
              var instance2 = finishedWork.stateNode;
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance2.props !== finishedWork.memoizedProps) {
                    error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance2.state !== finishedWork.memoizedState) {
                    error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              var snapshot = instance2.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
              {
                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                  didWarnSet.add(finishedWork.type);
                  error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                }
              }
              instance2.__reactInternalSnapshotBeforeUpdate = snapshot;
            }
            break;
          }
          case HostRoot: {
            {
              var root3 = finishedWork.stateNode;
              clearContainer(root3.containerInfo);
            }
            break;
          }
          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            break;
          default: {
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        resetCurrentFiber();
      }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            var destroy = effect.destroy;
            effect.destroy = void 0;
            if (destroy !== void 0) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStarted(finishedWork);
                }
              }
              {
                if ((flags & Insertion4) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
              {
                if ((flags & Insertion4) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectUnmountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectUnmountStopped();
                }
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitHookEffectListMount(flags, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;
        do {
          if ((effect.tag & flags) === flags) {
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStarted(finishedWork);
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStarted(finishedWork);
              }
            }
            var create2 = effect.create;
            {
              if ((flags & Insertion4) !== NoFlags$1) {
                setIsRunningInsertionEffect(true);
              }
            }
            effect.destroy = create2();
            {
              if ((flags & Insertion4) !== NoFlags$1) {
                setIsRunningInsertionEffect(false);
              }
            }
            {
              if ((flags & Passive$1) !== NoFlags$1) {
                markComponentPassiveEffectMountStopped();
              } else if ((flags & Layout) !== NoFlags$1) {
                markComponentLayoutEffectMountStopped();
              }
            }
            {
              var destroy = effect.destroy;
              if (destroy !== void 0 && typeof destroy !== "function") {
                var hookName = void 0;
                if ((effect.tag & Layout) !== NoFlags) {
                  hookName = "useLayoutEffect";
                } else if ((effect.tag & Insertion4) !== NoFlags) {
                  hookName = "useInsertionEffect";
                } else {
                  hookName = "useEffect";
                }
                var addendum = void 0;
                if (destroy === null) {
                  addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                } else if (typeof destroy.then === "function") {
                  addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                } else {
                  addendum = " You returned: " + destroy;
                }
                error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
              }
            }
          }
          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
      {
        if ((finishedWork.flags & Update) !== NoFlags) {
          switch (finishedWork.tag) {
            case Profiler: {
              var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
              var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
              var commitTime2 = getCommitTime();
              var phase = finishedWork.alternate === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onPostCommit === "function") {
                onPostCommit(id, phase, passiveEffectDuration, commitTime2);
              }
              var parentFiber = finishedWork.return;
              outer:
                while (parentFiber !== null) {
                  switch (parentFiber.tag) {
                    case HostRoot:
                      var root3 = parentFiber.stateNode;
                      root3.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                    case Profiler:
                      var parentStateNode = parentFiber.stateNode;
                      parentStateNode.passiveEffectDuration += passiveEffectDuration;
                      break outer;
                  }
                  parentFiber = parentFiber.return;
                }
              break;
            }
          }
        }
      }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
      if ((finishedWork.flags & LayoutMask) !== NoFlags) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
            }
            break;
          }
          case ClassComponent: {
            var instance2 = finishedWork.stateNode;
            if (finishedWork.flags & Update) {
              if (!offscreenSubtreeWasHidden) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance2.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance2.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance2.componentDidMount();
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance2.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance2.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance2.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    instance2.componentDidUpdate(prevProps, prevState, instance2.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
            }
            var updateQueue = finishedWork.updateQueue;
            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  if (instance2.props !== finishedWork.memoizedProps) {
                    error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                  if (instance2.state !== finishedWork.memoizedState) {
                    error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                  }
                }
              }
              commitUpdateQueue(finishedWork, updateQueue, instance2);
            }
            break;
          }
          case HostRoot: {
            var _updateQueue = finishedWork.updateQueue;
            if (_updateQueue !== null) {
              var _instance = null;
              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;
                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }
              commitUpdateQueue(finishedWork, _updateQueue, _instance);
            }
            break;
          }
          case HostComponent: {
            var _instance2 = finishedWork.stateNode;
            if (current2 === null && finishedWork.flags & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props);
            }
            break;
          }
          case HostText: {
            break;
          }
          case HostPortal: {
            break;
          }
          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
              var effectDuration = finishedWork.stateNode.effectDuration;
              var commitTime2 = getCommitTime();
              var phase = current2 === null ? "mount" : "update";
              {
                if (isCurrentUpdateNested()) {
                  phase = "nested-update";
                }
              }
              if (typeof onRender === "function") {
                onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
              }
              {
                if (typeof onCommit === "function") {
                  onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                }
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root3 = parentFiber.stateNode;
                        root3.effectDuration += effectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += effectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
              }
            }
            break;
          }
          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            break;
          }
          case SuspenseListComponent:
          case IncompleteClassComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
          case TracingMarkerComponent: {
            break;
          }
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      if (!offscreenSubtreeWasHidden) {
        {
          if (finishedWork.flags & Ref) {
            commitAttachRef(finishedWork);
          }
        }
      }
    }
    function reappearLayoutEffectsOnFiber(node2) {
      switch (node2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (node2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
            } finally {
              recordLayoutEffectDuration(node2);
            }
          } else {
            safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
          }
          break;
        }
        case ClassComponent: {
          var instance2 = node2.stateNode;
          if (typeof instance2.componentDidMount === "function") {
            safelyCallComponentDidMount(node2, node2.return, instance2);
          }
          safelyAttachRef(node2, node2.return);
          break;
        }
        case HostComponent: {
          safelyAttachRef(node2, node2.return);
          break;
        }
      }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      var hostSubtreeRoot = null;
      {
        var node2 = finishedWork;
        while (true) {
          if (node2.tag === HostComponent) {
            if (hostSubtreeRoot === null) {
              hostSubtreeRoot = node2;
              try {
                var instance2 = node2.stateNode;
                if (isHidden) {
                  hideInstance(instance2);
                } else {
                  unhideInstance(node2.stateNode, node2.memoizedProps);
                }
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          } else if (node2.tag === HostText) {
            if (hostSubtreeRoot === null) {
              try {
                var _instance3 = node2.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node2.memoizedProps);
                }
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
            ;
          else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === finishedWork) {
            return;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === finishedWork) {
              return;
            }
            if (hostSubtreeRoot === node2) {
              hostSubtreeRoot = null;
            }
            node2 = node2.return;
          }
          if (hostSubtreeRoot === node2) {
            hostSubtreeRoot = null;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
    }
    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;
      if (ref !== null) {
        var instance2 = finishedWork.stateNode;
        var instanceToUse;
        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance2);
            break;
          default:
            instanceToUse = instance2;
        }
        if (typeof ref === "function") {
          var retVal;
          if (finishedWork.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              retVal = ref(instanceToUse);
            } finally {
              recordLayoutEffectDuration(finishedWork);
            }
          } else {
            retVal = ref(instanceToUse);
          }
          {
            if (typeof retVal === "function") {
              error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            }
          }
        } else {
          {
            if (!ref.hasOwnProperty("current")) {
              error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }
    function detachFiberMutation(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        alternate.return = null;
      }
      fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
      var alternate = fiber.alternate;
      if (alternate !== null) {
        fiber.alternate = null;
        detachFiberAfterEffects(alternate);
      }
      {
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
          var hostInstance = fiber.stateNode;
          if (hostInstance !== null) {
            detachDeletedInstance(hostInstance);
          }
        }
        fiber.stateNode = null;
        {
          fiber._debugOwner = null;
        }
        {
          fiber.return = null;
          fiber.dependencies = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.stateNode = null;
          fiber.updateQueue = null;
        }
      }
    }
    function getHostParentFiber(fiber) {
      var parent = fiber.return;
      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }
        parent = parent.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
      var node2 = fiber;
      siblings:
        while (true) {
          while (node2.sibling === null) {
            if (node2.return === null || isHostParent(node2.return)) {
              return null;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
          while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
            if (node2.flags & Placement) {
              continue siblings;
            }
            if (node2.child === null || node2.tag === HostPortal) {
              continue siblings;
            } else {
              node2.child.return = node2;
              node2 = node2.child;
            }
          }
          if (!(node2.flags & Placement)) {
            return node2.stateNode;
          }
        }
    }
    function commitPlacement(finishedWork) {
      var parentFiber = getHostParentFiber(finishedWork);
      switch (parentFiber.tag) {
        case HostComponent: {
          var parent = parentFiber.stateNode;
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        }
        case HostRoot:
        case HostPortal: {
          var _parent = parentFiber.stateNode.containerInfo;
          var _before = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
      var tag = node2.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node2.stateNode;
        if (before) {
          insertInContainerBefore(parent, stateNode, before);
        } else {
          appendChildToContainer(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node2.child;
        if (child !== null) {
          insertOrAppendPlacementNodeIntoContainer(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    function insertOrAppendPlacementNode(node2, before, parent) {
      var tag = node2.tag;
      var isHost = tag === HostComponent || tag === HostText;
      if (isHost) {
        var stateNode = node2.stateNode;
        if (before) {
          insertBefore(parent, stateNode, before);
        } else {
          appendChild(parent, stateNode);
        }
      } else if (tag === HostPortal)
        ;
      else {
        var child = node2.child;
        if (child !== null) {
          insertOrAppendPlacementNode(child, before, parent);
          var sibling = child.sibling;
          while (sibling !== null) {
            insertOrAppendPlacementNode(sibling, before, parent);
            sibling = sibling.sibling;
          }
        }
      }
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root3, returnFiber, deletedFiber) {
      {
        var parent = returnFiber;
        findParent:
          while (parent !== null) {
            switch (parent.tag) {
              case HostComponent: {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break findParent;
              }
              case HostRoot: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
              case HostPortal: {
                hostParent = parent.stateNode.containerInfo;
                hostParentIsContainer = true;
                break findParent;
              }
            }
            parent = parent.return;
          }
        if (hostParent === null) {
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
      }
      detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
      var child = parent.child;
      while (child !== null) {
        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
        child = child.sibling;
      }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
      onCommitUnmount(deletedFiber);
      switch (deletedFiber.tag) {
        case HostComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
          }
        }
        case HostText: {
          {
            var prevHostParent = hostParent;
            var prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                removeChildFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                removeChild(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case DehydratedFragment: {
          {
            if (hostParent !== null) {
              if (hostParentIsContainer) {
                clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
              } else {
                clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
              }
            }
          }
          return;
        }
        case HostPortal: {
          {
            var _prevHostParent = hostParent;
            var _prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            hostParent = _prevHostParent;
            hostParentIsContainer = _prevHostParentIsContainer;
          }
          return;
        }
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          if (!offscreenSubtreeWasHidden) {
            var updateQueue = deletedFiber.updateQueue;
            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;
              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;
                do {
                  var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                  if (destroy !== void 0) {
                    if ((tag & Insertion4) !== NoFlags$1) {
                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                    } else if ((tag & Layout) !== NoFlags$1) {
                      {
                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                      }
                      if (deletedFiber.mode & ProfileMode) {
                        startLayoutEffectTimer();
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        recordLayoutEffectDuration(deletedFiber);
                      } else {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      }
                      {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ClassComponent: {
          if (!offscreenSubtreeWasHidden) {
            safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var instance2 = deletedFiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance2);
            }
          }
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case ScopeComponent: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
        case OffscreenComponent: {
          if (
            // TODO: Remove this dead flag
            deletedFiber.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          }
          break;
        }
        default: {
          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
          return;
        }
      }
    }
    function commitSuspenseCallback(finishedWork) {
      finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
      var newState = finishedWork.memoizedState;
      if (newState === null) {
        var current2 = finishedWork.alternate;
        if (current2 !== null) {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var suspenseInstance = prevState.dehydrated;
            if (suspenseInstance !== null) {
              commitHydratedSuspenseInstance(suspenseInstance);
            }
          }
        }
      }
    }
    function attachSuspenseRetryListeners(finishedWork) {
      var wakeables = finishedWork.updateQueue;
      if (wakeables !== null) {
        finishedWork.updateQueue = null;
        var retryCache = finishedWork.stateNode;
        if (retryCache === null) {
          retryCache = finishedWork.stateNode = new PossiblyWeakSet();
        }
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          if (!retryCache.has(wakeable)) {
            retryCache.add(wakeable);
            {
              if (isDevToolsPresent) {
                if (inProgressLanes !== null && inProgressRoot !== null) {
                  restorePendingUpdaters(inProgressRoot, inProgressLanes);
                } else {
                  throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                }
              }
            }
            wakeable.then(retry, retry);
          }
        });
      }
    }
    function commitMutationEffects(root3, finishedWork, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root3;
      setCurrentFiber(finishedWork);
      commitMutationEffectsOnFiber(finishedWork, root3);
      setCurrentFiber(finishedWork);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
      var deletions = parentFiber.deletions;
      if (deletions !== null) {
        for (var i = 0; i < deletions.length; i++) {
          var childToDelete = deletions[i];
          try {
            commitDeletionEffects(root3, parentFiber, childToDelete);
          } catch (error3) {
            captureCommitPhaseError(childToDelete, parentFiber, error3);
          }
        }
      }
      var prevDebugFiber = getCurrentFiber();
      if (parentFiber.subtreeFlags & MutationMask) {
        var child = parentFiber.child;
        while (child !== null) {
          setCurrentFiber(child);
          commitMutationEffectsOnFiber(child, root3);
          child = child.sibling;
        }
      }
      setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
      var current2 = finishedWork.alternate;
      var flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            try {
              commitHookEffectListUnmount(Insertion4 | HasEffect, finishedWork, finishedWork.return);
              commitHookEffectListMount(Insertion4 | HasEffect, finishedWork);
            } catch (error3) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error3);
            }
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              recordLayoutEffectDuration(finishedWork);
            } else {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          }
          return;
        }
        case ClassComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          return;
        }
        case HostComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Ref) {
            if (current2 !== null) {
              safelyDetachRef(current2, current2.return);
            }
          }
          {
            if (finishedWork.flags & ContentReset) {
              var instance2 = finishedWork.stateNode;
              try {
                resetTextContent(instance2);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
            if (flags & Update) {
              var _instance4 = finishedWork.stateNode;
              if (_instance4 != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  try {
                    commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                }
              }
            }
          }
          return;
        }
        case HostText: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (finishedWork.stateNode === null) {
                throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              try {
                commitTextUpdate(textInstance, oldText, newText);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
            }
          }
          return;
        }
        case HostRoot: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            {
              if (current2 !== null) {
                var prevRootState = current2.memoizedState;
                if (prevRootState.isDehydrated) {
                  try {
                    commitHydratedContainer(root3.containerInfo);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                }
              }
            }
          }
          return;
        }
        case HostPortal: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
        case SuspenseComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          var offscreenFiber = finishedWork.child;
          if (offscreenFiber.flags & Visibility) {
            var offscreenInstance = offscreenFiber.stateNode;
            var newState = offscreenFiber.memoizedState;
            var isHidden = newState !== null;
            offscreenInstance.isHidden = isHidden;
            if (isHidden) {
              var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
              if (!wasHidden) {
                markCommitTimeOfFallback();
              }
            }
          }
          if (flags & Update) {
            try {
              commitSuspenseCallback(finishedWork);
            } catch (error3) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error3);
            }
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case OffscreenComponent: {
          var _wasHidden = current2 !== null && current2.memoizedState !== null;
          if (
            // TODO: Remove this dead flag
            finishedWork.mode & ConcurrentMode
          ) {
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
            recursivelyTraverseMutationEffects(root3, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
          } else {
            recursivelyTraverseMutationEffects(root3, finishedWork);
          }
          commitReconciliationEffects(finishedWork);
          if (flags & Visibility) {
            var _offscreenInstance = finishedWork.stateNode;
            var _newState = finishedWork.memoizedState;
            var _isHidden = _newState !== null;
            var offscreenBoundary = finishedWork;
            _offscreenInstance.isHidden = _isHidden;
            {
              if (_isHidden) {
                if (!_wasHidden) {
                  if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                    nextEffect = offscreenBoundary;
                    var offscreenChild = offscreenBoundary.child;
                    while (offscreenChild !== null) {
                      nextEffect = offscreenChild;
                      disappearLayoutEffects_begin(offscreenChild);
                      offscreenChild = offscreenChild.sibling;
                    }
                  }
                }
              }
            }
            {
              hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
            }
          }
          return;
        }
        case SuspenseListComponent: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          if (flags & Update) {
            attachSuspenseRetryListeners(finishedWork);
          }
          return;
        }
        case ScopeComponent: {
          return;
        }
        default: {
          recursivelyTraverseMutationEffects(root3, finishedWork);
          commitReconciliationEffects(finishedWork);
          return;
        }
      }
    }
    function commitReconciliationEffects(finishedWork) {
      var flags = finishedWork.flags;
      if (flags & Placement) {
        try {
          commitPlacement(finishedWork);
        } catch (error3) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
        }
        finishedWork.flags &= ~Placement;
      }
      if (flags & Hydrating) {
        finishedWork.flags &= ~Hydrating;
      }
    }
    function commitLayoutEffects(finishedWork, root3, committedLanes) {
      inProgressLanes = committedLanes;
      inProgressRoot = root3;
      nextEffect = finishedWork;
      commitLayoutEffects_begin(finishedWork, root3, committedLanes);
      inProgressLanes = null;
      inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
      var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent && isModernRoot) {
          var isHidden = fiber.memoizedState !== null;
          var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
          if (newOffscreenSubtreeIsHidden) {
            commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            continue;
          } else {
            var current2 = fiber.alternate;
            var wasHidden = current2 !== null && current2.memoizedState !== null;
            var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
            if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
              nextEffect = fiber;
              reappearLayoutEffects_begin(fiber);
            }
            var child = firstChild;
            while (child !== null) {
              nextEffect = child;
              commitLayoutEffects_begin(
                child,
                // New root; bubble back up to here and stop.
                root3,
                committedLanes
              );
              child = child.sibling;
            }
            nextEffect = fiber;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
            continue;
          }
        }
        if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
        }
      }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & LayoutMask) !== NoFlags) {
          var current2 = fiber.alternate;
          setCurrentFiber(fiber);
          try {
            commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (fiber.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              } finally {
                recordLayoutEffectDuration(fiber);
              }
            } else {
              commitHookEffectListUnmount(Layout, fiber, fiber.return);
            }
            break;
          }
          case ClassComponent: {
            safelyDetachRef(fiber, fiber.return);
            var instance2 = fiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
            }
            break;
          }
          case HostComponent: {
            safelyDetachRef(fiber, fiber.return);
            break;
          }
          case OffscreenComponent: {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              disappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
            break;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          disappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if (fiber.tag === OffscreenComponent) {
          var isHidden = fiber.memoizedState !== null;
          if (isHidden) {
            reappearLayoutEffects_complete(subtreeRoot);
            continue;
          }
        }
        if (firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          reappearLayoutEffects_complete(subtreeRoot);
        }
      }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        try {
          reappearLayoutEffectsOnFiber(fiber);
        } catch (error3) {
          captureCommitPhaseError(fiber, fiber.return, error3);
        }
        resetCurrentFiber();
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
      nextEffect = finishedWork;
      commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var firstChild = fiber.child;
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
          firstChild.return = fiber;
          nextEffect = firstChild;
        } else {
          commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
        }
      }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          try {
            commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
          } catch (error3) {
            captureCommitPhaseError(fiber, fiber.return, error3);
          }
          resetCurrentFiber();
        }
        if (fiber === subtreeRoot) {
          nextEffect = null;
          return;
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            } finally {
              recordPassiveEffectDuration(finishedWork);
            }
          } else {
            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffects(firstChild) {
      nextEffect = firstChild;
      commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var child = fiber.child;
        if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
          var deletions = fiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var fiberToDelete = deletions[i];
              nextEffect = fiberToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
            }
            {
              var previousFiber = fiber.alternate;
              if (previousFiber !== null) {
                var detachedChild = previousFiber.child;
                if (detachedChild !== null) {
                  previousFiber.child = null;
                  do {
                    var detachedSibling = detachedChild.sibling;
                    detachedChild.sibling = null;
                    detachedChild = detachedSibling;
                  } while (detachedChild !== null);
                }
              }
            }
            nextEffect = fiber;
          }
        }
        if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffects_complete();
        }
      }
    }
    function commitPassiveUnmountEffects_complete() {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        if ((fiber.flags & Passive) !== NoFlags) {
          setCurrentFiber(fiber);
          commitPassiveUnmountOnFiber(fiber);
          resetCurrentFiber();
        }
        var sibling = fiber.sibling;
        if (sibling !== null) {
          sibling.return = fiber.return;
          nextEffect = sibling;
          return;
        }
        nextEffect = fiber.return;
      }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (finishedWork.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            recordPassiveEffectDuration(finishedWork);
          } else {
            commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
          }
          break;
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        setCurrentFiber(fiber);
        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
        resetCurrentFiber();
        var child = fiber.child;
        if (child !== null) {
          child.return = fiber;
          nextEffect = child;
        } else {
          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
      }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
      while (nextEffect !== null) {
        var fiber = nextEffect;
        var sibling = fiber.sibling;
        var returnFiber = fiber.return;
        {
          detachFiberAfterEffects(fiber);
          if (fiber === deletedSubtreeRoot) {
            nextEffect = null;
            return;
          }
        }
        if (sibling !== null) {
          sibling.return = returnFiber;
          nextEffect = sibling;
          return;
        }
        nextEffect = returnFiber;
      }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
      switch (current2.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent: {
          if (current2.mode & ProfileMode) {
            startPassiveEffectTimer();
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            recordPassiveEffectDuration(current2);
          } else {
            commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
          }
          break;
        }
      }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Layout | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance2 = fiber.stateNode;
            try {
              instance2.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectMountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListMount(Passive$1 | HasEffect, fiber);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
        }
      }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
            break;
          }
          case ClassComponent: {
            var instance2 = fiber.stateNode;
            if (typeof instance2.componentWillUnmount === "function") {
              safelyCallComponentWillUnmount(fiber, fiber.return, instance2);
            }
            break;
          }
        }
      }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
      {
        switch (fiber.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            try {
              commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
            } catch (error3) {
              captureCommitPhaseError(fiber, fiber.return, error3);
            }
          }
        }
      }
    }
    if (typeof Symbol === "function" && Symbol.for) {
      var symbolFor = Symbol.for;
      symbolFor("selector.component");
      symbolFor("selector.has_pseudo_class");
      symbolFor("selector.role");
      symbolFor("selector.test_id");
      symbolFor("selector.text");
    }
    var commitHooks = [];
    function onCommitRoot$1() {
      {
        commitHooks.forEach(function(commitHook) {
          return commitHook();
        });
      }
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        var jestIsDefined = typeof jest !== "undefined";
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
      }
    }
    function isConcurrentActEnvironment() {
      {
        var isReactActEnvironmentGlobal = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
          error2("The current testing environment is not configured to support act(...)");
        }
        return isReactActEnvironmentGlobal;
      }
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = (
      /*             */
      0
    );
    var BatchedContext = (
      /*               */
      1
    );
    var RenderContext = (
      /*                */
      2
    );
    var CommitContext = (
      /*                */
      4
    );
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = NoLanes;
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    var workInProgressRootExitStatus = RootInProgress;
    var workInProgressRootFatalError = null;
    var workInProgressRootSkippedLanes = NoLanes;
    var workInProgressRootInterleavedUpdatedLanes = NoLanes;
    var workInProgressRootPingedLanes = NoLanes;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var workInProgressRootRenderTargetTime = Infinity;
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
      workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
      return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null;
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null;
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
      return workInProgressRoot;
    }
    function requestEventTime() {
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        return now();
      }
      if (currentEventTime !== NoTimestamp) {
        return currentEventTime;
      }
      currentEventTime = now();
      return currentEventTime;
    }
    function requestUpdateLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
        return pickArbitraryLane(workInProgressRootRenderLanes);
      }
      var isTransition = requestCurrentTransition() !== NoTransition;
      if (isTransition) {
        if (ReactCurrentBatchConfig$3.transition !== null) {
          var transition = ReactCurrentBatchConfig$3.transition;
          if (!transition._updatedFibers) {
            transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          transition._updatedFibers.add(fiber);
        }
        if (currentEventTransitionLane === NoLane) {
          currentEventTransitionLane = claimNextTransitionLane();
        }
        return currentEventTransitionLane;
      }
      var updateLane = getCurrentUpdatePriority();
      if (updateLane !== NoLane) {
        return updateLane;
      }
      var eventLane = getCurrentEventPriority();
      return eventLane;
    }
    function requestRetryLane(fiber) {
      var mode = fiber.mode;
      if ((mode & ConcurrentMode) === NoMode) {
        return SyncLane;
      }
      return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
      checkForNestedUpdates();
      {
        if (isRunningInsertionEffect) {
          error2("useInsertionEffect must not schedule updates.");
        }
      }
      {
        if (isFlushingPassiveEffects) {
          didScheduleUpdateDuringPassiveEffects = true;
        }
      }
      markRootUpdated(root3, lane, eventTime);
      if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
        warnAboutRenderPhaseUpdatesInDEV(fiber);
      } else {
        {
          if (isDevToolsPresent) {
            addFiberToLanesMap(root3, fiber, lane);
          }
        }
        warnIfUpdatesNotWrappedWithActDEV(fiber);
        if (root3 === workInProgressRoot) {
          if ((executionContext & RenderContext) === NoContext) {
            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
          }
          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            markRootSuspended$1(root3, workInProgressRootRenderLanes);
          }
        }
        ensureRootIsScheduled(root3, eventTime);
        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
      var current2 = root3.current;
      current2.lanes = lane;
      markRootUpdated(root3, lane, eventTime);
      ensureRootIsScheduled(root3, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
        (executionContext & RenderContext) !== NoContext
      );
    }
    function ensureRootIsScheduled(root3, currentTime) {
      var existingCallbackNode = root3.callbackNode;
      markStarvedLanesAsExpired(root3, currentTime);
      var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (nextLanes === NoLanes) {
        if (existingCallbackNode !== null) {
          cancelCallback$1(existingCallbackNode);
        }
        root3.callbackNode = null;
        root3.callbackPriority = NoLane;
        return;
      }
      var newCallbackPriority = getHighestPriorityLane(nextLanes);
      var existingCallbackPriority = root3.callbackPriority;
      if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
        {
          if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
            error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        return;
      }
      if (existingCallbackNode != null) {
        cancelCallback$1(existingCallbackNode);
      }
      var newCallbackNode;
      if (newCallbackPriority === SyncLane) {
        if (root3.tag === LegacyRoot) {
          if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
            ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
          }
          scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
        } else {
          scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        }
        {
          if (ReactCurrentActQueue$1.current !== null) {
            ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
          } else {
            scheduleMicrotask2(function() {
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            });
          }
        }
        newCallbackNode = null;
      } else {
        var schedulerPriorityLevel;
        switch (lanesToEventPriority(nextLanes)) {
          case DiscreteEventPriority:
            schedulerPriorityLevel = ImmediatePriority;
            break;
          case ContinuousEventPriority:
            schedulerPriorityLevel = UserBlockingPriority;
            break;
          case DefaultEventPriority:
            schedulerPriorityLevel = NormalPriority;
            break;
          case IdleEventPriority:
            schedulerPriorityLevel = IdlePriority;
            break;
          default:
            schedulerPriorityLevel = NormalPriority;
            break;
        }
        newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
      }
      root3.callbackPriority = newCallbackPriority;
      root3.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root3, didTimeout) {
      {
        resetNestedUpdateFlag();
      }
      currentEventTime = NoTimestamp;
      currentEventTransitionLane = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var originalCallbackNode = root3.callbackNode;
      var didFlushPassiveEffects = flushPassiveEffects();
      if (didFlushPassiveEffects) {
        if (root3.callbackNode !== originalCallbackNode) {
          return null;
        }
      }
      var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
      if (lanes === NoLanes) {
        return null;
      }
      var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
      if (exitStatus !== RootInProgress) {
        if (exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root3, NoLanes);
          markRootSuspended$1(root3, lanes);
          ensureRootIsScheduled(root3, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          markRootSuspended$1(root3, lanes);
        } else {
          var renderWasConcurrent = !includesBlockingLane(root3, lanes);
          var finishedWork = root3.current.alternate;
          if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
            exitStatus = renderRootSync(root3, lanes);
            if (exitStatus === RootErrored) {
              var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (_errorRetryLanes !== NoLanes) {
                lanes = _errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var _fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw _fatalError;
            }
          }
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          finishConcurrentRender(root3, exitStatus, lanes);
        }
      }
      ensureRootIsScheduled(root3, now());
      if (root3.callbackNode === originalCallbackNode) {
        return performConcurrentWorkOnRoot.bind(null, root3);
      }
      return null;
    }
    function recoverFromConcurrentError(root3, errorRetryLanes) {
      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
      if (isRootDehydrated(root3)) {
        var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
        rootWorkInProgress.flags |= ForceClientRender;
        {
          errorHydratingContainer(root3.containerInfo);
        }
      }
      var exitStatus = renderRootSync(root3, errorRetryLanes);
      if (exitStatus !== RootErrored) {
        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
        if (errorsFromSecondAttempt !== null) {
          queueRecoverableErrors(errorsFromSecondAttempt);
        }
      }
      return exitStatus;
    }
    function queueRecoverableErrors(errors2) {
      if (workInProgressRootRecoverableErrors === null) {
        workInProgressRootRecoverableErrors = errors2;
      } else {
        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors2);
      }
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
      switch (exitStatus) {
        case RootInProgress:
        case RootFatalErrored: {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        case RootErrored: {
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspended: {
          markRootSuspended$1(root3, lanes);
          if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
          !shouldForceFlushFallbacksInDEV()) {
            var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
            if (msUntilTimeout > 10) {
              var nextLanes = getNextLanes(root3, NoLanes);
              if (nextLanes !== NoLanes) {
                break;
              }
              var suspendedLanes = root3.suspendedLanes;
              if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                requestEventTime();
                markRootPinged(root3, suspendedLanes);
                break;
              }
              root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
              break;
            }
          }
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootSuspendedWithDelay: {
          markRootSuspended$1(root3, lanes);
          if (includesOnlyTransitions(lanes)) {
            break;
          }
          if (!shouldForceFlushFallbacksInDEV()) {
            var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
            var eventTimeMs = mostRecentEventTime;
            var timeElapsedMs = now() - eventTimeMs;
            var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
            if (_msUntilTimeout > 10) {
              root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
              break;
            }
          }
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        case RootCompleted: {
          commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
          break;
        }
        default: {
          throw new Error("Unknown root exit status.");
        }
      }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
      var node2 = finishedWork;
      while (true) {
        if (node2.flags & StoreConsistency) {
          var updateQueue = node2.updateQueue;
          if (updateQueue !== null) {
            var checks = updateQueue.stores;
            if (checks !== null) {
              for (var i = 0; i < checks.length; i++) {
                var check = checks[i];
                var getSnapshot = check.getSnapshot;
                var renderedValue = check.value;
                try {
                  if (!objectIs(getSnapshot(), renderedValue)) {
                    return false;
                  }
                } catch (error3) {
                  return false;
                }
              }
            }
          }
        }
        var child = node2.child;
        if (node2.subtreeFlags & StoreConsistency && child !== null) {
          child.return = node2;
          node2 = child;
          continue;
        }
        if (node2 === finishedWork) {
          return true;
        }
        while (node2.sibling === null) {
          if (node2.return === null || node2.return === finishedWork) {
            return true;
          }
          node2 = node2.return;
        }
        node2.sibling.return = node2.return;
        node2 = node2.sibling;
      }
      return true;
    }
    function markRootSuspended$1(root3, suspendedLanes) {
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
      markRootSuspended(root3, suspendedLanes);
    }
    function performSyncWorkOnRoot(root3) {
      {
        syncNestedUpdateFlag();
      }
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      flushPassiveEffects();
      var lanes = getNextLanes(root3, NoLanes);
      if (!includesSomeLane(lanes, SyncLane)) {
        ensureRootIsScheduled(root3, now());
        return null;
      }
      var exitStatus = renderRootSync(root3, lanes);
      if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
        if (errorRetryLanes !== NoLanes) {
          lanes = errorRetryLanes;
          exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
        }
      }
      if (exitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        prepareFreshStack(root3, NoLanes);
        markRootSuspended$1(root3, lanes);
        ensureRootIsScheduled(root3, now());
        throw fatalError;
      }
      if (exitStatus === RootDidNotComplete) {
        throw new Error("Root did not complete. This is a bug in React.");
      }
      var finishedWork = root3.current.alternate;
      root3.finishedWork = finishedWork;
      root3.finishedLanes = lanes;
      commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
      ensureRootIsScheduled(root3, now());
      return null;
    }
    function flushRoot(root3, lanes) {
      if (lanes !== NoLanes) {
        markRootEntangled(root3, mergeLanes(lanes, SyncLane));
        ensureRootIsScheduled(root3, now());
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          resetRenderTimer();
          flushSyncCallbacks();
        }
      }
    }
    function batchedUpdates$1(fn, a) {
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      try {
        return fn(a);
      } finally {
        executionContext = prevExecutionContext;
        if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !ReactCurrentActQueue$1.isBatchingLegacy) {
          resetRenderTimer();
          flushSyncCallbacksOnlyInLegacyMode();
        }
      }
    }
    function discreteUpdates(fn, a, b2, c, d2) {
      var previousPriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        return fn(a, b2, c, d2);
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        if (executionContext === NoContext) {
          resetRenderTimer();
        }
      }
    }
    function flushSync(fn) {
      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
        flushPassiveEffects();
      }
      var prevExecutionContext = executionContext;
      executionContext |= BatchedContext;
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      var previousPriority = getCurrentUpdatePriority();
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        if (fn) {
          return fn();
        } else {
          return void 0;
        }
      } finally {
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
        executionContext = prevExecutionContext;
        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushSyncCallbacks();
        }
      }
    }
    function isAlreadyRendering() {
      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
      push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
      subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
    }
    function popRenderLanes(fiber) {
      subtreeRenderLanes = subtreeRenderLanesCursor.current;
      pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
      root3.finishedWork = null;
      root3.finishedLanes = NoLanes;
      var timeoutHandle = root3.timeoutHandle;
      if (timeoutHandle !== noTimeout) {
        root3.timeoutHandle = noTimeout;
        cancelTimeout(timeoutHandle);
      }
      if (workInProgress !== null) {
        var interruptedWork = workInProgress.return;
        while (interruptedWork !== null) {
          var current2 = interruptedWork.alternate;
          unwindInterruptedWork(current2, interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }
      workInProgressRoot = root3;
      var rootWorkInProgress = createWorkInProgress(root3.current, null);
      workInProgress = rootWorkInProgress;
      workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
      workInProgressRootExitStatus = RootInProgress;
      workInProgressRootFatalError = null;
      workInProgressRootSkippedLanes = NoLanes;
      workInProgressRootInterleavedUpdatedLanes = NoLanes;
      workInProgressRootPingedLanes = NoLanes;
      workInProgressRootConcurrentErrors = null;
      workInProgressRootRecoverableErrors = null;
      finishQueueingConcurrentUpdates();
      {
        ReactStrictModeWarnings.discardPendingWarnings();
      }
      return rootWorkInProgress;
    }
    function handleError(root3, thrownValue) {
      do {
        var erroredWork = workInProgress;
        try {
          resetContextDependencies();
          resetHooksAfterThrow();
          resetCurrentFiber();
          ReactCurrentOwner$2.current = null;
          if (erroredWork === null || erroredWork.return === null) {
            workInProgressRootExitStatus = RootFatalErrored;
            workInProgressRootFatalError = thrownValue;
            workInProgress = null;
            return;
          }
          if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
            stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
          }
          if (enableSchedulingProfiler) {
            markComponentRenderStopped();
            if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
              var wakeable = thrownValue;
              markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
            } else {
              markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
            }
          }
          throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
          completeUnitOfWork(erroredWork);
        } catch (yetAnotherThrownValue) {
          thrownValue = yetAnotherThrownValue;
          if (workInProgress === erroredWork && erroredWork !== null) {
            erroredWork = erroredWork.return;
            workInProgress = erroredWork;
          } else {
            erroredWork = workInProgress;
          }
          continue;
        }
        return;
      } while (true);
    }
    function pushDispatcher() {
      var prevDispatcher = ReactCurrentDispatcher$2.current;
      ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
      if (prevDispatcher === null) {
        return ContextOnlyDispatcher;
      } else {
        return prevDispatcher;
      }
    }
    function popDispatcher(prevDispatcher) {
      ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
      globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootSuspended;
      }
    }
    function renderDidSuspendDelayIfPossible() {
      if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
        workInProgressRootExitStatus = RootSuspendedWithDelay;
      }
      if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
      }
    }
    function renderDidError(error3) {
      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
        workInProgressRootExitStatus = RootErrored;
      }
      if (workInProgressRootConcurrentErrors === null) {
        workInProgressRootConcurrentErrors = [error3];
      } else {
        workInProgressRootConcurrentErrors.push(error3);
      }
    }
    function renderHasNotSuspendedYet() {
      return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root3, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root3.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root3, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root3, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        prepareFreshStack(root3, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopSync();
          break;
        } catch (thrownValue) {
          handleError(root3, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);
      if (workInProgress !== null) {
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      }
      {
        markRenderStopped();
      }
      workInProgressRoot = null;
      workInProgressRootRenderLanes = NoLanes;
      return workInProgressRootExitStatus;
    }
    function workLoopSync() {
      while (workInProgress !== null) {
        performUnitOfWork(workInProgress);
      }
    }
    function renderRootConcurrent(root3, lanes) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root3.memoizedUpdaters;
            if (memoizedUpdaters.size > 0) {
              restorePendingUpdaters(root3, workInProgressRootRenderLanes);
              memoizedUpdaters.clear();
            }
            movePendingFibersToMemoized(root3, lanes);
          }
        }
        workInProgressTransitions = getTransitionsForLanes();
        resetRenderTimer();
        prepareFreshStack(root3, lanes);
      }
      {
        markRenderStarted(lanes);
      }
      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root3, thrownValue);
        }
      } while (true);
      resetContextDependencies();
      popDispatcher(prevDispatcher);
      executionContext = prevExecutionContext;
      if (workInProgress !== null) {
        {
          markRenderYielded();
        }
        return RootInProgress;
      } else {
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
    }
    function workLoopConcurrent() {
      while (workInProgress !== null && !shouldYield()) {
        performUnitOfWork(workInProgress);
      }
    }
    function performUnitOfWork(unitOfWork) {
      var current2 = unitOfWork.alternate;
      setCurrentFiber(unitOfWork);
      var next2;
      if ((unitOfWork.mode & ProfileMode) !== NoMode) {
        startProfilerTimer(unitOfWork);
        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
      } else {
        next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
      }
      resetCurrentFiber();
      unitOfWork.memoizedProps = unitOfWork.pendingProps;
      if (next2 === null) {
        completeUnitOfWork(unitOfWork);
      } else {
        workInProgress = next2;
      }
      ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
      var completedWork = unitOfWork;
      do {
        var current2 = completedWork.alternate;
        var returnFiber = completedWork.return;
        if ((completedWork.flags & Incomplete) === NoFlags) {
          setCurrentFiber(completedWork);
          var next2 = void 0;
          if ((completedWork.mode & ProfileMode) === NoMode) {
            next2 = completeWork(current2, completedWork, subtreeRenderLanes);
          } else {
            startProfilerTimer(completedWork);
            next2 = completeWork(current2, completedWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
          }
          resetCurrentFiber();
          if (next2 !== null) {
            workInProgress = next2;
            return;
          }
        } else {
          var _next = unwindWork(current2, completedWork);
          if (_next !== null) {
            _next.flags &= HostEffectMask;
            workInProgress = _next;
            return;
          }
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            var actualDuration = completedWork.actualDuration;
            var child = completedWork.child;
            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
          }
          if (returnFiber !== null) {
            returnFiber.flags |= Incomplete;
            returnFiber.subtreeFlags = NoFlags;
            returnFiber.deletions = null;
          } else {
            workInProgressRootExitStatus = RootDidNotComplete;
            workInProgress = null;
            return;
          }
        }
        var siblingFiber = completedWork.sibling;
        if (siblingFiber !== null) {
          workInProgress = siblingFiber;
          return;
        }
        completedWork = returnFiber;
        workInProgress = completedWork;
      } while (completedWork !== null);
      if (workInProgressRootExitStatus === RootInProgress) {
        workInProgressRootExitStatus = RootCompleted;
      }
    }
    function commitRoot(root3, recoverableErrors, transitions2) {
      var previousUpdateLanePriority = getCurrentUpdatePriority();
      var prevTransition = ReactCurrentBatchConfig$3.transition;
      try {
        ReactCurrentBatchConfig$3.transition = null;
        setCurrentUpdatePriority(DiscreteEventPriority);
        commitRootImpl(root3, recoverableErrors, transitions2, previousUpdateLanePriority);
      } finally {
        ReactCurrentBatchConfig$3.transition = prevTransition;
        setCurrentUpdatePriority(previousUpdateLanePriority);
      }
      return null;
    }
    function commitRootImpl(root3, recoverableErrors, transitions2, renderPriorityLevel) {
      do {
        flushPassiveEffects();
      } while (rootWithPendingPassiveEffects !== null);
      flushRenderPhaseStrictModeWarningsInDEV();
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Should not already be working.");
      }
      var finishedWork = root3.finishedWork;
      var lanes = root3.finishedLanes;
      {
        markCommitStarted(lanes);
      }
      if (finishedWork === null) {
        {
          markCommitStopped();
        }
        return null;
      } else {
        {
          if (lanes === NoLanes) {
            error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
          }
        }
      }
      root3.finishedWork = null;
      root3.finishedLanes = NoLanes;
      if (finishedWork === root3.current) {
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      }
      root3.callbackNode = null;
      root3.callbackPriority = NoLane;
      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
      markRootFinished(root3, remainingLanes);
      if (root3 === workInProgressRoot) {
        workInProgressRoot = null;
        workInProgress = null;
        workInProgressRootRenderLanes = NoLanes;
      }
      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          pendingPassiveTransitions = transitions2;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
      if (subtreeHasEffects || rootHasEffect) {
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        ReactCurrentBatchConfig$3.transition = null;
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(DiscreteEventPriority);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        ReactCurrentOwner$2.current = null;
        commitBeforeMutationEffects(root3, finishedWork);
        {
          recordCommitTime();
        }
        commitMutationEffects(root3, finishedWork, lanes);
        resetAfterCommit(root3.containerInfo);
        root3.current = finishedWork;
        {
          markLayoutEffectsStarted(lanes);
        }
        commitLayoutEffects(finishedWork, root3, lanes);
        {
          markLayoutEffectsStopped();
        }
        requestPaint();
        executionContext = prevExecutionContext;
        setCurrentUpdatePriority(previousPriority);
        ReactCurrentBatchConfig$3.transition = prevTransition;
      } else {
        root3.current = finishedWork;
        {
          recordCommitTime();
        }
      }
      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
      if (rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = false;
        rootWithPendingPassiveEffects = root3;
        pendingPassiveEffectsLanes = lanes;
      } else {
        {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
        }
      }
      remainingLanes = root3.pendingLanes;
      if (remainingLanes === NoLanes) {
        legacyErrorBoundariesThatAlreadyFailed = null;
      }
      {
        if (!rootDidHavePassiveEffects) {
          commitDoubleInvokeEffectsInDEV(root3.current, false);
        }
      }
      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
      {
        if (isDevToolsPresent) {
          root3.memoizedUpdaters.clear();
        }
      }
      {
        onCommitRoot$1();
      }
      ensureRootIsScheduled(root3, now());
      if (recoverableErrors !== null) {
        var onRecoverableError = root3.onRecoverableError;
        for (var i = 0; i < recoverableErrors.length; i++) {
          var recoverableError = recoverableErrors[i];
          var componentStack = recoverableError.stack;
          var digest = recoverableError.digest;
          onRecoverableError(recoverableError.value, {
            componentStack,
            digest
          });
        }
      }
      if (hasUncaughtError) {
        hasUncaughtError = false;
        var error$1 = firstUncaughtError;
        firstUncaughtError = null;
        throw error$1;
      }
      if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
        flushPassiveEffects();
      }
      remainingLanes = root3.pendingLanes;
      if (includesSomeLane(remainingLanes, SyncLane)) {
        {
          markNestedUpdateScheduled();
        }
        if (root3 === rootWithNestedUpdates) {
          nestedUpdateCount++;
        } else {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = root3;
        }
      } else {
        nestedUpdateCount = 0;
      }
      flushSyncCallbacks();
      {
        markCommitStopped();
      }
      return null;
    }
    function flushPassiveEffects() {
      if (rootWithPendingPassiveEffects !== null) {
        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(priority);
          return flushPassiveEffectsImpl();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        }
      }
      return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
      {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true;
          scheduleCallback$1(NormalPriority, function() {
            flushPassiveEffects();
            return null;
          });
        }
      }
    }
    function flushPassiveEffectsImpl() {
      if (rootWithPendingPassiveEffects === null) {
        return false;
      }
      var transitions2 = pendingPassiveTransitions;
      pendingPassiveTransitions = null;
      var root3 = rootWithPendingPassiveEffects;
      var lanes = pendingPassiveEffectsLanes;
      rootWithPendingPassiveEffects = null;
      pendingPassiveEffectsLanes = NoLanes;
      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
        throw new Error("Cannot flush passive effects while already rendering.");
      }
      {
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      {
        markPassiveEffectsStarted(lanes);
      }
      var prevExecutionContext = executionContext;
      executionContext |= CommitContext;
      commitPassiveUnmountEffects(root3.current);
      commitPassiveMountEffects(root3, root3.current, lanes, transitions2);
      {
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for (var i = 0; i < profilerEffects.length; i++) {
          var _fiber = profilerEffects[i];
          commitPassiveEffectDurations(root3, _fiber);
        }
      }
      {
        markPassiveEffectsStopped();
      }
      {
        commitDoubleInvokeEffectsInDEV(root3.current, true);
      }
      executionContext = prevExecutionContext;
      flushSyncCallbacks();
      {
        if (didScheduleUpdateDuringPassiveEffects) {
          if (root3 === rootWithPassiveNestedUpdates) {
            nestedPassiveUpdateCount++;
          } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = root3;
          }
        } else {
          nestedPassiveUpdateCount = 0;
        }
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
      }
      onPostCommitRoot(root3);
      {
        var stateNode = root3.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
      }
      return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance2) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance2);
    }
    function markLegacyErrorBoundaryAsFailed(instance2) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance2]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance2);
      }
    }
    function prepareToThrowUncaughtError(error3) {
      if (!hasUncaughtError) {
        hasUncaughtError = true;
        firstUncaughtError = error3;
      }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
      var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
      var root3 = enqueueUpdate(rootFiber, update, SyncLane);
      var eventTime = requestEventTime();
      if (root3 !== null) {
        markRootUpdated(root3, SyncLane, eventTime);
        ensureRootIsScheduled(root3, eventTime);
      }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
      {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
      }
      if (sourceFiber.tag === HostRoot) {
        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
        return;
      }
      var fiber = null;
      {
        fiber = nearestMountedAncestor;
      }
      while (fiber !== null) {
        if (fiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
          return;
        } else if (fiber.tag === ClassComponent) {
          var ctor = fiber.type;
          var instance2 = fiber.stateNode;
          if (typeof ctor.getDerivedStateFromError === "function" || typeof instance2.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance2)) {
            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(fiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
            return;
          }
        }
        fiber = fiber.return;
      }
      {
        error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
      }
    }
    function pingSuspendedRoot(root3, wakeable, pingedLanes) {
      var pingCache = root3.pingCache;
      if (pingCache !== null) {
        pingCache.delete(wakeable);
      }
      var eventTime = requestEventTime();
      markRootPinged(root3, pingedLanes);
      warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
      if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
          prepareFreshStack(root3, NoLanes);
        } else {
          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
      }
      ensureRootIsScheduled(root3, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
      if (retryLane === NoLane) {
        retryLane = requestRetryLane(boundaryFiber);
      }
      var eventTime = requestEventTime();
      var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
      if (root3 !== null) {
        markRootUpdated(root3, retryLane, eventTime);
        ensureRootIsScheduled(root3, eventTime);
      }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
      var suspenseState = boundaryFiber.memoizedState;
      var retryLane = NoLane;
      if (suspenseState !== null) {
        retryLane = suspenseState.retryLane;
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
      var retryLane = NoLane;
      var retryCache;
      switch (boundaryFiber.tag) {
        case SuspenseComponent:
          retryCache = boundaryFiber.stateNode;
          var suspenseState = boundaryFiber.memoizedState;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          break;
        case SuspenseListComponent:
          retryCache = boundaryFiber.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      if (retryCache !== null) {
        retryCache.delete(wakeable);
      }
      retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
      return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        nestedUpdateCount = 0;
        rootWithNestedUpdates = null;
        throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      }
      {
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
          nestedPassiveUpdateCount = 0;
          rootWithPassiveNestedUpdates = null;
          error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
      }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
      {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        {
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        }
      }
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
      {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        }
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) {
          invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        }
        resetCurrentFiber();
      }
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
      {
        var current2 = firstChild;
        var subtreeRoot = null;
        while (current2 !== null) {
          var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
          if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
            current2 = current2.child;
          } else {
            if ((current2.flags & fiberFlags) !== NoFlags) {
              invokeEffectFn(current2);
            }
            if (current2.sibling !== null) {
              current2 = current2.sibling;
            } else {
              current2 = subtreeRoot = current2.return;
            }
          }
        }
      }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
      {
        if ((executionContext & RenderContext) !== NoContext) {
          return;
        }
        if (!(fiber.mode & ConcurrentMode)) {
          return;
        }
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
          return;
        }
        var componentName2 = getComponentNameFromFiber(fiber) || "ReactComponent";
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName2)) {
            return;
          }
          didWarnStateUpdateForNotYetMountedComponent.add(componentName2);
        } else {
          didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName2]);
        }
        var previousFiber = current;
        try {
          setCurrentFiber(fiber);
          error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          if (previousFiber) {
            setCurrentFiber(fiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }
    var beginWork$1;
    {
      var dummyFiber = null;
      beginWork$1 = function(current2, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
          return beginWork(current2, unitOfWork, lanes);
        } catch (originalError) {
          if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
            throw originalError;
          }
          resetContextDependencies();
          resetHooksAfterThrow();
          unwindInterruptedWork(current2, unitOfWork);
          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
          if (unitOfWork.mode & ProfileMode) {
            startProfilerTimer(unitOfWork);
          }
          invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
          if (hasCaughtError()) {
            var replayError = clearCaughtError();
            if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
              originalError._suppressLogging = true;
            }
          }
          throw originalError;
        }
      };
    }
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    {
      didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
    }
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
      {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
              var dedupeKey = renderingComponentName;
              if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
              }
              break;
            }
            case ClassComponent: {
              if (!didWarnAboutUpdateInRender) {
                error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                didWarnAboutUpdateInRender = true;
              }
              break;
            }
          }
        }
      }
    }
    function restorePendingUpdaters(root3, lanes) {
      {
        if (isDevToolsPresent) {
          var memoizedUpdaters = root3.memoizedUpdaters;
          memoizedUpdaters.forEach(function(schedulingFiber) {
            addFiberToLanesMap(root3, schedulingFiber, lanes);
          });
        }
      }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
      {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
          actQueue.push(callback);
          return fakeActCallbackNode;
        } else {
          return scheduleCallback(priorityLevel, callback);
        }
      }
    }
    function cancelCallback$1(callbackNode) {
      if (callbackNode === fakeActCallbackNode) {
        return;
      }
      return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
      return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
      {
        if (fiber.mode & ConcurrentMode) {
          if (!isConcurrentActEnvironment()) {
            return;
          }
        } else {
          if (!isLegacyActEnvironment()) {
            return;
          }
          if (executionContext !== NoContext) {
            return;
          }
          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
            return;
          }
        }
        if (ReactCurrentActQueue$1.current === null) {
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
      {
        if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
          error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
        }
      }
    }
    function setIsRunningInsertionEffect(isRunning) {
      {
        isRunningInsertionEffect = isRunning;
      }
    }
    var resolveFamily = null;
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
      {
        resolveFamily = handler;
      }
    };
    function resolveFunctionForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          return type;
        }
        return family.current;
      }
    }
    function resolveClassForHotReloading(type) {
      return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
      {
        if (resolveFamily === null) {
          return type;
        }
        var family = resolveFamily(type);
        if (family === void 0) {
          if (type !== null && type !== void 0 && typeof type.render === "function") {
            var currentRender = resolveFunctionForHotReloading(type.render);
            if (type.render !== currentRender) {
              var syntheticType = {
                $$typeof: REACT_FORWARD_REF_TYPE,
                render: currentRender
              };
              if (type.displayName !== void 0) {
                syntheticType.displayName = type.displayName;
              }
              return syntheticType;
            }
          }
          return type;
        }
        return family.current;
      }
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
      {
        if (resolveFamily === null) {
          return false;
        }
        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
        switch (fiber.tag) {
          case ClassComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            }
            break;
          }
          case FunctionComponent: {
            if (typeof nextType === "function") {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case ForwardRef: {
            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          case MemoComponent:
          case SimpleMemoComponent: {
            if ($$typeofNextType === REACT_MEMO_TYPE) {
              needsCompareFamilies = true;
            } else if ($$typeofNextType === REACT_LAZY_TYPE) {
              needsCompareFamilies = true;
            }
            break;
          }
          default:
            return false;
        }
        if (needsCompareFamilies) {
          var prevFamily = resolveFamily(prevType);
          if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
            return true;
          }
        }
        return false;
      }
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
      {
        if (resolveFamily === null) {
          return;
        }
        if (typeof WeakSet !== "function") {
          return;
        }
        if (failedBoundaries === null) {
          failedBoundaries = /* @__PURE__ */ new WeakSet();
        }
        failedBoundaries.add(fiber);
      }
    }
    var scheduleRefresh = function(root3, update) {
      {
        if (resolveFamily === null) {
          return;
        }
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
          scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
        });
      }
    };
    var scheduleRoot = function(root3, element) {
      {
        if (root3.context !== emptyContextObject) {
          return;
        }
        flushPassiveEffects();
        flushSync(function() {
          updateContainer(element, root3, null, null);
        });
      }
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
      {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        if (resolveFamily === null) {
          throw new Error("Expected resolveFamily to be set during hot reload.");
        }
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
          var family = resolveFamily(candidateType);
          if (family !== void 0) {
            if (staleFamilies.has(family)) {
              needsRemount = true;
            } else if (updatedFamilies.has(family)) {
              if (tag === ClassComponent) {
                needsRemount = true;
              } else {
                needsRender = true;
              }
            }
          }
        }
        if (failedBoundaries !== null) {
          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
            needsRemount = true;
          }
        }
        if (needsRemount) {
          fiber._debugNeedsRemount = true;
        }
        if (needsRemount || needsRender) {
          var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (_root !== null) {
            scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
          }
        }
        if (child !== null && !needsRemount) {
          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        }
        if (sibling !== null) {
          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
        }
      }
    }
    var findHostInstancesForRefresh = function(root3, families) {
      {
        var hostInstances = /* @__PURE__ */ new Set();
        var types = new Set(families.map(function(family) {
          return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
        return hostInstances;
      }
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
      {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch (tag) {
          case FunctionComponent:
          case SimpleMemoComponent:
          case ClassComponent:
            candidateType = type;
            break;
          case ForwardRef:
            candidateType = type.render;
            break;
        }
        var didMatch = false;
        if (candidateType !== null) {
          if (types.has(candidateType)) {
            didMatch = true;
          }
        }
        if (didMatch) {
          findHostInstancesForFiberShallowly(fiber, hostInstances);
        } else {
          if (child !== null) {
            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
          }
        }
        if (sibling !== null) {
          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
        }
      }
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) {
          return;
        }
        var node2 = fiber;
        while (true) {
          switch (node2.tag) {
            case HostComponent:
              hostInstances.add(node2.stateNode);
              return;
            case HostPortal:
              hostInstances.add(node2.stateNode.containerInfo);
              return;
            case HostRoot:
              hostInstances.add(node2.stateNode.containerInfo);
              return;
          }
          if (node2.return === null) {
            throw new Error("Expected to reach root first.");
          }
          node2 = node2.return;
        }
      }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
      {
        var node2 = fiber;
        var foundHostInstances = false;
        while (true) {
          if (node2.tag === HostComponent) {
            foundHostInstances = true;
            hostInstances.add(node2.stateNode);
          } else if (node2.child !== null) {
            node2.child.return = node2;
            node2 = node2.child;
            continue;
          }
          if (node2 === fiber) {
            return foundHostInstances;
          }
          while (node2.sibling === null) {
            if (node2.return === null || node2.return === fiber) {
              return foundHostInstances;
            }
            node2 = node2.return;
          }
          node2.sibling.return = node2.return;
          node2 = node2.sibling;
        }
      }
      return false;
    }
    var hasBadMapPolyfill;
    {
      hasBadMapPolyfill = false;
      try {
        var nonExtensibleObject = Object.preventExtensions({});
        /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
        /* @__PURE__ */ new Set([nonExtensibleObject]);
      } catch (e) {
        hasBadMapPolyfill = true;
      }
    }
    function FiberNode(tag, pendingProps, key, mode) {
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null;
      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.dependencies = null;
      this.mode = mode;
      this.flags = NoFlags;
      this.subtreeFlags = NoFlags;
      this.deletions = null;
      this.lanes = NoLanes;
      this.childLanes = NoLanes;
      this.alternate = null;
      {
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }
      {
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
          Object.preventExtensions(this);
        }
      }
    }
    var createFiber = function(tag, pendingProps, key, mode) {
      return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
      return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
    }
    function resolveLazyComponentTag(Component) {
      if (typeof Component === "function") {
        return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== void 0 && Component !== null) {
        var $$typeof = Component.$$typeof;
        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }
        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }
      return IndeterminateComponent;
    }
    function createWorkInProgress(current2, pendingProps) {
      var workInProgress2 = current2.alternate;
      if (workInProgress2 === null) {
        workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
        workInProgress2.elementType = current2.elementType;
        workInProgress2.type = current2.type;
        workInProgress2.stateNode = current2.stateNode;
        {
          workInProgress2._debugSource = current2._debugSource;
          workInProgress2._debugOwner = current2._debugOwner;
          workInProgress2._debugHookTypes = current2._debugHookTypes;
        }
        workInProgress2.alternate = current2;
        current2.alternate = workInProgress2;
      } else {
        workInProgress2.pendingProps = pendingProps;
        workInProgress2.type = current2.type;
        workInProgress2.flags = NoFlags;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        {
          workInProgress2.actualDuration = 0;
          workInProgress2.actualStartTime = -1;
        }
      }
      workInProgress2.flags = current2.flags & StaticMask;
      workInProgress2.childLanes = current2.childLanes;
      workInProgress2.lanes = current2.lanes;
      workInProgress2.child = current2.child;
      workInProgress2.memoizedProps = current2.memoizedProps;
      workInProgress2.memoizedState = current2.memoizedState;
      workInProgress2.updateQueue = current2.updateQueue;
      var currentDependencies = current2.dependencies;
      workInProgress2.dependencies = currentDependencies === null ? null : {
        lanes: currentDependencies.lanes,
        firstContext: currentDependencies.firstContext
      };
      workInProgress2.sibling = current2.sibling;
      workInProgress2.index = current2.index;
      workInProgress2.ref = current2.ref;
      {
        workInProgress2.selfBaseDuration = current2.selfBaseDuration;
        workInProgress2.treeBaseDuration = current2.treeBaseDuration;
      }
      {
        workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case FunctionComponent:
          case SimpleMemoComponent:
            workInProgress2.type = resolveFunctionForHotReloading(current2.type);
            break;
          case ClassComponent:
            workInProgress2.type = resolveClassForHotReloading(current2.type);
            break;
          case ForwardRef:
            workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
            break;
        }
      }
      return workInProgress2;
    }
    function resetWorkInProgress(workInProgress2, renderLanes2) {
      workInProgress2.flags &= StaticMask | Placement;
      var current2 = workInProgress2.alternate;
      if (current2 === null) {
        workInProgress2.childLanes = NoLanes;
        workInProgress2.lanes = renderLanes2;
        workInProgress2.child = null;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.memoizedProps = null;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.dependencies = null;
        workInProgress2.stateNode = null;
        {
          workInProgress2.selfBaseDuration = 0;
          workInProgress2.treeBaseDuration = 0;
        }
      } else {
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.subtreeFlags = NoFlags;
        workInProgress2.deletions = null;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.type = current2.type;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
      }
      return workInProgress2;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
      var mode;
      if (tag === ConcurrentRoot) {
        mode = ConcurrentMode;
        if (isStrictMode === true) {
          mode |= StrictLegacyMode;
          {
            mode |= StrictEffectsMode;
          }
        }
      } else {
        mode = NoMode;
      }
      if (isDevToolsPresent) {
        mode |= ProfileMode;
      }
      return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
      var fiberTag = IndeterminateComponent;
      var resolvedType = type;
      if (typeof type === "function") {
        if (shouldConstruct$1(type)) {
          fiberTag = ClassComponent;
          {
            resolvedType = resolveClassForHotReloading(resolvedType);
          }
        } else {
          {
            resolvedType = resolveFunctionForHotReloading(resolvedType);
          }
        }
      } else if (typeof type === "string") {
        fiberTag = HostComponent;
      } else {
        getTag:
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode;
              mode |= StrictLegacyMode;
              if ((mode & ConcurrentMode) !== NoMode) {
                mode |= StrictEffectsMode;
              }
              break;
            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default: {
              if (typeof type === "object" && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;
                  case REACT_CONTEXT_TYPE:
                    fiberTag = ContextConsumer;
                    break getTag;
                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    {
                      resolvedType = resolveForwardRefForHotReloading(resolvedType);
                    }
                    break getTag;
                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;
                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }
              var info = "";
              {
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
            }
          }
      }
      var fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.lanes = lanes;
      {
        fiber._debugOwner = owner;
      }
      return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
      {
        if (typeof pendingProps.id !== "string") {
          error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.lanes = lanes;
      {
        fiber.stateNode = {
          effectDuration: 0,
          passiveEffectDuration: 0
        };
      }
      return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
      fiber.elementType = REACT_OFFSCREEN_TYPE;
      fiber.lanes = lanes;
      var primaryChildInstance = {
        isHidden: false
      };
      fiber.stateNode = primaryChildInstance;
      return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.lanes = lanes;
      return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoMode);
      fiber.elementType = "DELETED";
      return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
      var fiber = createFiber(DehydratedFragment, null, null, NoMode);
      fiber.stateNode = dehydratedNode;
      return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.lanes = lanes;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        target = createFiber(IndeterminateComponent, null, null, NoMode);
      }
      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.dependencies = source.dependencies;
      target.mode = source.mode;
      target.flags = source.flags;
      target.subtreeFlags = source.subtreeFlags;
      target.deletions = source.deletions;
      target.lanes = source.lanes;
      target.childLanes = source.childLanes;
      target.alternate = source.alternate;
      {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugNeedsRemount = source._debugNeedsRemount;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
      this.tag = tag;
      this.containerInfo = containerInfo;
      this.pendingChildren = null;
      this.current = null;
      this.pingCache = null;
      this.finishedWork = null;
      this.timeoutHandle = noTimeout;
      this.context = null;
      this.pendingContext = null;
      this.callbackNode = null;
      this.callbackPriority = NoLane;
      this.eventTimes = createLaneMap(NoLanes);
      this.expirationTimes = createLaneMap(NoTimestamp);
      this.pendingLanes = NoLanes;
      this.suspendedLanes = NoLanes;
      this.pingedLanes = NoLanes;
      this.expiredLanes = NoLanes;
      this.mutableReadLanes = NoLanes;
      this.finishedLanes = NoLanes;
      this.entangledLanes = NoLanes;
      this.entanglements = createLaneMap(NoLanes);
      this.identifierPrefix = identifierPrefix;
      this.onRecoverableError = onRecoverableError;
      {
        this.mutableSourceEagerHydrationData = null;
      }
      {
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
      }
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for (var _i2 = 0; _i2 < TotalLanes; _i2++) {
          pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
        }
      }
      {
        switch (tag) {
          case ConcurrentRoot:
            this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
            break;
          case LegacyRoot:
            this._debugRootType = hydrate2 ? "hydrate()" : "render()";
            break;
        }
      }
    }
    function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
      root3.current = uninitializedFiber;
      uninitializedFiber.stateNode = root3;
      {
        var _initialState = {
          element: initialChildren,
          isDehydrated: hydrate2,
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
      }
      initializeUpdateQueue(uninitializedFiber);
      return root3;
    }
    var ReactVersion = "18.3.1";
    function createPortal(children, containerInfo, implementation) {
      var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      {
        checkKeyStringCoercion(key);
      }
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }
    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }
      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);
      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;
        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }
      return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);
        if (fiber === void 0) {
          if (typeof component.render === "function") {
            throw new Error("Unable to find node on an unmounted component.");
          } else {
            var keys2 = Object.keys(component).join(",");
            throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
          }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        if (hostFiber.mode & StrictLegacyMode) {
          var componentName2 = getComponentNameFromFiber(fiber) || "Component";
          if (!didWarnAboutFindNodeInStrictMode[componentName2]) {
            didWarnAboutFindNodeInStrictMode[componentName2] = true;
            var previousFiber = current;
            try {
              setCurrentFiber(hostFiber);
              if (fiber.mode & StrictLegacyMode) {
                error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName2);
              } else {
                error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName2);
              }
            } finally {
              if (previousFiber) {
                setCurrentFiber(previousFiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        return hostFiber.stateNode;
      }
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = false;
      var initialChildren = null;
      return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
      var hydrate2 = true;
      var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      root3.context = getContextForSubtree(null);
      var current2 = root3.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current2);
      var update = createUpdate(eventTime, lane);
      update.callback = callback !== void 0 && callback !== null ? callback : null;
      enqueueUpdate(current2, update, lane);
      scheduleInitialHydrationOnRoot(root3, lane, eventTime);
      return root3;
    }
    function updateContainer(element, container, parentComponent, callback) {
      {
        onScheduleRoot(container, element);
      }
      var current$1 = container.current;
      var eventTime = requestEventTime();
      var lane = requestUpdateLane(current$1);
      {
        markRenderScheduled(lane);
      }
      var context = getContextForSubtree(parentComponent);
      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }
      {
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
        }
      }
      var update = createUpdate(eventTime, lane);
      update.payload = {
        element
      };
      callback = callback === void 0 ? null : callback;
      if (callback !== null) {
        {
          if (typeof callback !== "function") {
            error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
          }
        }
        update.callback = callback;
      }
      var root3 = enqueueUpdate(current$1, update, lane);
      if (root3 !== null) {
        scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
        entangleTransitions(root3, current$1, lane);
      }
      return lane;
    }
    function getPublicRootInstance(container) {
      var containerFiber = container.current;
      if (!containerFiber.child) {
        return null;
      }
      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);
        default:
          return containerFiber.child.stateNode;
      }
    }
    function attemptSynchronousHydration$1(fiber) {
      switch (fiber.tag) {
        case HostRoot: {
          var root3 = fiber.stateNode;
          if (isRootDehydrated(root3)) {
            var lanes = getHighestPriorityPendingLanes(root3);
            flushRoot(root3, lanes);
          }
          break;
        }
        case SuspenseComponent: {
          flushSync(function() {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
            }
          });
          var retryLane = SyncLane;
          markRetryLaneIfNotHydrated(fiber, retryLane);
          break;
        }
      }
    }
    function markRetryLaneImpl(fiber, retryLane) {
      var suspenseState = fiber.memoizedState;
      if (suspenseState !== null && suspenseState.dehydrated !== null) {
        suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
      }
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
      markRetryLaneImpl(fiber, retryLane);
      var alternate = fiber.alternate;
      if (alternate) {
        markRetryLaneImpl(alternate, retryLane);
      }
    }
    function attemptContinuousHydration$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = SelectiveHydrationLane;
      var root3 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root3 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
      if (fiber.tag !== SuspenseComponent) {
        return;
      }
      var lane = requestUpdateLane(fiber);
      var root3 = enqueueConcurrentRenderForLane(fiber, lane);
      if (root3 !== null) {
        var eventTime = requestEventTime();
        scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
      }
      markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
      return null;
    };
    function shouldError(fiber) {
      return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
      return false;
    };
    function shouldSuspend(fiber) {
      return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    {
      var copyWithDeleteImpl = function(obj, path, index3) {
        var key = path[index3];
        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
        if (index3 + 1 === path.length) {
          if (isArray(updated)) {
            updated.splice(key, 1);
          } else {
            delete updated[key];
          }
          return updated;
        }
        updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
        return updated;
      };
      var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
      };
      var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
        var oldKey = oldPath[index3];
        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
        if (index3 + 1 === oldPath.length) {
          var newKey = newPath[index3];
          updated[newKey] = updated[oldKey];
          if (isArray(updated)) {
            updated.splice(oldKey, 1);
          } else {
            delete updated[oldKey];
          }
        } else {
          updated[oldKey] = copyWithRenameImpl(
            // $FlowFixMe number or string is fine here
            obj[oldKey],
            oldPath,
            newPath,
            index3 + 1
          );
        }
        return updated;
      };
      var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
          warn("copyWithRename() expects paths of the same length");
          return;
        } else {
          for (var i = 0; i < newPath.length - 1; i++) {
            if (oldPath[i] !== newPath[i]) {
              warn("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
          }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
      };
      var copyWithSetImpl = function(obj, path, index3, value) {
        if (index3 >= path.length) {
          return value;
        }
        var key = path[index3];
        var updated = isArray(obj) ? obj.slice() : assign2({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
        return updated;
      };
      var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      };
      var findHook = function(fiber, id) {
        var currentHook2 = fiber.memoizedState;
        while (currentHook2 !== null && id > 0) {
          currentHook2 = currentHook2.next;
          id--;
        }
        return currentHook2;
      };
      overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithSet(hook.memoizedState, path, value);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithDelete(hook.memoizedState, path);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
          hook.memoizedState = newState;
          hook.baseState = newState;
          fiber.memoizedProps = assign2({}, fiber.memoizedProps);
          var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root3 !== null) {
            scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
          }
        }
      };
      overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      scheduleUpdate = function(fiber) {
        var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root3 !== null) {
          scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
        }
      };
      setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
      };
      setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
      };
    }
    function findHostInstanceByFiber(fiber) {
      var hostFiber = findCurrentHostFiber(fiber);
      if (hostFiber === null) {
        return null;
      }
      return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance2) {
      return null;
    }
    function getCurrentFiberForDevTools() {
      return current;
    }
    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals({
        bundleType: devToolsConfig.bundleType,
        version: devToolsConfig.version,
        rendererPackageName: devToolsConfig.rendererPackageName,
        rendererConfig: devToolsConfig.rendererConfig,
        overrideHookState,
        overrideHookStateDeletePath,
        overrideHookStateRenamePath,
        overrideProps,
        overridePropsDeletePath,
        overridePropsRenamePath,
        setErrorHandler,
        setSuspenseHandler,
        scheduleUpdate,
        currentDispatcherRef: ReactCurrentDispatcher2,
        findHostInstanceByFiber,
        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
        // React Refresh
        findHostInstancesForRefresh,
        scheduleRefresh,
        scheduleRoot,
        setRefreshHandler,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: getCurrentFiberForDevTools,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: ReactVersion
      });
    }
    var defaultOnRecoverableError = typeof reportError === "function" ? (
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(error3) {
      console["error"](error3);
    };
    function ReactDOMRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
      var root3 = this._internalRoot;
      if (root3 === null) {
        throw new Error("Cannot update an unmounted root.");
      }
      {
        if (typeof arguments[1] === "function") {
          error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        } else if (isValidContainer(arguments[1])) {
          error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        } else if (typeof arguments[1] !== "undefined") {
          error2("You passed a second argument to root.render(...) but it only accepts one argument.");
        }
        var container = root3.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(root3.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
          }
        }
      }
      updateContainer(children, root3, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
      {
        if (typeof arguments[0] === "function") {
          error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        }
      }
      var root3 = this._internalRoot;
      if (root3 !== null) {
        this._internalRoot = null;
        var container = root3.containerInfo;
        {
          if (isAlreadyRendering()) {
            error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
          }
        }
        flushSync(function() {
          updateContainer(null, root3, null, null);
        });
        unmarkContainerAsRoot(container);
      }
    };
    function createRoot2(container, options2) {
      if (!isValidContainer(container)) {
        throw new Error("createRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        {
          if (options2.hydrate) {
            warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
          } else {
            if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE2) {
              error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            }
          }
        }
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
        if (options2.transitionCallbacks !== void 0) {
          options2.transitionCallbacks;
        }
      }
      var root3 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root3.current, container);
      var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
      listenToAllSupportedEvents(rootContainerElement);
      return new ReactDOMRoot(root3);
    }
    function ReactDOMHydrationRoot(internalRoot) {
      this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
      if (target) {
        queueExplicitHydrationTarget(target);
      }
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options2) {
      if (!isValidContainer(container)) {
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
      }
      warnIfReactDOMContainerInDEV(container);
      {
        if (initialChildren === void 0) {
          error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        }
      }
      var hydrationCallbacks = options2 != null ? options2 : null;
      var mutableSources = options2 != null && options2.hydratedSources || null;
      var isStrictMode = false;
      var concurrentUpdatesByDefaultOverride = false;
      var identifierPrefix = "";
      var onRecoverableError = defaultOnRecoverableError;
      if (options2 !== null && options2 !== void 0) {
        if (options2.unstable_strictMode === true) {
          isStrictMode = true;
        }
        if (options2.identifierPrefix !== void 0) {
          identifierPrefix = options2.identifierPrefix;
        }
        if (options2.onRecoverableError !== void 0) {
          onRecoverableError = options2.onRecoverableError;
        }
      }
      var root3 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      markContainerAsRoot(root3.current, container);
      listenToAllSupportedEvents(container);
      if (mutableSources) {
        for (var i = 0; i < mutableSources.length; i++) {
          var mutableSource = mutableSources[i];
          registerMutableSourceForHydration(root3, mutableSource);
        }
      }
      return new ReactDOMHydrationRoot(root3);
    }
    function isValidContainer(node2) {
      return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node2) {
      return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
    }
    function warnIfReactDOMContainerInDEV(container) {
      {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        }
        if (isContainerMarkedAsRoot(container)) {
          if (container._reactRootContainer) {
            error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
          } else {
            error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
          }
        }
      }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    {
      topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
          if (hostInstance) {
            if (hostInstance.parentNode !== container) {
              error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
          }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
          error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        }
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
          error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
        }
      };
    }
    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }
      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }
    function noopOnRecoverableError() {
    }
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
      if (isHydrationContainer) {
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(root3);
            originalCallback.call(instance2);
          };
        }
        var root3 = createHydrationContainer(
          initialChildren,
          callback,
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = root3;
        markContainerAsRoot(root3.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        flushSync();
        return root3;
      } else {
        var rootSibling;
        while (rootSibling = container.lastChild) {
          container.removeChild(rootSibling);
        }
        if (typeof callback === "function") {
          var _originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(_root);
            _originalCallback.call(instance2);
          };
        }
        var _root = createContainer(
          container,
          LegacyRoot,
          null,
          // hydrationCallbacks
          false,
          // isStrictMode
          false,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
          noopOnRecoverableError
        );
        container._reactRootContainer = _root;
        markContainerAsRoot(_root.current, container);
        var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(_rootContainerElement);
        flushSync(function() {
          updateContainer(initialChildren, _root, parentComponent, callback);
        });
        return _root;
      }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
      {
        if (callback !== null && typeof callback !== "function") {
          error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
      }
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
      }
      var maybeRoot = container._reactRootContainer;
      var root3;
      if (!maybeRoot) {
        root3 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
      } else {
        root3 = maybeRoot;
        if (typeof callback === "function") {
          var originalCallback = callback;
          callback = function() {
            var instance2 = getPublicRootInstance(root3);
            originalCallback.call(instance2);
          };
        }
        updateContainer(children, root3, parentComponent, callback);
      }
      return getPublicRootInstance(root3);
    }
    var didWarnAboutFindDOMNode = false;
    function findDOMNode(componentOrElement) {
      {
        if (!didWarnAboutFindDOMNode) {
          didWarnAboutFindDOMNode = true;
          error2("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
        }
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
          var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
          if (!warnedAboutRefsInRender) {
            error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
          }
          owner.stateNode._warnedAboutRefsInRender = true;
        }
      }
      if (componentOrElement == null) {
        return null;
      }
      if (componentOrElement.nodeType === ELEMENT_NODE) {
        return componentOrElement;
      }
      {
        return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
      }
    }
    function hydrate(element, container, callback) {
      {
        error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
      {
        error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        }
      }
      return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      {
        error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
      }
      if (!isValidContainerLegacy(containerNode)) {
        throw new Error("Target container is not a DOM element.");
      }
      if (parentComponent == null || !has(parentComponent)) {
        throw new Error("parentComponent must be a valid React Component");
      }
      return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    var didWarnAboutUnmountComponentAtNode = false;
    function unmountComponentAtNode(container) {
      {
        if (!didWarnAboutUnmountComponentAtNode) {
          didWarnAboutUnmountComponentAtNode = true;
          error2("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
      }
      if (!isValidContainerLegacy(container)) {
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      }
      {
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
        if (isModernRoot) {
          error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        }
      }
      if (container._reactRootContainer) {
        {
          var rootEl = getReactRootElementInContainer(container);
          var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
          if (renderedByDifferentReact) {
            error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
          }
        }
        flushSync(function() {
          legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
            container._reactRootContainer = null;
            unmarkContainerAsRoot(container);
          });
        });
        return true;
      } else {
        {
          var _rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
          var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
          if (hasNonRootReactChild) {
            error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
          }
        }
        return false;
      }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    {
      if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
        error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
      }
    }
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (!isValidContainer(container)) {
        throw new Error("Target container is not a DOM element.");
      }
      return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
      return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
      usingClientEntryPoint: false,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
      Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
    };
    function createRoot$1(container, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return createRoot2(container, options2);
    }
    function hydrateRoot$1(container, initialChildren, options2) {
      {
        if (!Internals.usingClientEntryPoint && true) {
          error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        }
      }
      return hydrateRoot(container, initialChildren, options2);
    }
    function flushSync$1(fn) {
      {
        if (isAlreadyRendering()) {
          error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        }
      }
      return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: "react-dom"
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
          var protocol = window.location.protocol;
          if (/^(https?|file):$/.test(protocol)) {
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
          }
        }
      }
    }
    reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    reactDom_development.createPortal = createPortal$1;
    reactDom_development.createRoot = createRoot$1;
    reactDom_development.findDOMNode = findDOMNode;
    reactDom_development.flushSync = flushSync$1;
    reactDom_development.hydrate = hydrate;
    reactDom_development.hydrateRoot = hydrateRoot$1;
    reactDom_development.render = render;
    reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
    reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
    reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    reactDom_development.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}
{
  reactDom.exports = reactDom_development;
}
var reactDomExports = reactDom.exports;
const ReactDOM = /* @__PURE__ */ getDefaultExportFromCjs(reactDomExports);
const _2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: ReactDOM
}, [reactDomExports]);
var createRoot;
var m = reactDomExports;
{
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  createRoot = function(c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}
var extendStatics = function(d2, b2) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
    d3.__proto__ = b3;
  } || function(d3, b3) {
    for (var p2 in b3)
      if (Object.prototype.hasOwnProperty.call(b3, p2))
        d3[p2] = b3[p2];
  };
  return extendStatics(d2, b2);
};
function __extends(d2, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d2, b2);
  function __() {
    this.constructor = d2;
  }
  d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2))
          t[p2] = s[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p2 in s)
    if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
      t[p2] = s[p2];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
      if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
        t[p2[i]] = s[p2[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r3 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r3 = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d2 = decorators[i])
        r3 = (c < 3 ? d2(r3) : c > 3 ? d2(target, key, r3) : d2(target, key)) || r3;
  return c > 3 && r3 && Object.defineProperty(target, key, r3), r3;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f2) {
    if (f2 !== void 0 && typeof f2 !== "function")
      throw new TypeError("Function expected");
    return f2;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p2 in contextIn)
      context[p2] = p2 === "access" ? {} : contextIn[p2];
    for (var p2 in contextIn.access)
      context.access[p2] = contextIn.access[p2];
    context.addInitializer = function(f2) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f2 || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f2, name, prefix2) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f2, "name", { configurable: true, value: prefix2 ? "".concat(prefix2, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body2) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y2, t, g2 = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g2.next = verb(0), g2["throw"] = verb(1), g2["return"] = verb(2), typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
    return this;
  }), g2;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f2)
      throw new TypeError("Generator is already executing.");
    while (g2 && (g2 = 0, op[0] && (_ = 0)), _)
      try {
        if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
          return t;
        if (y2 = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y2 = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body2.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y2 = 0;
      } finally {
        f2 = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
var __createBinding = Object.create ? function(o, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  var desc = Object.getOwnPropertyDescriptor(m2, k2);
  if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
    desc = { enumerable: true, get: function() {
      return m2[k2];
    } };
  }
  Object.defineProperty(o, k22, desc);
} : function(o, m2, k2, k22) {
  if (k22 === void 0)
    k22 = k2;
  o[k22] = m2[k2];
};
function __exportStar(m2, o) {
  for (var p2 in m2)
    if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o, p2))
      __createBinding(o, m2, p2);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m2 = s && o[s], i = 0;
  if (m2)
    return m2.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m2 = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m2)
    return o;
  var i = m2.call(o), r3, ar2 = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r3 = i.next()).done)
      ar2.push(r3.value);
  } catch (error2) {
    e = { error: error2 };
  } finally {
    try {
      if (r3 && !r3.done && (m2 = i["return"]))
        m2.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar2;
}
function __spread() {
  for (var ar2 = [], i = 0; i < arguments.length; i++)
    ar2 = ar2.concat(__read(arguments[i]));
  return ar2;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r3 = Array(s), k2 = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j2 = 0, jl = a.length; j2 < jl; j2++, k2++)
      r3[k2] = a[j2];
  return r3;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar2; i < l; i++) {
      if (ar2 || !(i in from2)) {
        if (!ar2)
          ar2 = Array.prototype.slice.call(from2, 0, i);
        ar2[i] = from2[i];
      }
    }
  return to.concat(ar2 || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g2 = generator.apply(thisArg, _arguments || []), i, q2 = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f2) {
    return function(v) {
      return Promise.resolve(v).then(f2, reject);
    };
  }
  function verb(n, f2) {
    if (g2[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b2) {
          q2.push([n, v, a, b2]) > 1 || resume(n, v);
        });
      };
      if (f2)
        i[n] = f2(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g2[n](v));
    } catch (e) {
      settle(q2[0][3], e);
    }
  }
  function step(r3) {
    r3.value instanceof __await ? Promise.resolve(r3.value.v).then(fulfill, reject) : settle(q2[0][2], r3);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q2.shift(), q2.length)
      resume(q2[0][0], q2[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p2;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f2) {
    i[n] = o[n] ? function(v) {
      return (p2 = !p2) ? { value: __await(o[n](v)), done: false } : f2 ? f2(v) : v;
    } : f2;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m2 = o[Symbol.asyncIterator], i;
  return m2 ? m2.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d2, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d2 });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
} : function(o, v) {
  o["default"] = v;
};
var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function(o2) {
    var ar2 = [];
    for (var k2 in o2)
      if (Object.prototype.hasOwnProperty.call(o2, k2))
        ar2[ar2.length] = k2;
    return ar2;
  };
  return ownKeys(o);
};
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k2 = ownKeys(mod), i = 0; i < k2.length; i++)
      if (k2[i] !== "default")
        __createBinding(result, mod, k2[i]);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner)
      dispose = function() {
        try {
          inner.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      };
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error2, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error2, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r3, s = 0;
  function next2() {
    while (r3 = env.stack.pop()) {
      try {
        if (!r3.async && s === 1)
          return s = 0, env.stack.push(r3), Promise.resolve().then(next2);
        if (r3.dispose) {
          var result = r3.dispose.call(r3.value);
          if (r3.async)
            return s |= 2, Promise.resolve(result).then(next2, function(e) {
              fail(e);
              return next2();
            });
        } else
          s |= 1;
      } catch (e) {
        fail(e);
      }
    }
    if (s === 1)
      return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError)
      throw env.error;
  }
  return next2();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
    return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m2, tsx, d2, ext, cm) {
      return tsx ? preserveJsx ? ".jsx" : ".js" : d2 && (!ext || !cm) ? m2 : d2 + ext + "." + cm.toLowerCase() + "js";
    });
  }
  return path;
}
const tslib_es6 = {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension
};
const _0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  __addDisposableResource,
  get __assign() {
    return __assign;
  },
  __asyncDelegator,
  __asyncGenerator,
  __asyncValues,
  __await,
  __awaiter,
  __classPrivateFieldGet,
  __classPrivateFieldIn,
  __classPrivateFieldSet,
  __createBinding,
  __decorate,
  __disposeResources,
  __esDecorate,
  __exportStar,
  __extends,
  __generator,
  __importDefault,
  __importStar,
  __makeTemplateObject,
  __metadata,
  __param,
  __propKey,
  __read,
  __rest,
  __rewriteRelativeImportExtension,
  __runInitializers,
  __setFunctionName,
  __spread,
  __spreadArray,
  __spreadArrays,
  __values,
  default: tslib_es6
}, Symbol.toStringTag, { value: "Module" }));
(function() {
  function errMsg(errCode, msg) {
    return (msg || "") + " (SystemJS Error#" + errCode + " https://github.com/systemjs/systemjs/blob/main/docs/errors.md#" + errCode + ")";
  }
  var hasSymbol = typeof Symbol !== "undefined";
  var hasSelf = typeof self !== "undefined";
  var hasDocument = typeof document !== "undefined";
  var envGlobal = hasSelf ? self : global;
  var baseUrl;
  if (hasDocument) {
    var baseEl = document.querySelector("base[href]");
    if (baseEl)
      baseUrl = baseEl.href;
  }
  if (!baseUrl && typeof location !== "undefined") {
    baseUrl = location.href.split("#")[0].split("?")[0];
    var lastSepIndex = baseUrl.lastIndexOf("/");
    if (lastSepIndex !== -1)
      baseUrl = baseUrl.slice(0, lastSepIndex + 1);
  }
  var backslashRegEx = /\\/g;
  function resolveIfNotPlainOrUrl(relUrl, parentUrl) {
    if (relUrl.indexOf("\\") !== -1)
      relUrl = relUrl.replace(backslashRegEx, "/");
    if (relUrl[0] === "/" && relUrl[1] === "/") {
      return parentUrl.slice(0, parentUrl.indexOf(":") + 1) + relUrl;
    } else if (relUrl[0] === "." && (relUrl[1] === "/" || relUrl[1] === "." && (relUrl[2] === "/" || relUrl.length === 2 && (relUrl += "/")) || relUrl.length === 1 && (relUrl += "/")) || relUrl[0] === "/") {
      var parentProtocol = parentUrl.slice(0, parentUrl.indexOf(":") + 1);
      var pathname;
      if (parentUrl[parentProtocol.length + 1] === "/") {
        if (parentProtocol !== "file:") {
          pathname = parentUrl.slice(parentProtocol.length + 2);
          pathname = pathname.slice(pathname.indexOf("/") + 1);
        } else {
          pathname = parentUrl.slice(8);
        }
      } else {
        pathname = parentUrl.slice(parentProtocol.length + (parentUrl[parentProtocol.length] === "/"));
      }
      if (relUrl[0] === "/")
        return parentUrl.slice(0, parentUrl.length - pathname.length - 1) + relUrl;
      var segmented = pathname.slice(0, pathname.lastIndexOf("/") + 1) + relUrl;
      var output = [];
      var segmentIndex = -1;
      for (var i = 0; i < segmented.length; i++) {
        if (segmentIndex !== -1) {
          if (segmented[i] === "/") {
            output.push(segmented.slice(segmentIndex, i + 1));
            segmentIndex = -1;
          }
        } else if (segmented[i] === ".") {
          if (segmented[i + 1] === "." && (segmented[i + 2] === "/" || i + 2 === segmented.length)) {
            output.pop();
            i += 2;
          } else if (segmented[i + 1] === "/" || i + 1 === segmented.length) {
            i += 1;
          } else {
            segmentIndex = i;
          }
        } else {
          segmentIndex = i;
        }
      }
      if (segmentIndex !== -1)
        output.push(segmented.slice(segmentIndex));
      return parentUrl.slice(0, parentUrl.length - pathname.length) + output.join("");
    }
  }
  function resolveUrl(relUrl, parentUrl) {
    return resolveIfNotPlainOrUrl(relUrl, parentUrl) || (relUrl.indexOf(":") !== -1 ? relUrl : resolveIfNotPlainOrUrl("./" + relUrl, parentUrl));
  }
  function resolveAndComposePackages(packages, outPackages, baseUrl2, parentMap, parentUrl) {
    for (var p2 in packages) {
      var resolvedLhs = resolveIfNotPlainOrUrl(p2, baseUrl2) || p2;
      var rhs = packages[p2];
      if (typeof rhs !== "string")
        continue;
      var mapped = resolveImportMap(parentMap, resolveIfNotPlainOrUrl(rhs, baseUrl2) || rhs, parentUrl);
      if (!mapped) {
        targetWarning("W1", p2, rhs, "bare specifier did not resolve");
      } else
        outPackages[resolvedLhs] = mapped;
    }
  }
  function resolveAndComposeImportMap(json3, baseUrl2, outMap) {
    if (json3.imports)
      resolveAndComposePackages(json3.imports, outMap.imports, baseUrl2, outMap, null);
    var u;
    for (u in json3.scopes || {}) {
      var resolvedScope = resolveUrl(u, baseUrl2);
      resolveAndComposePackages(json3.scopes[u], outMap.scopes[resolvedScope] || (outMap.scopes[resolvedScope] = {}), baseUrl2, outMap, resolvedScope);
    }
    for (u in json3.depcache || {})
      outMap.depcache[resolveUrl(u, baseUrl2)] = json3.depcache[u];
    for (u in json3.integrity || {})
      outMap.integrity[resolveUrl(u, baseUrl2)] = json3.integrity[u];
  }
  function getMatch(path, matchObj) {
    if (matchObj[path])
      return path;
    var sepIndex = path.length;
    do {
      var segment = path.slice(0, sepIndex + 1);
      if (segment in matchObj)
        return segment;
    } while ((sepIndex = path.lastIndexOf("/", sepIndex - 1)) !== -1);
  }
  function applyPackages(id, packages) {
    var pkgName = getMatch(id, packages);
    if (pkgName) {
      var pkg = packages[pkgName];
      if (pkg === null)
        return;
      if (id.length > pkgName.length && pkg[pkg.length - 1] !== "/") {
        targetWarning("W2", pkgName, pkg, "should have a trailing '/'");
      } else
        return pkg + id.slice(pkgName.length);
    }
  }
  function targetWarning(code, match2, target, msg) {
    console.warn(errMsg(code, "Package target " + msg + ", resolving target '" + target + "' for " + match2));
  }
  function resolveImportMap(importMap2, resolvedOrPlain, parentUrl) {
    var scopes = importMap2.scopes;
    var scopeUrl = parentUrl && getMatch(parentUrl, scopes);
    while (scopeUrl) {
      var packageResolution = applyPackages(resolvedOrPlain, scopes[scopeUrl]);
      if (packageResolution)
        return packageResolution;
      scopeUrl = getMatch(scopeUrl.slice(0, scopeUrl.lastIndexOf("/")), scopes);
    }
    return applyPackages(resolvedOrPlain, importMap2.imports) || resolvedOrPlain.indexOf(":") !== -1 && resolvedOrPlain;
  }
  var toStringTag$1 = hasSymbol && Symbol.toStringTag;
  var REGISTRY = hasSymbol ? Symbol() : "@";
  function SystemJS() {
    this[REGISTRY] = {};
  }
  var systemJSPrototype = SystemJS.prototype;
  systemJSPrototype.import = function(id, parentUrl, meta) {
    var loader8 = this;
    parentUrl && typeof parentUrl === "object" && (meta = parentUrl, parentUrl = void 0);
    return Promise.resolve(loader8.prepareImport()).then(function() {
      return loader8.resolve(id, parentUrl, meta);
    }).then(function(id2) {
      var load = getOrCreateLoad(loader8, id2, void 0, meta);
      return load.C || topLevelLoad(loader8, load);
    });
  };
  systemJSPrototype.createContext = function(parentId) {
    var loader8 = this;
    return {
      url: parentId,
      resolve: function(id, parentUrl) {
        return Promise.resolve(loader8.resolve(id, parentUrl || parentId));
      }
    };
  };
  systemJSPrototype.onload = function() {
  };
  function loadToId(load) {
    return load.id;
  }
  function triggerOnload(loader8, load, err, isErrSource) {
    loader8.onload(err, load.id, load.d && load.d.map(loadToId), !!isErrSource);
    if (err)
      throw err;
  }
  var lastRegister;
  systemJSPrototype.register = function(deps, declare, metas) {
    lastRegister = [deps, declare, metas];
  };
  systemJSPrototype.getRegister = function() {
    var _lastRegister = lastRegister;
    lastRegister = void 0;
    return _lastRegister;
  };
  function getOrCreateLoad(loader8, id, firstParentUrl, meta) {
    var load = loader8[REGISTRY][id];
    if (load)
      return load;
    var importerSetters = [];
    var ns2 = /* @__PURE__ */ Object.create(null);
    if (toStringTag$1)
      Object.defineProperty(ns2, toStringTag$1, { value: "Module" });
    var instantiatePromise = Promise.resolve().then(function() {
      return loader8.instantiate(id, firstParentUrl, meta);
    }).then(function(registration) {
      if (!registration)
        throw Error(errMsg(2, "Module " + id + " did not instantiate"));
      function _export(name, value) {
        load.h = true;
        var changed = false;
        if (typeof name === "string") {
          if (!(name in ns2) || ns2[name] !== value) {
            ns2[name] = value;
            changed = true;
          }
        } else {
          for (var p2 in name) {
            var value = name[p2];
            if (!(p2 in ns2) || ns2[p2] !== value) {
              ns2[p2] = value;
              changed = true;
            }
          }
          if (name && name.__esModule) {
            ns2.__esModule = name.__esModule;
          }
        }
        if (changed)
          for (var i = 0; i < importerSetters.length; i++) {
            var setter = importerSetters[i];
            if (setter)
              setter(ns2);
          }
        return value;
      }
      var declared = registration[1](_export, registration[1].length === 2 ? {
        import: function(importId, meta2) {
          return loader8.import(importId, id, meta2);
        },
        meta: loader8.createContext(id)
      } : void 0);
      load.e = declared.execute || function() {
      };
      return [registration[0], declared.setters || [], registration[2] || []];
    }, function(err) {
      load.e = null;
      load.er = err;
      triggerOnload(loader8, load, err, true);
      throw err;
    });
    var linkPromise = instantiatePromise.then(function(instantiation) {
      return Promise.all(instantiation[0].map(function(dep, i) {
        var setter = instantiation[1][i];
        var meta2 = instantiation[2][i];
        return Promise.resolve(loader8.resolve(dep, id)).then(function(depId) {
          var depLoad = getOrCreateLoad(loader8, depId, id, meta2);
          return Promise.resolve(depLoad.I).then(function() {
            if (setter) {
              depLoad.i.push(setter);
              if (depLoad.h || !depLoad.I)
                setter(depLoad.n);
            }
            return depLoad;
          });
        });
      })).then(function(depLoads) {
        load.d = depLoads;
      });
    });
    return load = loader8[REGISTRY][id] = {
      id,
      i: importerSetters,
      n: ns2,
      m: meta,
      I: instantiatePromise,
      L: linkPromise,
      h: false,
      d: void 0,
      e: void 0,
      er: void 0,
      E: void 0,
      C: void 0,
      p: void 0
    };
  }
  function instantiateAll(loader8, load, parent, loaded) {
    if (!loaded[load.id]) {
      loaded[load.id] = true;
      return Promise.resolve(load.L).then(function() {
        if (!load.p || load.p.e === null)
          load.p = parent;
        return Promise.all(load.d.map(function(dep) {
          return instantiateAll(loader8, dep, parent, loaded);
        }));
      }).catch(function(err) {
        if (load.er)
          throw err;
        load.e = null;
        triggerOnload(loader8, load, err, false);
        throw err;
      });
    }
  }
  function topLevelLoad(loader8, load) {
    return load.C = instantiateAll(loader8, load, load, {}).then(function() {
      return postOrderExec(loader8, load, {});
    }).then(function() {
      return load.n;
    });
  }
  var nullContext = Object.freeze(/* @__PURE__ */ Object.create(null));
  function postOrderExec(loader8, load, seen) {
    if (seen[load.id])
      return;
    seen[load.id] = true;
    if (!load.e) {
      if (load.er)
        throw load.er;
      if (load.E)
        return load.E;
      return;
    }
    var exec = load.e;
    load.e = null;
    var depLoadPromises;
    load.d.forEach(function(depLoad) {
      try {
        var depLoadPromise = postOrderExec(loader8, depLoad, seen);
        if (depLoadPromise)
          (depLoadPromises = depLoadPromises || []).push(depLoadPromise);
      } catch (err) {
        load.er = err;
        triggerOnload(loader8, load, err, false);
        throw err;
      }
    });
    if (depLoadPromises)
      return Promise.all(depLoadPromises).then(doExec);
    return doExec();
    function doExec() {
      try {
        var execPromise = exec.call(nullContext);
        if (execPromise) {
          execPromise = execPromise.then(function() {
            load.C = load.n;
            load.E = null;
            if (true)
              triggerOnload(loader8, load, null, true);
          }, function(err) {
            load.er = err;
            load.E = null;
            if (true)
              triggerOnload(loader8, load, err, true);
            throw err;
          });
          return load.E = execPromise;
        }
        load.C = load.n;
        load.L = load.I = void 0;
      } catch (err) {
        load.er = err;
        throw err;
      } finally {
        triggerOnload(loader8, load, load.er, true);
      }
    }
  }
  envGlobal.System = new SystemJS();
  var importMapPromise = Promise.resolve();
  var importMap = { imports: {}, scopes: {}, depcache: {}, integrity: {} };
  var processFirst = hasDocument;
  systemJSPrototype.prepareImport = function(doProcessScripts) {
    if (processFirst || doProcessScripts) {
      processScripts();
      processFirst = false;
    }
    return importMapPromise;
  };
  if (hasDocument) {
    processScripts();
    window.addEventListener("DOMContentLoaded", processScripts);
  }
  systemJSPrototype.addImportMap = function(newMap, mapBase) {
    resolveAndComposeImportMap(newMap, mapBase || baseUrl, importMap);
  };
  function processScripts() {
    [].forEach.call(document.querySelectorAll("script"), function(script) {
      if (script.sp)
        return;
      if (script.type === "systemjs-module") {
        script.sp = true;
        if (!script.src)
          return;
        System.import(script.src.slice(0, 7) === "import:" ? script.src.slice(7) : resolveUrl(script.src, baseUrl)).catch(function(e) {
          if (e.message.indexOf("https://github.com/systemjs/systemjs/blob/main/docs/errors.md#3") > -1) {
            var event = document.createEvent("Event");
            event.initEvent("error", false, false);
            script.dispatchEvent(event);
          }
          return Promise.reject(e);
        });
      } else if (script.type === "systemjs-importmap") {
        script.sp = true;
        var fetchPromise = script.src ? (System.fetch || fetch)(script.src, { integrity: script.integrity, passThrough: true }).then(function(res) {
          if (!res.ok)
            throw Error("Invalid status code: " + res.status);
          return res.text();
        }).catch(function(err) {
          err.message = errMsg("W4", "Error fetching systemjs-import map " + script.src) + "\n" + err.message;
          console.warn(err);
          if (typeof script.onerror === "function") {
            script.onerror();
          }
          return "{}";
        }) : script.innerHTML;
        importMapPromise = importMapPromise.then(function() {
          return fetchPromise;
        }).then(function(text) {
          extendImportMap(importMap, text, script.src || baseUrl);
        });
      }
    });
  }
  function extendImportMap(importMap2, newMapText, newMapUrl) {
    var newMap = {};
    try {
      newMap = JSON.parse(newMapText);
    } catch (err) {
      console.warn(Error(errMsg("W5", "systemjs-importmap contains invalid JSON") + "\n\n" + newMapText + "\n"));
    }
    resolveAndComposeImportMap(newMap, newMapUrl, importMap2);
  }
  if (hasDocument) {
    window.addEventListener("error", function(evt) {
      lastWindowErrorUrl = evt.filename;
      lastWindowError = evt.error;
    });
    var baseOrigin = location.origin;
  }
  systemJSPrototype.createScript = function(url) {
    var script = document.createElement("script");
    script.async = true;
    if (url.indexOf(baseOrigin + "/"))
      script.crossOrigin = "anonymous";
    var integrity = importMap.integrity[url];
    if (integrity)
      script.integrity = integrity;
    script.src = url;
    return script;
  };
  var lastAutoImportDeps, lastAutoImportTimeout;
  var autoImportCandidates = {};
  var systemRegister2 = systemJSPrototype.register;
  systemJSPrototype.register = function(deps, declare) {
    if (hasDocument && document.readyState === "loading" && typeof deps !== "string") {
      var scripts = document.querySelectorAll("script[src]");
      var lastScript = scripts[scripts.length - 1];
      if (lastScript) {
        lastScript.src;
        lastAutoImportDeps = deps;
        var loader8 = this;
        lastAutoImportTimeout = setTimeout(function() {
          autoImportCandidates[lastScript.src] = [deps, declare];
          loader8.import(lastScript.src);
        });
      }
    } else {
      lastAutoImportDeps = void 0;
    }
    return systemRegister2.call(this, deps, declare);
  };
  var lastWindowErrorUrl, lastWindowError;
  systemJSPrototype.instantiate = function(url, firstParentUrl) {
    var autoImportRegistration = autoImportCandidates[url];
    if (autoImportRegistration) {
      delete autoImportCandidates[url];
      return autoImportRegistration;
    }
    var loader8 = this;
    return Promise.resolve(systemJSPrototype.createScript(url)).then(function(script) {
      return new Promise(function(resolve, reject) {
        script.addEventListener("error", function() {
          reject(Error(errMsg(3, "Error loading " + url + (firstParentUrl ? " from " + firstParentUrl : ""))));
        });
        script.addEventListener("load", function() {
          document.head.removeChild(script);
          if (lastWindowErrorUrl === url) {
            reject(lastWindowError);
          } else {
            var register = loader8.getRegister(url);
            if (register && register[0] === lastAutoImportDeps)
              clearTimeout(lastAutoImportTimeout);
            resolve(register);
          }
        });
        document.head.appendChild(script);
      });
    });
  };
  systemJSPrototype.shouldFetch = function() {
    return false;
  };
  if (typeof fetch !== "undefined")
    systemJSPrototype.fetch = fetch;
  var instantiate = systemJSPrototype.instantiate;
  var jsContentTypeRegEx = /^(text|application)\/(x-)?javascript(;|$)/;
  systemJSPrototype.instantiate = function(url, parent, meta) {
    var loader8 = this;
    if (!this.shouldFetch(url, parent, meta))
      return instantiate.apply(this, arguments);
    return this.fetch(url, {
      credentials: "same-origin",
      integrity: importMap.integrity[url],
      meta
    }).then(function(res) {
      if (!res.ok)
        throw Error(errMsg(7, res.status + " " + res.statusText + ", loading " + url + (parent ? " from " + parent : "")));
      var contentType = res.headers.get("content-type");
      if (!contentType || !jsContentTypeRegEx.test(contentType))
        throw Error(errMsg(4, 'Unknown Content-Type "' + contentType + '", loading ' + url + (parent ? " from " + parent : "")));
      return res.text().then(function(source) {
        if (source.indexOf("//# sourceURL=") < 0)
          source += "\n//# sourceURL=" + url;
        (0, eval)(source);
        return loader8.getRegister(url);
      });
    });
  };
  systemJSPrototype.resolve = function(id, parentUrl) {
    parentUrl = parentUrl || false || baseUrl;
    return resolveImportMap(importMap, resolveIfNotPlainOrUrl(id, parentUrl) || id, parentUrl) || throwUnresolved(id, parentUrl);
  };
  function throwUnresolved(id, parentUrl) {
    throw Error(errMsg(8, "Unable to resolve bare specifier '" + id + (parentUrl ? "' from " + parentUrl : "'")));
  }
  var systemInstantiate = systemJSPrototype.instantiate;
  systemJSPrototype.instantiate = function(url, firstParentUrl, meta) {
    var preloads = importMap.depcache[url];
    if (preloads) {
      for (var i = 0; i < preloads.length; i++)
        getOrCreateLoad(this, this.resolve(preloads[i], url), url);
    }
    return systemInstantiate.call(this, url, firstParentUrl, meta);
  };
  if (hasSelf && typeof importScripts === "function")
    systemJSPrototype.instantiate = function(url) {
      var loader8 = this;
      return Promise.resolve().then(function() {
        importScripts(url);
        return loader8.getRegister(url);
      });
    };
  (function(global2) {
    var systemJSPrototype2 = global2.System.constructor.prototype;
    var firstGlobalProp, secondGlobalProp, lastGlobalProp;
    function getGlobalProp(useFirstGlobalProp) {
      var cnt = 0;
      var foundLastProp, result;
      for (var p2 in global2) {
        if (shouldSkipProperty(p2))
          continue;
        if (cnt === 0 && p2 !== firstGlobalProp || cnt === 1 && p2 !== secondGlobalProp)
          return p2;
        if (foundLastProp) {
          lastGlobalProp = p2;
          result = useFirstGlobalProp && result || p2;
        } else {
          foundLastProp = p2 === lastGlobalProp;
        }
        cnt++;
      }
      return result;
    }
    function noteGlobalProps() {
      firstGlobalProp = secondGlobalProp = void 0;
      for (var p2 in global2) {
        if (shouldSkipProperty(p2))
          continue;
        if (!firstGlobalProp)
          firstGlobalProp = p2;
        else if (!secondGlobalProp)
          secondGlobalProp = p2;
        lastGlobalProp = p2;
      }
      return lastGlobalProp;
    }
    var impt = systemJSPrototype2.import;
    systemJSPrototype2.import = function(id, parentUrl, meta) {
      noteGlobalProps();
      return impt.call(this, id, parentUrl, meta);
    };
    var emptyInstantiation = [[], function() {
      return {};
    }];
    var getRegister = systemJSPrototype2.getRegister;
    systemJSPrototype2.getRegister = function() {
      var lastRegister2 = getRegister.call(this);
      if (lastRegister2)
        return lastRegister2;
      var globalProp = getGlobalProp(this.firstGlobalProp);
      if (!globalProp)
        return emptyInstantiation;
      var globalExport;
      try {
        globalExport = global2[globalProp];
      } catch (e) {
        return emptyInstantiation;
      }
      return [[], function(_export) {
        return {
          execute: function() {
            _export(globalExport);
            _export({ default: globalExport, __useDefault: true });
          }
        };
      }];
    };
    var isIE11 = typeof navigator !== "undefined" && navigator.userAgent.indexOf("Trident") !== -1;
    function shouldSkipProperty(p2) {
      return !global2.hasOwnProperty(p2) || !isNaN(p2) && p2 < global2.length || isIE11 && global2[p2] && typeof window !== "undefined" && global2[p2].parent === window;
    }
  })(typeof self !== "undefined" ? self : global);
  (function(global2) {
    var systemJSPrototype2 = global2.System.constructor.prototype;
    var moduleTypesRegEx = /^[^#?]+\.(css|html|json|wasm)([?#].*)?$/;
    var _shouldFetch = systemJSPrototype2.shouldFetch.bind(systemJSPrototype2);
    systemJSPrototype2.shouldFetch = function(url) {
      return _shouldFetch(url) || moduleTypesRegEx.test(url);
    };
    var jsonContentType = /^application\/json(;|$)/;
    var cssContentType = /^text\/css(;|$)/;
    var wasmContentType = /^application\/wasm(;|$)/;
    var fetch2 = systemJSPrototype2.fetch;
    systemJSPrototype2.fetch = function(url, options) {
      return fetch2(url, options).then(function(res) {
        if (options.passThrough)
          return res;
        if (!res.ok)
          return res;
        var contentType = res.headers.get("content-type");
        if (jsonContentType.test(contentType))
          return res.json().then(function(json3) {
            return new Response(new Blob([
              'System.register([],function(e){return{execute:function(){e("default",' + JSON.stringify(json3) + ")}}})"
            ], {
              type: "application/javascript"
            }));
          });
        if (cssContentType.test(contentType))
          return res.text().then(function(source) {
            source = source.replace(/url\(\s*(?:(["'])((?:\\.|[^\n\\"'])+)\1|((?:\\.|[^\s,"'()\\])+))\s*\)/g, function(match2, quotes, relUrl1, relUrl2) {
              return ["url(", quotes, resolveUrl(relUrl1 || relUrl2, url), quotes, ")"].join("");
            });
            return new Response(new Blob([
              "System.register([],function(e){return{execute:function(){var s=new CSSStyleSheet();s.replaceSync(" + JSON.stringify(source) + ');e("default",s)}}})'
            ], {
              type: "application/javascript"
            }));
          });
        if (wasmContentType.test(contentType))
          return (WebAssembly.compileStreaming ? WebAssembly.compileStreaming(res) : res.arrayBuffer().then(WebAssembly.compile)).then(function(module) {
            if (!global2.System.wasmModules)
              global2.System.wasmModules = /* @__PURE__ */ Object.create(null);
            global2.System.wasmModules[url] = module;
            var deps = [];
            var setterSources = [];
            if (WebAssembly.Module.imports)
              WebAssembly.Module.imports(module).forEach(function(impt) {
                var key = JSON.stringify(impt.module);
                if (deps.indexOf(key) === -1) {
                  deps.push(key);
                  setterSources.push("function(m){i[" + key + "]=m}");
                }
              });
            return new Response(new Blob([
              "System.register([" + deps.join(",") + "],function(e){var i={};return{setters:[" + setterSources.join(",") + "],execute:function(){return WebAssembly.instantiate(System.wasmModules[" + JSON.stringify(url) + "],i).then(function(m){e(m.exports)})}}})"
            ], {
              type: "application/javascript"
            }));
          });
        return res;
      });
    };
  })(typeof self !== "undefined" ? self : global);
  var toStringTag = typeof Symbol !== "undefined" && Symbol.toStringTag;
  systemJSPrototype.get = function(id) {
    var load = this[REGISTRY][id];
    if (load && load.e === null && !load.E) {
      if (load.er)
        return null;
      return load.n;
    }
  };
  systemJSPrototype.set = function(id, module) {
    {
      try {
        new URL(id);
      } catch (err) {
        console.warn(Error(errMsg("W3", '"' + id + '" is not a valid URL to set in the module registry')));
      }
    }
    var ns2;
    if (toStringTag && module[toStringTag] === "Module") {
      ns2 = module;
    } else {
      ns2 = Object.assign(/* @__PURE__ */ Object.create(null), module);
      if (toStringTag)
        Object.defineProperty(ns2, toStringTag, { value: "Module" });
    }
    var done = Promise.resolve(ns2);
    var load = this[REGISTRY][id] || (this[REGISTRY][id] = {
      id,
      i: [],
      h: false,
      d: [],
      e: null,
      er: void 0,
      E: void 0
    });
    if (load.e || load.E)
      return false;
    Object.assign(load, {
      n: ns2,
      I: void 0,
      L: void 0,
      C: done
    });
    return ns2;
  };
  systemJSPrototype.has = function(id) {
    var load = this[REGISTRY][id];
    return !!load;
  };
  systemJSPrototype.delete = function(id) {
    var registry = this[REGISTRY];
    var load = registry[id];
    if (!load || load.p && load.p.e !== null || load.E)
      return false;
    var importerSetters = load.i;
    if (load.d)
      load.d.forEach(function(depLoad) {
        var importerIndex = depLoad.i.indexOf(load);
        if (importerIndex !== -1)
          depLoad.i.splice(importerIndex, 1);
      });
    delete registry[id];
    return function() {
      var load2 = registry[id];
      if (!load2 || !importerSetters || load2.e !== null || load2.E)
        return false;
      importerSetters.forEach(function(setter) {
        load2.i.push(setter);
        setter(load2.n);
      });
      importerSetters = null;
    };
  };
  var iterator = typeof Symbol !== "undefined" && Symbol.iterator;
  systemJSPrototype.entries = function() {
    var loader8 = this, keys2 = Object.keys(loader8[REGISTRY]);
    var index2 = 0, ns2, key;
    var result = {
      next: function() {
        while ((key = keys2[index2++]) !== void 0 && (ns2 = loader8.get(key)) === void 0)
          ;
        return {
          done: key === void 0,
          value: key !== void 0 && [key, ns2]
        };
      }
    };
    result[iterator] = function() {
      return this;
    };
    return result;
  };
})();
(function() {
  (function(global2) {
    var System2 = global2.System;
    setRegisterRegistry(System2);
    var systemJSPrototype = System2.constructor.prototype;
    var constructor = System2.constructor;
    var SystemJS = function() {
      constructor.call(this);
      setRegisterRegistry(this);
    };
    SystemJS.prototype = systemJSPrototype;
    System2.constructor = SystemJS;
    var firstNamedDefine, firstName;
    function setRegisterRegistry(systemInstance) {
      systemInstance.registerRegistry = /* @__PURE__ */ Object.create(null);
      systemInstance.namedRegisterAliases = /* @__PURE__ */ Object.create(null);
    }
    var register = systemJSPrototype.register;
    systemJSPrototype.register = function(name, deps, declare, metas) {
      if (typeof name !== "string")
        return register.apply(this, arguments);
      var define = [deps, declare, metas];
      this.registerRegistry[name] = define;
      if (!firstNamedDefine) {
        firstNamedDefine = define;
        firstName = name;
      }
      Promise.resolve().then(function() {
        firstNamedDefine = null;
        firstName = null;
      });
      return register.apply(this, [deps, declare, metas]);
    };
    var resolve = systemJSPrototype.resolve;
    systemJSPrototype.resolve = function(id, parentURL) {
      try {
        return resolve.call(this, id, parentURL);
      } catch (err) {
        if (id in this.registerRegistry) {
          return this.namedRegisterAliases[id] || id;
        }
        throw err;
      }
    };
    var instantiate = systemJSPrototype.instantiate;
    systemJSPrototype.instantiate = function(url, firstParentUrl, meta) {
      var result = this.registerRegistry[url];
      if (result) {
        this.registerRegistry[url] = null;
        return result;
      } else {
        return instantiate.call(this, url, firstParentUrl, meta);
      }
    };
    var getRegister = systemJSPrototype.getRegister;
    systemJSPrototype.getRegister = function(url) {
      var register2 = getRegister.call(this, url);
      if (firstName && url) {
        this.namedRegisterAliases[firstName] = url;
      }
      var result = firstNamedDefine || register2;
      firstNamedDefine = null;
      firstName = null;
      return result;
    };
  })(typeof self !== "undefined" ? self : global);
})();
var emptyApp = {
  setup() {
  }
};
var semver = /^[v^~<>=]*?(\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+)(?:\.([x*]|\d+))?(?:-([\da-z\-]+(?:\.[\da-z\-]+)*))?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?)?)?$/i;
var acceptsAll = ["*", "x", ">=0"];
var operatorResMap = {
  ">": [1],
  ">=": [0, 1],
  "=": [0],
  "<=": [-1, 0],
  "<": [-1]
};
function indexOrEnd(str, q2) {
  return str.indexOf(q2) === -1 ? str.length : str.indexOf(q2);
}
function splitVersion(v) {
  const c = v.replace(/^v/, "").replace(/\+.*$/, "");
  const patchIndex = indexOrEnd(c, "-");
  const arr = c.substring(0, patchIndex).split(".");
  arr.push(c.substring(patchIndex + 1));
  return arr;
}
function parseSegment(v) {
  const n = parseInt(v, 10);
  return isNaN(n) ? v : n;
}
function validateAndParse(v) {
  const match2 = v.match(semver);
  match2.shift();
  return match2;
}
function compareStrings(a, b2) {
  const ap = parseSegment(a);
  const bp = parseSegment(b2);
  if (ap > bp) {
    return 1;
  } else if (ap < bp) {
    return -1;
  } else {
    return 0;
  }
}
function compareSegments(a, b2) {
  for (let i = 0; i < 2; i++) {
    const r3 = compareStrings(a[i] || "0", b2[i] || "0");
    if (r3 !== 0) {
      return r3;
    }
  }
  return 0;
}
function compareVersions(v1, v2) {
  const s1 = splitVersion(v1);
  const s2 = splitVersion(v2);
  const len = Math.max(s1.length - 1, s2.length - 1);
  for (let i = 0; i < len; i++) {
    const m1 = s1[i] || "0";
    const m2 = s2[i] || "0";
    if (m2 === "x") {
      return 0;
    }
    const n1 = parseInt(m1, 10);
    const n2 = parseInt(m2, 10);
    if (n1 > n2) {
      return 1;
    } else if (n2 > n1) {
      return -1;
    }
  }
  const sp1 = s1[s1.length - 1];
  const sp2 = s2[s2.length - 1];
  if (sp1 && sp2) {
    const p1 = sp1.split(".").map(parseSegment);
    const p2 = sp2.split(".").map(parseSegment);
    const len2 = Math.max(p1.length, p2.length);
    for (let i = 0; i < len2; i++) {
      if (p1[i] === void 0 || typeof p2[i] === "string" && typeof p1[i] === "number") {
        return -1;
      } else if (p2[i] === void 0 || typeof p1[i] === "string" && typeof p2[i] === "number") {
        return 1;
      } else if (p1[i] > p2[i]) {
        return 1;
      } else if (p2[i] > p1[i]) {
        return -1;
      }
    }
  } else if (sp1 || sp2) {
    return sp1 ? -1 : 1;
  }
  return 0;
}
function compare(v1, v2, operator) {
  const res = compareVersions(v1, v2);
  return operatorResMap[operator].indexOf(res) > -1;
}
function validate(version) {
  return acceptsAll.includes(version) || semver.test(version);
}
function satisfies(v, r3) {
  if (!acceptsAll.includes(r3)) {
    const match2 = r3.match(/^([<>=~^]+)/);
    const op = match2 ? match2[1] : "=";
    if (op !== "^" && op !== "~") {
      return compare(v, r3, op);
    }
    const [v1, v2, v3] = validateAndParse(v);
    const [m1, m2, m3] = validateAndParse(r3);
    if (compareStrings(v1, m1) !== 0) {
      return false;
    } else if (op === "^") {
      return compareSegments([v2, v3], [m2, m3]) >= 0;
    } else if (compareStrings(v2, m2) !== 0) {
      return false;
    }
    return compareStrings(v3, m3) >= 0;
  }
  return true;
}
var systemResolve = System.constructor.prototype.resolve;
var systemRegister = System.constructor.prototype.register;
function getLoadedVersions(prefix2) {
  return [...System.entries()].filter(([name]) => name.startsWith(prefix2)).map(([name]) => name.substring(prefix2.length));
}
function findMatchingPackage(id) {
  const sep = id.indexOf("@", 1);
  if (sep > 1) {
    const available = Object.keys(System.registerRegistry);
    const name = id.substring(0, sep + 1);
    const versionSpec = id.substring(sep + 1);
    if (validate(versionSpec)) {
      const loadedVersions = getLoadedVersions(name);
      const allVersions = available.filter((m2) => m2.startsWith(name)).map((m2) => m2.substring(name.length));
      const availableVersions = [...loadedVersions, ...allVersions.filter((m2) => !loadedVersions.includes(m2))];
      for (const availableVersion of availableVersions) {
        if (validate(availableVersion) && satisfies(availableVersion, versionSpec)) {
          return name + availableVersion;
        }
      }
    }
  }
  return void 0;
}
function isPrimitiveExport(content) {
  const type = typeof content;
  return type === "number" || type === "boolean" || type === "symbol" || type === "string" || type === "bigint" || Array.isArray(content);
}
System.constructor.prototype.resolve = function(id, parentUrl) {
  try {
    return systemResolve.call(this, id, parentUrl);
  } catch (ex) {
    const result = findMatchingPackage(id);
    if (!result) {
      throw ex;
    }
    return result;
  }
};
System.constructor.prototype.register = function(...args) {
  const getContent = args.pop();
  args.push((_export, ctx) => {
    const exp = (...p2) => {
      if (p2.length === 1) {
        const content = p2[0];
        if (content instanceof Promise) {
          return content.then(exp);
        } else if (typeof content === "function") {
          _export("__esModule", true);
          Object.keys(content).forEach((prop) => {
            _export(prop, content[prop]);
          });
          _export("default", content);
        } else if (isPrimitiveExport(content)) {
          _export("__esModule", true);
          _export("default", content);
        } else if (content) {
          _export(content);
          if (typeof content === "object" && !("default" in content)) {
            _export("default", content);
          }
        }
      } else {
        return _export(...p2);
      }
    };
    return getContent(exp, ctx);
  });
  return systemRegister.apply(this, args);
};
function tryResolve(name, parent) {
  try {
    return System.resolve(name, parent);
  } catch {
    return void 0;
  }
}
function handleFailure(error2, link) {
  console.error("Failed to load SystemJS module", link, error2);
  return emptyApp;
}
function loadSystemPilet(link) {
  return System.import(link).catch((error2) => handleFailure(error2, link));
}
function registerDependencies(modules) {
  const moduleNames = Object.keys(modules);
  moduleNames.forEach((name) => registerModule(name, () => modules[name]));
  return Promise.all(moduleNames.map((name) => System.import(name)));
}
function registerModule(name, resolve) {
  System.register(name, [], (_exports) => ({
    execute() {
      const content = resolve();
      if (content instanceof Promise) {
        return content.then(_exports);
      } else {
        _exports(content);
      }
    }
  }));
}
function registerDependencyUrls(dependencies) {
  for (const name of Object.keys(dependencies)) {
    if (!System.has(name)) {
      const dependency = dependencies[name];
      registerModule(name, () => System.import(dependency));
    }
  }
}
function unregisterModules(baseUrl, dependencies) {
  [...System.entries()].map(([name]) => name).filter((name) => name.startsWith(baseUrl) && !dependencies.includes(name)).forEach((name) => System.delete(name));
}
function requireModule(name, parent) {
  const moduleId = tryResolve(name, parent);
  const dependency = moduleId && System.get(moduleId);
  if (!dependency) {
    const error2 = new Error(`Cannot find module '${name}'`);
    error2.code = "MODULE_NOT_FOUND";
    throw error2;
  }
  return dependency;
}
function isfunc(f2) {
  return typeof f2 === "function";
}
function callfunc(f2, ...args) {
  isfunc(f2) && f2(...args);
}
function promisify(value) {
  return Promise.resolve(value);
}
function getBasePath(link) {
  if (link) {
    const idx = link.lastIndexOf("/");
    return link.substring(0, idx + 1);
  }
  return link;
}
function createEvaluatedPilet(meta, mod) {
  const basePath = getBasePath(meta.link);
  const app = checkPiletApp(meta.name, mod);
  return { ...meta, ...app, basePath };
}
function checkCreateApi(createApi) {
  if (!isfunc(createApi)) {
    console.warn("Invalid `createApi` function. Skipping pilet installation.");
    return false;
  }
  return true;
}
function checkPiletApp(name, app) {
  if (!app) {
    console.error("Invalid module found.", name);
  } else if (typeof app.setup !== "function") {
    console.warn("Setup function is missing.", name);
  } else {
    return app;
  }
  return emptyApp;
}
function includeScript(depName, link, integrity, crossOrigin) {
  window[depName] = (moduleId) => requireModule(moduleId, link);
  return includeScriptDependency(link, integrity, crossOrigin).then((s) => s.app);
}
function includeScriptDependency(link, integrity, crossOrigin) {
  return new Promise((resolve, reject) => {
    const s = document.createElement("script");
    s.async = true;
    s.src = link;
    if (integrity) {
      s.crossOrigin = crossOrigin || "anonymous";
      s.integrity = integrity;
    } else if (crossOrigin) {
      s.crossOrigin = crossOrigin;
    }
    s.onload = () => resolve(s);
    s.onerror = (e) => reject(e);
    document.body.appendChild(s);
  });
}
var depContext = {};
function loadSharedDependencies(dependencies) {
  if (dependencies) {
    const names = Object.keys(dependencies);
    return Promise.all(names.map((name) => {
      return depContext[name] || (depContext[name] = includeScriptDependency(dependencies[name]));
    }));
  }
  return promisify();
}
function handleFailure2(error2, name) {
  console.error("Failed to load pilet", name, error2);
  return emptyApp;
}
function loadFrom(meta, loadPilet) {
  return loadSharedDependencies(meta.dependencies).then(loadPilet).catch((error2) => handleFailure2(error2, meta.name)).then((app) => createEvaluatedPilet(meta, app));
}
var evtName = "unload-pilet";
function runCleanup(app, api, hooks) {
  if (typeof document !== "undefined") {
    const css = document.querySelector(`link[data-origin=${JSON.stringify(app.name)}]`);
    css == null ? void 0 : css.remove();
  }
  const url = app.basePath;
  callfunc(app.teardown, api);
  callfunc(hooks.cleanupPilet, app);
  if ("requireRef" in app) {
    const depName = app.requireRef;
    delete globalThis[depName];
  }
  if (url) {
    unregisterModules(url, Object.values(app.dependencies));
  }
}
function prepareCleanup(app, api, hooks) {
  const handler = (e) => {
    if (e.name === app.name) {
      api.off(evtName, handler);
      runCleanup(app, api, hooks);
    }
  };
  api.on(evtName, handler);
}
function logError(name, e) {
  console.error(`Error while setting up ${name}.`, e);
}
function withCatch(result, name) {
  if (result instanceof Promise) {
    return result.catch((e) => logError(name, e));
  }
  return promisify(result);
}
function setupSinglePilet(app, apiFactory, hooks) {
  const name = app == null ? void 0 : app.name;
  try {
    const api = apiFactory(app);
    callfunc(hooks.setupPilet, app);
    const result = app.setup(api);
    prepareCleanup(app, api, hooks);
    return withCatch(result, name);
  } catch (e) {
    logError(name, e);
  }
  return promisify();
}
function setupPiletBundle(app, apiFactory, hooks) {
  const name = (app == null ? void 0 : app.name) || "pilet bundle";
  try {
    callfunc(hooks.setupPilet, app);
    const result = app.setup(apiFactory);
    return withCatch(result, name);
  } catch (e) {
    logError(name, e);
  }
  return promisify();
}
function inspectPilet(meta) {
  const inBrowser = typeof document !== "undefined";
  if ("link" in meta && meta.spec === "v3") {
    return ["v3", meta, setupSinglePilet];
  } else if (inBrowser && "link" in meta && meta.spec === "mf") {
    return ["mf", meta, setupSinglePilet];
  } else if (inBrowser && "link" in meta && meta.spec === "v2") {
    return ["v2", meta, setupSinglePilet];
  } else if (inBrowser && "requireRef" in meta && meta.spec !== "v2") {
    return ["v1", meta, setupSinglePilet];
  } else if (inBrowser && "bundle" in meta && meta.bundle) {
    return ["bundle", meta, setupPiletBundle];
  } else if ("hash" in meta) {
    return ["v0", meta, setupSinglePilet];
  } else {
    return ["unknown", meta, setupSinglePilet];
  }
}
function runPilets(createApi, pilets, hooks = {}) {
  const promises = [];
  if (Array.isArray(pilets)) {
    for (const pilet of pilets) {
      const [, , setupPilet] = inspectPilet(pilet);
      const wait = setupPilet(pilet, createApi, hooks);
      promises.push(wait);
    }
  }
  return Promise.all(promises).then(() => pilets);
}
function runPilet(createApi, pilet, hooks = {}) {
  const [, , setupPilet] = inspectPilet(pilet);
  const wait = setupPilet(pilet, createApi, hooks);
  return wait.then(() => pilet);
}
function initializeApi(target, events) {
  return {
    on: events.on,
    once: events.once,
    off: events.off,
    emit: events.emit,
    meta: Object.assign({}, target)
  };
}
function mergeApis(api, extenders, target) {
  const frags = extenders.map((extender) => extender(api, target));
  Object.assign(api, ...frags);
  return api;
}
function checkFetchPilets(fetchPilets) {
  if (!isfunc(fetchPilets)) {
    console.error("Could not get the pilets. Provide a valid `fetchPilets` function.");
    return false;
  }
  return true;
}
function loadMetadata(fetchPilets) {
  if (checkFetchPilets(fetchPilets)) {
    return fetchPilets().then((pilets) => {
      if (!Array.isArray(pilets)) {
        throw new Error("The fetched pilets metadata is not an array.");
      }
      return pilets.map((meta) => ({ ...meta }));
    });
  }
  return promisify([]);
}
function loadPilets(fetchPilets, loadPilet) {
  return loadMetadata(fetchPilets).then((pilets) => Promise.all(pilets.map(loadPilet)));
}
function includeBundle(meta, crossOrigin) {
  return includeScript(meta.bundle, meta.link, meta.integrity, crossOrigin);
}
function loader(entry, config) {
  const { dependencies = {}, spec = "v1", name = `[bundle] ${entry.link}`, ...rest } = entry;
  const meta = {
    name,
    version: "",
    config: {},
    spec,
    dependencies,
    ...rest
  };
  return loadFrom(meta, () => includeBundle(entry, config.crossOrigin));
}
function loader2(entry, _config) {
  const { name, spec = "vx", ...rest } = entry;
  const dependencies = "dependencies" in entry ? entry.dependencies : {};
  const meta = {
    name,
    version: "",
    spec,
    dependencies,
    config: {},
    link: "",
    basePath: "",
    ...rest
  };
  console.warn("Empty pilet found!", name);
  return promisify({ ...meta, ...emptyApp });
}
function fetchDependency(url) {
  return fetch(url, {
    method: "GET",
    cache: "force-cache"
  }).then((m2) => m2.text());
}
function evalDependency(name, content, link = "") {
  const mod = {
    exports: {}
  };
  try {
    const sourceUrl = link && `
//# sourceURL=${link}`;
    const importer = new Function("module", "exports", "require", content + sourceUrl);
    const parent = link || name;
    const require2 = (moduleId) => requireModule(moduleId, parent);
    importer(mod, mod.exports, require2);
  } catch (e) {
    console.error(`Error while evaluating ${name}.`, e);
  }
  return mod.exports;
}
function loader3(entry, _config) {
  const { name, config = {}, dependencies = {}, spec = "v0" } = entry;
  const meta = {
    name,
    config,
    dependencies,
    spec,
    link: "",
    ...entry
  };
  if ("link" in entry && entry.link) {
    return loadFrom(meta, () => fetchDependency(entry.link).then((content) => evalDependency(name, content, entry.link)));
  } else {
    const content = "content" in entry && entry.content || "";
    return loadFrom(meta, () => evalDependency(name, content, void 0));
  }
}
function includeDependency(entry, crossOrigin) {
  return includeScript(entry.requireRef, entry.link, entry.integrity, crossOrigin);
}
function loader4(entry, config) {
  const { dependencies = {}, spec = "v1", ...rest } = entry;
  const meta = {
    dependencies,
    config: {},
    spec,
    ...rest
  };
  return loadFrom(meta, () => includeDependency(entry, config.crossOrigin));
}
function loader5(entry, _config) {
  const { dependencies = {}, config = {}, link, ...rest } = entry;
  const meta = {
    dependencies,
    config,
    link,
    ...rest
  };
  registerDependencyUrls(dependencies);
  return loadSystemPilet(link).then((app) => createEvaluatedPilet(meta, app));
}
function loader6(entry, _config) {
  const { dependencies = {}, config = {}, link, ...rest } = entry;
  const meta = {
    dependencies,
    config,
    link,
    ...rest
  };
  registerDependencyUrls(dependencies);
  return loadSystemPilet(link).then((app) => {
    const pilet = createEvaluatedPilet(meta, app);
    if (Array.isArray(app.styles) && typeof document !== "undefined") {
      for (const style of app.styles) {
        const link2 = document.createElement("link");
        link2.setAttribute("data-origin", pilet.name);
        link2.type = "text/css";
        link2.rel = "stylesheet";
        link2.href = `${pilet.basePath}/${style}`;
        document.head.appendChild(link2);
      }
    }
    return pilet;
  });
}
var appShell = "piral";
function populateKnownDependencies(scope) {
  for (const [entry] of System.entries()) {
    const index2 = entry.lastIndexOf("@");
    if (index2 > 0 && !entry.match(/^https?:\/\//)) {
      const entryName = entry.substring(0, index2);
      const entryVersion = entry.substring(index2 + 1);
      if (!(entryName in scope)) {
        scope[entryName] = {};
      }
      scope[entryName][entryVersion] = {
        from: appShell,
        eager: false,
        get: () => System.import(entry).then((result) => () => result)
      };
    }
  }
}
function extractSharedDependencies(scope) {
  for (const entryName of Object.keys(scope)) {
    const entries = scope[entryName];
    for (const entryVersion of Object.keys(entries)) {
      const entry = entries[entryVersion];
      if (entry.from !== appShell) {
        registerModule(`${entryName}@${entryVersion}`, () => entry.get().then((factory2) => factory2()));
      }
    }
  }
}
function loadMfFactory(piletName, exposedName) {
  const varName = piletName.replace(/^@/, "").replace("/", "-").replace(/\-/g, "_");
  const container = window[varName];
  const scope = {};
  container.init(scope);
  populateKnownDependencies(scope);
  extractSharedDependencies(scope);
  return container.get(exposedName);
}
function loader7(entry, _config) {
  var _a;
  const { config = {}, name, link, ...rest } = entry;
  const dependencies = {};
  const exposedName = ((_a = rest.custom) == null ? void 0 : _a.exposed) || "./pilet";
  const meta = {
    name,
    dependencies,
    config,
    link,
    ...rest
  };
  return includeScriptDependency(link).then(() => loadMfFactory(name, exposedName)).then((factory2) => createEvaluatedPilet(meta, factory2()));
}
function extendLoader(fallback, specLoaders) {
  if (typeof specLoaders === "object" && specLoaders) {
    return (meta) => {
      if (typeof meta.spec === "string") {
        const loaderOverride = specLoaders[meta.spec];
        if (isfunc(loaderOverride)) {
          return loaderOverride(meta);
        }
      }
      return fallback(meta);
    };
  }
  return fallback;
}
function getDefaultLoader(config = {}) {
  return (result) => {
    const r3 = inspectPilet(result);
    switch (r3[0]) {
      case "v3":
        return loader6(r3[1]);
      case "v2":
        return loader5(r3[1]);
      case "v1":
        return loader4(r3[1], config);
      case "v0":
        return loader3(r3[1]);
      case "mf":
        return loader7(r3[1]);
      case "bundle":
        return loader(r3[1], config);
      default:
        return loader2(r3[1]);
    }
  };
}
function runAll(createApi, existingPilets, additionalPilets, hooks) {
  if (!Array.isArray(existingPilets)) {
    return Promise.reject(`The existing pilets must be passed as an array.`);
  }
  if (!checkCreateApi(createApi)) {
    return Promise.resolve([]);
  }
  try {
    for (const existing of existingPilets) {
      const { name } = existing;
      const [newPilet] = additionalPilets.filter((pilet) => pilet.name === name);
      if (newPilet) {
        additionalPilets.splice(additionalPilets.indexOf(newPilet), 1);
      }
    }
    const pilets = [...existingPilets, ...additionalPilets];
    return runPilets(createApi, pilets, hooks);
  } catch (err) {
    return Promise.reject(err);
  }
}
function createProgressiveStrategy(async) {
  return (options, cb) => {
    const {
      fetchPilets,
      dependencies = {},
      createApi,
      config,
      pilets = [],
      loadPilet = getDefaultLoader(config),
      loaders,
      hooks
    } = options;
    const loadingAll = loadMetadata(fetchPilets);
    const loadSingle = extendLoader(loadPilet, loaders);
    return registerDependencies(dependencies).then(() => {
      if (!checkCreateApi(createApi)) {
        cb(void 0, []);
        return Promise.resolve();
      }
      return runPilets(createApi, pilets, hooks).then((integratedPilets) => {
        if (async && integratedPilets.length > 0) {
          cb(void 0, [...integratedPilets]);
        }
        const followUp = loadingAll.then((metadata) => {
          const promises = metadata.map((m2) => loadSingle(m2).then((app) => {
            const available = pilets.filter((m22) => m22.name === app.name).length === 0;
            if (available) {
              return runPilet(createApi, app, hooks).then((additionalPilet) => {
                integratedPilets.push(additionalPilet);
                if (async) {
                  cb(void 0, [...integratedPilets]);
                }
              });
            }
          }));
          return Promise.all(promises).then(() => {
            if (!async) {
              cb(void 0, integratedPilets);
            }
          });
        });
        if (async) {
          followUp.catch(() => {
          });
          return loadingAll.then();
        } else {
          return followUp.then();
        }
      });
    });
  };
}
function blazingStrategy(options, cb) {
  const strategy = createProgressiveStrategy(true);
  return strategy(options, cb);
}
function standardStrategy(options, cb) {
  const {
    fetchPilets,
    dependencies = {},
    createApi,
    config,
    pilets = [],
    loadPilet = getDefaultLoader(config),
    loaders,
    hooks
  } = options;
  const loadSingle = extendLoader(loadPilet, loaders);
  return registerDependencies(dependencies).then(() => loadPilets(fetchPilets, loadSingle)).then((additionalPilets) => runAll(createApi, pilets, additionalPilets, hooks)).then((integratedPilets) => cb(void 0, integratedPilets)).catch((error2) => cb(error2, []));
}
function startLoadingPilets(options) {
  const state = {
    loaded: false,
    pilets: [],
    error: void 0
  };
  const notifiers = [];
  const call = (notifier) => notifier(state.error, state.pilets, state.loaded);
  const notify = () => notifiers.forEach(call);
  const setPilets = (error2, pilets) => {
    state.error = error2;
    state.pilets = pilets;
    notify();
  };
  const setLoaded = () => {
    state.loaded = true;
    notify();
  };
  const { strategy = standardStrategy } = options;
  strategy(options, setPilets).then(setLoaded, setLoaded);
  return {
    connect(notifier) {
      if (isfunc(notifier)) {
        notifiers.push(notifier);
        call(notifier);
      }
    },
    disconnect(notifier) {
      const index2 = notifiers.indexOf(notifier);
      index2 !== -1 && notifiers.splice(index2, 1);
    }
  };
}
function nameOf(type) {
  return `piral-${type}`;
}
function createListener(state = {}) {
  const eventListeners = [];
  const events = {
    on(type, callback) {
      const listener = ({ detail }) => detail && detail.state === state && callback(detail.arg);
      document.body.addEventListener(nameOf(type), listener);
      eventListeners.push([callback, listener]);
      return events;
    },
    once(type, callback) {
      const cb = (ev) => {
        events.off(type, cb);
        callback(ev);
      };
      return events.on(type, cb);
    },
    off(type, callback) {
      const [listener] = eventListeners.filter((m2) => m2[0] === callback);
      if (listener) {
        document.body.removeEventListener(nameOf(type), listener[1]);
        eventListeners.splice(eventListeners.indexOf(listener), 1);
      }
      return events;
    },
    emit(type, arg) {
      document.body.dispatchEvent(new CustomEvent(nameOf(type), {
        bubbles: false,
        cancelable: false,
        detail: {
          arg,
          state
        }
      }));
      return events;
    }
  };
  return events;
}
/*!
 * SystemJS 6.14.2
 */
const StateContext = reactExports.createContext(void 0);
function useGlobalStateContext() {
  return reactExports.useContext(StateContext);
}
function useGlobalState(select2) {
  const { state: useState } = useGlobalStateContext();
  return useState(select2);
}
function useAction(action) {
  const ctx = useGlobalStateContext();
  return ctx[action];
}
const removeIndicator = null;
const none = [];
const noop$4 = () => {
};
function prependItem(items, item) {
  return [item, ...items || none];
}
function appendItem(items, item) {
  return [...items || none, item];
}
function excludeItem(items, item) {
  return (items || none).filter((m2) => m2 !== item);
}
function includeItem(items, item) {
  return appendItem(excludeItem(items, item), item);
}
function replaceOrAddItem(items, item, predicate) {
  const newItems = [...items || none];
  for (let i = 0; i < newItems.length; i++) {
    if (predicate(newItems[i])) {
      newItems[i] = item;
      return newItems;
    }
  }
  newItems.push(item);
  return newItems;
}
function removeNested(obj, predicate) {
  return Object.keys(obj).reduce((entries, key) => {
    const item = obj[key];
    entries[key] = Object.keys(item).reduce((all, key2) => {
      const value = item[key2];
      if (Array.isArray(value)) {
        all[key2] = excludeOn(value, predicate);
      } else if (!value || !predicate(value)) {
        all[key2] = value;
      }
      return all;
    }, {});
    return entries;
  }, {});
}
function excludeOn(items, predicate) {
  return (items || none).filter((m2) => !predicate(m2));
}
function updateKey(obj, key, value) {
  return value === removeIndicator ? withoutKey(obj, key) : withKey(obj, key, value);
}
function withKey(obj, key, value) {
  return {
    ...obj,
    [key]: value
  };
}
function withoutKey(obj, key) {
  const { [key]: _, ...newObj } = obj || {};
  return newObj;
}
function tryParseJson(content) {
  try {
    return JSON.parse(content);
  } catch {
    return {};
  }
}
const defaultLayouts = ["desktop", "tablet", "mobile"];
const defaultBreakpoints = ["(min-width: 991px)", "(min-width: 481px)", "(max-width: 480px)"];
const mm = typeof window === "undefined" || !isfunc(window.matchMedia) ? () => ({ matches: void 0 }) : (q2) => window.matchMedia(q2);
function getCurrentLayout(breakpoints = defaultBreakpoints, layouts, defaultLayout) {
  const query = breakpoints.findIndex((q2) => mm(q2).matches);
  const layout2 = layouts[query];
  return layout2 !== void 0 ? layout2 : defaultLayout;
}
function useMedia(queries, values2, defaultValue) {
  const match2 = () => getCurrentLayout(queries, values2, defaultValue);
  const [value, update] = reactExports.useState(match2);
  reactExports.useEffect(() => {
    if (typeof document !== "undefined") {
      const handler = () => update(match2);
      window.addEventListener("resize", handler);
      return () => window.removeEventListener("resize", handler);
    }
  }, none);
  return value;
}
function getPiralComponent(name) {
  return (props) => {
    const Component = useGlobalState((s) => s.components[name]);
    return Component ? reactExports.createElement(Component, { ...props }) : null;
  };
}
const RegisteredErrorInfo = getPiralComponent("ErrorInfo");
const RegisteredLoadingIndicator = getPiralComponent("LoadingIndicator");
const RegisteredRouter = getPiralComponent("Router");
const RegisteredRouteSwitch = getPiralComponent("RouteSwitch");
const RegisteredLayout = getPiralComponent("Layout");
const RegisteredDebug = getPiralComponent("Debug");
function compareObjects(a, b2) {
  for (const i in a) {
    if (!(i in b2)) {
      return false;
    }
  }
  for (const i in b2) {
    if (!isSame(a[i], b2[i])) {
      return false;
    }
  }
  return true;
}
function compareArrays(a, b2) {
  const l = a.length;
  if (l === b2.length) {
    for (let i = 0; i < l; i++) {
      if (!isSame(a[i], b2[i])) {
        return false;
      }
    }
    return true;
  }
  return false;
}
function isSame(a, b2) {
  if (a !== b2) {
    const ta2 = typeof a;
    const tb = typeof b2;
    if (ta2 === tb && ta2 === "object" && a && b2) {
      if (Array.isArray(a) && Array.isArray(b2)) {
        return compareArrays(a, b2);
      } else {
        return compareObjects(a, b2);
      }
    }
    return false;
  }
  return true;
}
const defaultTarget = "memory";
function createDataOptions(options = defaultTarget) {
  if (typeof options === "string") {
    return {
      target: options
    };
  } else if (options && typeof options === "object" && !Array.isArray(options)) {
    return options;
  } else {
    return {
      target: defaultTarget
    };
  }
}
function getDataExpiration(expires) {
  if (typeof expires === "number") {
    return expires;
  } else if (expires instanceof Date) {
    return expires.valueOf();
  }
  return -1;
}
function removeAll(nodes) {
  nodes.forEach((node2) => node2.remove());
}
const SlotCarrier = ({ nodes }) => {
  const host = reactExports.useRef();
  reactExports.useEffect(() => {
    var _a;
    (_a = host.current) == null ? void 0 : _a.append(...nodes);
    return () => removeAll(nodes);
  }, [nodes]);
  if (nodes.length) {
    return reactExports.createElement("piral-slot", { ref: host });
  }
  return null;
};
function toExtension(Component) {
  return (props) => reactExports.createElement(Component, { ...props.params });
}
function reactifyContent(childNodes) {
  const nodes = Array.prototype.filter.call(childNodes, Boolean);
  removeAll(nodes);
  return reactExports.createElement(SlotCarrier, { nodes });
}
const extensionName = "piral-extension";
const componentName = "piral-component";
const contentName = "piral-content";
const portalName = "piral-portal";
const slotName = "piral-slot";
function attachDomPortal(id, context, element, component, props) {
  const portal = reactDomExports.createPortal(reactExports.createElement(component, props), element);
  context.showPortal(id, portal);
  return [id, portal];
}
function changeDomPortal(id, current, context, element, component, props) {
  const next2 = reactDomExports.createPortal(reactExports.createElement(component, props), element);
  context.updatePortal(id, current, next2);
  return [id, next2];
}
function convertComponent(converter, component) {
  if (typeof converter !== "function") {
    throw new Error(`No converter for component of type "${component.type}" registered.`);
  }
  return converter(component);
}
function renderInDom(context, element, component, props) {
  const portalId = "pid";
  let parent = element;
  while (parent) {
    if (parent instanceof Element && parent.localName === portalName && parent.hasAttribute(portalId)) {
      const id = parent.getAttribute(portalId);
      return attachDomPortal(id, context, element, component, props);
    }
    parent = parent.parentNode || parent.host;
  }
  return attachDomPortal("root", context, element, component, props);
}
function defer$1(cb) {
  setTimeout(cb, 0);
}
function rand(c) {
  const r3 = Math.random() * 16 | 0;
  const v = c === "x" ? r3 : r3 & 3 | 8;
  return v.toString(16);
}
function generateId() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, rand);
}
function buildName(prefix2, name) {
  return `${prefix2}://${name}`;
}
function defaultRender(children, key) {
  return reactExports.createElement(reactExports.Fragment, { key }, children);
}
const defaultDelimiter = escapeString("/");
const pathExpr = new RegExp([
  "(\\\\.)",
  "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
].join("|"), "g");
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
}
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, "\\$1");
}
function parse$2(str) {
  const tokens = [];
  let key = 0;
  let index2 = 0;
  let path = "";
  let res;
  while ((res = pathExpr.exec(str)) !== null) {
    const m2 = res[0];
    const escaped = res[1];
    const offset2 = res.index;
    path += str.slice(index2, offset2);
    index2 = offset2 + m2.length;
    if (escaped) {
      path += escaped[1];
      continue;
    }
    const next2 = str[index2];
    const prefix2 = res[2];
    const name = res[3];
    const capture = res[4];
    const group = res[5];
    const modifier = res[6];
    const asterisk = res[7];
    if (path) {
      tokens.push(path);
      path = "";
    }
    const partial = prefix2 != null && next2 != null && next2 !== prefix2;
    const repeat = modifier === "+" || modifier === "*";
    const optional = modifier === "?" || modifier === "*";
    const delimiter2 = res[2] || "/";
    const pattern = capture || group;
    tokens.push({
      name: name || `${key++}`,
      prefix: prefix2 || "",
      delimiter: delimiter2,
      optional,
      repeat,
      partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter2) + "]+?"
    });
  }
  if (index2 < str.length) {
    path += str.substring(index2);
  }
  if (path) {
    tokens.push(path);
  }
  return tokens;
}
function tokensToRegExp(tokens) {
  let route = "";
  for (const token2 of tokens) {
    if (typeof token2 === "string") {
      route += escapeString(token2);
    } else {
      const prefix2 = escapeString(token2.prefix);
      let capture = "(?:" + token2.pattern + ")";
      if (token2.repeat) {
        capture += "(?:" + prefix2 + capture + ")*";
      }
      if (token2.optional) {
        if (!token2.partial) {
          capture = "(?:" + prefix2 + "(" + capture + "))?";
        } else {
          capture = prefix2 + "(" + capture + ")?";
        }
      } else {
        capture = prefix2 + "(" + capture + ")";
      }
      route += capture;
    }
  }
  const endsWithDelimiter = route.slice(-defaultDelimiter.length) === defaultDelimiter;
  const path = endsWithDelimiter ? route.slice(0, -defaultDelimiter.length) : route;
  return new RegExp(`^${path}(?:${defaultDelimiter}(?=$))?$`, "i");
}
function stringToRegexp(path) {
  return tokensToRegExp(parse$2(path));
}
function createRouteMatcher(path) {
  return stringToRegexp(path);
}
function withAll(...dispatchers) {
  return (state) => {
    for (const dispatcher of dispatchers) {
      state = dispatcher(state);
    }
    return state;
  };
}
function withPage(name, value) {
  return (state) => ({
    ...state,
    registry: {
      ...state.registry,
      pages: withKey(state.registry.pages, name, value)
    }
  });
}
function withoutPage(name) {
  return (state) => ({
    ...state,
    registry: {
      ...state.registry,
      pages: withoutKey(state.registry.pages, name)
    }
  });
}
function withExtension(name, value) {
  return (state) => ({
    ...state,
    registry: {
      ...state.registry,
      extensions: withKey(state.registry.extensions, name, appendItem(state.registry.extensions[name], value))
    }
  });
}
function withoutExtension(name, reference) {
  return (state) => ({
    ...state,
    registry: {
      ...state.registry,
      extensions: withKey(state.registry.extensions, name, excludeOn(state.registry.extensions[name], (m2) => m2.reference === reference))
    }
  });
}
function withRootExtension(name, component) {
  return withExtension(name, {
    component: toExtension(component),
    defaults: {},
    pilet: "",
    reference: component
  });
}
function withProvider(provider) {
  const wrapper = (props) => reactExports.cloneElement(provider, props);
  return (state) => ({
    ...state,
    provider: !state.provider ? wrapper : (props) => reactExports.createElement(state.provider, void 0, wrapper(props))
  });
}
function withRoute(path, component) {
  return (state) => ({
    ...state,
    routes: withKey(state.routes, path, component)
  });
}
let ErrorBoundary$1 = class ErrorBoundary extends reactExports.Component {
  constructor() {
    super(...arguments);
    this.state = {
      error: void 0
    };
  }
  componentDidCatch(error2) {
    const { piral, errorType } = this.props;
    const pilet = piral.meta.name;
    console.error(`[${pilet}] Exception in component of type "${errorType}".`, error2);
    this.setState({
      error: error2
    });
  }
  componentDidUpdate(_, prevState) {
    const { error: error2 } = this.state;
    if (error2 && !prevState.error) {
      const { piral, errorType } = this.props;
      const pilet = piral.meta.name;
      defer$1(() => {
        const container = reactDomExports.findDOMNode(this);
        piral.emit("unhandled-error", {
          container,
          errorType,
          error: error2,
          pilet
        });
      });
    }
  }
  render() {
    const { children, piral, errorType, ...renderProps } = this.props;
    const { error: error2 } = this.state;
    const rest = renderProps;
    if (error2) {
      const pilet = piral.meta.name;
      return reactExports.createElement(RegisteredErrorInfo, { type: errorType, error: error2, pilet, ...rest });
    }
    return reactExports.createElement(reactExports.Suspense, { fallback: reactExports.createElement(RegisteredLoadingIndicator, null) }, children);
  }
};
function defaultOrder(extensions) {
  return extensions;
}
function ExtensionSlot(props) {
  const { name, render = defaultRender, empty, params, children, emptySkipsRender = false, order = defaultOrder } = props;
  const extensions = useGlobalState((s) => s.registry.extensions[name] || none);
  const isEmpty = extensions.length === 0 && isfunc(empty);
  const content = isEmpty ? [defaultRender(empty(params), "empty")] : order(extensions).map(({ component: Component, reference, defaults = {} }, i) => reactExports.createElement(Component, { key: `${(reference == null ? void 0 : reference.displayName) || "_"}${i}`, children, params: {
    ...defaults,
    ...params
  } }));
  if (isEmpty && emptySkipsRender) {
    return content[0];
  }
  return render(content);
}
ExtensionSlot.displayName = `ExtensionSlot`;
const Mediator = ({ options }) => {
  const { initialize: initialize2, readState: readState2, emit } = useGlobalStateContext();
  reactExports.useEffect(() => {
    const shouldLoad = readState2((s) => s.app.loading);
    if (shouldLoad) {
      const { connect, disconnect } = startLoadingPilets(options);
      emit("loading-pilets", { options });
      const notifier = (error2, pilets, loaded) => {
        initialize2(!loaded, error2, pilets);
        if (loaded) {
          emit("loaded-pilets", { pilets, error: error2 });
        }
      };
      connect(notifier);
      return () => disconnect(notifier);
    }
  }, none);
  return null;
};
const PortalRenderer = ({ id }) => {
  const children = useGlobalState((m2) => m2.portals[id]) || none;
  return defaultRender(children);
};
const PiralGlobals = () => {
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    reactExports.createElement(PortalRenderer, { id: "root" }),
    reactExports.createElement(RegisteredDebug, null)
  );
};
/**
 * @remix-run/router v1.22.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$3() {
  _extends$3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$3.apply(this, arguments);
}
var Action;
(function(Action2) {
  Action2["Pop"] = "POP";
  Action2["Push"] = "PUSH";
  Action2["Replace"] = "REPLACE";
})(Action || (Action = {}));
const PopStateEventType = "popstate";
function createMemoryHistory(options) {
  if (options === void 0) {
    options = {};
  }
  let {
    initialEntries = ["/"],
    initialIndex,
    v5Compat = false
  } = options;
  let entries;
  entries = initialEntries.map((entry, index3) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index3 === 0 ? "default" : void 0));
  let index2 = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
  let action = Action.Pop;
  let listener = null;
  function clampIndex(n) {
    return Math.min(Math.max(n, 0), entries.length - 1);
  }
  function getCurrentLocation() {
    return entries[index2];
  }
  function createMemoryLocation(to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
    warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
    return location2;
  }
  function createHref(to) {
    return typeof to === "string" ? to : createPath(to);
  }
  let history = {
    get index() {
      return index2;
    },
    get action() {
      return action;
    },
    get location() {
      return getCurrentLocation();
    },
    createHref,
    createURL(to) {
      return new URL(createHref(to), "http://localhost");
    },
    encodeLocation(to) {
      let path = typeof to === "string" ? parsePath(to) : to;
      return {
        pathname: path.pathname || "",
        search: path.search || "",
        hash: path.hash || ""
      };
    },
    push(to, state) {
      action = Action.Push;
      let nextLocation = createMemoryLocation(to, state);
      index2 += 1;
      entries.splice(index2, entries.length, nextLocation);
      if (v5Compat && listener) {
        listener({
          action,
          location: nextLocation,
          delta: 1
        });
      }
    },
    replace(to, state) {
      action = Action.Replace;
      let nextLocation = createMemoryLocation(to, state);
      entries[index2] = nextLocation;
      if (v5Compat && listener) {
        listener({
          action,
          location: nextLocation,
          delta: 0
        });
      }
    },
    go(delta) {
      action = Action.Pop;
      let nextIndex = clampIndex(index2 + delta);
      let nextLocation = entries[nextIndex];
      index2 = nextIndex;
      if (listener) {
        listener({
          action,
          location: nextLocation,
          delta
        });
      }
    },
    listen(fn) {
      listener = fn;
      return () => {
        listener = null;
      };
    }
  };
  return history;
}
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash: hash2
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash: hash2 = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash: hash2
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location2, to) {
    warning(location2.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location2, index2) {
  return {
    usr: location2.state,
    key: location2.key,
    idx: index2
  };
}
function createLocation(current, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location2 = _extends$3({
    pathname: typeof current === "string" ? current : current.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location2;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash: hash2 = ""
  } = _ref;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash2 && hash2 !== "#")
    pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener = null;
  let index2 = getIndex();
  if (index2 == null) {
    index2 = 0;
    globalHistory.replaceState(_extends$3({}, globalHistory.state, {
      idx: index2
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index2;
    index2 = nextIndex;
    if (listener) {
      listener({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to, state) {
    action = Action.Push;
    let location2 = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location2, to);
    index2 = getIndex() + 1;
    let historyState = getHistoryState(location2, index2);
    let url = history.createHref(location2);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error2) {
      if (error2 instanceof DOMException && error2.name === "DataCloneError") {
        throw error2;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace2(to, state) {
    action = Action.Replace;
    let location2 = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location2, to);
    index2 = getIndex();
    let historyState = getHistoryState(location2, index2);
    let url = history.createHref(location2);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener) {
      listener({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    invariant(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation(window2, globalHistory);
    },
    listen(fn) {
      if (listener) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener = fn;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace: replace2,
    go(n) {
      return globalHistory.go(n);
    }
  };
  return history;
}
var ResultType;
(function(ResultType2) {
  ResultType2["data"] = "data";
  ResultType2["deferred"] = "deferred";
  ResultType2["redirect"] = "redirect";
  ResultType2["error"] = "error";
})(ResultType || (ResultType = {}));
const immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath, manifest) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  if (manifest === void 0) {
    manifest = {};
  }
  return routes.map((route, index2) => {
    let treePath = [...parentPath, String(index2)];
    let id = typeof route.id === "string" ? route.id : treePath.join("-");
    invariant(route.index !== true || !route.children, "Cannot specify children on an index route");
    invariant(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
    if (isIndexRoute(route)) {
      let indexRoute = _extends$3({}, route, mapRouteProperties2(route), {
        id
      });
      manifest[id] = indexRoute;
      return indexRoute;
    } else {
      let pathOrLayoutRoute = _extends$3({}, route, mapRouteProperties2(route), {
        id,
        children: void 0
      });
      manifest[id] = pathOrLayoutRoute;
      if (route.children) {
        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest);
      }
      return pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  return matchRoutesImpl(routes, locationArg, basename, false);
}
function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
  let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location2.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i = 0; matches == null && i < branches.length; ++i) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i], decoded, allowPartial);
  }
  return matches;
}
function convertRouteMatchToUiMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index2, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index2,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index2) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index2);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index2, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a, b2) => a.score !== b2.score ? b2.score - a.score : compareIndexes(a.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
const paramRe = /^:[\w-]+$/;
const dynamicSegmentValue = 3;
const indexRouteValue = 2;
const emptySegmentValue = 1;
const staticSegmentValue = 10;
const splatPenalty = -2;
const isSplat = (s) => s === "*";
function computeScore(path, index2) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index2) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s) => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a, b2) {
  let siblings = a.length === b2.length && a.slice(0, -1).every((n, i) => n === b2[i]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a[a.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname, allowPartial) {
  if (allowPartial === void 0) {
    allowPartial = false;
  }
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i = 0; i < routesMeta.length; ++i) {
    let meta = routesMeta[i];
    let end = i === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    let route = meta.route;
    if (!match2 && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
      match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: false
      }, remainingPathname);
    }
    if (!match2) {
      return null;
    }
    Object.assign(matchedParams, match2.params);
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function generatePath(originalPath, params) {
  if (params === void 0) {
    params = {};
  }
  let path = originalPath;
  if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
    warning(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    path = path.replace(/\*$/, "/*");
  }
  const prefix2 = path.startsWith("/") ? "/" : "";
  const stringify2 = (p2) => p2 == null ? "" : typeof p2 === "string" ? p2 : String(p2);
  const segments = path.split(/\/+/).map((segment, index2, array) => {
    const isLastSegment = index2 === array.length - 1;
    if (isLastSegment && segment === "*") {
      const star = "*";
      return stringify2(params[star]);
    }
    const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
    if (keyMatch) {
      const [, key, optional] = keyMatch;
      let param = params[key];
      invariant(optional === "?" || param != null, 'Missing ":' + key + '" param');
      return stringify2(param);
    }
    return segment.replace(/\?$/g, "");
  }).filter((segment) => !!segment);
  return prefix2 + segments.join("/");
}
function matchPath(pattern, pathname) {
  if (typeof pattern === "string") {
    pattern = {
      path: pattern,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
  let match2 = pathname.match(matcher);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = compiledParams.reduce((memo, _ref, index2) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index2] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index2];
    if (isOptional && !value) {
      memo[paramName] = void 0;
    } else {
      memo[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
  } catch (error2) {
    warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error2 + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash: hash2 = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash2)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char2, field, dest, path) {
  return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match2, idx) => idx === pathMatches.length - 1 ? match2.pathname : match2.pathnameBase);
  }
  return pathMatches.map((match2) => match2.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = _extends$3({}, toArg);
    invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
    invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
    invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from2;
  if (toPathname == null) {
    from2 = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from2);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
const joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
const normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
const normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
const normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
const json = function json2(data, init) {
  if (init === void 0) {
    init = {};
  }
  let responseInit = typeof init === "number" ? {
    status: init
  } : init;
  let headers = new Headers(responseInit.headers);
  if (!headers.has("Content-Type")) {
    headers.set("Content-Type", "application/json; charset=utf-8");
  }
  return new Response(JSON.stringify(data), _extends$3({}, responseInit, {
    headers
  }));
};
class AbortedDeferredError extends Error {
}
class DeferredData {
  constructor(data, responseInit) {
    this.pendingKeysSet = /* @__PURE__ */ new Set();
    this.subscribers = /* @__PURE__ */ new Set();
    this.deferredKeys = [];
    invariant(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
    let reject;
    this.abortPromise = new Promise((_, r3) => reject = r3);
    this.controller = new AbortController();
    let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);
    this.controller.signal.addEventListener("abort", onAbort);
    this.data = Object.entries(data).reduce((acc, _ref2) => {
      let [key, value] = _ref2;
      return Object.assign(acc, {
        [key]: this.trackPromise(key, value)
      });
    }, {});
    if (this.done) {
      this.unlistenAbortSignal();
    }
    this.init = responseInit;
  }
  trackPromise(key, value) {
    if (!(value instanceof Promise)) {
      return value;
    }
    this.deferredKeys.push(key);
    this.pendingKeysSet.add(key);
    let promise = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise, key, void 0, data), (error2) => this.onSettle(promise, key, error2));
    promise.catch(() => {
    });
    Object.defineProperty(promise, "_tracked", {
      get: () => true
    });
    return promise;
  }
  onSettle(promise, key, error2, data) {
    if (this.controller.signal.aborted && error2 instanceof AbortedDeferredError) {
      this.unlistenAbortSignal();
      Object.defineProperty(promise, "_error", {
        get: () => error2
      });
      return Promise.reject(error2);
    }
    this.pendingKeysSet.delete(key);
    if (this.done) {
      this.unlistenAbortSignal();
    }
    if (error2 === void 0 && data === void 0) {
      let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');
      Object.defineProperty(promise, "_error", {
        get: () => undefinedError
      });
      this.emit(false, key);
      return Promise.reject(undefinedError);
    }
    if (data === void 0) {
      Object.defineProperty(promise, "_error", {
        get: () => error2
      });
      this.emit(false, key);
      return Promise.reject(error2);
    }
    Object.defineProperty(promise, "_data", {
      get: () => data
    });
    this.emit(false, key);
    return data;
  }
  emit(aborted, settledKey) {
    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
  }
  subscribe(fn) {
    this.subscribers.add(fn);
    return () => this.subscribers.delete(fn);
  }
  cancel() {
    this.controller.abort();
    this.pendingKeysSet.forEach((v, k2) => this.pendingKeysSet.delete(k2));
    this.emit(true);
  }
  async resolveData(signal) {
    let aborted = false;
    if (!this.done) {
      let onAbort = () => this.cancel();
      signal.addEventListener("abort", onAbort);
      aborted = await new Promise((resolve) => {
        this.subscribe((aborted2) => {
          signal.removeEventListener("abort", onAbort);
          if (aborted2 || this.done) {
            resolve(aborted2);
          }
        });
      });
    }
    return aborted;
  }
  get done() {
    return this.pendingKeysSet.size === 0;
  }
  get unwrappedData() {
    invariant(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
    return Object.entries(this.data).reduce((acc, _ref3) => {
      let [key, value] = _ref3;
      return Object.assign(acc, {
        [key]: unwrapTrackedPromise(value)
      });
    }, {});
  }
  get pendingKeys() {
    return Array.from(this.pendingKeysSet);
  }
}
function isTrackedPromise(value) {
  return value instanceof Promise && value._tracked === true;
}
function unwrapTrackedPromise(value) {
  if (!isTrackedPromise(value)) {
    return value;
  }
  if (value._error) {
    throw value._error;
  }
  return value._data;
}
const defer = function defer2(data, init) {
  if (init === void 0) {
    init = {};
  }
  let responseInit = typeof init === "number" ? {
    status: init
  } : init;
  return new DeferredData(data, responseInit);
};
const redirect = function redirect2(url, init) {
  if (init === void 0) {
    init = 302;
  }
  let responseInit = init;
  if (typeof responseInit === "number") {
    responseInit = {
      status: responseInit
    };
  } else if (typeof responseInit.status === "undefined") {
    responseInit.status = 302;
  }
  let headers = new Headers(responseInit.headers);
  headers.set("Location", url);
  return new Response(null, _extends$3({}, responseInit, {
    headers
  }));
};
const redirectDocument = (url, init) => {
  let response = redirect(url, init);
  response.headers.set("X-Remix-Reload-Document", "true");
  return response;
};
const replace$1 = (url, init) => {
  let response = redirect(url, init);
  response.headers.set("X-Remix-Replace", "true");
  return response;
};
class ErrorResponseImpl {
  constructor(status, statusText, data, internal) {
    if (internal === void 0) {
      internal = false;
    }
    this.status = status;
    this.statusText = statusText || "";
    this.internal = internal;
    if (data instanceof Error) {
      this.data = data.toString();
      this.error = data;
    } else {
      this.data = data;
    }
  }
}
function isRouteErrorResponse(error2) {
  return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
}
const validMutationMethodsArr = ["post", "put", "patch", "delete"];
const validMutationMethods = new Set(validMutationMethodsArr);
const validRequestMethodsArr = ["get", ...validMutationMethodsArr];
const validRequestMethods = new Set(validRequestMethodsArr);
const redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
const redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
const IDLE_NAVIGATION = {
  state: "idle",
  location: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0,
  json: void 0,
  text: void 0
};
const IDLE_FETCHER = {
  state: "idle",
  data: void 0,
  formMethod: void 0,
  formAction: void 0,
  formEncType: void 0,
  formData: void 0,
  json: void 0,
  text: void 0
};
const IDLE_BLOCKER = {
  state: "unblocked",
  proceed: void 0,
  reset: void 0,
  location: void 0
};
const ABSOLUTE_URL_REGEX$1 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const defaultMapRouteProperties = (route) => ({
  hasErrorBoundary: Boolean(route.hasErrorBoundary)
});
const TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
function createRouter(init) {
  const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
  const isBrowser2 = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
  const isServer2 = !isBrowser2;
  invariant(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let mapRouteProperties2;
  if (init.mapRouteProperties) {
    mapRouteProperties2 = init.mapRouteProperties;
  } else if (init.detectErrorBoundary) {
    let detectErrorBoundary = init.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else {
    mapRouteProperties2 = defaultMapRouteProperties;
  }
  let manifest = {};
  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest);
  let inFlightDataRoutes;
  let basename = init.basename || "/";
  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;
  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;
  let future = _extends$3({
    v7_fetcherPersist: false,
    v7_normalizeFormMethod: false,
    v7_partialHydration: false,
    v7_prependBasename: false,
    v7_relativeSplatPath: false,
    v7_skipActionErrorRevalidation: false
  }, init.future);
  let unlistenHistory = null;
  let subscribers = /* @__PURE__ */ new Set();
  let savedScrollPositions2 = null;
  let getScrollRestorationKey = null;
  let getScrollPosition = null;
  let initialScrollRestored = init.hydrationData != null;
  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
  let initialMatchesIsFOW = false;
  let initialErrors = null;
  if (initialMatches == null && !patchRoutesOnNavigationImpl) {
    let error2 = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    });
    let {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches;
    initialErrors = {
      [route.id]: error2
    };
  }
  if (initialMatches && !init.hydrationData) {
    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);
    if (fogOfWar.active) {
      initialMatches = null;
    }
  }
  let initialized;
  if (!initialMatches) {
    initialized = false;
    initialMatches = [];
    if (future.v7_partialHydration) {
      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);
      if (fogOfWar.active && fogOfWar.matches) {
        initialMatchesIsFOW = true;
        initialMatches = fogOfWar.matches;
      }
    }
  } else if (initialMatches.some((m2) => m2.route.lazy)) {
    initialized = false;
  } else if (!initialMatches.some((m2) => m2.route.loader)) {
    initialized = true;
  } else if (future.v7_partialHydration) {
    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
    let errors2 = init.hydrationData ? init.hydrationData.errors : null;
    if (errors2) {
      let idx = initialMatches.findIndex((m2) => errors2[m2.route.id] !== void 0);
      initialized = initialMatches.slice(0, idx + 1).every((m2) => !shouldLoadRouteOnHydration(m2.route, loaderData, errors2));
    } else {
      initialized = initialMatches.every((m2) => !shouldLoadRouteOnHydration(m2.route, loaderData, errors2));
    }
  } else {
    initialized = init.hydrationData != null;
  }
  let router;
  let state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  };
  let pendingAction = Action.Pop;
  let pendingPreventScrollReset = false;
  let pendingNavigationController;
  let pendingViewTransitionEnabled = false;
  let appliedViewTransitions = /* @__PURE__ */ new Map();
  let removePageHideEventListener = null;
  let isUninterruptedRevalidation = false;
  let isRevalidationRequired = false;
  let cancelledDeferredRoutes = [];
  let cancelledFetcherLoads = /* @__PURE__ */ new Set();
  let fetchControllers = /* @__PURE__ */ new Map();
  let incrementingLoadId = 0;
  let pendingNavigationLoadId = -1;
  let fetchReloadIds = /* @__PURE__ */ new Map();
  let fetchRedirectIds = /* @__PURE__ */ new Set();
  let fetchLoadMatches = /* @__PURE__ */ new Map();
  let activeFetchers = /* @__PURE__ */ new Map();
  let deletedFetchers = /* @__PURE__ */ new Set();
  let activeDeferreds = /* @__PURE__ */ new Map();
  let blockerFunctions = /* @__PURE__ */ new Map();
  let unblockBlockerHistoryUpdate = void 0;
  function initialize2() {
    unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location: location2,
        delta
      } = _ref;
      if (unblockBlockerHistoryUpdate) {
        unblockBlockerHistoryUpdate();
        unblockBlockerHistoryUpdate = void 0;
        return;
      }
      warning(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location2,
        historyAction
      });
      if (blockerKey && delta != null) {
        let nextHistoryUpdatePromise = new Promise((resolve) => {
          unblockBlockerHistoryUpdate = resolve;
        });
        init.history.go(delta * -1);
        updateBlocker(blockerKey, {
          state: "blocked",
          location: location2,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location: location2
            });
            nextHistoryUpdatePromise.then(() => init.history.go(delta));
          },
          reset() {
            let blockers = new Map(state.blockers);
            blockers.set(blockerKey, IDLE_BLOCKER);
            updateState({
              blockers
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location2);
    });
    if (isBrowser2) {
      restoreAppliedTransitions(routerWindow, appliedViewTransitions);
      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
      routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
      removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
    }
    if (!state.initialized) {
      startNavigation(Action.Pop, state.location, {
        initialHydration: true
      });
    }
    return router;
  }
  function dispose() {
    if (unlistenHistory) {
      unlistenHistory();
    }
    if (removePageHideEventListener) {
      removePageHideEventListener();
    }
    subscribers.clear();
    pendingNavigationController && pendingNavigationController.abort();
    state.fetchers.forEach((_, key) => deleteFetcher(key));
    state.blockers.forEach((_, key) => deleteBlocker(key));
  }
  function subscribe(fn) {
    subscribers.add(fn);
    return () => subscribers.delete(fn);
  }
  function updateState(newState, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state = _extends$3({}, state, newState);
    let completedFetchers = [];
    let deletedFetchersKeys = [];
    if (future.v7_fetcherPersist) {
      state.fetchers.forEach((fetcher, key) => {
        if (fetcher.state === "idle") {
          if (deletedFetchers.has(key)) {
            deletedFetchersKeys.push(key);
          } else {
            completedFetchers.push(key);
          }
        }
      });
    }
    deletedFetchers.forEach((key) => {
      if (!state.fetchers.has(key) && !fetchControllers.has(key)) {
        deletedFetchersKeys.push(key);
      }
    });
    [...subscribers].forEach((subscriber) => subscriber(state, {
      deletedFetchers: deletedFetchersKeys,
      viewTransitionOpts: opts.viewTransitionOpts,
      flushSync: opts.flushSync === true
    }));
    if (future.v7_fetcherPersist) {
      completedFetchers.forEach((key) => state.fetchers.delete(key));
      deletedFetchersKeys.forEach((key) => deleteFetcher(key));
    } else {
      deletedFetchersKeys.forEach((key) => deletedFetchers.delete(key));
    }
  }
  function completeNavigation(location2, newState, _temp) {
    var _location$state, _location$state2;
    let {
      flushSync
    } = _temp === void 0 ? {} : _temp;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location2.state) == null ? void 0 : _location$state._isRedirect) !== true;
    let actionData;
    if (newState.actionData) {
      if (Object.keys(newState.actionData).length > 0) {
        actionData = newState.actionData;
      } else {
        actionData = null;
      }
    } else if (isActionReload) {
      actionData = state.actionData;
    } else {
      actionData = null;
    }
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    let blockers = state.blockers;
    if (blockers.size > 0) {
      blockers = new Map(blockers);
      blockers.forEach((_, k2) => blockers.set(k2, IDLE_BLOCKER));
    }
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location2.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    if (inFlightDataRoutes) {
      dataRoutes = inFlightDataRoutes;
      inFlightDataRoutes = void 0;
    }
    if (isUninterruptedRevalidation)
      ;
    else if (pendingAction === Action.Pop)
      ;
    else if (pendingAction === Action.Push) {
      init.history.push(location2, location2.state);
    } else if (pendingAction === Action.Replace) {
      init.history.replace(location2, location2.state);
    }
    let viewTransitionOpts;
    if (pendingAction === Action.Pop) {
      let priorPaths = appliedViewTransitions.get(state.location.pathname);
      if (priorPaths && priorPaths.has(location2.pathname)) {
        viewTransitionOpts = {
          currentLocation: state.location,
          nextLocation: location2
        };
      } else if (appliedViewTransitions.has(location2.pathname)) {
        viewTransitionOpts = {
          currentLocation: location2,
          nextLocation: state.location
        };
      }
    } else if (pendingViewTransitionEnabled) {
      let toPaths = appliedViewTransitions.get(state.location.pathname);
      if (toPaths) {
        toPaths.add(location2.pathname);
      } else {
        toPaths = /* @__PURE__ */ new Set([location2.pathname]);
        appliedViewTransitions.set(state.location.pathname, toPaths);
      }
      viewTransitionOpts = {
        currentLocation: state.location,
        nextLocation: location2
      };
    }
    updateState(_extends$3({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location: location2,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location2, newState.matches || state.matches),
      preventScrollReset,
      blockers
    }), {
      viewTransitionOpts,
      flushSync: flushSync === true
    });
    pendingAction = Action.Pop;
    pendingPreventScrollReset = false;
    pendingViewTransitionEnabled = false;
    isUninterruptedRevalidation = false;
    isRevalidationRequired = false;
    cancelledDeferredRoutes = [];
  }
  async function navigate(to, opts) {
    if (typeof to === "number") {
      init.history.go(to);
      return;
    }
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
    let {
      path,
      submission,
      error: error2
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
    let currentLocation = state.location;
    let nextLocation = createLocation(state.location, path, opts && opts.state);
    nextLocation = _extends$3({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0;
    let historyAction = Action.Push;
    if (userReplace === true) {
      historyAction = Action.Replace;
    } else if (userReplace === false)
      ;
    else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
      historyAction = Action.Replace;
    }
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
    let flushSync = (opts && opts.flushSync) === true;
    let blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          });
          navigate(to, opts);
        },
        reset() {
          let blockers = new Map(state.blockers);
          blockers.set(blockerKey, IDLE_BLOCKER);
          updateState({
            blockers
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error2,
      preventScrollReset,
      replace: opts && opts.replace,
      enableViewTransition: opts && opts.viewTransition,
      flushSync
    });
  }
  function revalidate() {
    interruptActiveLoads();
    updateState({
      revalidation: "loading"
    });
    if (state.navigation.state === "submitting") {
      return;
    }
    if (state.navigation.state === "idle") {
      startNavigation(state.historyAction, state.location, {
        startUninterruptedRevalidation: true
      });
      return;
    }
    startNavigation(pendingAction || state.historyAction, state.navigation.location, {
      overrideNavigation: state.navigation,
      // Proxy through any rending view transition
      enableViewTransition: pendingViewTransitionEnabled === true
    });
  }
  async function startNavigation(historyAction, location2, opts) {
    pendingNavigationController && pendingNavigationController.abort();
    pendingNavigationController = null;
    pendingAction = historyAction;
    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
    saveScrollPosition(state.location, state.matches);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let loadingNavigation = opts && opts.overrideNavigation;
    let matches = opts != null && opts.initialHydration && state.matches && state.matches.length > 0 && !initialMatchesIsFOW ? (
      // `matchRoutes()` has already been called if we're in here via `router.initialize()`
      state.matches
    ) : matchRoutes(routesToUse, location2, basename);
    let flushSync = (opts && opts.flushSync) === true;
    let fogOfWar = checkFogOfWar(matches, routesToUse, location2.pathname);
    if (fogOfWar.active && fogOfWar.matches) {
      matches = fogOfWar.matches;
    }
    if (!matches) {
      let {
        error: error2,
        notFoundMatches,
        route
      } = handleNavigational404(location2.pathname);
      completeNavigation(location2, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error2
        }
      }, {
        flushSync
      });
      return;
    }
    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location2) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location2, {
        matches
      }, {
        flushSync
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location2, pendingNavigationController.signal, opts && opts.submission);
    let pendingActionResult;
    if (opts && opts.pendingError) {
      pendingActionResult = [findNearestBoundary(matches).route.id, {
        type: ResultType.error,
        error: opts.pendingError
      }];
    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionResult = await handleAction(request, location2, opts.submission, matches, fogOfWar.active, {
        replace: opts.replace,
        flushSync
      });
      if (actionResult.shortCircuited) {
        return;
      }
      if (actionResult.pendingActionResult) {
        let [routeId, result] = actionResult.pendingActionResult;
        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {
          pendingNavigationController = null;
          completeNavigation(location2, {
            matches: actionResult.matches,
            loaderData: {},
            errors: {
              [routeId]: result.error
            }
          });
          return;
        }
      }
      matches = actionResult.matches || matches;
      pendingActionResult = actionResult.pendingActionResult;
      loadingNavigation = getLoadingNavigation(location2, opts.submission);
      flushSync = false;
      fogOfWar.active = false;
      request = createClientSideRequest(init.history, request.url, request.signal);
    }
    let {
      shortCircuited,
      matches: updatedMatches,
      loaderData,
      errors: errors2
    } = await handleLoaders(request, location2, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);
    if (shortCircuited) {
      return;
    }
    pendingNavigationController = null;
    completeNavigation(location2, _extends$3({
      matches: updatedMatches || matches
    }, getActionDataForCommit(pendingActionResult), {
      loaderData,
      errors: errors2
    }));
  }
  async function handleAction(request, location2, submission, matches, isFogOfWar, opts) {
    if (opts === void 0) {
      opts = {};
    }
    interruptActiveLoads();
    let navigation = getSubmittingNavigation(location2, submission);
    updateState({
      navigation
    }, {
      flushSync: opts.flushSync === true
    });
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(matches, location2.pathname, request.signal);
      if (discoverResult.type === "aborted") {
        return {
          shortCircuited: true
        };
      } else if (discoverResult.type === "error") {
        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
        return {
          matches: discoverResult.partialMatches,
          pendingActionResult: [boundaryId, {
            type: ResultType.error,
            error: discoverResult.error
          }]
        };
      } else if (!discoverResult.matches) {
        let {
          notFoundMatches,
          error: error2,
          route
        } = handleNavigational404(location2.pathname);
        return {
          matches: notFoundMatches,
          pendingActionResult: [route.id, {
            type: ResultType.error,
            error: error2
          }]
        };
      } else {
        matches = discoverResult.matches;
      }
    }
    let result;
    let actionMatch = getTargetMatch(matches, location2);
    if (!actionMatch.route.action && !actionMatch.route.lazy) {
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location2.pathname,
          routeId: actionMatch.route.id
        })
      };
    } else {
      let results = await callDataStrategy("action", state, request, [actionMatch], matches, null);
      result = results[actionMatch.route.id];
      if (request.signal.aborted) {
        return {
          shortCircuited: true
        };
      }
    }
    if (isRedirectResult(result)) {
      let replace2;
      if (opts && opts.replace != null) {
        replace2 = opts.replace;
      } else {
        let location3 = normalizeRedirectLocation(result.response.headers.get("Location"), new URL(request.url), basename);
        replace2 = location3 === state.location.pathname + state.location.search;
      }
      await startRedirectNavigation(request, result, true, {
        submission,
        replace: replace2
      });
      return {
        shortCircuited: true
      };
    }
    if (isDeferredResult(result)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      if ((opts && opts.replace) !== true) {
        pendingAction = Action.Push;
      }
      return {
        matches,
        pendingActionResult: [boundaryMatch.route.id, result]
      };
    }
    return {
      matches,
      pendingActionResult: [actionMatch.route.id, result]
    };
  }
  async function handleLoaders(request, location2, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace2, initialHydration, flushSync, pendingActionResult) {
    let loadingNavigation = overrideNavigation || getLoadingNavigation(location2, submission);
    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);
    if (isFogOfWar) {
      if (shouldUpdateNavigationState) {
        let actionData = getUpdatedActionData(pendingActionResult);
        updateState(_extends$3({
          navigation: loadingNavigation
        }, actionData !== void 0 ? {
          actionData
        } : {}), {
          flushSync
        });
      }
      let discoverResult = await discoverRoutes(matches, location2.pathname, request.signal);
      if (discoverResult.type === "aborted") {
        return {
          shortCircuited: true
        };
      } else if (discoverResult.type === "error") {
        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;
        return {
          matches: discoverResult.partialMatches,
          loaderData: {},
          errors: {
            [boundaryId]: discoverResult.error
          }
        };
      } else if (!discoverResult.matches) {
        let {
          error: error2,
          notFoundMatches,
          route
        } = handleNavigational404(location2.pathname);
        return {
          matches: notFoundMatches,
          loaderData: {},
          errors: {
            [route.id]: error2
          }
        };
      } else {
        matches = discoverResult.matches;
      }
    }
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location2, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);
    cancelActiveDeferreds((routeId) => !(matches && matches.some((m2) => m2.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m2) => m2.route.id === routeId));
    pendingNavigationLoadId = ++incrementingLoadId;
    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      let updatedFetchers2 = markFetchRedirectsDone();
      completeNavigation(location2, _extends$3({
        matches,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {
          [pendingActionResult[0]]: pendingActionResult[1].error
        } : null
      }, getActionDataForCommit(pendingActionResult), updatedFetchers2 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      });
      return {
        shortCircuited: true
      };
    }
    if (shouldUpdateNavigationState) {
      let updates = {};
      if (!isFogOfWar) {
        updates.navigation = loadingNavigation;
        let actionData = getUpdatedActionData(pendingActionResult);
        if (actionData !== void 0) {
          updates.actionData = actionData;
        }
      }
      if (revalidatingFetchers.length > 0) {
        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);
      }
      updateState(updates, {
        flushSync
      });
    }
    revalidatingFetchers.forEach((rf) => {
      abortFetcher(rf.key);
      if (rf.controller) {
        fetchControllers.set(rf.key, rf.controller);
      }
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f2) => abortFetcher(f2.key));
    if (pendingNavigationController) {
      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    }
    let {
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted) {
      return {
        shortCircuited: true
      };
    }
    if (pendingNavigationController) {
      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    }
    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect3 = findRedirect(loaderResults);
    if (redirect3) {
      await startRedirectNavigation(request, redirect3.result, true, {
        replace: replace2
      });
      return {
        shortCircuited: true
      };
    }
    redirect3 = findRedirect(fetcherResults);
    if (redirect3) {
      fetchRedirectIds.add(redirect3.key);
      await startRedirectNavigation(request, redirect3.result, true, {
        replace: replace2
      });
      return {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors: errors2
    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        if (aborted || deferredData.done) {
          activeDeferreds.delete(routeId);
        }
      });
    });
    if (future.v7_partialHydration && initialHydration && state.errors) {
      errors2 = _extends$3({}, state.errors, errors2);
    }
    let updatedFetchers = markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
    return _extends$3({
      matches,
      loaderData,
      errors: errors2
    }, shouldUpdateFetchers ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function getUpdatedActionData(pendingActionResult) {
    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {
      return {
        [pendingActionResult[0]]: pendingActionResult[1].data
      };
    } else if (state.actionData) {
      if (Object.keys(state.actionData).length === 0) {
        return null;
      } else {
        return state.actionData;
      }
    }
  }
  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {
    revalidatingFetchers.forEach((rf) => {
      let fetcher = state.fetchers.get(rf.key);
      let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
      state.fetchers.set(rf.key, revalidatingFetcher);
    });
    return new Map(state.fetchers);
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer2) {
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    }
    abortFetcher(key);
    let flushSync = (opts && opts.flushSync) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
    let matches = matchRoutes(routesToUse, normalizedPath, basename);
    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);
    if (fogOfWar.active && fogOfWar.matches) {
      matches = fogOfWar.matches;
    }
    if (!matches) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: normalizedPath
      }), {
        flushSync
      });
      return;
    }
    let {
      path,
      submission,
      error: error2
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
    if (error2) {
      setFetcherError(key, routeId, error2, {
        flushSync
      });
      return;
    }
    let match2 = getTargetMatch(matches, path);
    let preventScrollReset = (opts && opts.preventScrollReset) === true;
    if (submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path, match2, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path
    });
    handleFetcherLoader(key, routeId, path, match2, matches, fogOfWar.active, flushSync, preventScrollReset, submission);
  }
  async function handleFetcherAction(key, routeId, path, match2, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {
    interruptActiveLoads();
    fetchLoadMatches.delete(key);
    function detectAndHandle405Error(m2) {
      if (!m2.route.action && !m2.route.lazy) {
        let error2 = getInternalRouterError(405, {
          method: submission.formMethod,
          pathname: path,
          routeId
        });
        setFetcherError(key, routeId, error2, {
          flushSync
        });
        return true;
      }
      return false;
    }
    if (!isFogOfWar && detectAndHandle405Error(match2)) {
      return;
    }
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(requestMatches, new URL(fetchRequest.url).pathname, fetchRequest.signal);
      if (discoverResult.type === "aborted") {
        return;
      } else if (discoverResult.type === "error") {
        setFetcherError(key, routeId, discoverResult.error, {
          flushSync
        });
        return;
      } else if (!discoverResult.matches) {
        setFetcherError(key, routeId, getInternalRouterError(404, {
          pathname: path
        }), {
          flushSync
        });
        return;
      } else {
        requestMatches = discoverResult.matches;
        match2 = getTargetMatch(requestMatches, path);
        if (detectAndHandle405Error(match2)) {
          return;
        }
      }
    }
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let actionResults = await callDataStrategy("action", state, fetchRequest, [match2], requestMatches, key);
    let actionResult = actionResults[match2.route.id];
    if (fetchRequest.signal.aborted) {
      if (fetchControllers.get(key) === abortController) {
        fetchControllers.delete(key);
      }
      return;
    }
    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      }
    } else {
      if (isRedirectResult(actionResult)) {
        fetchControllers.delete(key);
        if (pendingNavigationLoadId > originatingLoadId) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        } else {
          fetchRedirectIds.add(key);
          updateFetcherState(key, getLoadingFetcher(submission));
          return startRedirectNavigation(fetchRequest, actionResult, false, {
            fetcherSubmission: submission,
            preventScrollReset
          });
        }
      }
      if (isErrorResult(actionResult)) {
        setFetcherError(key, routeId, actionResult.error);
        return;
      }
    }
    if (isDeferredResult(actionResult)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    let nextLocation = state.navigation.location || state.location;
    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
    invariant(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = getLoadingFetcher(submission, actionResult.data);
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match2.route.id, actionResult]);
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key;
      let existingFetcher2 = state.fetchers.get(staleKey);
      let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
      state.fetchers.set(staleKey, revalidatingFetcher);
      abortFetcher(staleKey);
      if (rf.controller) {
        fetchControllers.set(staleKey, rf.controller);
      }
    });
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted) {
      return;
    }
    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    fetchReloadIds.delete(key);
    fetchControllers.delete(key);
    revalidatingFetchers.forEach((r3) => fetchControllers.delete(r3.key));
    let redirect3 = findRedirect(loaderResults);
    if (redirect3) {
      return startRedirectNavigation(revalidationRequest, redirect3.result, false, {
        preventScrollReset
      });
    }
    redirect3 = findRedirect(fetcherResults);
    if (redirect3) {
      fetchRedirectIds.add(redirect3.key);
      return startRedirectNavigation(revalidationRequest, redirect3.result, false, {
        preventScrollReset
      });
    }
    let {
      loaderData,
      errors: errors2
    } = processLoaderData(state, matches, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    if (state.fetchers.has(key)) {
      let doneFetcher = getDoneFetcher(actionResult.data);
      state.fetchers.set(key, doneFetcher);
    }
    abortStaleFetchLoads(loadId);
    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
      invariant(pendingAction, "Expected pending action");
      pendingNavigationController && pendingNavigationController.abort();
      completeNavigation(state.navigation.location, {
        matches,
        loaderData,
        errors: errors2,
        fetchers: new Map(state.fetchers)
      });
    } else {
      updateState({
        errors: errors2,
        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors2),
        fetchers: new Map(state.fetchers)
      });
      isRevalidationRequired = false;
    }
  }
  async function handleFetcherLoader(key, routeId, path, match2, matches, isFogOfWar, flushSync, preventScrollReset, submission) {
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
    if (isFogOfWar) {
      let discoverResult = await discoverRoutes(matches, new URL(fetchRequest.url).pathname, fetchRequest.signal);
      if (discoverResult.type === "aborted") {
        return;
      } else if (discoverResult.type === "error") {
        setFetcherError(key, routeId, discoverResult.error, {
          flushSync
        });
        return;
      } else if (!discoverResult.matches) {
        setFetcherError(key, routeId, getInternalRouterError(404, {
          pathname: path
        }), {
          flushSync
        });
        return;
      } else {
        matches = discoverResult.matches;
        match2 = getTargetMatch(matches, path);
      }
    }
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let results = await callDataStrategy("loader", state, fetchRequest, [match2], matches, key);
    let result = results[match2.route.id];
    if (isDeferredResult(result)) {
      result = await resolveDeferredData(result, fetchRequest.signal, true) || result;
    }
    if (fetchControllers.get(key) === abortController) {
      fetchControllers.delete(key);
    }
    if (fetchRequest.signal.aborted) {
      return;
    }
    if (deletedFetchers.has(key)) {
      updateFetcherState(key, getDoneFetcher(void 0));
      return;
    }
    if (isRedirectResult(result)) {
      if (pendingNavigationLoadId > originatingLoadId) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      } else {
        fetchRedirectIds.add(key);
        await startRedirectNavigation(fetchRequest, result, false, {
          preventScrollReset
        });
        return;
      }
    }
    if (isErrorResult(result)) {
      setFetcherError(key, routeId, result.error);
      return;
    }
    invariant(!isDeferredResult(result), "Unhandled fetcher deferred data");
    updateFetcherState(key, getDoneFetcher(result.data));
  }
  async function startRedirectNavigation(request, redirect3, isNavigation, _temp2) {
    let {
      submission,
      fetcherSubmission,
      preventScrollReset,
      replace: replace2
    } = _temp2 === void 0 ? {} : _temp2;
    if (redirect3.response.headers.has("X-Remix-Revalidate")) {
      isRevalidationRequired = true;
    }
    let location2 = redirect3.response.headers.get("Location");
    invariant(location2, "Expected a Location header on the redirect Response");
    location2 = normalizeRedirectLocation(location2, new URL(request.url), basename);
    let redirectLocation = createLocation(state.location, location2, {
      _isRedirect: true
    });
    if (isBrowser2) {
      let isDocumentReload = false;
      if (redirect3.response.headers.has("X-Remix-Reload-Document")) {
        isDocumentReload = true;
      } else if (ABSOLUTE_URL_REGEX$1.test(location2)) {
        const url = init.history.createURL(location2);
        isDocumentReload = // Hard reload if it's an absolute URL to a new origin
        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
        stripBasename(url.pathname, basename) == null;
      }
      if (isDocumentReload) {
        if (replace2) {
          routerWindow.location.replace(location2);
        } else {
          routerWindow.location.assign(location2);
        }
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace2 === true || redirect3.response.headers.has("X-Remix-Replace") ? Action.Replace : Action.Push;
    let {
      formMethod,
      formAction,
      formEncType
    } = state.navigation;
    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
      submission = getSubmissionFromNavigation(state.navigation);
    }
    let activeSubmission = submission || fetcherSubmission;
    if (redirectPreserveMethodStatusCodes.has(redirect3.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends$3({}, activeSubmission, {
          formAction: location2
        }),
        // Preserve these flags across redirects
        preventScrollReset: preventScrollReset || pendingPreventScrollReset,
        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
      });
    } else {
      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation,
        // Send fetcher submissions through for shouldRevalidate
        fetcherSubmission,
        // Preserve these flags across redirects
        preventScrollReset: preventScrollReset || pendingPreventScrollReset,
        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : void 0
      });
    }
  }
  async function callDataStrategy(type, state2, request, matchesToLoad, matches, fetcherKey) {
    let results;
    let dataResults = {};
    try {
      results = await callDataStrategyImpl(dataStrategyImpl, type, state2, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties2);
    } catch (e) {
      matchesToLoad.forEach((m2) => {
        dataResults[m2.route.id] = {
          type: ResultType.error,
          error: e
        };
      });
      return dataResults;
    }
    for (let [routeId, result] of Object.entries(results)) {
      if (isRedirectDataStrategyResultResult(result)) {
        let response = result.result;
        dataResults[routeId] = {
          type: ResultType.redirect,
          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)
        };
      } else {
        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);
      }
    }
    return dataResults;
  }
  async function callLoadersAndMaybeResolveData(state2, matches, matchesToLoad, fetchersToLoad, request) {
    let currentMatches = state2.matches;
    let loaderResultsPromise = callDataStrategy("loader", state2, request, matchesToLoad, matches, null);
    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async (f2) => {
      if (f2.matches && f2.match && f2.controller) {
        let results = await callDataStrategy("loader", state2, createClientSideRequest(init.history, f2.path, f2.controller.signal), [f2.match], f2.matches, f2.key);
        let result = results[f2.match.route.id];
        return {
          [f2.key]: result
        };
      } else {
        return Promise.resolve({
          [f2.key]: {
            type: ResultType.error,
            error: getInternalRouterError(404, {
              pathname: f2.path
            })
          }
        });
      }
    }));
    let loaderResults = await loaderResultsPromise;
    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r3) => Object.assign(acc, r3), {});
    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state2.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);
    return {
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true;
    cancelledDeferredRoutes.push(...cancelActiveDeferreds());
    fetchLoadMatches.forEach((_, key) => {
      if (fetchControllers.has(key)) {
        cancelledFetcherLoads.add(key);
      }
      abortFetcher(key);
    });
  }
  function updateFetcherState(key, fetcher, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state.fetchers.set(key, fetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function setFetcherError(key, routeId, error2, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key);
    updateState({
      errors: {
        [boundaryMatch.route.id]: error2
      },
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function getFetcher(key) {
    activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
    if (deletedFetchers.has(key)) {
      deletedFetchers.delete(key);
    }
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function deleteFetcher(key) {
    let fetcher = state.fetchers.get(key);
    if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
      abortFetcher(key);
    }
    fetchLoadMatches.delete(key);
    fetchReloadIds.delete(key);
    fetchRedirectIds.delete(key);
    if (future.v7_fetcherPersist) {
      deletedFetchers.delete(key);
    }
    cancelledFetcherLoads.delete(key);
    state.fetchers.delete(key);
  }
  function deleteFetcherAndUpdateState(key) {
    let count2 = (activeFetchers.get(key) || 0) - 1;
    if (count2 <= 0) {
      activeFetchers.delete(key);
      deletedFetchers.add(key);
      if (!future.v7_fetcherPersist) {
        deleteFetcher(key);
      }
    } else {
      activeFetchers.set(key, count2);
    }
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    if (controller) {
      controller.abort();
      fetchControllers.delete(key);
    }
  }
  function markFetchersDone(keys2) {
    for (let key of keys2) {
      let fetcher = getFetcher(key);
      let doneFetcher = getDoneFetcher(fetcher.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    let updatedFetchers = false;
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant(fetcher, "Expected fetcher: " + key);
      if (fetcher.state === "loading") {
        fetchRedirectIds.delete(key);
        doneKeys.push(key);
        updatedFetchers = true;
      }
    }
    markFetchersDone(doneKeys);
    return updatedFetchers;
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds) {
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant(fetcher, "Expected fetcher: " + key);
        if (fetcher.state === "loading") {
          abortFetcher(key);
          fetchReloadIds.delete(key);
          yeetedKeys.push(key);
        }
      }
    }
    markFetchersDone(yeetedKeys);
    return yeetedKeys.length > 0;
  }
  function getBlocker(key, fn) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    if (blockerFunctions.get(key) !== fn) {
      blockerFunctions.set(key, fn);
    }
    return blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key);
    blockerFunctions.delete(key);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    let blockers = new Map(state.blockers);
    blockers.set(key, newBlocker);
    updateState({
      blockers
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (blockerFunctions.size === 0) {
      return;
    }
    if (blockerFunctions.size > 1) {
      warning(false, "A router only supports one blocker at a time");
    }
    let entries = Array.from(blockerFunctions.entries());
    let [blockerKey, blockerFunction] = entries[entries.length - 1];
    let blocker = state.blockers.get(blockerKey);
    if (blocker && blocker.state === "proceeding") {
      return;
    }
    if (blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    })) {
      return blockerKey;
    }
  }
  function handleNavigational404(pathname) {
    let error2 = getInternalRouterError(404, {
      pathname
    });
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let {
      matches,
      route
    } = getShortCircuitMatches(routesToUse);
    cancelActiveDeferreds();
    return {
      notFoundMatches: matches,
      route,
      error: error2
    };
  }
  function cancelActiveDeferreds(predicate) {
    let cancelledRouteIds = [];
    activeDeferreds.forEach((dfd, routeId) => {
      if (!predicate || predicate(routeId)) {
        dfd.cancel();
        cancelledRouteIds.push(routeId);
        activeDeferreds.delete(routeId);
      }
    });
    return cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    savedScrollPositions2 = positions;
    getScrollPosition = getPosition;
    getScrollRestorationKey = getKey || null;
    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y2 = getSavedScrollPosition(state.location, state.matches);
      if (y2 != null) {
        updateState({
          restoreScrollPosition: y2
        });
      }
    }
    return () => {
      savedScrollPositions2 = null;
      getScrollPosition = null;
      getScrollRestorationKey = null;
    };
  }
  function getScrollKey(location2, matches) {
    if (getScrollRestorationKey) {
      let key = getScrollRestorationKey(location2, matches.map((m2) => convertRouteMatchToUiMatch(m2, state.loaderData)));
      return key || location2.key;
    }
    return location2.key;
  }
  function saveScrollPosition(location2, matches) {
    if (savedScrollPositions2 && getScrollPosition) {
      let key = getScrollKey(location2, matches);
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location2, matches) {
    if (savedScrollPositions2) {
      let key = getScrollKey(location2, matches);
      let y2 = savedScrollPositions2[key];
      if (typeof y2 === "number") {
        return y2;
      }
    }
    return null;
  }
  function checkFogOfWar(matches, routesToUse, pathname) {
    if (patchRoutesOnNavigationImpl) {
      if (!matches) {
        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
        return {
          active: true,
          matches: fogMatches || []
        };
      } else {
        if (Object.keys(matches[0].params).length > 0) {
          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
          return {
            active: true,
            matches: partialMatches
          };
        }
      }
    }
    return {
      active: false,
      matches: null
    };
  }
  async function discoverRoutes(matches, pathname, signal) {
    if (!patchRoutesOnNavigationImpl) {
      return {
        type: "success",
        matches
      };
    }
    let partialMatches = matches;
    while (true) {
      let isNonHMR = inFlightDataRoutes == null;
      let routesToUse = inFlightDataRoutes || dataRoutes;
      let localManifest = manifest;
      try {
        await patchRoutesOnNavigationImpl({
          signal,
          path: pathname,
          matches: partialMatches,
          patch: (routeId, children) => {
            if (signal.aborted)
              return;
            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties2);
          }
        });
      } catch (e) {
        return {
          type: "error",
          error: e,
          partialMatches
        };
      } finally {
        if (isNonHMR && !signal.aborted) {
          dataRoutes = [...dataRoutes];
        }
      }
      if (signal.aborted) {
        return {
          type: "aborted"
        };
      }
      let newMatches = matchRoutes(routesToUse, pathname, basename);
      if (newMatches) {
        return {
          type: "success",
          matches: newMatches
        };
      }
      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);
      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m2, i) => m2.route.id === newPartialMatches[i].route.id)) {
        return {
          type: "success",
          matches: null
        };
      }
      partialMatches = newPartialMatches;
    }
  }
  function _internalSetRoutes(newRoutes) {
    manifest = {};
    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
  }
  function patchRoutes(routeId, children) {
    let isNonHMR = inFlightDataRoutes == null;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2);
    if (isNonHMR) {
      dataRoutes = [...dataRoutes];
      updateState({});
    }
  }
  router = {
    get basename() {
      return basename;
    },
    get future() {
      return future;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    get window() {
      return routerWindow;
    },
    initialize: initialize2,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher: deleteFetcherAndUpdateState,
    dispose,
    getBlocker,
    deleteBlocker,
    patchRoutes,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  };
  return router;
}
function isSubmissionNavigation(opts) {
  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
}
function normalizeTo(location2, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
  let contextualMatches;
  let activeRouteMatch;
  if (fromRouteId) {
    contextualMatches = [];
    for (let match2 of matches) {
      contextualMatches.push(match2);
      if (match2.route.id === fromRouteId) {
        activeRouteMatch = match2;
        break;
      }
    }
  } else {
    contextualMatches = matches;
    activeRouteMatch = matches[matches.length - 1];
  }
  let path = resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location2.pathname, basename) || location2.pathname, relative === "path");
  if (to == null) {
    path.search = location2.search;
    path.hash = location2.hash;
  }
  if ((to == null || to === "" || to === ".") && activeRouteMatch) {
    let nakedIndex = hasNakedIndexQuery(path.search);
    if (activeRouteMatch.route.index && !nakedIndex) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    } else if (!activeRouteMatch.route.index && nakedIndex) {
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? "?" + qs : "";
    }
  }
  if (prependBasename && basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
  if (!opts || !isSubmissionNavigation(opts)) {
    return {
      path
    };
  }
  if (opts.formMethod && !isValidMethod(opts.formMethod)) {
    return {
      path,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  }
  let getInvalidBodyError = () => ({
    path,
    error: getInternalRouterError(400, {
      type: "invalid-body"
    })
  });
  let rawFormMethod = opts.formMethod || "get";
  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
  let formAction = stripHashFromPath(path);
  if (opts.body !== void 0) {
    if (opts.formEncType === "text/plain") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
        Array.from(opts.body.entries()).reduce((acc, _ref3) => {
          let [name, value] = _ref3;
          return "" + acc + name + "=" + value + "\n";
        }, "")
      ) : String(opts.body);
      return {
        path,
        submission: {
          formMethod,
          formAction,
          formEncType: opts.formEncType,
          formData: void 0,
          json: void 0,
          text
        }
      };
    } else if (opts.formEncType === "application/json") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      try {
        let json3 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
        return {
          path,
          submission: {
            formMethod,
            formAction,
            formEncType: opts.formEncType,
            formData: void 0,
            json: json3,
            text: void 0
          }
        };
      } catch (e) {
        return getInvalidBodyError();
      }
    }
  }
  invariant(typeof FormData === "function", "FormData is not available in this environment");
  let searchParams;
  let formData;
  if (opts.formData) {
    searchParams = convertFormDataToSearchParams(opts.formData);
    formData = opts.formData;
  } else if (opts.body instanceof FormData) {
    searchParams = convertFormDataToSearchParams(opts.body);
    formData = opts.body;
  } else if (opts.body instanceof URLSearchParams) {
    searchParams = opts.body;
    formData = convertSearchParamsToFormData(searchParams);
  } else if (opts.body == null) {
    searchParams = new URLSearchParams();
    formData = new FormData();
  } else {
    try {
      searchParams = new URLSearchParams(opts.body);
      formData = convertSearchParamsToFormData(searchParams);
    } catch (e) {
      return getInvalidBodyError();
    }
  }
  let submission = {
    formMethod,
    formAction,
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData,
    json: void 0,
    text: void 0
  };
  if (isMutationMethod(submission.formMethod)) {
    return {
      path,
      submission
    };
  }
  let parsedPath = parsePath(path);
  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
    searchParams.append("index", "");
  }
  parsedPath.search = "?" + searchParams;
  return {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {
  if (includeBoundary === void 0) {
    includeBoundary = false;
  }
  let index2 = matches.findIndex((m2) => m2.route.id === boundaryId);
  if (index2 >= 0) {
    return matches.slice(0, includeBoundary ? index2 + 1 : index2);
  }
  return matches;
}
function getMatchesToLoad(history, state, matches, submission, location2, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {
  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : void 0;
  let currentUrl = history.createURL(state.location);
  let nextUrl = history.createURL(location2);
  let boundaryMatches = matches;
  if (initialHydration && state.errors) {
    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);
  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {
    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);
  }
  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : void 0;
  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;
  let navigationMatches = boundaryMatches.filter((match2, index2) => {
    let {
      route
    } = match2;
    if (route.lazy) {
      return true;
    }
    if (route.loader == null) {
      return false;
    }
    if (initialHydration) {
      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);
    }
    if (isNewLoader(state.loaderData, state.matches[index2], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id)) {
      return true;
    }
    let currentRouteMatch = state.matches[index2];
    let nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends$3({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      actionStatus,
      defaultShouldRevalidate: shouldSkipRevalidation ? false : (
        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
        isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
      )
    }));
  });
  let revalidatingFetchers = [];
  fetchLoadMatches.forEach((f2, key) => {
    if (initialHydration || !matches.some((m2) => m2.route.id === f2.routeId) || deletedFetchers.has(key)) {
      return;
    }
    let fetcherMatches = matchRoutes(routesToUse, f2.path, basename);
    if (!fetcherMatches) {
      revalidatingFetchers.push({
        key,
        routeId: f2.routeId,
        path: f2.path,
        matches: null,
        match: null,
        controller: null
      });
      return;
    }
    let fetcher = state.fetchers.get(key);
    let fetcherMatch = getTargetMatch(fetcherMatches, f2.path);
    let shouldRevalidate = false;
    if (fetchRedirectIds.has(key)) {
      shouldRevalidate = false;
    } else if (cancelledFetcherLoads.has(key)) {
      cancelledFetcherLoads.delete(key);
      shouldRevalidate = true;
    } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
      shouldRevalidate = isRevalidationRequired;
    } else {
      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends$3({
        currentUrl,
        currentParams: state.matches[state.matches.length - 1].params,
        nextUrl,
        nextParams: matches[matches.length - 1].params
      }, submission, {
        actionResult,
        actionStatus,
        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired
      }));
    }
    if (shouldRevalidate) {
      revalidatingFetchers.push({
        key,
        routeId: f2.routeId,
        path: f2.path,
        matches: fetcherMatches,
        match: fetcherMatch,
        controller: new AbortController()
      });
    }
  });
  return [navigationMatches, revalidatingFetchers];
}
function shouldLoadRouteOnHydration(route, loaderData, errors2) {
  if (route.lazy) {
    return true;
  }
  if (!route.loader) {
    return false;
  }
  let hasData = loaderData != null && loaderData[route.id] !== void 0;
  let hasError = errors2 != null && errors2[route.id] !== void 0;
  if (!hasData && hasError) {
    return false;
  }
  if (typeof route.loader === "function" && route.loader.hydrate === true) {
    return true;
  }
  return !hasData && !hasError;
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match2.route.id !== currentMatch.route.id
  );
  let isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice === "boolean") {
      return routeChoice;
    }
  }
  return arg.defaultShouldRevalidate;
}
function patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties2) {
  var _childrenToPatch;
  let childrenToPatch;
  if (routeId) {
    let route = manifest[routeId];
    invariant(route, "No route found to patch children into: routeId = " + routeId);
    if (!route.children) {
      route.children = [];
    }
    childrenToPatch = route.children;
  } else {
    childrenToPatch = routesToUse;
  }
  let uniqueChildren = children.filter((newRoute) => !childrenToPatch.some((existingRoute) => isSameRoute(newRoute, existingRoute)));
  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties2, [routeId || "_", "patch", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || "0")], manifest);
  childrenToPatch.push(...newRoutes);
}
function isSameRoute(newRoute, existingRoute) {
  if ("id" in newRoute && "id" in existingRoute && newRoute.id === existingRoute.id) {
    return true;
  }
  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {
    return false;
  }
  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {
    return true;
  }
  return newRoute.children.every((aChild, i) => {
    var _existingRoute$childr;
    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some((bChild) => isSameRoute(aChild, bChild));
  });
}
async function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
  if (!route.lazy) {
    return;
  }
  let lazyRoute = await route.lazy();
  if (!route.lazy) {
    return;
  }
  let routeToUpdate = manifest[route.id];
  invariant(routeToUpdate, "No route found in manifest");
  let routeUpdates = {};
  for (let lazyRouteProperty in lazyRoute) {
    let staticRouteValue = routeToUpdate[lazyRouteProperty];
    let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
    // on the route updates
    lazyRouteProperty !== "hasErrorBoundary";
    warning(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
  }
  Object.assign(routeToUpdate, routeUpdates);
  Object.assign(routeToUpdate, _extends$3({}, mapRouteProperties2(routeToUpdate), {
    lazy: void 0
  }));
}
async function defaultDataStrategy(_ref4) {
  let {
    matches
  } = _ref4;
  let matchesToLoad = matches.filter((m2) => m2.shouldLoad);
  let results = await Promise.all(matchesToLoad.map((m2) => m2.resolve()));
  return results.reduce((acc, result, i) => Object.assign(acc, {
    [matchesToLoad[i].route.id]: result
  }), {});
}
async function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties2, requestContext) {
  let loadRouteDefinitionsPromises = matches.map((m2) => m2.route.lazy ? loadLazyRouteModule(m2.route, mapRouteProperties2, manifest) : void 0);
  let dsMatches = matches.map((match2, i) => {
    let loadRoutePromise = loadRouteDefinitionsPromises[i];
    let shouldLoad = matchesToLoad.some((m2) => m2.route.id === match2.route.id);
    let resolve = async (handlerOverride) => {
      if (handlerOverride && request.method === "GET" && (match2.route.lazy || match2.route.loader)) {
        shouldLoad = true;
      }
      return shouldLoad ? callLoaderOrAction(type, request, match2, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({
        type: ResultType.data,
        result: void 0
      });
    };
    return _extends$3({}, match2, {
      shouldLoad,
      resolve
    });
  });
  let results = await dataStrategyImpl({
    matches: dsMatches,
    request,
    params: matches[0].params,
    fetcherKey,
    context: requestContext
  });
  try {
    await Promise.all(loadRouteDefinitionsPromises);
  } catch (e) {
  }
  return results;
}
async function callLoaderOrAction(type, request, match2, loadRoutePromise, handlerOverride, staticContext) {
  let result;
  let onReject;
  let runHandler = (handler) => {
    let reject;
    let abortPromise = new Promise((_, r3) => reject = r3);
    onReject = () => reject();
    request.signal.addEventListener("abort", onReject);
    let actualHandler = (ctx) => {
      if (typeof handler !== "function") {
        return Promise.reject(new Error("You cannot call the handler for a route which defines a boolean " + ('"' + type + '" [routeId: ' + match2.route.id + "]")));
      }
      return handler({
        request,
        params: match2.params,
        context: staticContext
      }, ...ctx !== void 0 ? [ctx] : []);
    };
    let handlerPromise = (async () => {
      try {
        let val = await (handlerOverride ? handlerOverride((ctx) => actualHandler(ctx)) : actualHandler());
        return {
          type: "data",
          result: val
        };
      } catch (e) {
        return {
          type: "error",
          result: e
        };
      }
    })();
    return Promise.race([handlerPromise, abortPromise]);
  };
  try {
    let handler = match2.route[type];
    if (loadRoutePromise) {
      if (handler) {
        let handlerError;
        let [value] = await Promise.all([
          // If the handler throws, don't let it immediately bubble out,
          // since we need to let the lazy() execution finish so we know if this
          // route has a boundary that can handle the error
          runHandler(handler).catch((e) => {
            handlerError = e;
          }),
          loadRoutePromise
        ]);
        if (handlerError !== void 0) {
          throw handlerError;
        }
        result = value;
      } else {
        await loadRoutePromise;
        handler = match2.route[type];
        if (handler) {
          result = await runHandler(handler);
        } else if (type === "action") {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(405, {
            method: request.method,
            pathname,
            routeId: match2.route.id
          });
        } else {
          return {
            type: ResultType.data,
            result: void 0
          };
        }
      }
    } else if (!handler) {
      let url = new URL(request.url);
      let pathname = url.pathname + url.search;
      throw getInternalRouterError(404, {
        pathname
      });
    } else {
      result = await runHandler(handler);
    }
    invariant(result.result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e) {
    return {
      type: ResultType.error,
      result: e
    };
  } finally {
    if (onReject) {
      request.signal.removeEventListener("abort", onReject);
    }
  }
  return result;
}
async function convertDataStrategyResultToDataResult(dataStrategyResult) {
  let {
    result,
    type
  } = dataStrategyResult;
  if (isResponse(result)) {
    let data;
    try {
      let contentType = result.headers.get("Content-Type");
      if (contentType && /\bapplication\/json\b/.test(contentType)) {
        if (result.body == null) {
          data = null;
        } else {
          data = await result.json();
        }
      } else {
        data = await result.text();
      }
    } catch (e) {
      return {
        type: ResultType.error,
        error: e
      };
    }
    if (type === ResultType.error) {
      return {
        type: ResultType.error,
        error: new ErrorResponseImpl(result.status, result.statusText, data),
        statusCode: result.status,
        headers: result.headers
      };
    }
    return {
      type: ResultType.data,
      data,
      statusCode: result.status,
      headers: result.headers
    };
  }
  if (type === ResultType.error) {
    if (isDataWithResponseInit(result)) {
      var _result$init3, _result$init4;
      if (result.data instanceof Error) {
        var _result$init, _result$init2;
        return {
          type: ResultType.error,
          error: result.data,
          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
          headers: (_result$init2 = result.init) != null && _result$init2.headers ? new Headers(result.init.headers) : void 0
        };
      }
      return {
        type: ResultType.error,
        error: new ErrorResponseImpl(((_result$init3 = result.init) == null ? void 0 : _result$init3.status) || 500, void 0, result.data),
        statusCode: isRouteErrorResponse(result) ? result.status : void 0,
        headers: (_result$init4 = result.init) != null && _result$init4.headers ? new Headers(result.init.headers) : void 0
      };
    }
    return {
      type: ResultType.error,
      error: result,
      statusCode: isRouteErrorResponse(result) ? result.status : void 0
    };
  }
  if (isDeferredData(result)) {
    var _result$init5, _result$init6;
    return {
      type: ResultType.deferred,
      deferredData: result,
      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,
      headers: ((_result$init6 = result.init) == null ? void 0 : _result$init6.headers) && new Headers(result.init.headers)
    };
  }
  if (isDataWithResponseInit(result)) {
    var _result$init7, _result$init8;
    return {
      type: ResultType.data,
      data: result.data,
      statusCode: (_result$init7 = result.init) == null ? void 0 : _result$init7.status,
      headers: (_result$init8 = result.init) != null && _result$init8.headers ? new Headers(result.init.headers) : void 0
    };
  }
  return {
    type: ResultType.data,
    data: result
  };
}
function normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {
  let location2 = response.headers.get("Location");
  invariant(location2, "Redirects returned/thrown from loaders/actions must have a Location header");
  if (!ABSOLUTE_URL_REGEX$1.test(location2)) {
    let trimmedMatches = matches.slice(0, matches.findIndex((m2) => m2.route.id === routeId) + 1);
    location2 = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location2, v7_relativeSplatPath);
    response.headers.set("Location", location2);
  }
  return response;
}
function normalizeRedirectLocation(location2, currentUrl, basename) {
  if (ABSOLUTE_URL_REGEX$1.test(location2)) {
    let normalizedLocation = location2;
    let url = normalizedLocation.startsWith("//") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);
    let isSameBasename = stripBasename(url.pathname, basename) != null;
    if (url.origin === currentUrl.origin && isSameBasename) {
      return url.pathname + url.search + url.hash;
    }
  }
  return location2;
}
function createClientSideRequest(history, location2, signal, submission) {
  let url = history.createURL(stripHashFromPath(location2)).toString();
  let init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType
    } = submission;
    init.method = formMethod.toUpperCase();
    if (formEncType === "application/json") {
      init.headers = new Headers({
        "Content-Type": formEncType
      });
      init.body = JSON.stringify(submission.json);
    } else if (formEncType === "text/plain") {
      init.body = submission.text;
    } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
      init.body = convertFormDataToSearchParams(submission.formData);
    } else {
      init.body = submission.formData;
    }
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries()) {
    searchParams.append(key, typeof value === "string" ? value : value.name);
  }
  return searchParams;
}
function convertSearchParamsToFormData(searchParams) {
  let formData = new FormData();
  for (let [key, value] of searchParams.entries()) {
    formData.append(key, value);
  }
  return formData;
}
function processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {
  let loaderData = {};
  let errors2 = null;
  let statusCode;
  let foundError = false;
  let loaderHeaders = {};
  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : void 0;
  matches.forEach((match2) => {
    if (!(match2.route.id in results)) {
      return;
    }
    let id = match2.route.id;
    let result = results[id];
    invariant(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
    if (isErrorResult(result)) {
      let error2 = result.error;
      if (pendingError !== void 0) {
        error2 = pendingError;
        pendingError = void 0;
      }
      errors2 = errors2 || {};
      if (skipLoaderErrorBubbling) {
        errors2[id] = error2;
      } else {
        let boundaryMatch = findNearestBoundary(matches, id);
        if (errors2[boundaryMatch.route.id] == null) {
          errors2[boundaryMatch.route.id] = error2;
        }
      }
      loaderData[id] = void 0;
      if (!foundError) {
        foundError = true;
        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
      }
      if (result.headers) {
        loaderHeaders[id] = result.headers;
      }
    } else {
      if (isDeferredResult(result)) {
        activeDeferreds.set(id, result.deferredData);
        loaderData[id] = result.deferredData.data;
        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
          statusCode = result.statusCode;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      } else {
        loaderData[id] = result.data;
        if (result.statusCode && result.statusCode !== 200 && !foundError) {
          statusCode = result.statusCode;
        }
        if (result.headers) {
          loaderHeaders[id] = result.headers;
        }
      }
    }
  });
  if (pendingError !== void 0 && pendingActionResult) {
    errors2 = {
      [pendingActionResult[0]]: pendingError
    };
    loaderData[pendingActionResult[0]] = void 0;
  }
  return {
    loaderData,
    errors: errors2,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors: errors2
  } = processRouteLoaderData(
    matches,
    results,
    pendingActionResult,
    activeDeferreds,
    false
    // This method is only called client side so we always want to bubble
  );
  revalidatingFetchers.forEach((rf) => {
    let {
      key,
      match: match2,
      controller
    } = rf;
    let result = fetcherResults[key];
    invariant(result, "Did not find corresponding fetcher result");
    if (controller && controller.signal.aborted) {
      return;
    } else if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2 == null ? void 0 : match2.route.id);
      if (!(errors2 && errors2[boundaryMatch.route.id])) {
        errors2 = _extends$3({}, errors2, {
          [boundaryMatch.route.id]: result.error
        });
      }
      state.fetchers.delete(key);
    } else if (isRedirectResult(result)) {
      invariant(false, "Unhandled fetcher revalidation redirect");
    } else if (isDeferredResult(result)) {
      invariant(false, "Unhandled fetcher deferred data");
    } else {
      let doneFetcher = getDoneFetcher(result.data);
      state.fetchers.set(key, doneFetcher);
    }
  });
  return {
    loaderData,
    errors: errors2
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors2) {
  let mergedLoaderData = _extends$3({}, newLoaderData);
  for (let match2 of matches) {
    let id = match2.route.id;
    if (newLoaderData.hasOwnProperty(id)) {
      if (newLoaderData[id] !== void 0) {
        mergedLoaderData[id] = newLoaderData[id];
      }
    } else if (loaderData[id] !== void 0 && match2.route.loader) {
      mergedLoaderData[id] = loaderData[id];
    }
    if (errors2 && errors2.hasOwnProperty(id)) {
      break;
    }
  }
  return mergedLoaderData;
}
function getActionDataForCommit(pendingActionResult) {
  if (!pendingActionResult) {
    return {};
  }
  return isErrorResult(pendingActionResult[1]) ? {
    // Clear out prior actionData on errors
    actionData: {}
  } : {
    actionData: {
      [pendingActionResult[0]]: pendingActionResult[1].data
    }
  };
}
function findNearestBoundary(matches, routeId) {
  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m2) => m2.route.id === routeId) + 1) : [...matches];
  return eligibleMatches.reverse().find((m2) => m2.route.hasErrorBoundary === true) || matches[0];
}
function getShortCircuitMatches(routes) {
  let route = routes.length === 1 ? routes[0] : routes.find((r3) => r3.index || !r3.path || r3.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp5) {
  let {
    pathname,
    routeId,
    method,
    type,
    message
  } = _temp5 === void 0 ? {} : _temp5;
  let statusText = "Unknown Server Error";
  let errorMessage = "Unknown @remix-run/router error";
  if (status === 400) {
    statusText = "Bad Request";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (type === "defer-action") {
      errorMessage = "defer() is not supported in actions";
    } else if (type === "invalid-body") {
      errorMessage = "Unable to encode submission body";
    }
  } else if (status === 403) {
    statusText = "Forbidden";
    errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
  } else if (status === 404) {
    statusText = "Not Found";
    errorMessage = 'No route matches URL "' + pathname + '"';
  } else if (status === 405) {
    statusText = "Method Not Allowed";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (method) {
      errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
  }
  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  let entries = Object.entries(results);
  for (let i = entries.length - 1; i >= 0; i--) {
    let [key, result] = entries[i];
    if (isRedirectResult(result)) {
      return {
        key,
        result
      };
    }
  }
}
function stripHashFromPath(path) {
  let parsedPath = typeof path === "string" ? parsePath(path) : path;
  return createPath(_extends$3({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a, b2) {
  if (a.pathname !== b2.pathname || a.search !== b2.search) {
    return false;
  }
  if (a.hash === "") {
    return b2.hash !== "";
  } else if (a.hash === b2.hash) {
    return true;
  } else if (b2.hash !== "") {
    return true;
  }
  return false;
}
function isRedirectDataStrategyResultResult(result) {
  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isDataWithResponseInit(value) {
  return typeof value === "object" && value != null && "type" in value && "data" in value && "init" in value && value.type === "DataWithResponseInit";
}
function isDeferredData(value) {
  let deferred = value;
  return deferred && typeof deferred === "object" && typeof deferred.data === "object" && typeof deferred.subscribe === "function" && typeof deferred.cancel === "function" && typeof deferred.resolveData === "function";
}
function isResponse(value) {
  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function isValidMethod(method) {
  return validRequestMethods.has(method.toLowerCase());
}
function isMutationMethod(method) {
  return validMutationMethods.has(method.toLowerCase());
}
async function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {
  let entries = Object.entries(results);
  for (let index2 = 0; index2 < entries.length; index2++) {
    let [routeId, result] = entries[index2];
    let match2 = matches.find((m2) => (m2 == null ? void 0 : m2.route.id) === routeId);
    if (!match2) {
      continue;
    }
    let currentMatch = currentMatches.find((m2) => m2.route.id === match2.route.id);
    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    if (isDeferredResult(result) && isRevalidatingLoader) {
      await resolveDeferredData(result, signal, false).then((result2) => {
        if (result2) {
          results[routeId] = result2;
        }
      });
    }
  }
}
async function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {
  for (let index2 = 0; index2 < revalidatingFetchers.length; index2++) {
    let {
      key,
      routeId,
      controller
    } = revalidatingFetchers[index2];
    let result = results[key];
    let match2 = matches.find((m2) => (m2 == null ? void 0 : m2.route.id) === routeId);
    if (!match2) {
      continue;
    }
    if (isDeferredResult(result)) {
      invariant(controller, "Expected an AbortController for revalidating fetcher deferred result");
      await resolveDeferredData(result, controller.signal, true).then((result2) => {
        if (result2) {
          results[key] = result2;
        }
      });
    }
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0) {
    unwrap = false;
  }
  let aborted = await result.deferredData.resolveData(signal);
  if (aborted) {
    return;
  }
  if (unwrap) {
    try {
      return {
        type: ResultType.data,
        data: result.deferredData.unwrappedData
      };
    } catch (e) {
      return {
        type: ResultType.error,
        error: e
      };
    }
  }
  return {
    type: ResultType.data,
    data: result.deferredData.data
  };
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v) => v === "");
}
function getTargetMatch(matches, location2) {
  let search = typeof location2 === "string" ? parsePath(location2).search : location2.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
    return matches[matches.length - 1];
  }
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
function getSubmissionFromNavigation(navigation) {
  let {
    formMethod,
    formAction,
    formEncType,
    text,
    formData,
    json: json3
  } = navigation;
  if (!formMethod || !formAction || !formEncType) {
    return;
  }
  if (text != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: void 0,
      text
    };
  } else if (formData != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData,
      json: void 0,
      text: void 0
    };
  } else if (json3 !== void 0) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: json3,
      text: void 0
    };
  }
}
function getLoadingNavigation(location2, submission) {
  if (submission) {
    let navigation = {
      state: "loading",
      location: location2,
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text
    };
    return navigation;
  } else {
    let navigation = {
      state: "loading",
      location: location2,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    return navigation;
  }
}
function getSubmittingNavigation(location2, submission) {
  let navigation = {
    state: "submitting",
    location: location2,
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text
  };
  return navigation;
}
function getLoadingFetcher(submission, data) {
  if (submission) {
    let fetcher = {
      state: "loading",
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text,
      data
    };
    return fetcher;
  } else {
    let fetcher = {
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0,
      data
    };
    return fetcher;
  }
}
function getSubmittingFetcher(submission, existingFetcher) {
  let fetcher = {
    state: "submitting",
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text,
    data: existingFetcher ? existingFetcher.data : void 0
  };
  return fetcher;
}
function getDoneFetcher(data) {
  let fetcher = {
    state: "idle",
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0,
    data
  };
  return fetcher;
}
function restoreAppliedTransitions(_window, transitions2) {
  try {
    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
    if (sessionPositions) {
      let json3 = JSON.parse(sessionPositions);
      for (let [k2, v] of Object.entries(json3 || {})) {
        if (v && Array.isArray(v)) {
          transitions2.set(k2, new Set(v || []));
        }
      }
    }
  } catch (e) {
  }
}
function persistAppliedTransitions(_window, transitions2) {
  if (transitions2.size > 0) {
    let json3 = {};
    for (let [k2, v] of transitions2) {
      json3[k2] = [...v];
    }
    try {
      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json3));
    } catch (error2) {
      warning(false, "Failed to save applied view transitions in sessionStorage (" + error2 + ").");
    }
  }
}
/**
 * React Router v6.29.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$2() {
  _extends$2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$2.apply(this, arguments);
}
const DataRouterContext = /* @__PURE__ */ reactExports.createContext(null);
{
  DataRouterContext.displayName = "DataRouter";
}
const DataRouterStateContext = /* @__PURE__ */ reactExports.createContext(null);
{
  DataRouterStateContext.displayName = "DataRouterState";
}
const AwaitContext = /* @__PURE__ */ reactExports.createContext(null);
{
  AwaitContext.displayName = "Await";
}
const NavigationContext = /* @__PURE__ */ reactExports.createContext(null);
{
  NavigationContext.displayName = "Navigation";
}
const LocationContext = /* @__PURE__ */ reactExports.createContext(null);
{
  LocationContext.displayName = "Location";
}
const RouteContext = /* @__PURE__ */ reactExports.createContext({
  outlet: null,
  matches: [],
  isDataRoute: false
});
{
  RouteContext.displayName = "Route";
}
const RouteErrorContext = /* @__PURE__ */ reactExports.createContext(null);
{
  RouteErrorContext.displayName = "RouteError";
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  ) : void 0;
  let {
    basename,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    hash: hash2,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator2.createHref({
    pathname: joinedPathname,
    search,
    hash: hash2
  });
}
function useInRouterContext() {
  return reactExports.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
  ) : void 0;
  return reactExports.useContext(LocationContext).location;
}
function useNavigationType() {
  return reactExports.useContext(LocationContext).navigationType;
}
function useMatch(pattern) {
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useMatch() may be used only in the context of a <Router> component."
  ) : void 0;
  let {
    pathname
  } = useLocation();
  return reactExports.useMemo(() => matchPath(pattern, decodePath(pathname)), [pathname, pattern]);
}
const navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
function useIsomorphicLayoutEffect$2(cb) {
  let isStatic = reactExports.useContext(NavigationContext).static;
  if (!isStatic) {
    reactExports.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = reactExports.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
  ) : void 0;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator: navigator2
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$2(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    warning(activeRef.current, navigateEffectWarning);
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      navigator2.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator2.replace : navigator2.push)(path, options.state, options);
  }, [basename, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
const OutletContext = /* @__PURE__ */ reactExports.createContext(null);
function useOutletContext() {
  return reactExports.useContext(OutletContext);
}
function useOutlet(context) {
  let outlet = reactExports.useContext(RouteContext).outlet;
  if (outlet) {
    return /* @__PURE__ */ reactExports.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useParams() {
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = reactExports.useContext(NavigationContext);
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return reactExports.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes$1(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  ) : void 0;
  let {
    navigator: navigator2,
    static: isStatic
  } = reactExports.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = reactExports.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation();
  let location2;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : void 0;
    location2 = parsedLocationArg;
  } else {
    location2 = locationFromContext;
  }
  let pathname = location2.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = !isStatic && dataRouterState && dataRouterState.matches && dataRouterState.matches.length > 0 ? dataRouterState.matches : matchRoutes(routes, {
    pathname: remainingPathname
  });
  {
    warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ');
    warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.');
  }
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
      value: {
        location: _extends$2({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location2),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error2 = useRouteError();
  let message = isRouteErrorResponse(error2) ? error2.status + " " + error2.statusText : error2 instanceof Error ? error2.message : JSON.stringify(error2);
  let stack = error2 instanceof Error ? error2.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  {
    console.error("Error handled by React Router default ErrorBoundary:", error2);
    devInfo = /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("p", null, "💿 Hey developer 👋"), /* @__PURE__ */ reactExports.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ reactExports.createElement("code", {
      style: codeStyles
    }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ reactExports.createElement("code", {
      style: codeStyles
    }, "errorElement"), " prop on your route."));
  }
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ reactExports.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? /* @__PURE__ */ reactExports.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
const defaultErrorElement = /* @__PURE__ */ reactExports.createElement(DefaultErrorComponent, null);
class RenderErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      location: props.location,
      revalidation: props.revalidation,
      error: props.error
    };
  }
  static getDerivedStateFromError(error2) {
    return {
      error: error2
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
      return {
        error: props.error,
        location: props.location,
        revalidation: props.revalidation
      };
    }
    return {
      error: props.error !== void 0 ? props.error : state.error,
      location: state.location,
      revalidation: props.revalidation || state.revalidation
    };
  }
  componentDidCatch(error2, errorInfo) {
    console.error("React Router caught the following error during render", error2, errorInfo);
  }
  render() {
    return this.state.error !== void 0 ? /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
      value: this.props.routeContext
    }, /* @__PURE__ */ reactExports.createElement(RouteErrorContext.Provider, {
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref;
  let dataRouterContext = reactExports.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return /* @__PURE__ */ reactExports.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _future;
    if (!dataRouterState) {
      return null;
    }
    if (dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else if ((_future = future) != null && _future.v7_partialHydration && parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors2 = (_dataRouterState = dataRouterState) == null ? void 0 : _dataRouterState.errors;
  if (errors2 != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors2 == null ? void 0 : errors2[m2.route.id]) !== void 0);
    !(errorIndex >= 0) ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors2).join(",")) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i = 0; i < renderedMatches.length; i++) {
      let match2 = renderedMatches[i];
      if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
        fallbackIndex = i;
      }
      if (match2.route.id) {
        let {
          loaderData,
          errors: errors3
        } = dataRouterState;
        let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors3 || errors3[match2.route.id] === void 0);
        if (match2.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match2, index2) => {
    let error2;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error2 = errors2 && match2.route.id ? errors2[match2.route.id] : void 0;
      errorElement = match2.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index2 === 0) {
          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index2) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
    let getChildren2 = () => {
      let children;
      if (error2) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match2.route.Component) {
        children = /* @__PURE__ */ reactExports.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children = match2.route.element;
      } else {
        children = outlet;
      }
      return /* @__PURE__ */ reactExports.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ reactExports.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error: error2,
      children: getChildren2(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren2();
  }, null);
}
var DataRouterHook$1 = /* @__PURE__ */ function(DataRouterHook2) {
  DataRouterHook2["UseBlocker"] = "useBlocker";
  DataRouterHook2["UseRevalidator"] = "useRevalidator";
  DataRouterHook2["UseNavigateStable"] = "useNavigate";
  return DataRouterHook2;
}(DataRouterHook$1 || {});
var DataRouterStateHook$1 = /* @__PURE__ */ function(DataRouterStateHook2) {
  DataRouterStateHook2["UseBlocker"] = "useBlocker";
  DataRouterStateHook2["UseLoaderData"] = "useLoaderData";
  DataRouterStateHook2["UseActionData"] = "useActionData";
  DataRouterStateHook2["UseRouteError"] = "useRouteError";
  DataRouterStateHook2["UseNavigation"] = "useNavigation";
  DataRouterStateHook2["UseRouteLoaderData"] = "useRouteLoaderData";
  DataRouterStateHook2["UseMatches"] = "useMatches";
  DataRouterStateHook2["UseRevalidator"] = "useRevalidator";
  DataRouterStateHook2["UseNavigateStable"] = "useNavigate";
  DataRouterStateHook2["UseRouteId"] = "useRouteId";
  return DataRouterStateHook2;
}(DataRouterStateHook$1 || {});
function getDataRouterConsoleError$1(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function useDataRouterContext$1(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant(false, getDataRouterConsoleError$1(hookName)) : void 0;
  return ctx;
}
function useDataRouterState$1(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false, getDataRouterConsoleError$1(hookName)) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = reactExports.useContext(RouteContext);
  !route ? invariant(false, getDataRouterConsoleError$1(hookName)) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : void 0;
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(DataRouterStateHook$1.UseRouteId);
}
function useNavigation() {
  let state = useDataRouterState$1(DataRouterStateHook$1.UseNavigation);
  return state.navigation;
}
function useRevalidator() {
  let dataRouterContext = useDataRouterContext$1(DataRouterHook$1.UseRevalidator);
  let state = useDataRouterState$1(DataRouterStateHook$1.UseRevalidator);
  return reactExports.useMemo(() => ({
    revalidate: dataRouterContext.router.revalidate,
    state: state.revalidation
  }), [dataRouterContext.router.revalidate, state.revalidation]);
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState$1(DataRouterStateHook$1.UseMatches);
  return reactExports.useMemo(() => matches.map((m2) => convertRouteMatchToUiMatch(m2, loaderData)), [matches, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState$1(DataRouterStateHook$1.UseLoaderData);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return void 0;
  }
  return state.loaderData[routeId];
}
function useRouteLoaderData(routeId) {
  let state = useDataRouterState$1(DataRouterStateHook$1.UseRouteLoaderData);
  return state.loaderData[routeId];
}
function useActionData() {
  let state = useDataRouterState$1(DataRouterStateHook$1.UseActionData);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseLoaderData);
  return state.actionData ? state.actionData[routeId] : void 0;
}
function useRouteError() {
  var _state$errors;
  let error2 = reactExports.useContext(RouteErrorContext);
  let state = useDataRouterState$1(DataRouterStateHook$1.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook$1.UseRouteError);
  if (error2 !== void 0) {
    return error2;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useAsyncValue() {
  let value = reactExports.useContext(AwaitContext);
  return value == null ? void 0 : value._data;
}
function useAsyncError() {
  let value = reactExports.useContext(AwaitContext);
  return value == null ? void 0 : value._error;
}
let blockerId = 0;
function useBlocker(shouldBlock) {
  let {
    router,
    basename
  } = useDataRouterContext$1(DataRouterHook$1.UseBlocker);
  let state = useDataRouterState$1(DataRouterStateHook$1.UseBlocker);
  let [blockerKey, setBlockerKey] = reactExports.useState("");
  let blockerFunction = reactExports.useCallback((arg) => {
    if (typeof shouldBlock !== "function") {
      return !!shouldBlock;
    }
    if (basename === "/") {
      return shouldBlock(arg);
    }
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = arg;
    return shouldBlock({
      currentLocation: _extends$2({}, currentLocation, {
        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
      }),
      nextLocation: _extends$2({}, nextLocation, {
        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
      }),
      historyAction
    });
  }, [basename, shouldBlock]);
  reactExports.useEffect(() => {
    let key = String(++blockerId);
    setBlockerKey(key);
    return () => router.deleteBlocker(key);
  }, [router]);
  reactExports.useEffect(() => {
    if (blockerKey !== "") {
      router.getBlocker(blockerKey, blockerFunction);
    }
  }, [router, blockerKey, blockerFunction]);
  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext$1(DataRouterHook$1.UseNavigateStable);
  let id = useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable);
  let activeRef = reactExports.useRef(false);
  useIsomorphicLayoutEffect$2(() => {
    activeRef.current = true;
  });
  let navigate = reactExports.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    warning(activeRef.current, navigateEffectWarning);
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      router.navigate(to);
    } else {
      router.navigate(to, _extends$2({
        fromRouteId: id
      }, options));
    }
  }, [router, id]);
  return navigate;
}
const alreadyWarned$1 = {};
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned$1[key]) {
    alreadyWarned$1[key] = true;
    warning(false, message);
  }
}
const alreadyWarned = {};
function warnOnce(key, message) {
  if (!alreadyWarned[message]) {
    alreadyWarned[message] = true;
    console.warn(message);
  }
}
const logDeprecation = (flag, msg, link) => warnOnce(flag, "⚠️ React Router Future Flag Warning: " + msg + ". " + ("You can use the `" + flag + "` future flag to opt-in early. ") + ("For more information, see " + link + "."));
function logV6DeprecationWarnings(renderFuture, routerFuture) {
  if ((renderFuture == null ? void 0 : renderFuture.v7_startTransition) === void 0) {
    logDeprecation("v7_startTransition", "React Router will begin wrapping state updates in `React.startTransition` in v7", "https://reactrouter.com/v6/upgrading/future#v7_starttransition");
  }
  if ((renderFuture == null ? void 0 : renderFuture.v7_relativeSplatPath) === void 0 && (!routerFuture || !routerFuture.v7_relativeSplatPath)) {
    logDeprecation("v7_relativeSplatPath", "Relative route resolution within Splat routes is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_relativesplatpath");
  }
  if (routerFuture) {
    if (routerFuture.v7_fetcherPersist === void 0) {
      logDeprecation("v7_fetcherPersist", "The persistence behavior of fetchers is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_fetcherpersist");
    }
    if (routerFuture.v7_normalizeFormMethod === void 0) {
      logDeprecation("v7_normalizeFormMethod", "Casing of `formMethod` fields is being normalized to uppercase in v7", "https://reactrouter.com/v6/upgrading/future#v7_normalizeformmethod");
    }
    if (routerFuture.v7_partialHydration === void 0) {
      logDeprecation("v7_partialHydration", "`RouterProvider` hydration behavior is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_partialhydration");
    }
    if (routerFuture.v7_skipActionErrorRevalidation === void 0) {
      logDeprecation("v7_skipActionErrorRevalidation", "The revalidation behavior after 4xx/5xx `action` responses is changing in v7", "https://reactrouter.com/v6/upgrading/future#v7_skipactionerrorrevalidation");
    }
  }
}
const START_TRANSITION$1 = "startTransition";
const startTransitionImpl$1 = React$1[START_TRANSITION$1];
function RouterProvider$1(_ref) {
  let {
    fallbackElement,
    router,
    future
  } = _ref;
  let [state, setStateImpl] = reactExports.useState(router.state);
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    if (v7_startTransition && startTransitionImpl$1) {
      startTransitionImpl$1(() => setStateImpl(newState));
    } else {
      setStateImpl(newState);
    }
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
  reactExports.useEffect(() => {
    warning(fallbackElement == null || !router.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
  }, []);
  let navigator2 = reactExports.useMemo(() => {
    return {
      createHref: router.createHref,
      encodeLocation: router.encodeLocation,
      go: (n) => router.navigate(n),
      push: (to, state2, opts) => router.navigate(to, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to, state2, opts) => router.navigate(to, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router]);
  let basename = router.basename || "/";
  let dataRouterContext = reactExports.useMemo(() => ({
    router,
    navigator: navigator2,
    static: false,
    basename
  }), [router, navigator2, basename]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future, router.future), [router, future]);
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ reactExports.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    location: state.location,
    navigationType: state.historyAction,
    navigator: navigator2,
    future: {
      v7_relativeSplatPath: router.future.v7_relativeSplatPath
    }
  }, state.initialized || router.future.v7_partialHydration ? /* @__PURE__ */ reactExports.createElement(DataRoutes$1, {
    routes: router.routes,
    future: router.future,
    state
  }) : fallbackElement))), null);
}
function DataRoutes$1(_ref2) {
  let {
    routes,
    future,
    state
  } = _ref2;
  return useRoutesImpl(routes, void 0, state, future);
}
function MemoryRouter(_ref3) {
  let {
    basename,
    children,
    initialEntries,
    initialIndex,
    future
  } = _ref3;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createMemoryHistory({
      initialEntries,
      initialIndex,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl$1 ? startTransitionImpl$1(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function Navigate(_ref4) {
  let {
    to,
    replace: replace2,
    state,
    relative
  } = _ref4;
  !useInRouterContext() ? invariant(
    false,
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component."
  ) : void 0;
  let {
    future,
    static: isStatic
  } = reactExports.useContext(NavigationContext);
  warning(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.");
  let {
    matches
  } = reactExports.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
  let jsonPath = JSON.stringify(path);
  reactExports.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace: replace2,
    state,
    relative
  }), [navigate, jsonPath, relative, replace2, state]);
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  invariant(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.");
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator: navigator2,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = reactExports.useMemo(() => ({
    basename,
    navigator: navigator2,
    static: staticProp,
    future: _extends$2({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator2, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash: hash2 = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = reactExports.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash: hash2,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash2, state, key, navigationType]);
  warning(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.");
  if (locationContext == null) {
    return null;
  }
  return /* @__PURE__ */ reactExports.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, /* @__PURE__ */ reactExports.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location: location2
  } = _ref6;
  return useRoutes$1(createRoutesFromChildren(children), location2);
}
function Await(_ref7) {
  let {
    children,
    errorElement,
    resolve
  } = _ref7;
  return /* @__PURE__ */ reactExports.createElement(AwaitErrorBoundary, {
    resolve,
    errorElement
  }, /* @__PURE__ */ reactExports.createElement(ResolveAwait, null, children));
}
var AwaitRenderStatus = /* @__PURE__ */ function(AwaitRenderStatus2) {
  AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
  AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
  AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
  return AwaitRenderStatus2;
}(AwaitRenderStatus || {});
const neverSettledPromise = new Promise(() => {
});
class AwaitErrorBoundary extends reactExports.Component {
  constructor(props) {
    super(props);
    this.state = {
      error: null
    };
  }
  static getDerivedStateFromError(error2) {
    return {
      error: error2
    };
  }
  componentDidCatch(error2, errorInfo) {
    console.error("<Await> caught the following error during render", error2, errorInfo);
  }
  render() {
    let {
      children,
      errorElement,
      resolve
    } = this.props;
    let promise = null;
    let status = AwaitRenderStatus.pending;
    if (!(resolve instanceof Promise)) {
      status = AwaitRenderStatus.success;
      promise = Promise.resolve();
      Object.defineProperty(promise, "_tracked", {
        get: () => true
      });
      Object.defineProperty(promise, "_data", {
        get: () => resolve
      });
    } else if (this.state.error) {
      status = AwaitRenderStatus.error;
      let renderError = this.state.error;
      promise = Promise.reject().catch(() => {
      });
      Object.defineProperty(promise, "_tracked", {
        get: () => true
      });
      Object.defineProperty(promise, "_error", {
        get: () => renderError
      });
    } else if (resolve._tracked) {
      promise = resolve;
      status = "_error" in promise ? AwaitRenderStatus.error : "_data" in promise ? AwaitRenderStatus.success : AwaitRenderStatus.pending;
    } else {
      status = AwaitRenderStatus.pending;
      Object.defineProperty(resolve, "_tracked", {
        get: () => true
      });
      promise = resolve.then((data) => Object.defineProperty(resolve, "_data", {
        get: () => data
      }), (error2) => Object.defineProperty(resolve, "_error", {
        get: () => error2
      }));
    }
    if (status === AwaitRenderStatus.error && promise._error instanceof AbortedDeferredError) {
      throw neverSettledPromise;
    }
    if (status === AwaitRenderStatus.error && !errorElement) {
      throw promise._error;
    }
    if (status === AwaitRenderStatus.error) {
      return /* @__PURE__ */ reactExports.createElement(AwaitContext.Provider, {
        value: promise,
        children: errorElement
      });
    }
    if (status === AwaitRenderStatus.success) {
      return /* @__PURE__ */ reactExports.createElement(AwaitContext.Provider, {
        value: promise,
        children
      });
    }
    throw promise;
  }
}
function ResolveAwait(_ref8) {
  let {
    children
  } = _ref8;
  let data = useAsyncValue();
  let toRender = typeof children === "function" ? children(data) : children;
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, toRender);
}
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  reactExports.Children.forEach(children, (element, index2) => {
    if (!/* @__PURE__ */ reactExports.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index2];
    if (element.type === reactExports.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : void 0;
    !(!element.props.index || !element.props.children) ? invariant(false, "An index route cannot have child routes.") : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
function renderMatches(matches) {
  return _renderMatches(matches);
}
function mapRouteProperties(route) {
  let updates = {
    // Note: this check also occurs in createRoutesFromChildren so update
    // there if you change this -- please and thank you!
    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
  };
  if (route.Component) {
    {
      if (route.element) {
        warning(false, "You should not include both `Component` and `element` on your route - `Component` will be used.");
      }
    }
    Object.assign(updates, {
      element: /* @__PURE__ */ reactExports.createElement(route.Component),
      Component: void 0
    });
  }
  if (route.HydrateFallback) {
    {
      if (route.hydrateFallbackElement) {
        warning(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.");
      }
    }
    Object.assign(updates, {
      hydrateFallbackElement: /* @__PURE__ */ reactExports.createElement(route.HydrateFallback),
      HydrateFallback: void 0
    });
  }
  if (route.ErrorBoundary) {
    {
      if (route.errorElement) {
        warning(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.");
      }
    }
    Object.assign(updates, {
      errorElement: /* @__PURE__ */ reactExports.createElement(route.ErrorBoundary),
      ErrorBoundary: void 0
    });
  }
  return updates;
}
function createMemoryRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends$2({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createMemoryHistory({
      initialEntries: opts == null ? void 0 : opts.initialEntries,
      initialIndex: opts == null ? void 0 : opts.initialIndex
    }),
    hydrationData: opts == null ? void 0 : opts.hydrationData,
    routes,
    mapRouteProperties,
    dataStrategy: opts == null ? void 0 : opts.dataStrategy,
    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation
  }).initialize();
}
const _3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AbortedDeferredError,
  Await,
  MemoryRouter,
  Navigate,
  get NavigationType() {
    return Action;
  },
  Outlet,
  Route,
  Router,
  RouterProvider: RouterProvider$1,
  Routes,
  UNSAFE_DataRouterContext: DataRouterContext,
  UNSAFE_DataRouterStateContext: DataRouterStateContext,
  UNSAFE_LocationContext: LocationContext,
  UNSAFE_NavigationContext: NavigationContext,
  UNSAFE_RouteContext: RouteContext,
  UNSAFE_logV6DeprecationWarnings: logV6DeprecationWarnings,
  UNSAFE_mapRouteProperties: mapRouteProperties,
  UNSAFE_useRouteId: useRouteId,
  UNSAFE_useRoutesImpl: useRoutesImpl,
  createMemoryRouter,
  createPath,
  createRoutesFromChildren,
  createRoutesFromElements: createRoutesFromChildren,
  defer,
  generatePath,
  isRouteErrorResponse,
  json,
  matchPath,
  matchRoutes,
  parsePath,
  redirect,
  redirectDocument,
  renderMatches,
  replace: replace$1,
  resolvePath,
  useActionData,
  useAsyncError,
  useAsyncValue,
  useBlocker,
  useHref,
  useInRouterContext,
  useLoaderData,
  useLocation,
  useMatch,
  useMatches,
  useNavigate,
  useNavigation,
  useNavigationType,
  useOutlet,
  useOutletContext,
  useParams,
  useResolvedPath,
  useRevalidator,
  useRouteError,
  useRouteLoaderData,
  useRoutes: useRoutes$1
}, Symbol.toStringTag, { value: "Module" }));
/**
 * React Router DOM v6.29.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
function _extends$1() {
  _extends$1 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends$1.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
const defaultMethod = "get";
const defaultEncType = "application/x-www-form-urlencoded";
function isHtmlElement(object) {
  return object != null && typeof object.tagName === "string";
}
function isButtonElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
}
function isFormElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
}
function isInputElement(object) {
  return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function createSearchParams(init) {
  if (init === void 0) {
    init = "";
  }
  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
    let value = init[key];
    return memo.concat(Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams) {
    defaultSearchParams.forEach((_, key) => {
      if (!searchParams.has(key)) {
        defaultSearchParams.getAll(key).forEach((value) => {
          searchParams.append(key, value);
        });
      }
    });
  }
  return searchParams;
}
let _formDataSupportsSubmitter = null;
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
const supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"'));
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body2;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let {
        name,
        type,
        value
      } = target;
      if (type === "image") {
        let prefix2 = name ? name + "." : "";
        formData.append(prefix2 + "x", "0");
        formData.append(prefix2 + "y", "0");
      } else if (name) {
        formData.append(name, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body2 = target;
  }
  if (formData && encType === "text/plain") {
    body2 = formData;
    formData = void 0;
  }
  return {
    action,
    method: method.toLowerCase(),
    encType,
    formData,
    body: body2
  };
}
const _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "viewTransition"], _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "viewTransition", "children"], _excluded3 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "viewTransition"];
const REACT_ROUTER_VERSION = "6";
try {
  window.__reactRouterVersion = REACT_ROUTER_VERSION;
} catch (e) {
}
function createBrowserRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends$1({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createBrowserHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties,
    dataStrategy: opts == null ? void 0 : opts.dataStrategy,
    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
    window: opts == null ? void 0 : opts.window
  }).initialize();
}
function createHashRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends$1({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties,
    dataStrategy: opts == null ? void 0 : opts.dataStrategy,
    patchRoutesOnNavigation: opts == null ? void 0 : opts.patchRoutesOnNavigation,
    window: opts == null ? void 0 : opts.window
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  if (state && state.errors) {
    state = _extends$1({}, state, {
      errors: deserializeErrors(state.errors)
    });
  }
  return state;
}
function deserializeErrors(errors2) {
  if (!errors2)
    return null;
  let entries = Object.entries(errors2);
  let serialized = {};
  for (let [key, val] of entries) {
    if (val && val.__type === "RouteErrorResponse") {
      serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
    } else if (val && val.__type === "Error") {
      if (val.__subType) {
        let ErrorConstructor = window[val.__subType];
        if (typeof ErrorConstructor === "function") {
          try {
            let error2 = new ErrorConstructor(val.message);
            error2.stack = "";
            serialized[key] = error2;
          } catch (e) {
          }
        }
      }
      if (serialized[key] == null) {
        let error2 = new Error(val.message);
        error2.stack = "";
        serialized[key] = error2;
      }
    } else {
      serialized[key] = val;
    }
  }
  return serialized;
}
const ViewTransitionContext = /* @__PURE__ */ reactExports.createContext({
  isTransitioning: false
});
{
  ViewTransitionContext.displayName = "ViewTransition";
}
const FetchersContext = /* @__PURE__ */ reactExports.createContext(/* @__PURE__ */ new Map());
{
  FetchersContext.displayName = "Fetchers";
}
const START_TRANSITION = "startTransition";
const startTransitionImpl = React$1[START_TRANSITION];
const FLUSH_SYNC = "flushSync";
const flushSyncImpl = _2[FLUSH_SYNC];
const USE_ID = "useId";
const useIdImpl = React$1[USE_ID];
function startTransitionSafe(cb) {
  if (startTransitionImpl) {
    startTransitionImpl(cb);
  } else {
    cb();
  }
}
function flushSyncSafe(cb) {
  if (flushSyncImpl) {
    flushSyncImpl(cb);
  } else {
    cb();
  }
}
class Deferred {
  constructor() {
    this.status = "pending";
    this.promise = new Promise((resolve, reject) => {
      this.resolve = (value) => {
        if (this.status === "pending") {
          this.status = "resolved";
          resolve(value);
        }
      };
      this.reject = (reason) => {
        if (this.status === "pending") {
          this.status = "rejected";
          reject(reason);
        }
      };
    });
  }
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router,
    future
  } = _ref;
  let [state, setStateImpl] = reactExports.useState(router.state);
  let [pendingState, setPendingState] = reactExports.useState();
  let [vtContext, setVtContext] = reactExports.useState({
    isTransitioning: false
  });
  let [renderDfd, setRenderDfd] = reactExports.useState();
  let [transition, setTransition] = reactExports.useState();
  let [interruption, setInterruption] = reactExports.useState();
  let fetcherData = reactExports.useRef(/* @__PURE__ */ new Map());
  let {
    v7_startTransition
  } = future || {};
  let optInStartTransition = reactExports.useCallback((cb) => {
    if (v7_startTransition) {
      startTransitionSafe(cb);
    } else {
      cb();
    }
  }, [v7_startTransition]);
  let setState = reactExports.useCallback((newState, _ref2) => {
    let {
      deletedFetchers,
      flushSync,
      viewTransitionOpts
    } = _ref2;
    newState.fetchers.forEach((fetcher, key) => {
      if (fetcher.data !== void 0) {
        fetcherData.current.set(key, fetcher.data);
      }
    });
    deletedFetchers.forEach((key) => fetcherData.current.delete(key));
    let isViewTransitionUnavailable = router.window == null || router.window.document == null || typeof router.window.document.startViewTransition !== "function";
    if (!viewTransitionOpts || isViewTransitionUnavailable) {
      if (flushSync) {
        flushSyncSafe(() => setStateImpl(newState));
      } else {
        optInStartTransition(() => setStateImpl(newState));
      }
      return;
    }
    if (flushSync) {
      flushSyncSafe(() => {
        if (transition) {
          renderDfd && renderDfd.resolve();
          transition.skipTransition();
        }
        setVtContext({
          isTransitioning: true,
          flushSync: true,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      });
      let t = router.window.document.startViewTransition(() => {
        flushSyncSafe(() => setStateImpl(newState));
      });
      t.finished.finally(() => {
        flushSyncSafe(() => {
          setRenderDfd(void 0);
          setTransition(void 0);
          setPendingState(void 0);
          setVtContext({
            isTransitioning: false
          });
        });
      });
      flushSyncSafe(() => setTransition(t));
      return;
    }
    if (transition) {
      renderDfd && renderDfd.resolve();
      transition.skipTransition();
      setInterruption({
        state: newState,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    } else {
      setPendingState(newState);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    }
  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);
  reactExports.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
  reactExports.useEffect(() => {
    if (vtContext.isTransitioning && !vtContext.flushSync) {
      setRenderDfd(new Deferred());
    }
  }, [vtContext]);
  reactExports.useEffect(() => {
    if (renderDfd && pendingState && router.window) {
      let newState = pendingState;
      let renderPromise = renderDfd.promise;
      let transition2 = router.window.document.startViewTransition(async () => {
        optInStartTransition(() => setStateImpl(newState));
        await renderPromise;
      });
      transition2.finished.finally(() => {
        setRenderDfd(void 0);
        setTransition(void 0);
        setPendingState(void 0);
        setVtContext({
          isTransitioning: false
        });
      });
      setTransition(transition2);
    }
  }, [optInStartTransition, pendingState, renderDfd, router.window]);
  reactExports.useEffect(() => {
    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
      renderDfd.resolve();
    }
  }, [renderDfd, transition, state.location, pendingState]);
  reactExports.useEffect(() => {
    if (!vtContext.isTransitioning && interruption) {
      setPendingState(interruption.state);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: interruption.currentLocation,
        nextLocation: interruption.nextLocation
      });
      setInterruption(void 0);
    }
  }, [vtContext.isTransitioning, interruption]);
  reactExports.useEffect(() => {
    warning(fallbackElement == null || !router.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead");
  }, []);
  let navigator2 = reactExports.useMemo(() => {
    return {
      createHref: router.createHref,
      encodeLocation: router.encodeLocation,
      go: (n) => router.navigate(n),
      push: (to, state2, opts) => router.navigate(to, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to, state2, opts) => router.navigate(to, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router]);
  let basename = router.basename || "/";
  let dataRouterContext = reactExports.useMemo(() => ({
    router,
    navigator: navigator2,
    static: false,
    basename
  }), [router, navigator2, basename]);
  let routerFuture = reactExports.useMemo(() => ({
    v7_relativeSplatPath: router.future.v7_relativeSplatPath
  }), [router.future.v7_relativeSplatPath]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future, router.future), [future, router.future]);
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, /* @__PURE__ */ reactExports.createElement(DataRouterStateContext.Provider, {
    value: state
  }, /* @__PURE__ */ reactExports.createElement(FetchersContext.Provider, {
    value: fetcherData.current
  }, /* @__PURE__ */ reactExports.createElement(ViewTransitionContext.Provider, {
    value: vtContext
  }, /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    location: state.location,
    navigationType: state.historyAction,
    navigator: navigator2,
    future: routerFuture
  }, state.initialized || router.future.v7_partialHydration ? /* @__PURE__ */ reactExports.createElement(MemoizedDataRoutes, {
    routes: router.routes,
    future: router.future,
    state
  }) : fallbackElement))))), null);
}
const MemoizedDataRoutes = /* @__PURE__ */ reactExports.memo(DataRoutes);
function DataRoutes(_ref3) {
  let {
    routes,
    future,
    state
  } = _ref3;
  return useRoutesImpl(routes, void 0, state, future);
}
function BrowserRouter(_ref4) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref4;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = reactExports.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function HistoryRouter(_ref6) {
  let {
    basename,
    children,
    future,
    history
  } = _ref6;
  let [state, setStateImpl] = reactExports.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = reactExports.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  reactExports.useLayoutEffect(() => history.listen(setState), [history, setState]);
  reactExports.useEffect(() => logV6DeprecationWarnings(future), [future]);
  return /* @__PURE__ */ reactExports.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
{
  HistoryRouter.displayName = "unstable_HistoryRouter";
}
const isBrowser$1 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
const ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
const Link = /* @__PURE__ */ reactExports.forwardRef(function LinkWithRef(_ref7, ref) {
  let {
    onClick,
    relative,
    reloadDocument,
    replace: replace2,
    state,
    target,
    to,
    preventScrollReset,
    viewTransition
  } = _ref7, rest = _objectWithoutPropertiesLoose(_ref7, _excluded);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let absoluteHref;
  let isExternal = false;
  if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
    absoluteHref = to;
    if (isBrowser$1) {
      try {
        let currentUrl = new URL(window.location.href);
        let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
        let path = stripBasename(targetUrl.pathname, basename);
        if (targetUrl.origin === currentUrl.origin && path != null) {
          to = path + targetUrl.search + targetUrl.hash;
        } else {
          isExternal = true;
        }
      } catch (e) {
        warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.');
      }
    }
  }
  let href = useHref(to, {
    relative
  });
  let internalOnClick = useLinkClickHandler(to, {
    replace: replace2,
    state,
    target,
    preventScrollReset,
    relative,
    viewTransition
  });
  function handleClick(event) {
    if (onClick)
      onClick(event);
    if (!event.defaultPrevented) {
      internalOnClick(event);
    }
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
    /* @__PURE__ */ reactExports.createElement("a", _extends$1({}, rest, {
      href: absoluteHref || href,
      onClick: isExternal || reloadDocument ? onClick : handleClick,
      ref,
      target
    }))
  );
});
{
  Link.displayName = "Link";
}
const NavLink = /* @__PURE__ */ reactExports.forwardRef(function NavLinkWithRef(_ref8, ref) {
  let {
    "aria-current": ariaCurrentProp = "page",
    caseSensitive = false,
    className: classNameProp = "",
    end = false,
    style: styleProp,
    to,
    viewTransition,
    children
  } = _ref8, rest = _objectWithoutPropertiesLoose(_ref8, _excluded2);
  let path = useResolvedPath(to, {
    relative: rest.relative
  });
  let location2 = useLocation();
  let routerState = reactExports.useContext(DataRouterStateContext);
  let {
    navigator: navigator2,
    basename
  } = reactExports.useContext(NavigationContext);
  let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
  // eslint-disable-next-line react-hooks/rules-of-hooks
  useViewTransitionState(path) && viewTransition === true;
  let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
  let locationPathname = location2.pathname;
  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
  if (!caseSensitive) {
    locationPathname = locationPathname.toLowerCase();
    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
    toPathname = toPathname.toLowerCase();
  }
  if (nextLocationPathname && basename) {
    nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
  }
  const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
  let renderProps = {
    isActive,
    isPending,
    isTransitioning
  };
  let ariaCurrent = isActive ? ariaCurrentProp : void 0;
  let className;
  if (typeof classNameProp === "function") {
    className = classNameProp(renderProps);
  } else {
    className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
  }
  let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
  return /* @__PURE__ */ reactExports.createElement(Link, _extends$1({}, rest, {
    "aria-current": ariaCurrent,
    className,
    ref,
    style,
    to,
    viewTransition
  }), typeof children === "function" ? children(renderProps) : children);
});
{
  NavLink.displayName = "NavLink";
}
const Form$1 = /* @__PURE__ */ reactExports.forwardRef((_ref9, forwardedRef) => {
  let {
    fetcherKey,
    navigate,
    reloadDocument,
    replace: replace2,
    state,
    method = defaultMethod,
    action,
    onSubmit,
    relative,
    preventScrollReset,
    viewTransition
  } = _ref9, props = _objectWithoutPropertiesLoose(_ref9, _excluded3);
  let submit = useSubmit();
  let formAction = useFormAction(action, {
    relative
  });
  let formMethod = method.toLowerCase() === "get" ? "get" : "post";
  let submitHandler = (event) => {
    onSubmit && onSubmit(event);
    if (event.defaultPrevented)
      return;
    event.preventDefault();
    let submitter = event.nativeEvent.submitter;
    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
    submit(submitter || event.currentTarget, {
      fetcherKey,
      method: submitMethod,
      navigate,
      replace: replace2,
      state,
      relative,
      preventScrollReset,
      viewTransition
    });
  };
  return /* @__PURE__ */ reactExports.createElement("form", _extends$1({
    ref: forwardedRef,
    method: formMethod,
    action: formAction,
    onSubmit: reloadDocument ? onSubmit : submitHandler
  }, props));
});
{
  Form$1.displayName = "Form";
}
function ScrollRestoration(_ref10) {
  let {
    getKey,
    storageKey
  } = _ref10;
  useScrollRestoration({
    getKey,
    storageKey
  });
  return null;
}
{
  ScrollRestoration.displayName = "ScrollRestoration";
}
var DataRouterHook;
(function(DataRouterHook2) {
  DataRouterHook2["UseScrollRestoration"] = "useScrollRestoration";
  DataRouterHook2["UseSubmit"] = "useSubmit";
  DataRouterHook2["UseSubmitFetcher"] = "useSubmitFetcher";
  DataRouterHook2["UseFetcher"] = "useFetcher";
  DataRouterHook2["useViewTransitionState"] = "useViewTransitionState";
})(DataRouterHook || (DataRouterHook = {}));
var DataRouterStateHook;
(function(DataRouterStateHook2) {
  DataRouterStateHook2["UseFetcher"] = "useFetcher";
  DataRouterStateHook2["UseFetchers"] = "useFetchers";
  DataRouterStateHook2["UseScrollRestoration"] = "useScrollRestoration";
})(DataRouterStateHook || (DataRouterStateHook = {}));
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = reactExports.useContext(DataRouterContext);
  !ctx ? invariant(false, getDataRouterConsoleError(hookName)) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = reactExports.useContext(DataRouterStateContext);
  !state ? invariant(false, getDataRouterConsoleError(hookName)) : void 0;
  return state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location2 = useLocation();
  let path = useResolvedPath(to, {
    relative
  });
  return reactExports.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
      navigate(to, {
        replace: replace2,
        state,
        preventScrollReset,
        relative,
        viewTransition
      });
    }
  }, [location2, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, viewTransition]);
}
function useSearchParams(defaultInit) {
  warning(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params.");
  let defaultSearchParamsRef = reactExports.useRef(createSearchParams(defaultInit));
  let hasSetSearchParamsRef = reactExports.useRef(false);
  let location2 = useLocation();
  let searchParams = reactExports.useMemo(() => (
    // Only merge in the defaults if we haven't yet called setSearchParams.
    // Once we call that we want those to take precedence, otherwise you can't
    // remove a param with setSearchParams({}) if it has an initial value
    getSearchParamsForLocation(location2.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
  ), [location2.search]);
  let navigate = useNavigate();
  let setSearchParams = reactExports.useCallback((nextInit, navigateOptions) => {
    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = true;
    navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function validateClientSideSubmission() {
  if (typeof document === "undefined") {
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
  }
}
let fetcherId = 0;
let getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
function useSubmit() {
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseSubmit);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return reactExports.useCallback(function(target, options) {
    if (options === void 0) {
      options = {};
    }
    validateClientSideSubmission();
    let {
      action,
      method,
      encType,
      formData,
      body: body2
    } = getFormSubmissionInfo(target, basename);
    if (options.navigate === false) {
      let key = options.fetcherKey || getUniqueFetcherId();
      router.fetch(key, currentRouteId, options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body: body2,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        flushSync: options.flushSync
      });
    } else {
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body: body2,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId,
        flushSync: options.flushSync,
        viewTransition: options.viewTransition
      });
    }
  }, [router, basename, currentRouteId]);
}
function useFormAction(action, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let routeContext = reactExports.useContext(RouteContext);
  !routeContext ? invariant(false, "useFormAction must be used inside a RouteContext") : void 0;
  let [match2] = routeContext.matches.slice(-1);
  let path = _extends$1({}, useResolvedPath(action ? action : ".", {
    relative
  }));
  let location2 = useLocation();
  if (action == null) {
    path.search = location2.search;
    let params = new URLSearchParams(path.search);
    let indexValues = params.getAll("index");
    let hasNakedIndexParam = indexValues.some((v) => v === "");
    if (hasNakedIndexParam) {
      params.delete("index");
      indexValues.filter((v) => v).forEach((v) => params.append("index", v));
      let qs = params.toString();
      path.search = qs ? "?" + qs : "";
    }
  }
  if ((!action || action === ".") && match2.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function useFetcher(_temp3) {
  var _route$matches;
  let {
    key
  } = _temp3 === void 0 ? {} : _temp3;
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseFetcher);
  let state = useDataRouterState(DataRouterStateHook.UseFetcher);
  let fetcherData = reactExports.useContext(FetchersContext);
  let route = reactExports.useContext(RouteContext);
  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
  !fetcherData ? invariant(false, "useFetcher must be used inside a FetchersContext") : void 0;
  !route ? invariant(false, "useFetcher must be used inside a RouteContext") : void 0;
  !(routeId != null) ? invariant(false, 'useFetcher can only be used on routes that contain a unique "id"') : void 0;
  let defaultKey = useIdImpl ? useIdImpl() : "";
  let [fetcherKey, setFetcherKey] = reactExports.useState(key || defaultKey);
  if (key && key !== fetcherKey) {
    setFetcherKey(key);
  } else if (!fetcherKey) {
    setFetcherKey(getUniqueFetcherId());
  }
  reactExports.useEffect(() => {
    router.getFetcher(fetcherKey);
    return () => {
      router.deleteFetcher(fetcherKey);
    };
  }, [router, fetcherKey]);
  let load = reactExports.useCallback((href, opts) => {
    !routeId ? invariant(false, "No routeId available for fetcher.load()") : void 0;
    router.fetch(fetcherKey, routeId, href, opts);
  }, [fetcherKey, routeId, router]);
  let submitImpl = useSubmit();
  let submit = reactExports.useCallback((target, opts) => {
    submitImpl(target, _extends$1({}, opts, {
      navigate: false,
      fetcherKey
    }));
  }, [fetcherKey, submitImpl]);
  let FetcherForm = reactExports.useMemo(() => {
    let FetcherForm2 = /* @__PURE__ */ reactExports.forwardRef((props, ref) => {
      return /* @__PURE__ */ reactExports.createElement(Form$1, _extends$1({}, props, {
        navigate: false,
        fetcherKey,
        ref
      }));
    });
    {
      FetcherForm2.displayName = "fetcher.Form";
    }
    return FetcherForm2;
  }, [fetcherKey]);
  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;
  let data = fetcherData.get(fetcherKey);
  let fetcherWithComponents = reactExports.useMemo(() => _extends$1({
    Form: FetcherForm,
    submit,
    load
  }, fetcher, {
    data
  }), [FetcherForm, submit, load, fetcher, data]);
  return fetcherWithComponents;
}
function useFetchers() {
  let state = useDataRouterState(DataRouterStateHook.UseFetchers);
  return Array.from(state.fetchers.entries()).map((_ref11) => {
    let [key, fetcher] = _ref11;
    return _extends$1({}, fetcher, {
      key
    });
  });
}
const SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
let savedScrollPositions = {};
function useScrollRestoration(_temp4) {
  let {
    getKey,
    storageKey
  } = _temp4 === void 0 ? {} : _temp4;
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);
  let {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);
  let {
    basename
  } = reactExports.useContext(NavigationContext);
  let location2 = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  reactExports.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(reactExports.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location2, matches) : null) || location2.key;
      savedScrollPositions[key] = window.scrollY;
    }
    try {
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
    } catch (error2) {
      warning(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error2 + ").");
    }
    window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location2, matches]));
  if (typeof document !== "undefined") {
    reactExports.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e) {
      }
    }, [storageKey]);
    reactExports.useLayoutEffect(() => {
      let getKeyWithoutBasename = getKey && basename !== "/" ? (location3, matches2) => getKey(
        // Strip the basename to match useLocation()
        _extends$1({}, location3, {
          pathname: stripBasename(location3.pathname, basename) || location3.pathname
        }),
        matches2
      ) : getKey;
      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename, getKey]);
    reactExports.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location2.hash) {
        let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location2, restoreScrollPosition, preventScrollReset]);
  }
}
function useBeforeUnload(callback, options) {
  let {
    capture
  } = options || {};
  reactExports.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("beforeunload", callback, opts);
    return () => {
      window.removeEventListener("beforeunload", callback, opts);
    };
  }, [callback, capture]);
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  reactExports.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function usePrompt(_ref12) {
  let {
    when,
    message
  } = _ref12;
  let blocker = useBlocker(when);
  reactExports.useEffect(() => {
    if (blocker.state === "blocked") {
      let proceed = window.confirm(message);
      if (proceed) {
        setTimeout(blocker.proceed, 0);
      } else {
        blocker.reset();
      }
    }
  }, [blocker, message]);
  reactExports.useEffect(() => {
    if (blocker.state === "blocked" && !when) {
      blocker.reset();
    }
  }, [blocker, when]);
}
function useViewTransitionState(to, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let vtContext = reactExports.useContext(ViewTransitionContext);
  !(vtContext != null) ? invariant(false, "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : void 0;
  let {
    basename
  } = useDataRouterContext(DataRouterHook.useViewTransitionState);
  let path = useResolvedPath(to, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
const _4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  AbortedDeferredError,
  Await,
  BrowserRouter,
  Form: Form$1,
  HashRouter,
  Link,
  MemoryRouter,
  NavLink,
  Navigate,
  get NavigationType() {
    return Action;
  },
  Outlet,
  Route,
  Router,
  RouterProvider,
  Routes,
  ScrollRestoration,
  UNSAFE_DataRouterContext: DataRouterContext,
  UNSAFE_DataRouterStateContext: DataRouterStateContext,
  UNSAFE_ErrorResponseImpl: ErrorResponseImpl,
  UNSAFE_FetchersContext: FetchersContext,
  UNSAFE_LocationContext: LocationContext,
  UNSAFE_NavigationContext: NavigationContext,
  UNSAFE_RouteContext: RouteContext,
  UNSAFE_ViewTransitionContext: ViewTransitionContext,
  UNSAFE_useRouteId: useRouteId,
  UNSAFE_useScrollRestoration: useScrollRestoration,
  createBrowserRouter,
  createHashRouter,
  createMemoryRouter,
  createPath,
  createRoutesFromChildren,
  createRoutesFromElements: createRoutesFromChildren,
  createSearchParams,
  defer,
  generatePath,
  isRouteErrorResponse,
  json,
  matchPath,
  matchRoutes,
  parsePath,
  redirect,
  redirectDocument,
  renderMatches,
  replace: replace$1,
  resolvePath,
  unstable_HistoryRouter: HistoryRouter,
  unstable_usePrompt: usePrompt,
  useActionData,
  useAsyncError,
  useAsyncValue,
  useBeforeUnload,
  useBlocker,
  useFetcher,
  useFetchers,
  useFormAction,
  useHref,
  useInRouterContext,
  useLinkClickHandler,
  useLoaderData,
  useLocation,
  useMatch,
  useMatches,
  useNavigate,
  useNavigation,
  useNavigationType,
  useOutlet,
  useOutletContext,
  useParams,
  useResolvedPath,
  useRevalidator,
  useRouteError,
  useRouteLoaderData,
  useRoutes: useRoutes$1,
  useSearchParams,
  useSubmit,
  useViewTransitionState
}, Symbol.toStringTag, { value: "Module" }));
function renderComponent(components, props) {
  const name = props.type;
  const Component = components[name];
  {
    reactExports.useEffect(() => console.error("[dev-info] An error occurred in the Piral instance.", props), none);
  }
  if (!Component) {
    const Unknown = components.unknown;
    if (Unknown) {
      return reactExports.createElement(Unknown, { ...props, type: "unknown" });
    }
    return defaultRender(`Error: ${props.type}`);
  }
  return reactExports.createElement(Component, { ...props });
}
const SwitchErrorInfo = (props) => {
  const components = useGlobalState((m2) => m2.errorComponents);
  return renderComponent(components, props);
};
const DefaultErrorInfo = (props) => reactExports.createElement(ExtensionSlot, { name: "error", params: props, empty: () => reactExports.createElement(SwitchErrorInfo, { ...props }) });
DefaultErrorInfo.displayName = "DefaultErrorInfo";
const DefaultLoadingIndicator = () => reactExports.createElement("div", null, "Loading");
DefaultLoadingIndicator.displayName = "DefaultLoadingIndicator";
const DefaultLayout = ({ children }) => defaultRender(children);
DefaultLayout.displayName = "DefaultLayout";
const DefaultRouter = ({ children, publicPath: publicPath2 }) => {
  return reactExports.createElement(BrowserRouter, { basename: publicPath2 }, children);
};
DefaultRouter.displayName = "DefaultRouter";
const DefaultRouteSwitch = ({ paths, NotFound: NotFound2, ...props }) => {
  return reactExports.createElement(
    Routes,
    { ...props },
    paths.map(({ path, Component }) => (
      //@ts-ignore
      reactExports.createElement(Route, { key: path, path, element: reactExports.createElement(Component, null) })
    )),
    //@ts-ignore
    reactExports.createElement(Route, { path: "*", element: reactExports.createElement(NotFound2, null) })
  );
};
DefaultRouteSwitch.displayName = "DefaultRouteSwitch";
let _nav;
const _noop = () => {
};
function useRouterContext() {
  return reactExports.useContext(NavigationContext);
}
function useCurrentNavigation() {
  const ctx = useRouterContext();
  const location2 = useLocation();
  reactExports.useEffect(() => {
    if (_nav) {
      window.dispatchEvent(new CustomEvent("piral-navigate", {
        detail: {
          location: location2
        }
      }));
    }
  }, [location2]);
  reactExports.useEffect(() => {
    _nav = ctx.navigator;
    return () => {
      _nav = void 0;
    };
  }, []);
}
function createNavigation(publicPath2) {
  const enhance = (info) => ({
    ...info,
    location: {
      get href() {
        return _nav.createHref(info.location);
      },
      ...info.location
    }
  });
  return {
    get path() {
      const loc = _nav ? _nav.location : location;
      return loc.pathname;
    },
    get url() {
      const loc = _nav ? _nav.location : location;
      return `${loc.pathname}${loc.search}${loc.hash}`;
    },
    push(target, state) {
      if (_nav) {
        _nav.push(target, state);
      }
    },
    replace(target, state) {
      if (_nav) {
        _nav.replace(target, state);
      }
    },
    go(n) {
      if (_nav) {
        _nav.go(n);
      }
    },
    block(blocker) {
      if (!_nav) {
        return _noop;
      }
      return _nav.block((transition) => blocker(enhance(transition)));
    },
    listen(listener) {
      const handler = (e) => listener(enhance(e.detail));
      window.addEventListener("piral-navigate", handler);
      return () => {
        window.removeEventListener("piral-navigate", handler);
      };
    },
    get router() {
      return _nav;
    },
    publicPath: publicPath2
  };
}
const changeEvent = "extension-catalogue-changed";
const store = {
  current: void 0,
  observe(setState) {
    const handler = () => {
      setState(store.current);
    };
    window.addEventListener(changeEvent, handler);
    return () => {
      window.removeEventListener(changeEvent, handler);
    };
  }
};
function changeExtensionCatalogueStore(state) {
  store.current = {
    ...state,
    params: JSON.stringify(state.params)
  };
  window.dispatchEvent(new CustomEvent(changeEvent));
}
const ExtensionCatalogue = () => {
  const [state, setState] = reactExports.useState(store.current);
  reactExports.useEffect(() => {
    return store.observe(setState);
  }, []);
  if (state) {
    const { name = "", params = "" } = state;
    return reactExports.createElement("piral-extension", { name, params });
  }
  return null;
};
function decycle(obj) {
  const objects = [];
  const paths = [];
  const derez = (value, path) => {
    const _value = value && value.toJSON instanceof Function ? value.toJSON() : value;
    if (_value === null || _value === void 0) {
      return void 0;
    } else if (typeof _value === "function") {
      return `<function>`;
    } else if (_value instanceof Error) {
      return `<error>`;
    } else if (_value instanceof Node) {
      return `<node>`;
    } else if (_value["$$typeof"] === Symbol.for("react.element")) {
      return "<react.element>";
    } else if (typeof _value === "object") {
      for (let i = 0; i < objects.length; i++) {
        if (objects[i] === _value) {
          return { $ref: paths[i] };
        }
      }
      objects.push(_value);
      paths.push(path);
      if (Array.isArray(_value)) {
        const nu = [];
        for (let i = 0; i < _value.length; i += 1) {
          nu[i] = derez(_value[i], `${path}[${i}]`);
        }
        return nu;
      } else {
        const nu = {};
        for (const name in _value) {
          if (Object.prototype.hasOwnProperty.call(_value, name)) {
            nu[name] = derez(_value[name], `${path}[${JSON.stringify(name)}]`);
          }
        }
        return nu;
      }
    } else if (typeof _value === "symbol") {
      return "<symbol>";
    } else if (typeof _value === "bigint") {
      return "<bigint>";
    }
    return _value;
  };
  return derez(obj, "$");
}
let installPromise;
function install() {
  if (!installPromise) {
    installPromise = new Promise((resolve, reject) => {
      const sts = document.createElement("script");
      sts.src = "https://cdnjs.cloudflare.com/ajax/libs/stacktrace.js/2.0.2/stacktrace.min.js";
      document.head.appendChild(sts);
      sts.onload = () => resolve();
      sts.onerror = () => reject();
    });
  }
  return installPromise;
}
async function convertError(error2, start = 0, end = -1) {
  await install();
  const frames = await window.StackTrace.fromError(error2);
  return frames.slice(start, end).map((sf) => sf.toString()).join("\n");
}
function h$1(e, attrs = {}, ...children) {
  const elem = document.createElement(e);
  for (const [k2, v] of Object.entries(attrs)) {
    elem.setAttribute(k2, v);
  }
  elem.append(...children);
  return elem;
}
const templateStyle = (
  /*css*/
  `
:host {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 99999;
  --monospace: 'SFMono-Regular', Consolas,
  'Liberation Mono', Menlo, Courier, monospace;
  --red: #ff5555;
  --yellow: #e2aa53;
  --purple: #cfa4ff;
  --cyan: #2dd9da;
  --dim: #c9c9c9;

  --window-background: #181818;
  --window-color: #d8d8d8;
}

.backdrop {
  position: fixed;
  z-index: 99999;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow-y: scroll;
  margin: 0;
  background: rgba(0, 0, 0, 0.66);
}

.window {
  font-family: var(--monospace);
  line-height: 1.5;
  max-width: 80vw;
  color: var(--window-color);
  box-sizing: border-box;
  margin: 30px auto;
  padding: 2.5vh 4vw;
  position: relative;
  background: var(--window-background);
  border-radius: 6px 6px 8px 8px;
  box-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);
  overflow: hidden;
  border-top: 8px solid var(--red);
  direction: ltr;
  text-align: left;
}

pre {
  font-family: var(--monospace);
  font-size: 16px;
  margin-top: 0;
  margin-bottom: 1em;
  overflow-x: scroll;
  scrollbar-width: none;
}

pre::-webkit-scrollbar {
  display: none;
}

pre.frame::-webkit-scrollbar {
  display: block;
  height: 5px;
}

pre.frame::-webkit-scrollbar-thumb {
  background: #999;
  border-radius: 5px;
}

pre.frame {
  scrollbar-width: thin;
}

.message {
  line-height: 1.3;
  font-weight: 600;
  white-space: pre-wrap;
}

.message-body {
  color: var(--red);
}

.plugin {
  color: var(--purple);
}

.file {
  color: var(--cyan);
  margin-bottom: 0;
  white-space: pre-wrap;
  word-break: break-all;
}

.frame {
  color: var(--yellow);
}

.stack {
  font-size: 13px;
  color: var(--dim);
}

.tip {
  font-size: 13px;
  color: #999;
  border-top: 1px dotted #999;
  padding-top: 13px;
  line-height: 1.8;
}

code {
  font-size: 13px;
  font-family: var(--monospace);
  color: var(--yellow);
}

.file-link {
  text-decoration: underline;
  cursor: pointer;
}

kbd {
  line-height: 1.5;
  font-family: ui-monospace, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  font-size: 0.75rem;
  font-weight: 700;
  background-color: rgb(38, 40, 44);
  color: rgb(166, 167, 171);
  padding: 0.15rem 0.3rem;
  border-radius: 0.25rem;
  border-width: 0.0625rem 0.0625rem 0.1875rem;
  border-style: solid;
  border-color: rgb(54, 57, 64);
  border-image: initial;
}
`
);
const createTemplate = () => h$1("div", { class: "backdrop", part: "backdrop" }, h$1("div", { class: "window", part: "window" }, h$1("pre", { class: "message", part: "message" }, h$1("span", { class: "plugin", part: "plugin" }), h$1("span", { class: "message-body", part: "message-body" })), h$1("pre", { class: "file", part: "file" }), h$1("pre", { class: "frame", part: "frame" }), h$1("pre", { class: "stack", part: "stack" }), h$1("div", { class: "tip", part: "tip" }, "Click outside, press ", h$1("kbd", {}, "Esc"), " key, or fix the code to dismiss.", h$1("br"), "You can also disable this overlay by setting ", h$1("code", { part: "config-option-name" }, "dbg:error-overlay"), " to ", h$1("code", { part: "config-option-value" }, '"off"'), " in ", h$1("code", { part: "config-file-name" }, "sessionStorage"), ".")), h$1("style", {}, templateStyle));
const fileRE = /(?:[a-zA-Z]:\\|\/).*?:\d+:\d*/g;
const codeframeRE = /^(?:>?\s*\d+\s+\|.*|\s+\|\s*\^.*)\r?\n/gm;
const overlayId = "piral-error-overlay";
if (typeof window !== "undefined" && "customElements" in window) {
  class ErrorOverlay extends HTMLElement {
    constructor(props, links = true) {
      var _a;
      super();
      const { error: error2, pilet, errorType } = props;
      this.root = this.attachShadow({ mode: "open" });
      this.root.appendChild(createTemplate());
      codeframeRE.lastIndex = 0;
      const hasFrame = error2.frame && codeframeRE.test(error2.frame);
      const message = hasFrame ? error2.message.replace(codeframeRE, "") : error2.message;
      if (pilet) {
        this.text(".plugin", `[${pilet}] `);
      }
      this.text(".message-body", message.trim());
      const [file] = (((_a = error2.loc) == null ? void 0 : _a.file) || error2.id || "unknown file").split(`?`);
      if (error2.loc) {
        this.text(".file", `${file}:${error2.loc.line}:${error2.loc.column}`, links);
      } else if (error2.id) {
        this.text(".file", file);
      }
      if (hasFrame) {
        this.text(".frame", error2.frame.trim());
      }
      this.text(".stack", error2.stack.split("\n").slice(0, 15).join("\n"), links);
      convertError(error2, 0, 15).then((newStack) => {
        this.text(".stack", newStack, links);
      });
      this.root.querySelector(".window").addEventListener("click", (e) => {
        e.stopPropagation();
      });
      this.addEventListener("click", () => {
        this.close();
      });
      this.closeOnEsc = (e) => {
        if (e.key === "Escape" || e.code === "Escape") {
          this.close();
        }
      };
      this.closeOnReload = () => this.close();
      window.addEventListener("pilets-reloaded", this.closeOnReload);
      document.addEventListener("keydown", this.closeOnEsc);
    }
    text(selector, text, linkFiles = false) {
      const el = this.root.querySelector(selector);
      el.textContent = "";
      if (linkFiles) {
        let curIndex = 0;
        let match2;
        fileRE.lastIndex = 0;
        while (match2 = fileRE.exec(text)) {
          const { 0: file, index: index2 } = match2;
          if (index2 != null) {
            const frag = text.slice(curIndex, index2);
            el.appendChild(document.createTextNode(frag));
            const link = document.createElement("a");
            link.textContent = file;
            link.className = "file-link";
            link.onclick = () => {
              console.log("Clicked");
            };
            el.appendChild(link);
            curIndex += frag.length + file.length;
          }
        }
      } else {
        el.textContent = text;
      }
    }
    close() {
      var _a;
      (_a = this.parentNode) == null ? void 0 : _a.removeChild(this);
      window.removeEventListener("pilets-reloaded", this.closeOnReload);
      document.removeEventListener("keydown", this.closeOnEsc);
    }
  }
  customElements.define(overlayId, ErrorOverlay);
}
const visualizerName = "piral-inspector-visualizer";
const persistAttribute = "persist";
const piletColorMap = {};
const colors = [
  "#001F3F",
  "#0074D9",
  "#7FDBFF",
  "#39CCCC",
  "#3D9970",
  "#2ECC40",
  "#01FF70",
  "#FFDC00",
  "#FF851B",
  "#FF4136",
  "#85144B",
  "#F012BE",
  "#B10DC9"
];
function getTarget$1(element) {
  const row = element.childNodes;
  const rects = Array.prototype.map.call(row, (item) => {
    if (item instanceof Element) {
      return item.getBoundingClientRect();
    } else if (item instanceof Text) {
      const range2 = document.createRange();
      range2.selectNode(item);
      return range2.getBoundingClientRect();
    } else {
      return new DOMRectReadOnly(0, 0, 0, 0);
    }
  });
  const relevant = rects.filter((m2) => m2.height !== 0 && m2.width !== 0);
  if (relevant.length === 0) {
    return new DOMRectReadOnly(0, 0, 0, 0);
  }
  return relevant.reduce((a, b2) => {
    const x = Math.min(a.left, b2.left);
    const y2 = Math.min(a.top, b2.top);
    const width = Math.max(a.right, b2.right) - x;
    const height = Math.max(a.bottom, b2.bottom) - y2;
    return new DOMRectReadOnly(x, y2, width, height);
  });
}
function hide(vis) {
  vis.style.opacity = "0";
}
function show(vis) {
  vis.style.opacity = "1";
}
function updatePosition(source, vis) {
  const targetRect = getTarget$1(source);
  vis.style.left = targetRect.left + "px";
  vis.style.top = targetRect.top + "px";
  vis.style.width = targetRect.width + "px";
  vis.style.height = targetRect.height + "px";
}
class PiralInspectorVisualizer extends HTMLElement {
  constructor() {
    super(...arguments);
    this.update = () => {
      const persist = this.getAttribute(persistAttribute) !== null;
      this.innerText = "";
      document.querySelectorAll("piral-component").forEach((element) => {
        const pilet = element.getAttribute("origin");
        const vis = this.appendChild(document.createElement("div"));
        const info = vis.appendChild(document.createElement("div"));
        vis.style.position = "absolute";
        vis.style.zIndex = "2147483647";
        vis.style.border = "1px solid #ccc";
        vis.style.pointerEvents = "none";
        info.style.color = "white";
        info.textContent = pilet;
        info.style.position = "absolute";
        info.style.right = "0";
        info.style.top = "0";
        info.style.fontSize = "8px";
        info.style.background = piletColorMap[pilet] || (piletColorMap[pilet] = colors[Object.keys(piletColorMap).length % colors.length]);
        if (!persist) {
          hide(vis);
          element.addEventListener("mouseenter", () => {
            updatePosition(element, vis);
            show(vis);
          });
          element.addEventListener("mouseleave", () => {
            hide(vis);
          });
        } else {
          updatePosition(element, vis);
          show(vis);
        }
      });
    };
  }
  connectedCallback() {
    this.style.position = "absolute";
    this.style.top = "0";
    this.style.left = "0";
    this.style.width = "0";
    this.style.height = "0";
    window.addEventListener("resize", this.update);
    window.addEventListener("add-component", this.update);
    window.addEventListener("remove-component", this.update);
    this.update();
  }
  disconnectedCallback() {
    window.removeEventListener("resize", this.update);
    window.removeEventListener("add-component", this.update);
    window.removeEventListener("remove-component", this.update);
  }
  static get observedAttributes() {
    return [persistAttribute];
  }
  attributeChangedCallback(name, oldValue, newValue) {
    if (name === persistAttribute && oldValue !== newValue) {
      this.update();
    }
  }
}
customElements.define(visualizerName, PiralInspectorVisualizer);
function createVisualizer() {
  const visualizer = document.querySelector(visualizerName);
  if (!visualizer) {
    document.body.appendChild(document.createElement(visualizerName));
  }
}
function destroyVisualizer() {
  const visualizer = document.querySelector(visualizerName);
  if (visualizer) {
    visualizer.remove();
  }
}
function toggleVisualizer() {
  const visualizer = document.querySelector(visualizerName);
  if (visualizer) {
    if (visualizer.getAttribute(persistAttribute) !== null) {
      visualizer.removeAttribute(persistAttribute);
    } else {
      visualizer.setAttribute(persistAttribute, "");
    }
  }
}
const settingsKeys = {
  viewState: "dbg:view-state",
  loadPilets: "dbg:load-pilets",
  hardRefresh: "dbg:hard-refresh",
  viewOrigins: "dbg:view-origins",
  extensionCatalogue: "dbg:extension-catalogue",
  clearConsole: "dbg:clear-console",
  persistSettings: "dbg:persist-settings-data",
  errorOverlay: "dbg:error-overlay"
};
const persistKey = settingsKeys.persistSettings;
const persistSettings = !!localStorage.getItem(persistKey);
const defaultSetter = (name, value) => {
  sessionStorage.setItem(name, value);
};
const persistentSetter = (name, value) => {
  defaultSetter(name, value);
  const data = JSON.parse(localStorage.getItem(persistKey));
  data[name] = value;
  localStorage.setItem(persistKey, JSON.stringify(data));
};
function getValue(key, defaultValue, fallbackValue) {
  const value = sessionStorage.getItem(key);
  const actualValue = value === "on";
  if (["on", "off"].includes(value)) {
    return actualValue;
  }
  const currentValue = typeof defaultValue === "boolean" ? defaultValue : fallbackValue;
  if (actualValue !== currentValue) {
    sessionStorage.setItem(key, currentValue ? "on" : "off");
  }
  return currentValue;
}
if (persistSettings) {
  try {
    const settings = JSON.parse(localStorage.getItem(persistKey));
    Object.keys(settings).forEach((name) => {
      const value = settings[name];
      sessionStorage.setItem(name, value);
    });
  } catch {
    localStorage.setItem(persistKey, "{}");
  }
}
function enablePersistance() {
  const data = {};
  const validKeys = Object.keys(settingsKeys).map((m2) => settingsKeys[m2]);
  for (let i = 0; i < sessionStorage.length; i++) {
    const name = sessionStorage.key(i);
    if (validKeys.includes(name)) {
      const value = sessionStorage.getItem(name);
      data[name] = value;
    }
  }
  localStorage.setItem(persistKey, JSON.stringify(data));
  return persistentSetter;
}
function disablePersistance() {
  localStorage.removeItem(persistKey);
  return defaultSetter;
}
const initialSetter = persistSettings ? persistentSetter : defaultSetter;
function getInitialSettings(defaultValues) {
  return {
    viewState: getValue(settingsKeys.viewState, defaultValues.viewState, true),
    loadPilets: getValue(settingsKeys.loadPilets, defaultValues.loadPilets, false),
    hardRefresh: getValue(settingsKeys.hardRefresh, defaultValues.hardRefresh, false),
    viewOrigins: getValue(settingsKeys.viewOrigins, defaultValues.viewOrigins, false),
    extensionCatalogue: getValue(settingsKeys.extensionCatalogue, defaultValues.extensionCatalogue, true),
    clearConsole: getValue(settingsKeys.clearConsole, defaultValues.clearConsole, false),
    errorOverlay: getValue(settingsKeys.errorOverlay, defaultValues.errorOverlay, true),
    persistSettings,
    cataloguePath: "/$debug-extension-catalogue"
  };
}
function installPiralDebug(options) {
  const { getGlobalState, getExtensions, getDependencies, getRoutes, getPilets, fireEvent, integrate, removePilet: removePilet2, updatePilet, addPilet: addPilet2, navigate, emulator = true, customSettings = {}, defaultSettings = {} } = options;
  const events = [];
  const legacyBrowser = !new Error().stack;
  const selfSource = "piral-debug-api";
  const debugApiVersion = "v1";
  let setValue = initialSetter;
  const initialSettings = getInitialSettings(defaultSettings);
  const emulatorSettings = emulator ? {
    loadPilets: {
      value: initialSettings.loadPilets,
      type: "boolean",
      label: "Load available pilets",
      group: "general",
      onChange(value) {
        setValue(settingsKeys.loadPilets, value ? "on" : "off");
      }
    },
    hardRefresh: {
      value: initialSettings.hardRefresh,
      type: "boolean",
      label: "Full refresh on change",
      group: "general",
      onChange(value) {
        setValue(settingsKeys.hardRefresh, value ? "on" : "off");
      }
    }
  } : {};
  const settings = {
    ...customSettings,
    viewState: {
      value: initialSettings.viewState,
      type: "boolean",
      label: "State container logging",
      group: "general",
      onChange(value) {
        setValue(settingsKeys.viewState, value ? "on" : "off");
      }
    },
    ...emulatorSettings,
    viewOrigins: {
      value: initialSettings.viewOrigins,
      type: "boolean",
      label: "Visualize component origins",
      group: "extensions",
      onChange(value, prev2) {
        setValue(settingsKeys.viewOrigins, value ? "on" : "off");
        if (prev2 !== value) {
          updateVisualize(value);
        }
      }
    },
    errorOverlay: {
      value: initialSettings.errorOverlay,
      type: "boolean",
      label: "Show error overlay",
      group: "extensions",
      onChange(value) {
        setValue(settingsKeys.errorOverlay, value ? "on" : "off");
      }
    },
    extensionCatalogue: {
      value: initialSettings.extensionCatalogue,
      type: "boolean",
      label: "Enable extension catalogue",
      group: "extensions",
      onChange(value) {
        setValue(settingsKeys.extensionCatalogue, value ? "on" : "off");
      }
    },
    clearConsole: {
      value: initialSettings.clearConsole,
      type: "boolean",
      label: "Clear console during HMR",
      group: "general",
      onChange(value) {
        setValue(settingsKeys.clearConsole, value ? "on" : "off");
      }
    },
    persistSettings: {
      value: initialSettings.persistSettings,
      type: "boolean",
      label: "Persist settings",
      group: "inspector",
      onChange(value) {
        setValue = value ? enablePersistance() : disablePersistance();
      }
    }
  };
  const excludedRoutes = [initialSettings.cataloguePath];
  if (initialSettings.viewOrigins) {
    createVisualizer();
  }
  const sendMessage = (content) => {
    window.postMessage({
      content,
      source: selfSource,
      version: debugApiVersion
    }, "*");
  };
  const getSettings2 = () => {
    return Object.keys(settings).reduce((obj, key) => {
      const setting = settings[key];
      if (setting && typeof setting === "object" && typeof setting.label === "string" && typeof setting.type === "string" && ["boolean", "string", "number"].includes(typeof setting.value)) {
        obj[key] = {
          label: setting.label,
          value: setting.value,
          type: setting.type
        };
      }
      return obj;
    }, {});
  };
  const updateSettings = (values2) => {
    Object.keys(values2).forEach((key) => {
      const setting = settings[key];
      switch (setting.type) {
        case "boolean": {
          const prev2 = setting.value;
          const value = values2[key];
          setting.value = value;
          setting.onChange(value, prev2);
          break;
        }
        case "number": {
          const prev2 = setting.value;
          const value = values2[key];
          setting.value = value;
          setting.onChange(value, prev2);
          break;
        }
        case "string": {
          const prev2 = setting.value;
          const value = values2[key];
          setting.value = value;
          setting.onChange(value, prev2);
          break;
        }
      }
    });
    sendMessage({
      settings: getSettings2(),
      type: "settings"
    });
  };
  const togglePilet = (name) => {
    const pilet = getPilets().find((m2) => m2.name === name);
    if (!pilet)
      ;
    else if (pilet.disabled) {
      if (pilet.original) {
        updatePilet(pilet.original);
      } else {
        updatePilet({ ...pilet, disabled: false });
      }
    } else {
      updatePilet({ name, disabled: true, original: pilet });
    }
  };
  const updateVisualize = (active) => {
    if (active) {
      createVisualizer();
    } else {
      destroyVisualizer();
    }
  };
  const eventDispatcher = document.body.dispatchEvent;
  const systemResolve2 = System.constructor.prototype.resolve;
  const depMap = {};
  const subDeps = {};
  const findAncestor = (parent) => {
    while (subDeps[parent]) {
      parent = subDeps[parent];
    }
    return parent;
  };
  System.constructor.prototype.resolve = function(...args) {
    const [url, parent] = args;
    const result = systemResolve2.call(this, ...args);
    if (!parent) {
      return result;
    }
    const ancestor = findAncestor(parent);
    if (url.startsWith("./")) {
      subDeps[result] = ancestor;
    } else {
      const deps = depMap[ancestor] || {};
      deps[url] = result;
      depMap[ancestor] = deps;
    }
    return result;
  };
  const debugApi = {
    debug: debugApiVersion,
    instance: {
      name: "daiko-piral",
      version: "1.0.1",
      dependencies: "tslib,react,react-dom,react-router,react-router-dom"
    },
    build: {
      date: "2025-02-03T17:09:12.671Z",
      cli: "1.7.3",
      compat: "1"
    }
  };
  const details = {
    name: debugApi.instance.name,
    version: debugApi.instance.version,
    kind: debugApiVersion,
    mode: "development",
    capabilities: [
      "events",
      "container",
      "routes",
      "pilets",
      "settings",
      "extensions",
      "dependencies",
      "dependency-map"
    ]
  };
  const start = () => {
    const container = decycle(getGlobalState());
    const routes = getRoutes().filter((r3) => !excludedRoutes.includes(r3));
    const extensions = getExtensions();
    const settings2 = getSettings2();
    const dependencies = getDependencies();
    const pilets = getPilets().map((pilet) => ({
      name: pilet.name,
      version: pilet.version,
      disabled: pilet.disabled
    }));
    sendMessage({
      type: "available",
      ...details,
      state: {
        routes,
        pilets,
        container,
        settings: settings2,
        events,
        extensions,
        dependencies
      }
    });
  };
  const check = () => {
    sendMessage({
      type: "info",
      ...details
    });
  };
  const getDependencyMap = () => {
    const dependencyMap = {};
    const addDeps = (pilet, dependencies) => {
      const deps = dependencyMap[pilet] || [];
      for (const depName of Object.keys(dependencies)) {
        if (!deps.some((m2) => m2.demanded === depName)) {
          deps.push({
            demanded: depName,
            resolved: dependencies[depName]
          });
        }
      }
      dependencyMap[pilet] = deps;
    };
    const pilets = getPilets().map((pilet) => ({
      name: pilet.name,
      link: pilet.link,
      base: pilet.base
    })).filter((m2) => m2.link);
    Object.keys(depMap).forEach((url) => {
      const dependencies = depMap[url];
      const pilet = pilets.find((p2) => p2.link === url);
      if (pilet) {
        addDeps(pilet.name, dependencies);
      } else if (!pilet) {
        const parent = pilets.find((p2) => url.startsWith(p2.base));
        if (parent) {
          addDeps(parent.name, dependencies);
        }
      }
    });
    sendMessage({
      type: "dependency-map",
      dependencyMap
    });
  };
  document.body.dispatchEvent = function(ev) {
    if (ev.type.startsWith("piral-")) {
      const name = ev.type.replace("piral-", "");
      const args = ev.detail.arg;
      events.unshift({
        id: events.length.toString(),
        name,
        args: decycle(args),
        time: Date.now()
      });
      if (name === "unhandled-error" && args.errorType && typeof customElements !== "undefined" && sessionStorage.getItem(settingsKeys.errorOverlay) !== "off") {
        const ErrorOverlay = customElements.get(overlayId);
        document.body.appendChild(new ErrorOverlay(args));
      }
      sendMessage({
        events,
        type: "events"
      });
    }
    return eventDispatcher.call(this, ev);
  };
  window.addEventListener("storage", (event) => {
    if (!legacyBrowser && event.storageArea === sessionStorage) {
      updateSettings({
        viewState: sessionStorage.getItem(settingsKeys.viewState) !== "off",
        loadPilets: sessionStorage.getItem(settingsKeys.loadPilets) === "on",
        hardRefresh: sessionStorage.getItem(settingsKeys.hardRefresh) === "on",
        viewOrigins: sessionStorage.getItem(settingsKeys.viewOrigins) === "on",
        extensionCatalogue: sessionStorage.getItem(settingsKeys.extensionCatalogue) !== "off",
        clearConsole: sessionStorage.getItem(settingsKeys.clearConsole) === "on",
        errorOverlay: sessionStorage.getItem(settingsKeys.errorOverlay) !== "off"
      });
    }
  });
  window.addEventListener("message", (event) => {
    const { source, version, content } = event.data;
    if (source !== selfSource && version === debugApiVersion) {
      switch (content.type) {
        case "init":
          return start();
        case "check-piral":
          return check();
        case "get-dependency-map":
          return getDependencyMap();
        case "update-settings":
          return updateSettings(content.settings);
        case "append-pilet":
          return addPilet2(content.meta);
        case "remove-pilet":
          return removePilet2(content.name);
        case "toggle-pilet":
          return togglePilet(content.name);
        case "emit-event":
          return fireEvent(content.name, content.args);
        case "goto-route":
          if (content.route === initialSettings.cataloguePath && content.state) {
            changeExtensionCatalogueStore(content.state);
          }
          return navigate(content.route, content.state);
        case "visualize-all":
          return toggleVisualizer();
      }
    }
  });
  integrate({
    routes: {
      [initialSettings.cataloguePath]: ExtensionCatalogue
    },
    onChange(previous, current, changed) {
      if (changed.state) {
        if (settings.viewState.value) {
          if (!legacyBrowser) {
            const err = new Error();
            const lastLine = err.stack.split("\n")[6];
            if (lastLine) {
              const action = lastLine.replace(/^\s+at\s+(Atom\.|Object\.)?/, "");
              console.group(`%c Piral State Change %c ${(/* @__PURE__ */ new Date()).toLocaleTimeString()}`, "color: gray; font-weight: lighter;", "color: black; font-weight: bold;");
              console.log("%c Previous", `color: #9E9E9E; font-weight: bold`, previous);
              console.log("%c Action", `color: #03A9F4; font-weight: bold`, action);
              console.log("%c Next", `color: #4CAF50; font-weight: bold`, current);
              console.groupEnd();
            }
          } else {
            console.log("Changed state", previous, current);
          }
        }
        sendMessage({
          type: "container",
          container: decycle(getGlobalState())
        });
      }
      if (changed.pilets) {
        sendMessage({
          type: "pilets",
          pilets: getPilets().map((pilet) => ({
            name: pilet.name,
            version: pilet.version,
            disabled: !!pilet.disabled
          }))
        });
      }
      if (changed.pages) {
        sendMessage({
          type: "routes",
          routes: getRoutes().filter((r3) => !excludedRoutes.includes(r3))
        });
      }
      if (changed.extensions) {
        sendMessage({
          type: "extensions",
          extensions: getExtensions()
        });
      }
      if (changed.dependencies) {
        sendMessage({
          type: "dependencies",
          dependencies: getDependencies()
        });
      }
    }
  });
  window["dbg:piral"] = debugApi;
  start();
}
const debugRouteCache = {
  active: 0,
  paths: []
};
function freezeRouteRefresh() {
  debugRouteCache.active++;
  return () => {
    debugRouteCache.active--;
    if (!debugRouteCache.active) {
      window.dispatchEvent(new CustomEvent("pilets-reloaded"));
    }
  };
}
function installPiletEmulator(requestPilets, options) {
  const { addPilet: addPilet2, removePilet: removePilet2, integrate, defaultFeedUrl = "https://feed.piral.cloud/api/v1/pilet/emulator-website" } = options;
  integrate(() => {
    const dbgPiletApiKey = "dbg:pilet-api";
    const loadPilets2 = sessionStorage.getItem("dbg:load-pilets") === "on";
    const noPilets = () => Promise.resolve([]);
    const requester = loadPilets2 ? requestPilets : noPilets;
    const promise = requester();
    const feedUrl2 = window[dbgPiletApiKey] || sessionStorage.getItem(dbgPiletApiKey) || defaultFeedUrl;
    const initialTarget = /^https?:/.test(feedUrl2) ? feedUrl2 : `${location.origin}${feedUrl2[0] === "/" ? "" : "/"}${feedUrl2}`;
    const updateTarget = initialTarget.replace("http", "ws");
    const ws = new WebSocket(updateTarget);
    const timeoutCache = {};
    const timeout = 150;
    const appendix = fetch(initialTarget).then((res) => res.json()).then((item) => Array.isArray(item) ? item : item && typeof item === "object" ? Array.isArray(item.items) ? item.items : [item] : []);
    ws.onmessage = ({ data }) => {
      const hardRefresh = sessionStorage.getItem("dbg:hard-refresh") === "on";
      if (!hardRefresh) {
        const meta = JSON.parse(data);
        const name = meta.name;
        clearTimeout(timeoutCache[name]);
        timeoutCache[name] = setTimeout(() => {
          const unfreeze = freezeRouteRefresh();
          removePilet2(meta.name).then(() => {
            const clearConsole = sessionStorage.getItem("dbg:clear-console") === "on";
            if (clearConsole) {
              console.clear();
            }
            console.log("Updating pilet %c%s ...", "color: green; background: white; font-weight: bold", name);
          }).then(() => addPilet2(meta)).then(unfreeze, unfreeze);
        }, timeout);
      } else {
        location.reload();
      }
    };
    return promise.catch((err) => {
      console.error(`Requesting the pilets failed. We'll continue loading without pilets (DEBUG only).`, err);
      return [];
    }).then((pilets) => appendix.then((debugPilets) => {
      const debugPiletNames = debugPilets.map((m2) => m2.name);
      const feedPilets = pilets.filter((m2) => !debugPiletNames.includes(m2.name));
      return [...feedPilets, ...debugPilets];
    }));
  });
}
function useDebugRouteFilter(paths) {
  const [_, triggerChange] = reactExports.useState(0);
  reactExports.useEffect(() => {
    const handler = () => {
      triggerChange((s) => s + 1);
    };
    window.addEventListener("pilets-reloaded", handler);
    return () => {
      window.removeEventListener("pilets-reloaded", handler);
    };
  }, []);
  if (!debugRouteCache.active) {
    debugRouteCache.paths = paths;
  }
  return debugRouteCache.paths;
}
function integrateDebugger$1(context, options, debug = {}) {
  installPiralDebug({
    emulator: debug.emulator,
    customSettings: debug.customSettings,
    defaultSettings: debug.defaultSettings,
    addPilet: context.addPilet,
    removePilet: context.removePilet,
    updatePilet(pilet) {
      if (!pilet.disabled) {
        context.addPilet(pilet);
      } else {
        context.injectPilet(pilet);
      }
    },
    fireEvent: context.emit,
    getDependencies() {
      return Object.keys(options.dependencies);
    },
    getExtensions() {
      return context.readState((s) => Object.keys(s.registry.extensions));
    },
    getRoutes() {
      const registeredRoutes = context.readState((state) => Object.keys(state.registry.pages));
      const componentRoutes = context.readState((state) => Object.keys(state.routes));
      return [...componentRoutes, ...registeredRoutes];
    },
    getGlobalState() {
      return context.readState((s) => s);
    },
    navigate(path, state) {
      return context.navigation.push(path, state);
    },
    getPilets() {
      return context.readState((s) => s.modules);
    },
    integrate(dbg) {
      context.dispatch((s) => ({
        ...s,
        routes: {
          ...s.routes,
          ...dbg.routes
        }
      }));
      context.state.subscribe((current, previous) => {
        const pilets = current.modules !== previous.modules;
        const pages = current.registry.pages !== previous.registry.pages || current.routes !== previous.routes;
        const extensions = current.registry.extensions !== previous.registry.extensions;
        const state = current !== previous;
        dbg.onChange(previous, current, {
          pilets,
          pages,
          extensions,
          state
        });
      });
    }
  });
}
function integrateEmulator(context, options, debug = {}) {
  installPiletEmulator(options.fetchPilets, {
    defaultFeedUrl: debug.defaultFeedUrl,
    addPilet: context.addPilet,
    removePilet: context.removePilet,
    integrate(requester) {
      options.fetchPilets = requester;
    }
  });
}
function fillDependencies(deps) {
  deps["daiko-piral"] = {};
  deps["tslib"] = _0;
  deps["tslib@2.8.1"] = _0;
  deps["react"] = React$1;
  deps["react@18.3.1"] = React$1;
  deps["react-dom"] = _2;
  deps["react-dom@18.3.1"] = _2;
  deps["react-router"] = _3;
  deps["react-router@6.29.0"] = _3;
  deps["react-router-dom"] = _4;
  deps["react-router-dom@6.29.0"] = _4;
}
const publicPath = "/";
function createDefaultState() {
  return {
    app: {
      error: void 0,
      loading: typeof window !== "undefined",
      wrap: true
    },
    components: {
      ErrorInfo: DefaultErrorInfo,
      LoadingIndicator: DefaultLoadingIndicator,
      Router: DefaultRouter,
      RouteSwitch: DefaultRouteSwitch,
      Layout: DefaultLayout
    },
    errorComponents: {},
    registry: {
      extensions: {},
      pages: {},
      wrappers: {}
    },
    routes: {},
    data: {},
    portals: {},
    modules: []
  };
}
function integrateDebugger(context, options, debug) {
  return integrateDebugger$1(context, options, {
    defaultSettings: {},
    emulator: true,
    ...debug
  });
}
function useRouteFilter(paths) {
  useCurrentNavigation();
  return useDebugRouteFilter(paths);
}
function useShellRoutes() {
  const routes = useGlobalState((s) => s.routes);
  return reactExports.useMemo(() => Object.entries(routes).map(([path, Component]) => ({
    path,
    Component,
    meta: (Component == null ? void 0 : Component.meta) || {},
    matcher: createRouteMatcher(path)
  })), [routes]);
}
function usePiletRoutes() {
  const pages = useGlobalState((s) => s.registry.pages);
  return reactExports.useMemo(() => Object.entries(pages).map(([path, entry]) => ({
    path,
    Component: entry.component,
    meta: entry.meta,
    matcher: createRouteMatcher(path)
  })), [pages]);
}
function useRoutes() {
  const shellRoutes = useShellRoutes();
  const piletRoutes = usePiletRoutes();
  return useRouteFilter([...shellRoutes, ...piletRoutes]);
}
const PiralRoutes = ({ NotFound: NotFound2, RouteSwitch, ...props }) => {
  const paths = useRoutes();
  return reactExports.createElement(RouteSwitch, { NotFound: NotFound2, paths, ...props });
};
PiralRoutes.displayName = "Routes";
const PiralSuspense = ({ children }) => {
  const { error: error2, loading } = useGlobalState((m2) => m2.app);
  return error2 ? reactExports.createElement(RegisteredErrorInfo, { type: "loading", error: error2 }) : loading ? reactExports.createElement(RegisteredLoadingIndicator, null) : reactExports.createElement(reactExports.Fragment, null, children);
};
const ResponsiveLayout = ({ breakpoints = defaultBreakpoints, Layout, children }) => {
  const selected = useMedia(breakpoints, defaultLayouts, "desktop");
  return reactExports.createElement(Layout, { currentLayout: selected }, children);
};
ResponsiveLayout.displayName = "ResponsiveLayout";
const NotFound = (props) => reactExports.createElement(RegisteredErrorInfo, { type: "not_found", ...props });
const PiralView = ({ breakpoints, children }) => reactExports.createElement(
  reactExports.Fragment,
  null,
  reactExports.createElement(PiralGlobals, null),
  reactExports.createElement(
    PiralSuspense,
    null,
    reactExports.createElement(
      ResponsiveLayout,
      { breakpoints, Layout: RegisteredLayout },
      reactExports.createElement(PiralRoutes, { NotFound, RouteSwitch: RegisteredRouteSwitch })
    )
  ),
  children
);
PiralView.displayName = "PiralView";
class ForeignComponentContainer extends reactExports.Component {
  constructor() {
    super(...arguments);
    this.locals = {};
    this.setNode = (node2) => {
      this.current = node2;
    };
  }
  componentDidMount() {
    const { current } = this;
    const { $component, $context, innerProps } = this.props;
    const { mount } = $component;
    if (current && isfunc(mount)) {
      mount(current, innerProps, $context, this.locals);
    }
    this.previous = current;
  }
  componentDidUpdate() {
    const { current, previous } = this;
    const { $component, $context, innerProps } = this.props;
    const { update } = $component;
    if (current !== previous) {
      previous && this.componentWillUnmount();
      current && this.componentDidMount();
    } else if (isfunc(update)) {
      update(current, innerProps, $context, this.locals);
    }
  }
  componentWillUnmount() {
    const { previous } = this;
    const { $component } = this.props;
    const { unmount } = $component;
    if (previous && isfunc(unmount)) {
      unmount(previous, this.locals);
    }
    this.previous = void 0;
  }
  render() {
    const { $portalId } = this.props;
    return reactExports.createElement("piral-portal", { pid: $portalId, ref: this.setNode });
  }
}
let portalIdBase = 123456;
function wrapReactComponent(Component, captured, Wrapper) {
  return (props) => reactExports.createElement(
    Wrapper,
    { ...props },
    reactExports.createElement(Component, { ...props, ...captured })
  );
}
function wrapForeignComponent(component, captured, Wrapper) {
  return reactExports.memo((props) => {
    const { destroyPortal: destroyPortal2, navigation } = useGlobalStateContext();
    const id = reactExports.useMemo(() => (portalIdBase++).toString(26), none);
    const context = reactExports.useMemo(() => ({ publicPath: navigation.publicPath, navigation, router: navigation.router }), []);
    const innerProps = reactExports.useMemo(() => ({ ...props, ...captured }), [props]);
    reactExports.useEffect(() => () => destroyPortal2(id), none);
    return reactExports.createElement(
      Wrapper,
      { ...props },
      reactExports.createElement(PortalRenderer, { id }),
      reactExports.createElement(ForeignComponentContainer, { innerProps, "$portalId": id, "$component": component, "$context": context })
    );
  });
}
function isNotExotic(component) {
  return !component.$$typeof;
}
function wrapComponent(converters, component, captured, Wrapper) {
  if (!component) {
    const pilet = captured.piral.meta.name;
    console.error(`[${pilet}] The given value is not a valid component.`);
    component = () => null;
  }
  if (typeof component === "object" && isNotExotic(component)) {
    const result = convertComponent(converters[component.type], component);
    return wrapForeignComponent(result, captured, Wrapper);
  }
  return wrapReactComponent(component, captured, Wrapper);
}
if (typeof window !== "undefined" && "customElements" in window) {
  const contents = "contents";
  class PiralExtension extends HTMLElement {
    constructor() {
      super(...arguments);
      this.dispose = noop$4;
      this.update = noop$4;
      this.props = {
        name: this.getAttribute("name"),
        emptySkipsRender: typeof this.getAttribute("empty-skips-render") === "string",
        params: tryParseJson(this.getAttribute("params")),
        empty: void 0,
        order: void 0,
        render: void 0,
        children: reactifyContent(this.childNodes)
      };
    }
    get params() {
      return this.props.params;
    }
    set params(value) {
      if (!isSame(this.props.params, value)) {
        this.props.params = value;
        this.update(this.props);
      }
    }
    get name() {
      return this.props.name;
    }
    set name(value) {
      if (this.props.name !== value) {
        this.props.name = value;
        this.update(this.props);
      }
    }
    get order() {
      return this.props.order;
    }
    set order(value) {
      if (this.props.order !== value) {
        this.props.order = value;
        this.update(this.props);
      }
    }
    get render() {
      return this.props.render;
    }
    set render(value) {
      if (this.props.render !== value) {
        this.props.render = value;
        this.update(this.props);
      }
    }
    get empty() {
      return this.props.empty;
    }
    set empty(value) {
      if (this.props.empty !== value) {
        this.props.empty = value;
        this.update(this.props);
      }
    }
    get emptySkipsRender() {
      return this.props.emptySkipsRender;
    }
    set emptySkipsRender(value) {
      if (this.props.emptySkipsRender !== value) {
        this.props.emptySkipsRender = value;
        this.update(this.props);
      }
    }
    connectedCallback() {
      this.style.display = contents;
      if (this.isConnected) {
        this.dispatchEvent(new CustomEvent("render-html", {
          bubbles: true,
          composed: true,
          detail: {
            target: this,
            props: this.props
          }
        }));
      }
    }
    disconnectedCallback() {
      this.dispose();
      this.dispose = noop$4;
      this.update = noop$4;
    }
    attributeChangedCallback(name, _, newValue) {
      switch (name) {
        case "name":
          this.name = newValue;
          break;
        case "params":
          this.params = tryParseJson(newValue);
          break;
        case "empty-skips-render":
          this.emptySkipsRender = typeof newValue === "string";
          break;
      }
    }
    static get observedAttributes() {
      return ["name", "params", "empty-skips-render"];
    }
  }
  customElements.define(extensionName, PiralExtension);
  class PiralPortal extends HTMLElement {
    connectedCallback() {
      this.style.display = contents;
    }
  }
  customElements.define(portalName, PiralPortal);
  class PiralSlot extends HTMLElement {
    connectedCallback() {
      this.style.display = contents;
    }
  }
  customElements.define(slotName, PiralSlot);
  class PiralContent extends HTMLElement {
    constructor() {
      super(...arguments);
      this.dispose = noop$4;
    }
    connectedCallback() {
      this.style.display = contents;
      const cid = this.getAttribute("cid");
      const content = PiralContent.contentAssignments[cid];
      const portal = this.closest("piral-portal");
      if (content && portal) {
        const portalId = portal.getAttribute("pid");
        window.dispatchEvent(new CustomEvent("render-content", {
          detail: { target: this, content, portalId }
        }));
      }
    }
    disconnectedCallback() {
      this.dispose();
      this.dispose = noop$4;
    }
  }
  PiralContent.contentAssignments = {};
  window.assignContent = (cid, content) => {
    PiralContent.contentAssignments[cid] = content;
  };
  customElements.define(contentName, PiralContent);
  class PiralComponent extends HTMLElement {
    get name() {
      return this.getAttribute("name");
    }
    get origin() {
      return this.getAttribute("origin");
    }
    connectedCallback() {
      this.style.display = contents;
      this.deferEvent("add-component");
    }
    disconnectedCallback() {
      this.deferEvent("remove-component");
    }
    deferEvent(eventName) {
      const ev = new CustomEvent(eventName, {
        detail: { name: this.name, origin: this.origin }
      });
      defer$1(() => window.dispatchEvent(ev));
    }
  }
  customElements.define(componentName, PiralComponent);
}
function renderElement(context, element, props) {
  if (typeof window !== "undefined") {
    let [id, portal] = renderInDom(context, element, ExtensionSlot, props);
    const evName = "extension-props-changed";
    const handler = (ev) => update(ev.detail);
    const dispose = () => {
      context.hidePortal(id, portal);
      element.removeEventListener(evName, handler);
    };
    const update = (newProps) => {
      [id, portal] = changeDomPortal(id, portal, context, element, ExtensionSlot, newProps);
    };
    element.addEventListener(evName, handler);
    return [dispose, update];
  }
  return [noop$4, noop$4];
}
function initialize(ctx, loading, error2, modules) {
  ctx.dispatch((state) => ({
    ...state,
    app: {
      ...state.app,
      error: error2,
      loading
    },
    modules
  }));
}
function addPilet(ctx, meta) {
  return ctx.options.loadPilet(meta).then((pilet) => ctx.injectPilet(pilet)).then((pilet) => runPilet(ctx.options.createApi, pilet, ctx.options.hooks)).then(noop$4);
}
function removePilet(ctx, name) {
  ctx.dispatch((state) => ({
    ...state,
    modules: state.modules.filter((m2) => m2.name !== name),
    registry: removeNested(state.registry, (m2) => m2.pilet === name)
  }));
  ctx.emit("unload-pilet", {
    name
  });
  return Promise.resolve();
}
function injectPilet(ctx, pilet) {
  ctx.dispatch((state) => ({
    ...state,
    modules: replaceOrAddItem(state.modules, pilet, (m2) => m2.name === pilet.name),
    registry: removeNested(state.registry, (m2) => m2.pilet === pilet.name)
  }));
  ctx.emit("unload-pilet", {
    name: pilet.name
  });
  return pilet;
}
function setComponent(ctx, name, component) {
  ctx.dispatch((state) => ({
    ...state,
    components: withKey(state.components, name, component)
  }));
}
function setErrorComponent(ctx, type, component) {
  ctx.dispatch((state) => ({
    ...state,
    errorComponents: withKey(state.errorComponents, type, component)
  }));
}
function setRoute(ctx, path, component) {
  ctx.dispatch(withRoute(path, component));
}
function includeProvider(ctx, provider) {
  ctx.dispatch(withProvider(provider));
}
function registerPage(ctx, name, value) {
  ctx.dispatch(withPage(name, value));
}
function unregisterPage(ctx, name) {
  ctx.dispatch(withoutPage(name));
}
function registerExtension(ctx, name, value) {
  ctx.dispatch(withExtension(name, value));
}
function unregisterExtension(ctx, name, reference) {
  ctx.dispatch(withoutExtension(name, reference));
}
function resetData(ctx) {
  ctx.dispatch((state) => ({
    ...state,
    data: {}
  }));
}
function readDataItem(ctx, key) {
  return ctx.readState((state) => state.data[key]);
}
function readDataValue(ctx, key) {
  const item = readDataItem(ctx, key);
  return item && item.value;
}
function writeDataItem(ctx, key, value, owner, target, expires) {
  const isNull = !value && typeof value === "object";
  const data = isNull ? value : {
    value,
    owner,
    target,
    expires
  };
  ctx.dispatch((state) => ({
    ...state,
    data: updateKey(state.data, key, data)
  }));
  ctx.emit("store-data", {
    name: key,
    target,
    value,
    owner,
    expires
  });
}
function tryWriteDataItem(ctx, key, value, owner, target, expires) {
  const item = readDataItem(ctx, key);
  if (item && item.owner !== owner) {
    console.error(`Invalid data write to '${key}'. This item currently belongs to '${item.owner}' (write attempted from '${owner}'). The action has been ignored.`);
    return false;
  }
  writeDataItem(ctx, key, value, owner, target, expires);
  return true;
}
function defineAction(ctx, actionName, action) {
  ctx[actionName] = action.bind(ctx, ctx);
}
function defineActions(ctx, actions2) {
  for (const actionName of Object.keys(actions2)) {
    const action = actions2[actionName];
    defineAction(ctx, actionName, action);
  }
}
function destroyPortal(ctx, id) {
  ctx.dispatch((state) => ({
    ...state,
    portals: withoutKey(state.portals, id)
  }));
}
function hidePortal(ctx, id, entry) {
  ctx.dispatch((state) => ({
    ...state,
    portals: withKey(state.portals, id, excludeItem(state.portals[id], entry))
  }));
}
function updatePortal(ctx, id, current, next2) {
  ctx.dispatch((state) => ({
    ...state,
    portals: withKey(state.portals, id, replaceOrAddItem(state.portals[id], next2, (m2) => m2 === current))
  }));
}
function showPortal(ctx, id, entry) {
  ctx.dispatch((state) => ({
    ...state,
    portals: withKey(state.portals, id, includeItem(state.portals[id], entry))
  }));
}
function dispatch(ctx, update) {
  const oldState = ctx.state.getState();
  const newState = update(oldState);
  if (!isSame(oldState, newState)) {
    ctx.state.setState(newState);
  }
}
function readState(ctx, read) {
  return read(ctx.state.getState());
}
const actions$5 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  addPilet,
  defineAction,
  defineActions,
  destroyPortal,
  dispatch,
  hidePortal,
  includeProvider,
  initialize,
  injectPilet,
  readDataItem,
  readDataValue,
  readState,
  registerExtension,
  registerPage,
  removePilet,
  resetData,
  setComponent,
  setErrorComponent,
  setRoute,
  showPortal,
  tryWriteDataItem,
  unregisterExtension,
  unregisterPage,
  updatePortal,
  writeDataItem
}, Symbol.toStringTag, { value: "Module" }));
function createContext(state, events) {
  const ctx = {
    ...events,
    apis: {},
    converters: {
      html: ({ component }) => component
    },
    navigation: createNavigation(publicPath),
    state
  };
  return ctx;
}
function includeActions(ctx, actions2) {
  const actionNames = Object.keys(actions2);
  for (const actionName of actionNames) {
    const action = actions2[actionName];
    ctx[actionName] = action.bind(ctx, ctx);
  }
}
function createActions$1(state, events) {
  const context = createContext(state, events);
  includeActions(context, actions$5);
  return context;
}
function createStore$1(createState) {
  let state;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (partial, replace2) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (nextState !== state) {
      const previousState = state;
      state = replace2 ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const subscribeWithSelector = (listener, selector = getState, equalityFn = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let currentSlice = selector(state);
    function listenerToAdd() {
      const nextSlice = selector(state);
      if (!equalityFn(currentSlice, nextSlice)) {
        const previousSlice = currentSlice;
        listener(currentSlice = nextSlice, previousSlice);
      }
    }
    listeners.add(listenerToAdd);
    return () => listeners.delete(listenerToAdd);
  };
  const subscribe = (listener, selector, equalityFn) => {
    if (selector || equalityFn) {
      return subscribeWithSelector(listener, selector, equalityFn);
    }
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const destroy = () => listeners.clear();
  const api = { setState, getState, subscribe, destroy };
  state = createState(setState, getState, api);
  return api;
}
const isSSR = typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
const useIsomorphicLayoutEffect$1 = isSSR ? reactExports.useEffect : reactExports.useLayoutEffect;
function create(createState) {
  const api = typeof createState === "function" ? createStore$1(createState) : createState;
  const useStore = (selector = api.getState, equalityFn = Object.is) => {
    const [, forceUpdate] = reactExports.useReducer((c) => c + 1, 0);
    const state = api.getState();
    const stateRef = reactExports.useRef(state);
    const selectorRef = reactExports.useRef(selector);
    const equalityFnRef = reactExports.useRef(equalityFn);
    const erroredRef = reactExports.useRef(false);
    const currentSliceRef = reactExports.useRef();
    if (currentSliceRef.current === void 0) {
      currentSliceRef.current = selector(state);
    }
    let newStateSlice;
    let hasNewStateSlice = false;
    if (stateRef.current !== state || selectorRef.current !== selector || equalityFnRef.current !== equalityFn || erroredRef.current) {
      newStateSlice = selector(state);
      hasNewStateSlice = !equalityFn(currentSliceRef.current, newStateSlice);
    }
    useIsomorphicLayoutEffect$1(() => {
      if (hasNewStateSlice) {
        currentSliceRef.current = newStateSlice;
      }
      stateRef.current = state;
      selectorRef.current = selector;
      equalityFnRef.current = equalityFn;
      erroredRef.current = false;
    });
    const stateBeforeSubscriptionRef = reactExports.useRef(state);
    useIsomorphicLayoutEffect$1(() => {
      const listener = () => {
        try {
          const nextState = api.getState();
          const nextStateSlice = selectorRef.current(nextState);
          if (!equalityFnRef.current(currentSliceRef.current, nextStateSlice)) {
            stateRef.current = nextState;
            currentSliceRef.current = nextStateSlice;
            forceUpdate();
          }
        } catch (error2) {
          erroredRef.current = true;
          forceUpdate();
        }
      };
      const unsubscribe = api.subscribe(listener);
      if (api.getState() !== stateBeforeSubscriptionRef.current) {
        listener();
      }
      return unsubscribe;
    }, []);
    const sliceToReturn = hasNewStateSlice ? newStateSlice : currentSliceRef.current;
    reactExports.useDebugValue(sliceToReturn);
    return sliceToReturn;
  };
  Object.assign(useStore, api);
  useStore[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const items = [useStore, api];
    return {
      next() {
        const done = items.length <= 0;
        return { value: items.shift(), done };
      }
    };
  };
  return useStore;
}
function extend(defaultState, customState) {
  for (const key of Object.keys(customState)) {
    if (key === "__proto__" || key === "constructor") {
      continue;
    }
    const value = customState[key];
    const original = defaultState[key];
    const nested = typeof original === "object" && typeof value === "object";
    defaultState[key] = nested ? extend(original, value) : value;
  }
  return defaultState;
}
function createGlobalState(customState = {}) {
  const defaultState = createDefaultState();
  return create(() => extend(defaultState, customState));
}
const DefaultWrapper = (props) => defaultRender(props.children);
function getWrapper(wrappers, wrapperType) {
  const WrapAll = wrappers["*"];
  const WrapType = wrappers[wrapperType];
  if (WrapAll && WrapType) {
    return (props) => reactExports.createElement(
      WrapAll,
      { ...props },
      reactExports.createElement(WrapType, { ...props })
    );
  }
  return WrapType || WrapAll || DefaultWrapper;
}
function makeWrapper(context, outerProps, wrapperType, errorType) {
  const wrapped = context.readState((m2) => m2.app.wrap);
  const OuterWrapper = context.readState((m2) => getWrapper(m2.registry.wrappers, wrapperType));
  const Wrapper = (props) => reactExports.createElement(
    OuterWrapper,
    { ...outerProps, ...props },
    reactExports.createElement(ErrorBoundary$1, { ...outerProps, ...props, errorType }, props.children)
  );
  return wrapped ? (props) => reactExports.createElement(
    "piral-component",
    { origin: outerProps.piral.meta.name },
    reactExports.createElement(Wrapper, { ...props })
  ) : Wrapper;
}
function withApi(context, component, piral, errorType, wrapperType = errorType, captured = {}) {
  const outerProps = { ...captured, piral };
  const converters = context.converters;
  const Wrapper = makeWrapper(context, outerProps, wrapperType, errorType);
  return wrapComponent(converters, component, outerProps, Wrapper);
}
function createCoreApi(context) {
  return (api, meta) => {
    const pilet = meta.name;
    return {
      getData(name) {
        return context.readDataValue(name);
      },
      setData(name, value, options) {
        const { target = "memory", expires } = createDataOptions(options);
        const expiration = getDataExpiration(expires);
        return context.tryWriteDataItem(name, value, pilet, target, expiration);
      },
      registerPage(route, arg, meta2 = {}) {
        const component = withApi(context, arg, api, "page", void 0, { meta: meta2 });
        context.registerPage(route, {
          pilet,
          meta: meta2,
          component
        });
        return () => api.unregisterPage(route);
      },
      unregisterPage(route) {
        context.unregisterPage(route);
      },
      registerExtension(name, reference, defaults) {
        const component = withApi(context, reference, api, "extension");
        context.registerExtension(name, {
          pilet,
          component,
          reference,
          defaults
        });
        return () => api.unregisterExtension(name, reference);
      },
      unregisterExtension(name, arg) {
        context.unregisterExtension(name, arg);
      },
      renderHtmlExtension(element, props) {
        const [dispose] = renderElement(context, element, props);
        return dispose;
      },
      Extension: ExtensionSlot
    };
  };
}
function createExtenders(context, apis) {
  const creators = [createCoreApi, ...apis.filter(isfunc)];
  return creators.map((c) => {
    const ctx = c(context);
    if (isfunc(ctx)) {
      return ctx;
    } else {
      return () => ({
        ...ctx
      });
    }
  });
}
function defaultApiFactory(context, apis) {
  const extenders = createExtenders(context, apis);
  return (target) => {
    const api = initializeApi(target, context);
    context.apis[target.name] = api;
    return mergeApis(api, extenders, target);
  };
}
const globalDependencies = {};
if (isfunc(fillDependencies)) {
  fillDependencies(globalDependencies);
}
function defaultDependencySelector(dependencies) {
  return dependencies;
}
function defaultModuleRequester() {
  return Promise.resolve([]);
}
function createPiletOptions({ hooks, context, loaders, loaderConfig, availablePilets, strategy, createApi, loadPilet, requestPilets, shareDependencies, debug }) {
  const options = {
    config: loaderConfig,
    strategy,
    loadPilet: extendLoader(loadPilet ?? getDefaultLoader(loaderConfig), loaders),
    createApi,
    pilets: availablePilets,
    fetchPilets: requestPilets,
    hooks,
    dependencies: shareDependencies(globalDependencies)
  };
  integrateDebugger(context, options, debug);
  integrateEmulator(context, options, debug);
  return options;
}
function createInstance(config = {}) {
  const { id = generateId(), state, actions: actions2, availablePilets = [], plugins, requestPilets = defaultModuleRequester, loaderConfig, async = false, shareDependencies = defaultDependencySelector, loadPilet, loaders, debug, apiFactory = defaultApiFactory } = config;
  const globalState = createGlobalState(state);
  const events = createListener(globalState);
  const context = createActions$1(globalState, events);
  const definedPlugins = plugins || [];
  const usedPlugins = Array.isArray(definedPlugins) ? definedPlugins : [definedPlugins];
  const createApi = apiFactory(context, usedPlugins);
  const root2 = createApi({
    name: "_",
    version: "0",
    spec: "v0",
    basePath: "",
    link: "",
    config: {},
    dependencies: {}
  });
  const options = createPiletOptions({
    context,
    createApi,
    loaders,
    loadPilet,
    availablePilets,
    loaderConfig,
    shareDependencies,
    strategy: isfunc(async) ? async : async ? blazingStrategy : standardStrategy,
    requestPilets,
    debug
  });
  if (actions2) {
    includeActions(context, actions2);
  }
  context.options = options;
  return __assign(events, {
    id,
    createApi,
    context,
    root: root2,
    options
  });
}
const renderHtmlEvent = "render-html";
const renderContentEvent = "render-content";
const forwardEventEvent = "forward-event";
const RootListener = () => {
  const context = useGlobalStateContext();
  reactExports.useLayoutEffect(() => {
    if (typeof document !== "undefined") {
      const renderHtml = (ev) => {
        ev.stopPropagation();
        const { target, props } = ev.detail;
        const [dispose, update] = renderElement(context, target, props);
        target.dispose = dispose;
        target.update = update;
      };
      const renderContent = (ev) => {
        ev.stopPropagation();
        const { target, content, portalId } = ev.detail;
        const portal = reactDomExports.createPortal(content, target);
        const dispose = () => context.hidePortal(portalId, portal);
        context.showPortal(portalId, portal);
        target.dispose = dispose;
      };
      const forwardEvent = (ev) => {
        ev.stopPropagation();
        const { type, args } = ev.detail;
        context.emit(type, args);
      };
      document.body.addEventListener(renderHtmlEvent, renderHtml, false);
      document.body.addEventListener(forwardEventEvent, forwardEvent, false);
      window.addEventListener(renderContentEvent, renderContent, false);
      return () => {
        document.body.removeEventListener(renderHtmlEvent, renderHtml, false);
        document.body.removeEventListener(forwardEventEvent, forwardEvent, false);
        window.removeEventListener(renderContentEvent, renderContent, false);
      };
    }
  }, [context]);
  return null;
};
const PiralProvider = ({ children }) => {
  const Provider = useGlobalState((m2) => m2.provider || reactExports.Fragment);
  return reactExports.createElement(Provider, null, children);
};
const PiralContext = ({ instance: instance2 = createInstance(), children }) => reactExports.createElement(
  StateContext.Provider,
  { value: instance2.context },
  reactExports.createElement(Mediator, { options: instance2.options, key: instance2.id }),
  reactExports.createElement(RootListener, null),
  reactExports.createElement(PiralProvider, null, children)
);
PiralContext.displayName = "PiralContext";
const Piral = ({ instance: instance2 = createInstance(), breakpoints, children }) => reactExports.createElement(
  PiralContext,
  { instance: instance2 },
  reactExports.createElement(
    RegisteredRouter,
    { publicPath: instance2.context.navigation.publicPath },
    reactExports.createElement(PiralView, { breakpoints }, children)
  )
);
Piral.displayName = "Piral";
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return Object.propertyIsEnumerable.call(target, symbol);
  }) : [];
}
function getKeys(target) {
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source).forEach(function(key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error("first argument should be an array");
  }
  return array.reduce(function(prev2, next2) {
    return deepmerge(prev2, next2, options);
  }, {});
};
var deepmerge_1 = deepmerge;
var cjs = deepmerge_1;
function createActions(localizer) {
  return {
    selectLanguage(ctx, selected) {
      ctx.dispatch((state) => {
        localizer.language = selected;
        const previousLanguage = state.language.selected;
        const currentLanguage = selected;
        setTimeout(() => {
          ctx.emit("select-language", {
            previousLanguage,
            currentLanguage
          });
        }, 0);
        return {
          ...state,
          language: {
            ...state.language,
            loading: selected === void 0,
            selected
          }
        };
      });
    },
    translate(_, key, variables) {
      return localizer && localizer.localizeGlobal(key, variables);
    },
    setTranslations(ctx, language, data) {
      localizer.messages[language] = data.global;
      for (const item of data.locals) {
        const api = ctx.apis[item.name];
        if (api) {
          const translations = api.getTranslations();
          translations[language] = item.value;
          api.setTranslations(translations);
        }
      }
    },
    getTranslations(ctx, language) {
      return {
        global: localizer.messages[language],
        locals: Object.keys(ctx.apis).map((name) => ({
          name,
          value: ctx.apis[name].getTranslations()[language]
        }))
      };
    }
  };
}
function flat(source) {
  const target = {};
  flatten(source, target);
  return target;
}
function flatten(source, target, prop = "") {
  if (typeof source === "string") {
    target[prop] = source;
    return;
  }
  if (typeof source === "object" && source !== null) {
    Object.keys(source).forEach((key) => {
      flatten(source[key], target, prop ? `${prop}.${key}` : key);
    });
    return;
  }
}
function flattenTranslations(messages) {
  return Object.fromEntries(Object.entries(messages).map(([language, translations]) => {
    return [language, flat(translations)];
  }));
}
function defaultFallback(key, language) {
  {
    if (language) {
      console.warn(`Missing translation of "${key}" in language "${language}".`);
      return `__${language}_${key}__`;
    } else {
      return "";
    }
  }
}
function formatMessage(message, variables) {
  return message.replace(/{{\s*([A-Za-z0-9_.]+)\s*}}/g, (_match, p1) => {
    return p1 in variables ? variables[p1] ?? "" : `{{${p1}}}`;
  });
}
class Localizer {
  /**
   * Creates a new instance of a localizer.
   */
  constructor(messages, language, languages, fallback = defaultFallback) {
    this.language = language;
    this.languages = languages;
    this.fallback = fallback;
    this.messages = flattenTranslations(messages);
  }
  /**
   * Localizes the given key via the global translations.
   * @param key The key of the translation snippet.
   * @param variables The optional variables to use.
   */
  localizeGlobal(key, variables) {
    return this.localizeBase(key, variables);
  }
  /**
   * Localizes the given key via the local translations.
   * Uses the global translations as fallback mechanism.
   * @param localMessages The local translations to prefer.
   * @param key The key of the translation snippet.
   * @param variables The optional variables to use.
   */
  localizeLocal(localMessages, key, variables) {
    const message = this.translateMessage(localMessages, key, variables);
    if (message === void 0) {
      return this.localizeBase(key, variables);
    }
    return message;
  }
  localizeBase(key, variables) {
    const message = this.translateMessage(this.messages, key, variables);
    if (message === void 0) {
      return this.fallback(key, this.language, this.messages, variables);
    }
    return message;
  }
  translateMessage(messages, key, variables) {
    const language = this.language;
    const translations = language && messages[language];
    const translation = translations && translations[key];
    return translation && (variables ? formatMessage(translation, variables) : translation);
  }
}
const DefaultPicker = (props) => defaultRender(void 0);
function setupLocalizer(config = {}) {
  const msgs = config.messages || {};
  const languages = Object.keys(msgs);
  const defaultLang = languages[0] || "en";
  const computeLang = config.language;
  const usedLang = typeof computeLang === "function" ? computeLang(languages, defaultLang, "en") : computeLang;
  const language = usedLang || defaultLang;
  return new Localizer(msgs, language, languages.length ? languages : [language], config.fallback);
}
function createLocaleApi(localizer = setupLocalizer()) {
  return (context) => {
    context.defineActions(createActions(localizer));
    context.dispatch((state) => ({
      ...state,
      components: {
        LanguagesPicker: DefaultPicker,
        ...state.components
      },
      language: {
        loading: false,
        available: localizer.languages,
        selected: localizer.language
      }
    }));
    return (api) => {
      let localTranslations = {};
      const setTranslations = (messages) => {
        localTranslations = flattenTranslations(messages);
      };
      return {
        addTranslations(messages, isOverriding = true) {
          const current = localizer.messages;
          setTranslations(cjs.all(isOverriding ? [current, ...messages] : [...messages, current]));
        },
        getCurrentLanguage(cb) {
          const selected = context.readState((s) => s.language.selected);
          if (cb) {
            cb(selected);
            const handler = (ev) => {
              cb(ev.currentLanguage);
            };
            api.on("select-language", handler);
            return () => api.off("select-language", handler);
          }
          return selected;
        },
        setTranslations,
        getTranslations() {
          return localTranslations;
        },
        translate(tag, variables) {
          return localizer.localizeLocal(localTranslations, tag, variables);
        }
      };
    };
  };
}
function registerTile(ctx, name, value) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      tiles: withKey(state.registry.tiles, name, value)
    }
  }));
}
function unregisterTile(ctx, name) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      tiles: withoutKey(state.registry.tiles, name)
    }
  }));
}
const actions$4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  registerTile,
  unregisterTile
}, Symbol.toStringTag, { value: "Module" }));
const PiralDashboardContainer = getPiralComponent("DashboardContainer");
const PiralDashboardTile = getPiralComponent("DashboardTile");
const Dashboard$1 = (props) => {
  const tiles = useGlobalState((s) => s.registry.tiles);
  const { filter = () => true } = props;
  const children = Object.keys(tiles).filter((tile) => filter(tiles[tile])).map((tile) => {
    const { component: Component, preferences } = tiles[tile];
    const { initialColumns = 1, initialRows = 1, resizable = false } = preferences;
    return reactExports.createElement(
      PiralDashboardTile,
      { key: tile, columns: initialColumns, rows: initialRows, resizable, meta: preferences },
      reactExports.createElement(Component, { columns: initialColumns, rows: initialRows })
    );
  });
  return reactExports.createElement(PiralDashboardContainer, { ...props, children });
};
Dashboard$1.displayName = "Dashboard";
const DefaultContainer$1 = (props) => reactExports.createElement(ExtensionSlot, { name: "dashboard", params: props, empty: () => defaultRender(props.children, "default_dashboard") });
const DefaultTile = (props) => defaultRender(props.children);
function getPreferences(defaultPreferences, customPreferences = {}) {
  return {
    ...defaultPreferences,
    ...customPreferences
  };
}
function getTiles(items, defaultPreferences) {
  const tiles = {};
  let i = 0;
  for (const { component, preferences } of items) {
    tiles[`global-${i++}`] = {
      pilet: void 0,
      component,
      preferences: getPreferences(defaultPreferences, preferences)
    };
  }
  return tiles;
}
function withTiles(tiles) {
  return (state) => ({
    ...state,
    components: {
      DashboardTile: DefaultTile,
      DashboardContainer: DefaultContainer$1,
      ...state.components
    },
    registry: {
      ...state.registry,
      tiles
    }
  });
}
function withRoutes(routes) {
  return (state) => ({
    ...state,
    routes: {
      ...state.routes,
      ...routes.reduce((newRoutes, route) => {
        newRoutes[route] = Dashboard$1;
        return newRoutes;
      }, {})
    }
  });
}
function createDashboardApi(config = {}) {
  const { tiles = [], defaultPreferences = {}, routes = ["/"] } = config;
  return (context) => {
    context.defineActions(actions$4);
    context.dispatch(withAll(withTiles(getTiles(tiles, defaultPreferences)), withRootExtension("piral-dashboard", Dashboard$1), withRoutes(routes)));
    return (api, target) => {
      const pilet = target.name;
      let next2 = 0;
      return {
        registerTile(name, arg, preferences) {
          if (typeof name !== "string") {
            preferences = arg;
            arg = name;
            name = next2++;
          }
          const id = buildName(pilet, name);
          context.registerTile(id, {
            pilet,
            component: withApi(context, arg, api, "tile"),
            preferences: getPreferences(defaultPreferences, preferences)
          });
          return () => api.unregisterTile(name);
        },
        unregisterTile(name) {
          const id = buildName(pilet, name);
          context.unregisterTile(id);
        }
      };
    };
  };
}
function registerMenuItem(ctx, name, value) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      menuItems: withKey(state.registry.menuItems, name, value)
    }
  }));
}
function unregisterMenuItem(ctx, name) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      menuItems: withoutKey(state.registry.menuItems, name)
    }
  }));
}
const actions$3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  registerMenuItem,
  unregisterMenuItem
}, Symbol.toStringTag, { value: "Module" }));
const DefaultContainer = (props) => reactExports.createElement(ExtensionSlot, { name: `menu_${props.type}`, params: props, empty: () => defaultRender(props.children, "default_menu") });
const DefaultItem = (props) => defaultRender(props.children);
const PiralMenuContainer = getPiralComponent("MenuContainer");
const PiralMenuItem = getPiralComponent("MenuItem");
const Menu$1 = ({ type = "general" }) => {
  const menuItems = useGlobalState((s) => s.registry.menuItems);
  const renderItems = Object.keys(menuItems).filter((name) => menuItems[name].settings.type === type).map((name) => ({
    name,
    Component: menuItems[name].component,
    meta: menuItems[name].settings
  }));
  const children = renderItems.map(({ name, Component, meta }) => reactExports.createElement(
    PiralMenuItem,
    { key: name, type, meta },
    reactExports.createElement(Component, null)
  ));
  return reactExports.createElement(PiralMenuContainer, { type }, children);
};
Menu$1.displayName = "Menu";
function getSettings(defaultSettings, customSettings = {}) {
  return {
    type: "general",
    ...defaultSettings,
    ...customSettings
  };
}
function getMenuItems(items, defaultSettings) {
  const menuItems = {};
  let i = 0;
  for (const { component, settings } of items) {
    menuItems[`global-${i++}`] = {
      pilet: void 0,
      component,
      settings: getSettings(defaultSettings, settings)
    };
  }
  return menuItems;
}
function withMenu(menuItems) {
  return (state) => ({
    ...state,
    components: {
      MenuContainer: DefaultContainer,
      MenuItem: DefaultItem,
      ...state.components
    },
    registry: {
      ...state.registry,
      menuItems
    }
  });
}
function createMenuApi(config = {}) {
  const { items = [], defaultSettings = {} } = config;
  return (context) => {
    context.defineActions(actions$3);
    context.dispatch(withAll(withMenu(getMenuItems(items, defaultSettings)), withRootExtension("piral-menu", Menu$1)));
    return (api, target) => {
      const pilet = target.name;
      let next2 = 0;
      return {
        registerMenu(name, arg, settings) {
          if (typeof name !== "string") {
            settings = arg;
            arg = name;
            name = next2++;
          }
          const id = buildName(pilet, name);
          context.registerMenuItem(id, {
            pilet,
            component: withApi(context, arg, api, "menu"),
            settings: getSettings(defaultSettings, settings)
          });
          return () => api.unregisterMenu(name);
        },
        unregisterMenu(name) {
          const id = buildName(pilet, name);
          context.unregisterMenuItem(id);
        }
      };
    };
  };
}
function openNotification(ctx, dialog) {
  ctx.dispatch((state) => ({
    ...state,
    notifications: prependItem(state.notifications, dialog)
  }));
}
function closeNotification(ctx, dialog) {
  ctx.dispatch((state) => ({
    ...state,
    notifications: excludeOn(state.notifications, (notification) => notification.id === dialog.id)
  }));
}
const actions$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  closeNotification,
  openNotification
}, Symbol.toStringTag, { value: "Module" }));
const DefaultHost$1 = (props) => reactExports.createElement("div", { className: "piral-notifications-host", key: "default_notifications" }, props.children);
const DefaultToast = ({ children }) => defaultRender(children);
const PiralNotificationsHost = getPiralComponent("NotificationsHost");
const PiralNotificationsToast = getPiralComponent("NotificationsToast");
const Notifications = () => {
  const notifications2 = useGlobalState((s) => s.notifications);
  return reactExports.createElement(PiralNotificationsHost, null, notifications2.map(({ component: Component, close, options, id }) => reactExports.createElement(
    PiralNotificationsToast,
    { onClose: close, options, key: id },
    reactExports.createElement(Component, { onClose: close, options })
  )));
};
Notifications.displayName = "Notifications";
function isElement$2(element) {
  return reactExports.isValidElement(element);
}
function toComponent(component) {
  if (typeof component === "string") {
    const text = component;
    return () => defaultRender(text);
  } else if (reactExports.isValidElement(component)) {
    const element = component;
    return () => element;
  }
  return component;
}
function createNotification(context, id, content, defaultOptions, customOptions = {}) {
  const options = {
    ...defaultOptions,
    ...customOptions
  };
  const notification = {
    id,
    component: toComponent(content),
    options,
    close() {
      setTimeout(() => context.closeNotification(notification), 0);
    }
  };
  if (typeof options.autoClose === "number" && options.autoClose > 0) {
    setTimeout(notification.close, options.autoClose);
  }
  return notification;
}
function getNotifications(context, messages, defaultOptions) {
  const notifications2 = [];
  let i = 0;
  for (const { content, options } of messages) {
    notifications2.push(createNotification(context, `global-${i++}`, content, defaultOptions, options));
  }
  return notifications2;
}
function withNotifications(notifications2) {
  return (state) => ({
    ...state,
    components: {
      NotificationsHost: DefaultHost$1,
      NotificationsToast: DefaultToast,
      ...state.components
    },
    notifications: notifications2
  });
}
function createNotificationsApi(config = {}) {
  const { defaultOptions = {}, selectId = () => `${~~(Math.random() * 1e4)}`, messages = [] } = config;
  return (context) => {
    context.defineActions(actions$2);
    context.dispatch(withAll(withNotifications(getNotifications(context, messages, defaultOptions)), withRootExtension("piral-notifications", Notifications)));
    return (api) => ({
      showNotification(content, customOptions) {
        const Component = typeof content === "string" ? content : isElement$2(content) ? content : withApi(context, content, api, "extension");
        const notification = createNotification(context, selectId(), Component, defaultOptions, customOptions);
        context.openNotification(notification);
        return notification.close;
      }
    });
  };
}
function openModal$1(ctx, dialog) {
  ctx.dispatch((state) => ({
    ...state,
    modals: prependItem(state.modals, dialog)
  }));
}
function closeModal$1(ctx, dialog) {
  ctx.dispatch((state) => ({
    ...state,
    modals: excludeOn(state.modals, (modal) => modal.id === dialog.id)
  }));
}
function registerModal(ctx, name, value) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      modals: withKey(state.registry.modals, name, value)
    }
  }));
}
function unregisterModal(ctx, name) {
  ctx.dispatch((state) => ({
    ...state,
    registry: {
      ...state.registry,
      modals: withoutKey(state.registry.modals, name)
    }
  }));
}
const actions$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  closeModal: closeModal$1,
  openModal: openModal$1,
  registerModal,
  unregisterModal
}, Symbol.toStringTag, { value: "Module" }));
const DefaultHost = (props) => reactExports.createElement("div", { className: "piral-modals-host" }, props.open && reactExports.createElement("div", { className: "piral-modals-overlay" }, props.children));
const DefaultDialog = (props) => defaultRender(props.children);
const PiralModalsHost = getPiralComponent("ModalsHost");
const PiralModalsDialog = getPiralComponent("ModalsDialog");
function closeAll(modals2) {
  modals2.forEach((m2) => m2.close());
}
function findModal(modals2, name) {
  if (name) {
    const [modal] = Object.keys(modals2).filter((m2) => modals2[m2].name === name).map((m2) => modals2[m2]);
    return modal;
  }
  return void 0;
}
const Modals = () => {
  const modals2 = useGlobalState((s) => s.registry.modals);
  const dialogs = useGlobalState((s) => s.modals);
  const close = () => closeAll(dialogs);
  const children = dialogs.map((n) => {
    const reg = modals2[n.name] || findModal(modals2, n.alternative);
    const Component = reg && reg.component;
    const defaults = reg && reg.defaults;
    const options = {
      ...defaults,
      ...n.options
    };
    return Component && reactExports.createElement(
      PiralModalsDialog,
      { ...n, options, defaults: reg.defaults, layout: reg.layout, key: n.name },
      reactExports.createElement(Component, { onClose: n.close, options })
    );
  }).filter(Boolean);
  const open = children.length > 0;
  return reactExports.createElement(PiralModalsHost, { open, close }, children);
};
Modals.displayName = "Modals";
function getModalDialogs(dialogs) {
  const modals2 = {};
  for (const { name, component, defaults, layout: layout2 = {} } of dialogs) {
    modals2[`global-${name}`] = {
      pilet: void 0,
      name,
      component,
      defaults,
      layout: layout2
    };
  }
  return modals2;
}
function withModals(modals2) {
  return (state) => ({
    ...state,
    components: {
      ModalsHost: DefaultHost,
      ModalsDialog: DefaultDialog,
      ...state.components
    },
    registry: {
      ...state.registry,
      modals: modals2
    },
    modals: []
  });
}
function createModalsApi(config = {}) {
  const { dialogs = [], selectId = (name) => `${name}-${~~(Math.random() * 1e4)}` } = config;
  return (context) => {
    context.defineActions(actions$1);
    context.dispatch(withAll(withModals(getModalDialogs(dialogs)), withRootExtension("piral-modals", Modals)));
    return (api, target) => {
      const pilet = target.name;
      return {
        showModal(simpleName, options) {
          const name = buildName(pilet, simpleName);
          const dialog = {
            id: selectId(name),
            name,
            alternative: simpleName,
            options,
            close() {
              context.closeModal(dialog);
            }
          };
          context.openModal(dialog);
          return dialog.close;
        },
        registerModal(name, arg, defaults, layout2 = {}) {
          const id = buildName(pilet, name);
          context.registerModal(id, {
            pilet,
            name,
            component: withApi(context, arg, api, "modal"),
            defaults,
            layout: layout2
          });
          return () => api.unregisterModal(name);
        },
        unregisterModal(name) {
          const id = buildName(pilet, name);
          context.unregisterModal(id);
        }
      };
    };
  };
}
function createFeed(ctx, id) {
  ctx.dispatch((state) => ({
    ...state,
    feeds: withKey(state.feeds, id, {
      data: void 0,
      error: void 0,
      loaded: false,
      loading: false
    })
  }));
}
function destroyFeed(ctx, id) {
  ctx.dispatch((state) => ({
    ...state,
    feeds: withoutKey(state.feeds, id)
  }));
}
function loadFeed(ctx, options) {
  const { id } = options;
  ctx.dispatch((state) => ({
    ...state,
    feeds: withKey(state.feeds, id, {
      data: void 0,
      error: void 0,
      loaded: false,
      loading: true
    })
  }));
  return options.initialize().then((baseData) => {
    loadedFeed(ctx, id, baseData, void 0);
    options.dispose = options.connect((item) => {
      updateFeed(ctx, id, item, options.update);
    });
  }, (err) => loadedFeed(ctx, id, void 0, err));
}
function loadedFeed(ctx, id, data, error2) {
  ctx.dispatch((state) => ({
    ...state,
    feeds: withKey(state.feeds, id, {
      loading: false,
      loaded: true,
      error: error2,
      data
    })
  }));
}
function updateFeed(ctx, id, item, reducer2) {
  const feed = ctx.readState((state) => state.feeds[id]);
  const result = reducer2(feed.data, item);
  if (result instanceof Promise) {
    return result.then((data) => loadedFeed(ctx, id, data, void 0)).catch((error2) => loadedFeed(ctx, id, void 0, error2));
  } else if (result !== feed.data) {
    loadedFeed(ctx, id, result, void 0);
  }
}
const actions = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  createFeed,
  destroyFeed,
  loadFeed,
  loadedFeed,
  updateFeed
}, Symbol.toStringTag, { value: "Module" }));
function useFeed(options) {
  const { loaded, loading, error: error2, data } = useGlobalState((s) => s.feeds[options.id]);
  const load = useAction("loadFeed");
  reactExports.useEffect(() => {
    if (!loaded && !loading) {
      load(options);
    }
  }, [loaded]);
  return [loaded, data, error2];
}
function withFeed(Component, options) {
  const FeedView = (props) => {
    const [loaded, data, error2] = useFeed(options);
    if (!loaded) {
      return reactExports.createElement(RegisteredLoadingIndicator, null);
    } else if (data) {
      return reactExports.createElement(Component, { ...props, data });
    } else {
      return reactExports.createElement(RegisteredErrorInfo, { type: "feed", error: error2 });
    }
  };
  FeedView.displayName = `FeedView_${options.id}`;
  return FeedView;
}
const noop$3 = () => {
};
function createFeedOptions(id, resolver) {
  if (isfunc(resolver)) {
    return {
      id,
      initialize() {
        return resolver();
      },
      connect() {
        return noop$3;
      },
      update(data) {
        return Promise.resolve(data);
      },
      immediately: false,
      reducers: {}
    };
  } else {
    return {
      id,
      initialize() {
        return resolver.initialize();
      },
      connect(cb) {
        if (typeof resolver.connect === "function") {
          return resolver.connect(cb);
        } else {
          return noop$3;
        }
      },
      update(data, item) {
        if (typeof resolver.update === "function") {
          return resolver.update(data, item);
        } else {
          return Promise.resolve(data);
        }
      },
      immediately: resolver.immediately,
      reducers: resolver.reducers || {}
    };
  }
}
function createFeedsApi(config = {}) {
  return (context) => {
    context.defineActions(actions);
    context.dispatch((state) => ({
      ...state,
      feeds: {}
    }));
    return (_, target) => {
      let feeds = 0;
      return {
        createConnector(resolver) {
          const id = buildName(target.name, feeds++);
          const options = createFeedOptions(id, resolver);
          const invalidate = () => {
            var _a;
            (_a = options.dispose) == null ? void 0 : _a.call(options);
            context.createFeed(options.id);
          };
          if (options.immediately) {
            context.loadFeed(options);
          } else {
            invalidate();
          }
          const connect = (component) => withFeed(component, options);
          Object.keys(options.reducers).forEach((type) => {
            const reducer2 = options.reducers[type];
            if (typeof reducer2 === "function") {
              connect[type] = (...args) => {
                context.updateFeed(id, args, (data, item) => reducer2.call(connect, data, ...item));
              };
            }
          });
          connect.invalidate = invalidate;
          return connect;
        }
      };
    };
  };
}
function createStandardApi(settings = {}) {
  const { locale = void 0, dashboard = void 0, menu = void 0, notifications: notifications2 = void 0, modals: modals2 = void 0, feeds = void 0 } = settings;
  return [
    locale !== false && createLocaleApi(locale),
    dashboard !== false && createDashboardApi(dashboard),
    menu !== false && createMenuApi(menu),
    notifications2 !== false && createNotificationsApi(notifications2),
    modals2 !== false && createModalsApi(modals2),
    feeds !== false && createFeedsApi(feeds)
  ].filter(Boolean);
}
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";
function assignRef$1(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}
function useCallbackRef$1(initialValue, callback) {
  var ref = reactExports.useState(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef$1(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef$1(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef$1(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef$1(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware2) {
  if (middleware2 === void 0) {
    middleware2 = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware2(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === void 0) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options);
  return medium;
}
var SideCar$1 = function(_a) {
  var sideCar = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return reactExports.createElement(Target, __assign({}, rest));
};
SideCar$1.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar$1;
}
var effectCar = createSidecarMedium();
var nothing = function() {
  return;
};
var RemoveScroll$1 = reactExports.forwardRef(function(props, parentRef) {
  var ref = reactExports.useRef(null);
  var _a = reactExports.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container2 = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign(__assign({}, rest), callbacks);
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    enabled && reactExports.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
    forwardProps ? reactExports.cloneElement(reactExports.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : reactExports.createElement(Container2, __assign({}, containerProps, { className, ref: containerRef }), children)
  );
});
RemoveScroll$1.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll$1.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return void 0;
};
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles2, isDynamic) {
    reactExports.useEffect(function() {
      sheet.add(styles2);
      return function() {
        sheet.remove();
      };
    }, [styles2 && isDynamic]);
  };
};
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a) {
    var styles2 = _a.styles, dynamic = _a.dynamic;
    useStyle(styles2, dynamic);
    return null;
  };
  return Sheet;
};
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse$1 = function(x) {
  return parseInt(x || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs2 = window.getComputedStyle(document.body);
  var left = cs2[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs2[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs2[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse$1(left), parse$1(top), parse$1(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a, allowRelative, gapMode, important) {
  var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
  if (gapMode === void 0) {
    gapMode = "margin";
  }
  return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
};
var getCurrentUseCounter = function() {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function() {
  reactExports.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a) {
  var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? "margin" : _b;
  useLockAttribute();
  var gap = reactExports.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return reactExports.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    var options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var nonPassive = passiveSupported ? { passive: false } : false;
var alwaysContainsScroll = function(node2) {
  return node2.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node2, overflow) {
  if (!(node2 instanceof Element)) {
    return false;
  }
  var styles2 = window.getComputedStyle(node2);
  return (
    // not-not-scrollable
    styles2[overflow] !== "hidden" && // contains scroll inside self
    !(styles2.overflowY === styles2.overflowX && !alwaysContainsScroll(node2) && styles2[overflow] === "visible")
  );
};
var elementCouldBeVScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowY");
};
var elementCouldBeHScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowX");
};
var locationCouldBeScrolled = function(axis, node2) {
  var ownerDocument = node2.ownerDocument;
  var current = node2;
  do {
    if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
      current = current.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];
      if (scrollHeight > clientHeight) {
        return true;
      }
    }
    current = current.parentNode;
  } while (current && current !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a) {
  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position2 = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (
    // portaled content
    !targetInLock && target !== document.body || // self content
    targetInLock && (endTarget.contains(target) || endTarget === target)
  );
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x, y2) {
  return x[0] === y2[0] && x[1] === y2[1];
};
var generateStyle = function(id) {
  return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = reactExports.useRef([]);
  var touchStartRef = reactExports.useRef([0, 0]);
  var activeAxis = reactExports.useRef();
  var id = reactExports.useState(idCounter++)[0];
  var Style2 = reactExports.useState(styleSingleton)[0];
  var lastProps = reactExports.useRef(props);
  reactExports.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  reactExports.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = reactExports.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = reactExports.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node2) {
        return node2.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = reactExports.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = reactExports.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = void 0;
  }, []);
  var scrollWheel = reactExports.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = reactExports.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  reactExports.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var removeScrollBar = props.removeScrollBar, inert = props.inert;
  return reactExports.createElement(
    reactExports.Fragment,
    null,
    inert ? reactExports.createElement(Style2, { styles: generateStyle(id) }) : null,
    removeScrollBar ? reactExports.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
  );
}
function getOutermostShadowParent(node2) {
  var shadowParent = null;
  while (node2 !== null) {
    if (node2 instanceof ShadowRoot) {
      shadowParent = node2.host;
      node2 = node2.host;
    }
    node2 = node2.parentNode;
  }
  return shadowParent;
}
const SideCar = exportSidecar(effectCar, RemoveScrollSideCar);
var ReactRemoveScroll = reactExports.forwardRef(function(props, ref) {
  return reactExports.createElement(RemoveScroll$1, __assign({}, props, { ref, sideCar: SideCar }));
});
ReactRemoveScroll.classNames = RemoveScroll$1.classNames;
const RemoveScroll = ReactRemoveScroll;
function keys(object) {
  return Object.keys(object);
}
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function deepMerge(target, source) {
  const result = { ...target };
  const _source = source;
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isObject(_source[key])) {
        if (!(key in target)) {
          result[key] = _source[key];
        } else {
          result[key] = deepMerge(result[key], _source[key]);
        }
      } else {
        result[key] = _source[key];
      }
    });
  }
  return result;
}
function camelToKebabCase(value) {
  return value.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);
}
function getTransformedScaledValue(value) {
  var _a;
  if (typeof value !== "string" || !value.includes("var(--mantine-scale)")) {
    return value;
  }
  return (_a = value.match(/^calc\((.*?)\)$/)) == null ? void 0 : _a[1].split("*")[0].trim();
}
function px(value) {
  const transformedValue = getTransformedScaledValue(value);
  if (typeof transformedValue === "number") {
    return transformedValue;
  }
  if (typeof transformedValue === "string") {
    if (transformedValue.includes("calc") || transformedValue.includes("var")) {
      return transformedValue;
    }
    if (transformedValue.includes("px")) {
      return Number(transformedValue.replace("px", ""));
    }
    if (transformedValue.includes("rem")) {
      return Number(transformedValue.replace("rem", "")) * 16;
    }
    if (transformedValue.includes("em")) {
      return Number(transformedValue.replace("em", "")) * 16;
    }
    return Number(transformedValue);
  }
  return NaN;
}
function scaleRem(remValue) {
  if (remValue === "0rem") {
    return "0rem";
  }
  return `calc(${remValue} * var(--mantine-scale))`;
}
function createConverter(units, { shouldScale = false } = {}) {
  function converter(value) {
    if (value === 0 || value === "0") {
      return `0${units}`;
    }
    if (typeof value === "number") {
      const val = `${value / 16}${units}`;
      return shouldScale ? scaleRem(val) : val;
    }
    if (typeof value === "string") {
      if (value === "") {
        return value;
      }
      if (value.startsWith("calc(") || value.startsWith("clamp(") || value.includes("rgba(")) {
        return value;
      }
      if (value.includes(",")) {
        return value.split(",").map((val) => converter(val)).join(",");
      }
      if (value.includes(" ")) {
        return value.split(" ").map((val) => converter(val)).join(" ");
      }
      if (value.includes(units)) {
        return shouldScale ? scaleRem(value) : value;
      }
      const replaced = value.replace("px", "");
      if (!Number.isNaN(Number(replaced))) {
        const val = `${Number(replaced) / 16}${units}`;
        return shouldScale ? scaleRem(val) : val;
      }
    }
    return value;
  }
  return converter;
}
const rem = createConverter("rem", { shouldScale: true });
const em = createConverter("em");
function filterProps(props) {
  return Object.keys(props).reduce((acc, key) => {
    if (props[key] !== void 0) {
      acc[key] = props[key];
    }
    return acc;
  }, {});
}
function isNumberLike(value) {
  if (typeof value === "number") {
    return true;
  }
  if (typeof value === "string") {
    if (value.startsWith("calc(") || value.startsWith("var(") || value.includes(" ") && value.trim() !== "") {
      return true;
    }
    const cssUnitsRegex = /^[+-]?[0-9]+(\.[0-9]+)?(px|em|rem|ex|ch|lh|rlh|vw|vh|vmin|vmax|vb|vi|svw|svh|lvw|lvh|dvw|dvh|cm|mm|in|pt|pc|q|cqw|cqh|cqi|cqb|cqmin|cqmax|%)?$/;
    const values2 = value.trim().split(/\s+/);
    return values2.every((val) => cssUnitsRegex.test(val));
  }
  return false;
}
function isElement$1(value) {
  if (Array.isArray(value) || value === null) {
    return false;
  }
  if (typeof value === "object") {
    if (value.type === reactExports.Fragment) {
      return false;
    }
    return true;
  }
  return false;
}
var jsxRuntime = { exports: {} };
var reactJsxRuntime_development = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  (function() {
    var React2 = reactExports;
    var REACT_ELEMENT_TYPE2 = Symbol.for("react.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = "@@iterator";
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== "object") {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === "function") {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error2(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      {
        var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame2.getStackAddendum();
        if (stack !== "") {
          format += "%s";
          args = args.concat([stack]);
        }
        var argsWithFormat = args.map(function(item) {
          return String(item);
        });
        argsWithFormat.unshift("Warning: " + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
    }
    function isValidElementType(type) {
      if (typeof type === "string" || typeof type === "function") {
        return true;
      }
      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (typeof type === "object" && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || "";
      return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
      return type.displayName || "Context";
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      {
        if (typeof type.tag === "number") {
          error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        }
      }
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + ".Consumer";
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, "ForwardRef");
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return getComponentNameFromType(init(payload));
            } catch (x) {
              return null;
            }
          }
        }
      }
      return null;
    }
    var assign2 = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd;
          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          };
          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: assign2({}, props, {
              value: prevLog
            }),
            info: assign2({}, props, {
              value: prevInfo
            }),
            warn: assign2({}, props, {
              value: prevWarn
            }),
            error: assign2({}, props, {
              value: prevError
            }),
            group: assign2({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign2({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign2({}, props, {
              value: prevGroupEnd
            })
          });
        }
        if (disabledDepth < 0) {
          error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix2;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix2 === void 0) {
          try {
            throw Error();
          } catch (x) {
            var match2 = x.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match2 && match2[1] || "";
          }
        }
        return "\n" + prefix2 + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== void 0) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        if (construct) {
          var Fake = function() {
            throw Error();
          };
          Object.defineProperty(Fake.prototype, "props", {
            set: function() {
              throw Error();
            }
          });
          if (typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          var sampleLines = sample.stack.split("\n");
          var controlLines = control.stack.split("\n");
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--;
                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    if (fn.displayName && _frame.includes("<anonymous>")) {
                      _frame = _frame.replace("<anonymous>", fn.displayName);
                    }
                    {
                      if (typeof fn === "function") {
                        componentFrameCache.set(fn, _frame);
                      }
                    }
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      }
      var name = fn ? fn.displayName || fn.name : "";
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
      {
        if (typeof fn === "function") {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE: {
            var lazyComponent = type;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            try {
              return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
            } catch (x) {
            }
          }
        }
      }
      return "";
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values2, location2, componentName2, element) {
      {
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName2 || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName2, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName2 || "React class", location2, typeSpecName, typeof error$1);
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error2("Failed %s type: %s", location2, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
      return isArrayImpl(a);
    }
    function typeName(value) {
      {
        var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
        return type;
      }
    }
    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      return "" + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
          return testStringCoercion(value);
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, "ref")) {
          var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== void 0;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, "key")) {
          var getter = Object.getOwnPropertyDescriptor(config, "key").get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== void 0;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self2) {
      {
        if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
          var componentName2 = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName2]) {
            error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName2] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    var ReactElement = function(type, key, ref, self2, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE2,
        // Built-in properties that belong on the element
        type,
        key,
        ref,
        props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        element._store = {};
        Object.defineProperty(element._store, "validated", {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        });
        Object.defineProperty(element, "_self", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self2
        });
        Object.defineProperty(element, "_source", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    function jsxDEV(type, config, maybeKey, source, self2) {
      {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== void 0) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = "" + maybeKey;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = "" + config.key;
        }
        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self2);
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
        if (type && type.defaultProps) {
          var defaultProps2 = type.defaultProps;
          for (propName in defaultProps2) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps2[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function isValidElement(object) {
      {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE2;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== void 0) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
    }
    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    function validateChildKeys(node2, parentType) {
      {
        if (typeof node2 !== "object") {
          return;
        }
        if (isArray(node2)) {
          for (var i = 0; i < node2.length; i++) {
            var child = node2[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node2)) {
          if (node2._store) {
            node2._store.validated = true;
          }
        } else if (node2) {
          var iteratorFn = getIteratorFn(node2);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node2.entries) {
              var iterator = iteratorFn.call(node2);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === void 0 || typeof type === "string") {
          return;
        }
        var propTypes;
        if (typeof type === "function") {
          propTypes = type.propTypes;
        } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, "prop", name, element);
        } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true;
          var _name = getComponentNameFromType(type);
          error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
        }
        if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
          error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
    }
    function validateFragmentProps(fragment) {
      {
        var keys2 = Object.keys(fragment.props);
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          if (key !== "children" && key !== "key") {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error2("Invalid attribute `ref` supplied to `React.Fragment`.");
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
      {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE2) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self2);
        if (element == null) {
          return element;
        }
        if (validType) {
          var children = props.children;
          if (children !== void 0) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        {
          if (hasOwnProperty.call(props, "key")) {
            var componentName2 = getComponentNameFromType(type);
            var keys2 = Object.keys(props).filter(function(k2) {
              return k2 !== "key";
            });
            var beforeExample = keys2.length > 0 ? "{key: someKey, " + keys2.join(": ..., ") + ": ...}" : "{key: someKey}";
            if (!didWarnAboutKeySpread[componentName2 + beforeExample]) {
              var afterExample = keys2.length > 0 ? "{" + keys2.join(": ..., ") + ": ...}" : "{}";
              error2('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName2, afterExample, componentName2);
              didWarnAboutKeySpread[componentName2 + beforeExample] = true;
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    }
    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }
    var jsx = jsxWithValidationDynamic;
    var jsxs = jsxWithValidationStatic;
    reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
    reactJsxRuntime_development.jsx = jsx;
    reactJsxRuntime_development.jsxs = jsxs;
  })();
}
{
  jsxRuntime.exports = reactJsxRuntime_development;
}
var jsxRuntimeExports = jsxRuntime.exports;
function createSafeContext(errorMessage) {
  const Context = reactExports.createContext(null);
  const useSafeContext = () => {
    const ctx = reactExports.useContext(Context);
    if (ctx === null) {
      throw new Error(errorMessage);
    }
    return ctx;
  };
  const Provider = ({ children, value }) => /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, { value, children });
  return [Provider, useSafeContext];
}
function createOptionalContext(initialValue = null) {
  const Context = reactExports.createContext(initialValue);
  const useOptionalContext = () => reactExports.useContext(Context);
  const Provider = ({ children, value }) => /* @__PURE__ */ jsxRuntimeExports.jsx(Context.Provider, { value, children });
  return [Provider, useOptionalContext];
}
function findElementAncestor(element, selector) {
  let _element = element;
  while ((_element = _element.parentElement) && !_element.matches(selector)) {
  }
  return _element;
}
function getPreviousIndex$1(current, elements, loop) {
  for (let i = current - 1; i >= 0; i -= 1) {
    if (!elements[i].disabled) {
      return i;
    }
  }
  if (loop) {
    for (let i = elements.length - 1; i > -1; i -= 1) {
      if (!elements[i].disabled) {
        return i;
      }
    }
  }
  return current;
}
function getNextIndex$1(current, elements, loop) {
  for (let i = current + 1; i < elements.length; i += 1) {
    if (!elements[i].disabled) {
      return i;
    }
  }
  if (loop) {
    for (let i = 0; i < elements.length; i += 1) {
      if (!elements[i].disabled) {
        return i;
      }
    }
  }
  return current;
}
function onSameLevel(target, sibling, parentSelector) {
  return findElementAncestor(target, parentSelector) === findElementAncestor(sibling, parentSelector);
}
function createScopedKeydownHandler({
  parentSelector,
  siblingSelector,
  onKeyDown,
  loop = true,
  activateOnFocus = false,
  dir = "rtl",
  orientation
}) {
  return (event) => {
    var _a;
    onKeyDown == null ? void 0 : onKeyDown(event);
    const elements = Array.from(
      ((_a = findElementAncestor(event.currentTarget, parentSelector)) == null ? void 0 : _a.querySelectorAll(
        siblingSelector
      )) || []
    ).filter((node2) => onSameLevel(event.currentTarget, node2, parentSelector));
    const current = elements.findIndex((el) => event.currentTarget === el);
    const _nextIndex = getNextIndex$1(current, elements, loop);
    const _previousIndex = getPreviousIndex$1(current, elements, loop);
    const nextIndex = dir === "rtl" ? _previousIndex : _nextIndex;
    const previousIndex = dir === "rtl" ? _nextIndex : _previousIndex;
    switch (event.key) {
      case "ArrowRight": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[nextIndex].focus();
          activateOnFocus && elements[nextIndex].click();
        }
        break;
      }
      case "ArrowLeft": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[previousIndex].focus();
          activateOnFocus && elements[previousIndex].click();
        }
        break;
      }
      case "ArrowUp": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_previousIndex].focus();
          activateOnFocus && elements[_previousIndex].click();
        }
        break;
      }
      case "ArrowDown": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_nextIndex].focus();
          activateOnFocus && elements[_nextIndex].click();
        }
        break;
      }
      case "Home": {
        event.stopPropagation();
        event.preventDefault();
        !elements[0].disabled && elements[0].focus();
        break;
      }
      case "End": {
        event.stopPropagation();
        event.preventDefault();
        const last = elements.length - 1;
        !elements[last].disabled && elements[last].focus();
        break;
      }
    }
  };
}
const elevations = {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400,
  max: 9999
};
function getDefaultZIndex(level) {
  return elevations[level];
}
const noop$2 = () => {
};
function closeOnEscape(callback, options = { active: true }) {
  if (typeof callback !== "function" || !options.active) {
    return options.onKeyDown || noop$2;
  }
  return (event) => {
    var _a;
    if (event.key === "Escape") {
      callback(event);
      (_a = options.onTrigger) == null ? void 0 : _a.call(options);
    }
  };
}
function getSize(size2, prefix2 = "size", convertToRem = true) {
  if (size2 === void 0) {
    return void 0;
  }
  return isNumberLike(size2) ? convertToRem ? rem(size2) : size2 : `var(--${prefix2}-${size2})`;
}
function getSpacing(size2) {
  return getSize(size2, "mantine-spacing");
}
function getRadius(size2) {
  if (size2 === void 0) {
    return "var(--mantine-radius-default)";
  }
  return getSize(size2, "mantine-radius");
}
function getFontSize(size2) {
  return getSize(size2, "mantine-font-size");
}
function getLineHeight(size2) {
  return getSize(size2, "mantine-line-height", false);
}
function getShadow(size2) {
  if (!size2) {
    return void 0;
  }
  return getSize(size2, "mantine-shadow", false);
}
function createEventHandler(parentEventHandler, eventHandler) {
  return (event) => {
    parentEventHandler == null ? void 0 : parentEventHandler(event);
    eventHandler == null ? void 0 : eventHandler(event);
  };
}
function getBreakpointValue$2(breakpoint, breakpoints) {
  if (breakpoint in breakpoints) {
    return px(breakpoints[breakpoint]);
  }
  return px(breakpoint);
}
function getSortedBreakpoints(values2, breakpoints) {
  const convertedBreakpoints = values2.map((breakpoint) => ({
    value: breakpoint,
    px: getBreakpointValue$2(breakpoint, breakpoints)
  }));
  convertedBreakpoints.sort((a, b2) => a.px - b2.px);
  return convertedBreakpoints;
}
function getBaseValue$1(value) {
  if (typeof value === "object" && value !== null) {
    if ("base" in value) {
      return value.base;
    }
    return void 0;
  }
  return value;
}
function getContextItemIndex(elementSelector, parentSelector, node2) {
  var _a;
  if (!node2) {
    return null;
  }
  return Array.from(
    ((_a = findElementAncestor(node2, parentSelector)) == null ? void 0 : _a.querySelectorAll(elementSelector)) || []
  ).findIndex((element) => element === node2);
}
function useHovered() {
  const [hovered, setHovered] = reactExports.useState(-1);
  const resetHovered = () => setHovered(-1);
  return [hovered, { setHovered, resetHovered }];
}
function randomId(prefix2 = "mantine-") {
  return `${prefix2}${Math.random().toString(36).slice(2, 11)}`;
}
function useCallbackRef(callback) {
  const callbackRef = reactExports.useRef(callback);
  reactExports.useEffect(() => {
    callbackRef.current = callback;
  });
  return reactExports.useMemo(() => (...args) => {
    var _a;
    return (_a = callbackRef.current) == null ? void 0 : _a.call(callbackRef, ...args);
  }, []);
}
const noop$1 = () => {
};
function useDebouncedCallback(callback, options) {
  const delay = typeof options === "number" ? options : options.delay;
  const flushOnUnmount = typeof options === "number" ? false : options.flushOnUnmount;
  const handleCallback = useCallbackRef(callback);
  const debounceTimerRef = reactExports.useRef(0);
  const lastCallback = Object.assign(
    reactExports.useCallback(
      (...args) => {
        window.clearTimeout(debounceTimerRef.current);
        const flush = () => {
          if (debounceTimerRef.current !== 0) {
            debounceTimerRef.current = 0;
            handleCallback(...args);
          }
        };
        lastCallback.flush = flush;
        debounceTimerRef.current = window.setTimeout(flush, delay);
      },
      [handleCallback, delay]
    ),
    { flush: noop$1 }
  );
  reactExports.useEffect(
    () => () => {
      window.clearTimeout(debounceTimerRef.current);
      if (flushOnUnmount) {
        lastCallback.flush();
      }
    },
    [lastCallback, flushOnUnmount]
  );
  return lastCallback;
}
const DEFAULT_EVENTS = ["mousedown", "touchstart"];
function useClickOutside(handler, events, nodes) {
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    const listener = (event) => {
      const { target } = event ?? {};
      if (Array.isArray(nodes)) {
        const shouldIgnore = (target == null ? void 0 : target.hasAttribute("data-ignore-outside-clicks")) || !document.body.contains(target) && target.tagName !== "HTML";
        const shouldTrigger = nodes.every((node2) => !!node2 && !event.composedPath().includes(node2));
        shouldTrigger && !shouldIgnore && handler();
      } else if (ref.current && !ref.current.contains(target)) {
        handler();
      }
    };
    (events || DEFAULT_EVENTS).forEach((fn) => document.addEventListener(fn, listener));
    return () => {
      (events || DEFAULT_EVENTS).forEach((fn) => document.removeEventListener(fn, listener));
    };
  }, [ref, handler, nodes]);
  return ref;
}
function useClipboard({ timeout = 2e3 } = {}) {
  const [error2, setError] = reactExports.useState(null);
  const [copied, setCopied] = reactExports.useState(false);
  const [copyTimeout, setCopyTimeout] = reactExports.useState(null);
  const handleCopyResult = (value) => {
    window.clearTimeout(copyTimeout);
    setCopyTimeout(window.setTimeout(() => setCopied(false), timeout));
    setCopied(value);
  };
  const copy2 = (valueToCopy) => {
    if ("clipboard" in navigator) {
      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch((err) => setError(err));
    } else {
      setError(new Error("useClipboard: navigator.clipboard is not supported"));
    }
  };
  const reset = () => {
    setCopied(false);
    setError(null);
    window.clearTimeout(copyTimeout);
  };
  return { copy: copy2, reset, error: error2, copied };
}
function attachMediaListener(query, callback) {
  try {
    query.addEventListener("change", callback);
    return () => query.removeEventListener("change", callback);
  } catch (e) {
    query.addListener(callback);
    return () => query.removeListener(callback);
  }
}
function getInitialValue(query, initialValue) {
  if (typeof window !== "undefined" && "matchMedia" in window) {
    return window.matchMedia(query).matches;
  }
  return false;
}
function useMediaQuery(query, initialValue, { getInitialValueInEffect } = {
  getInitialValueInEffect: true
}) {
  const [matches, setMatches] = reactExports.useState(
    getInitialValueInEffect ? initialValue : getInitialValue(query)
  );
  const queryRef = reactExports.useRef(null);
  reactExports.useEffect(() => {
    if ("matchMedia" in window) {
      queryRef.current = window.matchMedia(query);
      setMatches(queryRef.current.matches);
      return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));
    }
    return void 0;
  }, [query]);
  return matches;
}
function useColorScheme(initialValue, options) {
  return useMediaQuery("(prefers-color-scheme: dark)", initialValue === "dark", options) ? "dark" : "light";
}
const useIsomorphicEffect$1 = typeof document !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function useDidUpdate(fn, dependencies) {
  const mounted = reactExports.useRef(false);
  reactExports.useEffect(
    () => () => {
      mounted.current = false;
    },
    []
  );
  reactExports.useEffect(() => {
    if (mounted.current) {
      return fn();
    }
    mounted.current = true;
    return void 0;
  }, dependencies);
}
function useFocusReturn({ opened, shouldReturnFocus = true }) {
  const lastActiveElement = reactExports.useRef(null);
  const returnFocus = () => {
    var _a;
    if (lastActiveElement.current && "focus" in lastActiveElement.current && typeof lastActiveElement.current.focus === "function") {
      (_a = lastActiveElement.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  };
  useDidUpdate(() => {
    let timeout = -1;
    const clearFocusTimeout = (event) => {
      if (event.key === "Tab") {
        window.clearTimeout(timeout);
      }
    };
    document.addEventListener("keydown", clearFocusTimeout);
    if (opened) {
      lastActiveElement.current = document.activeElement;
    } else if (shouldReturnFocus) {
      timeout = window.setTimeout(returnFocus, 10);
    }
    return () => {
      window.clearTimeout(timeout);
      document.removeEventListener("keydown", clearFocusTimeout);
    };
  }, [opened, shouldReturnFocus]);
  return returnFocus;
}
const TABBABLE_NODES = /input|select|textarea|button|object/;
const FOCUS_SELECTOR = "a, input, select, textarea, button, object, [tabindex]";
function hidden(element) {
  return element.style.display === "none";
}
function visible(element) {
  const isHidden = element.getAttribute("aria-hidden") || element.getAttribute("hidden") || element.getAttribute("type") === "hidden";
  if (isHidden) {
    return false;
  }
  let parentElement = element;
  while (parentElement) {
    if (parentElement === document.body || parentElement.nodeType === 11) {
      break;
    }
    if (hidden(parentElement)) {
      return false;
    }
    parentElement = parentElement.parentNode;
  }
  return true;
}
function getElementTabIndex(element) {
  let tabIndex = element.getAttribute("tabindex");
  if (tabIndex === null) {
    tabIndex = void 0;
  }
  return parseInt(tabIndex, 10);
}
function focusable(element) {
  const nodeName = element.nodeName.toLowerCase();
  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));
  const res = (
    // @ts-expect-error function accepts any html element but if it is a button, it should not be disabled to trigger the condition
    TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN)
  );
  return res && visible(element);
}
function tabbable(element) {
  const tabIndex = getElementTabIndex(element);
  const isTabIndexNaN = Number.isNaN(tabIndex);
  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);
}
function findTabbableDescendants(element) {
  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);
}
function scopeTab(node2, event) {
  const tabbable2 = findTabbableDescendants(node2);
  if (!tabbable2.length) {
    event.preventDefault();
    return;
  }
  const finalTabbable = tabbable2[event.shiftKey ? 0 : tabbable2.length - 1];
  const root2 = node2.getRootNode();
  let leavingFinalTabbable = finalTabbable === root2.activeElement || node2 === root2.activeElement;
  const activeElement2 = root2.activeElement;
  const activeElementIsRadio = activeElement2.tagName === "INPUT" && activeElement2.getAttribute("type") === "radio";
  if (activeElementIsRadio) {
    const activeRadioGroup = tabbable2.filter(
      (element) => element.getAttribute("type") === "radio" && element.getAttribute("name") === activeElement2.getAttribute("name")
    );
    leavingFinalTabbable = activeRadioGroup.includes(finalTabbable);
  }
  if (!leavingFinalTabbable) {
    return;
  }
  event.preventDefault();
  const target = tabbable2[event.shiftKey ? tabbable2.length - 1 : 0];
  if (target) {
    target.focus();
  }
}
function useFocusTrap(active = true) {
  const ref = reactExports.useRef(null);
  const focusNode = (node2) => {
    let focusElement = node2.querySelector("[data-autofocus]");
    if (!focusElement) {
      const children = Array.from(node2.querySelectorAll(FOCUS_SELECTOR));
      focusElement = children.find(tabbable) || children.find(focusable) || null;
      if (!focusElement && focusable(node2)) {
        focusElement = node2;
      }
    }
    if (focusElement) {
      focusElement.focus({ preventScroll: true });
    } else {
      console.warn(
        "[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node",
        node2
      );
    }
  };
  const setRef = reactExports.useCallback(
    (node2) => {
      if (!active) {
        return;
      }
      if (node2 === null) {
        return;
      }
      if (ref.current === node2) {
        return;
      }
      if (node2) {
        setTimeout(() => {
          if (node2.getRootNode()) {
            focusNode(node2);
          } else {
            console.warn("[@mantine/hooks/use-focus-trap] Ref node is not part of the dom", node2);
          }
        });
        ref.current = node2;
      } else {
        ref.current = null;
      }
    },
    [active]
  );
  reactExports.useEffect(() => {
    if (!active) {
      return void 0;
    }
    ref.current && setTimeout(() => focusNode(ref.current));
    const handleKeyDown = (event) => {
      if (event.key === "Tab" && ref.current) {
        scopeTab(ref.current, event);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [active]);
  return setRef;
}
const __useId = React["useId".toString()] || (() => void 0);
function useReactId$1() {
  const id = __useId();
  return id ? `mantine-${id.replace(/:/g, "")}` : "";
}
function useId$1(staticId) {
  const reactId = useReactId$1();
  const [uuid, setUuid] = reactExports.useState(reactId);
  useIsomorphicEffect$1(() => {
    setUuid(randomId());
  }, []);
  if (typeof staticId === "string") {
    return staticId;
  }
  if (typeof window === "undefined") {
    return reactId;
  }
  return uuid;
}
function useWindowEvent(type, listener, options) {
  reactExports.useEffect(() => {
    window.addEventListener(type, listener, options);
    return () => window.removeEventListener(type, listener, options);
  }, [type, listener]);
}
function assignRef(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (typeof ref === "object" && ref !== null && "current" in ref) {
    ref.current = value;
  }
}
function mergeRefs(...refs) {
  const cleanupMap = /* @__PURE__ */ new Map();
  return (node2) => {
    refs.forEach((ref) => {
      const cleanup = assignRef(ref, node2);
      if (cleanup) {
        cleanupMap.set(ref, cleanup);
      }
    });
    if (cleanupMap.size > 0) {
      return () => {
        refs.forEach((ref) => {
          const cleanup = cleanupMap.get(ref);
          if (cleanup) {
            cleanup();
          } else {
            assignRef(ref, null);
          }
        });
        cleanupMap.clear();
      };
    }
  };
}
function useMergedRef(...refs) {
  return reactExports.useCallback(mergeRefs(...refs), refs);
}
function useUncontrolled({
  value,
  defaultValue,
  finalValue,
  onChange = () => {
  }
}) {
  const [uncontrolledValue, setUncontrolledValue] = reactExports.useState(
    defaultValue !== void 0 ? defaultValue : finalValue
  );
  const handleUncontrolledChange = (val, ...payload) => {
    setUncontrolledValue(val);
    onChange == null ? void 0 : onChange(val, ...payload);
  };
  if (value !== void 0) {
    return [value, onChange, true];
  }
  return [uncontrolledValue, handleUncontrolledChange, false];
}
function range(start, end) {
  const length2 = end - start + 1;
  return Array.from({ length: length2 }, (_, index2) => index2 + start);
}
const DOTS = "dots";
function usePagination({
  total,
  siblings = 1,
  boundaries = 1,
  page,
  initialPage = 1,
  onChange
}) {
  const _total = Math.max(Math.trunc(total), 0);
  const [activePage, setActivePage] = useUncontrolled({
    value: page,
    onChange,
    defaultValue: initialPage,
    finalValue: initialPage
  });
  const setPage = (pageNumber) => {
    if (pageNumber <= 0) {
      setActivePage(1);
    } else if (pageNumber > _total) {
      setActivePage(_total);
    } else {
      setActivePage(pageNumber);
    }
  };
  const next2 = () => setPage(activePage + 1);
  const previous = () => setPage(activePage - 1);
  const first = () => setPage(1);
  const last = () => setPage(_total);
  const paginationRange = reactExports.useMemo(() => {
    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;
    if (totalPageNumbers >= _total) {
      return range(1, _total);
    }
    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings, _total - boundaries);
    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < _total - (boundaries + 1);
    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings * 2 + boundaries + 2;
      return [...range(1, leftItemCount), DOTS, ...range(_total - (boundaries - 1), _total)];
    }
    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings;
      return [...range(1, boundaries), DOTS, ...range(_total - rightItemCount, _total)];
    }
    return [
      ...range(1, boundaries),
      DOTS,
      ...range(leftSiblingIndex, rightSiblingIndex),
      DOTS,
      ...range(_total - boundaries + 1, _total)
    ];
  }, [_total, siblings, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next: next2,
    previous,
    first,
    last
  };
}
function useReducedMotion(initialValue, options) {
  return useMediaQuery("(prefers-reduced-motion: reduce)", initialValue, options);
}
function useDisclosure(initialState = false, callbacks) {
  const { onOpen, onClose } = callbacks || {};
  const [opened, setOpened] = reactExports.useState(initialState);
  const open = reactExports.useCallback(() => {
    setOpened((isOpened) => {
      if (!isOpened) {
        onOpen == null ? void 0 : onOpen();
        return true;
      }
      return isOpened;
    });
  }, [onOpen]);
  const close = reactExports.useCallback(() => {
    setOpened((isOpened) => {
      if (isOpened) {
        onClose == null ? void 0 : onClose();
        return false;
      }
      return isOpened;
    });
  }, [onClose]);
  const toggle = reactExports.useCallback(() => {
    opened ? close() : open();
  }, [close, open, opened]);
  return [opened, { open, close, toggle }];
}
function useTimeout(callback, delay, options = { autoInvoke: false }) {
  const timeoutRef = reactExports.useRef(null);
  const start = reactExports.useCallback(
    (...callbackParams) => {
      if (!timeoutRef.current) {
        timeoutRef.current = window.setTimeout(() => {
          callback(callbackParams);
          timeoutRef.current = null;
        }, delay);
      }
    },
    [delay]
  );
  const clear = reactExports.useCallback(() => {
    if (timeoutRef.current) {
      window.clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
  }, []);
  reactExports.useEffect(() => {
    if (options.autoInvoke) {
      start();
    }
    return clear;
  }, [clear, start]);
  return { start, clear };
}
function usePrevious(value) {
  const ref = reactExports.useRef(void 0);
  reactExports.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
function useMutationObserver(callback, options, target) {
  const observer = reactExports.useRef(null);
  const ref = reactExports.useRef(null);
  reactExports.useEffect(() => {
    const targetElement = typeof target === "function" ? target() : target;
    if (targetElement || ref.current) {
      observer.current = new MutationObserver(callback);
      observer.current.observe(targetElement || ref.current, options);
    }
    return () => {
      var _a;
      (_a = observer.current) == null ? void 0 : _a.disconnect();
    };
  }, [callback, options]);
  return ref;
}
function useMounted() {
  const [mounted, setMounted] = reactExports.useState(false);
  reactExports.useEffect(() => setMounted(true), []);
  return mounted;
}
function dispatchEvent(type, detail) {
  window.dispatchEvent(new CustomEvent(type, { detail }));
}
function createUseExternalEvents(prefix2) {
  function _useExternalEvents(events) {
    const handlers = Object.keys(events).reduce((acc, eventKey) => {
      acc[`${prefix2}:${eventKey}`] = (event) => events[eventKey](event.detail);
      return acc;
    }, {});
    useIsomorphicEffect$1(() => {
      Object.keys(handlers).forEach((eventKey) => {
        window.removeEventListener(eventKey, handlers[eventKey]);
        window.addEventListener(eventKey, handlers[eventKey]);
      });
      return () => Object.keys(handlers).forEach((eventKey) => {
        window.removeEventListener(eventKey, handlers[eventKey]);
      });
    }, [handlers]);
  }
  function createEvent2(event) {
    return (...payload) => dispatchEvent(`${prefix2}:${String(event)}`, payload[0]);
  }
  return [_useExternalEvents, createEvent2];
}
function getEnv() {
  if (typeof process !== "undefined" && process.env && "development") {
    return "development";
  }
  return "development";
}
function getRefProp(element) {
  var _a;
  const version = React.version;
  if (typeof React.version !== "string") {
    return element == null ? void 0 : element.ref;
  }
  if (version.startsWith("18.")) {
    return element == null ? void 0 : element.ref;
  }
  return (_a = element == null ? void 0 : element.props) == null ? void 0 : _a.ref;
}
function createVarsResolver(resolver) {
  return resolver;
}
function r$1(e) {
  var t, f2, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f2 = r$1(e[t])) && (n && (n += " "), n += f2);
    } else
      for (f2 in e)
        e[f2] && (n && (n += " "), n += f2);
  return n;
}
function clsx$1() {
  for (var e, t, f2 = 0, n = "", o = arguments.length; f2 < o; f2++)
    (e = arguments[f2]) && (t = r$1(e)) && (n && (n += " "), n += t);
  return n;
}
const EMPTY_CLASS_NAMES = {};
function mergeClassNames(objects) {
  const merged = {};
  objects.forEach((obj) => {
    Object.entries(obj).forEach(([key, value]) => {
      if (merged[key]) {
        merged[key] = clsx$1(merged[key], value);
      } else {
        merged[key] = value;
      }
    });
  });
  return merged;
}
function resolveClassNames({ theme: theme2, classNames, props, stylesCtx }) {
  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];
  const resolvedClassNames = arrayClassNames.map(
    (item) => typeof item === "function" ? item(theme2, props, stylesCtx) : item || EMPTY_CLASS_NAMES
  );
  return mergeClassNames(resolvedClassNames);
}
function resolveStyles({ theme: theme2, styles: styles2, props, stylesCtx }) {
  const arrayStyles = Array.isArray(styles2) ? styles2 : [styles2];
  return arrayStyles.reduce((acc, style) => {
    if (typeof style === "function") {
      return { ...acc, ...style(theme2, props, stylesCtx) };
    }
    return { ...acc, ...style };
  }, {});
}
const MantineContext = reactExports.createContext(null);
function useMantineContext() {
  const ctx = reactExports.useContext(MantineContext);
  if (!ctx) {
    throw new Error("[@mantine/core] MantineProvider was not found in tree");
  }
  return ctx;
}
function useMantineCssVariablesResolver() {
  return useMantineContext().cssVariablesResolver;
}
function useMantineClassNamesPrefix() {
  return useMantineContext().classNamesPrefix;
}
function useMantineStyleNonce() {
  return useMantineContext().getStyleNonce;
}
function useMantineWithStaticClasses() {
  return useMantineContext().withStaticClasses;
}
function useMantineIsHeadless() {
  return useMantineContext().headless;
}
function useMantineSxTransform() {
  var _a;
  return (_a = useMantineContext().stylesTransform) == null ? void 0 : _a.sx;
}
function useMantineStylesTransform() {
  var _a;
  return (_a = useMantineContext().stylesTransform) == null ? void 0 : _a.styles;
}
function isHexColor(hex) {
  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;
  return HEX_REGEXP.test(hex);
}
function hexToRgba(color) {
  let hexString = color.replace("#", "");
  if (hexString.length === 3) {
    const shorthandHex = hexString.split("");
    hexString = [
      shorthandHex[0],
      shorthandHex[0],
      shorthandHex[1],
      shorthandHex[1],
      shorthandHex[2],
      shorthandHex[2]
    ].join("");
  }
  if (hexString.length === 8) {
    const alpha2 = parseInt(hexString.slice(6, 8), 16) / 255;
    return {
      r: parseInt(hexString.slice(0, 2), 16),
      g: parseInt(hexString.slice(2, 4), 16),
      b: parseInt(hexString.slice(4, 6), 16),
      a: alpha2
    };
  }
  const parsed = parseInt(hexString, 16);
  const r3 = parsed >> 16 & 255;
  const g2 = parsed >> 8 & 255;
  const b2 = parsed & 255;
  return {
    r: r3,
    g: g2,
    b: b2,
    a: 1
  };
}
function rgbStringToRgba(color) {
  const [r3, g2, b2, a] = color.replace(/[^0-9,./]/g, "").split(/[/,]/).map(Number);
  return { r: r3, g: g2, b: b2, a: a || 1 };
}
function hslStringToRgba(hslaString) {
  const hslaRegex = /^hsla?\(\s*(\d+)\s*,\s*(\d+%)\s*,\s*(\d+%)\s*(,\s*(0?\.\d+|\d+(\.\d+)?))?\s*\)$/i;
  const matches = hslaString.match(hslaRegex);
  if (!matches) {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    };
  }
  const h2 = parseInt(matches[1], 10);
  const s = parseInt(matches[2], 10) / 100;
  const l = parseInt(matches[3], 10) / 100;
  const a = matches[5] ? parseFloat(matches[5]) : void 0;
  const chroma = (1 - Math.abs(2 * l - 1)) * s;
  const huePrime = h2 / 60;
  const x = chroma * (1 - Math.abs(huePrime % 2 - 1));
  const m2 = l - chroma / 2;
  let r3;
  let g2;
  let b2;
  if (huePrime >= 0 && huePrime < 1) {
    r3 = chroma;
    g2 = x;
    b2 = 0;
  } else if (huePrime >= 1 && huePrime < 2) {
    r3 = x;
    g2 = chroma;
    b2 = 0;
  } else if (huePrime >= 2 && huePrime < 3) {
    r3 = 0;
    g2 = chroma;
    b2 = x;
  } else if (huePrime >= 3 && huePrime < 4) {
    r3 = 0;
    g2 = x;
    b2 = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    r3 = x;
    g2 = 0;
    b2 = chroma;
  } else {
    r3 = chroma;
    g2 = 0;
    b2 = x;
  }
  return {
    r: Math.round((r3 + m2) * 255),
    g: Math.round((g2 + m2) * 255),
    b: Math.round((b2 + m2) * 255),
    a: a || 1
  };
}
function toRgba(color) {
  if (isHexColor(color)) {
    return hexToRgba(color);
  }
  if (color.startsWith("rgb")) {
    return rgbStringToRgba(color);
  }
  if (color.startsWith("hsl")) {
    return hslStringToRgba(color);
  }
  return {
    r: 0,
    g: 0,
    b: 0,
    a: 1
  };
}
function darken(color, alpha2) {
  if (color.startsWith("var(")) {
    return `color-mix(in srgb, ${color}, black ${alpha2 * 100}%)`;
  }
  const { r: r3, g: g2, b: b2, a } = toRgba(color);
  const f2 = 1 - alpha2;
  const dark = (input) => Math.round(input * f2);
  return `rgba(${dark(r3)}, ${dark(g2)}, ${dark(b2)}, ${a})`;
}
function getPrimaryShade(theme2, colorScheme) {
  if (typeof theme2.primaryShade === "number") {
    return theme2.primaryShade;
  }
  if (colorScheme === "dark") {
    return theme2.primaryShade.dark;
  }
  return theme2.primaryShade.light;
}
function gammaCorrect(c) {
  return c <= 0.03928 ? c / 12.92 : ((c + 0.055) / 1.055) ** 2.4;
}
function getLightnessFromOklch(oklchColor) {
  const match2 = oklchColor.match(/oklch\((.*?)%\s/);
  return match2 ? parseFloat(match2[1]) : null;
}
function luminance(color) {
  if (color.startsWith("oklch(")) {
    return (getLightnessFromOklch(color) || 0) / 100;
  }
  const { r: r3, g: g2, b: b2 } = toRgba(color);
  const sR = r3 / 255;
  const sG = g2 / 255;
  const sB = b2 / 255;
  const rLinear = gammaCorrect(sR);
  const gLinear = gammaCorrect(sG);
  const bLinear = gammaCorrect(sB);
  return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear;
}
function isLightColor(color, luminanceThreshold = 0.179) {
  if (color.startsWith("var(")) {
    return false;
  }
  return luminance(color) > luminanceThreshold;
}
function parseThemeColor({
  color,
  theme: theme2,
  colorScheme
}) {
  if (typeof color !== "string") {
    throw new Error(
      `[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`
    );
  }
  if (color === "bright") {
    return {
      color,
      value: colorScheme === "dark" ? theme2.white : theme2.black,
      shade: void 0,
      isThemeColor: false,
      isLight: isLightColor(
        colorScheme === "dark" ? theme2.white : theme2.black,
        theme2.luminanceThreshold
      ),
      variable: "--mantine-color-bright"
    };
  }
  if (color === "dimmed") {
    return {
      color,
      value: colorScheme === "dark" ? theme2.colors.dark[2] : theme2.colors.gray[7],
      shade: void 0,
      isThemeColor: false,
      isLight: isLightColor(
        colorScheme === "dark" ? theme2.colors.dark[2] : theme2.colors.gray[6],
        theme2.luminanceThreshold
      ),
      variable: "--mantine-color-dimmed"
    };
  }
  if (color === "white" || color === "black") {
    return {
      color,
      value: color === "white" ? theme2.white : theme2.black,
      shade: void 0,
      isThemeColor: false,
      isLight: isLightColor(
        color === "white" ? theme2.white : theme2.black,
        theme2.luminanceThreshold
      ),
      variable: `--mantine-color-${color}`
    };
  }
  const [_color, shade] = color.split(".");
  const colorShade = shade ? Number(shade) : void 0;
  const isThemeColor = _color in theme2.colors;
  if (isThemeColor) {
    const colorValue = colorShade !== void 0 ? theme2.colors[_color][colorShade] : theme2.colors[_color][getPrimaryShade(theme2, colorScheme || "light")];
    return {
      color: _color,
      value: colorValue,
      shade: colorShade,
      isThemeColor,
      isLight: isLightColor(colorValue, theme2.luminanceThreshold),
      variable: shade ? `--mantine-color-${_color}-${colorShade}` : `--mantine-color-${_color}-filled`
    };
  }
  return {
    color,
    value: color,
    isThemeColor,
    isLight: isLightColor(color, theme2.luminanceThreshold),
    shade: colorShade,
    variable: void 0
  };
}
function getThemeColor(color, theme2) {
  const parsed = parseThemeColor({ color: color || theme2.primaryColor, theme: theme2 });
  return parsed.variable ? `var(${parsed.variable})` : color;
}
function getGradient(gradient, theme2) {
  const merged = {
    from: (gradient == null ? void 0 : gradient.from) || theme2.defaultGradient.from,
    to: (gradient == null ? void 0 : gradient.to) || theme2.defaultGradient.to,
    deg: (gradient == null ? void 0 : gradient.deg) || theme2.defaultGradient.deg || 0
  };
  const fromColor = getThemeColor(merged.from, theme2);
  const toColor = getThemeColor(merged.to, theme2);
  return `linear-gradient(${merged.deg}deg, ${fromColor} 0%, ${toColor} 100%)`;
}
function rgba(color, alpha2) {
  if (typeof color !== "string" || alpha2 > 1 || alpha2 < 0) {
    return "rgba(0, 0, 0, 1)";
  }
  if (color.startsWith("var(")) {
    const mixPercentage = (1 - alpha2) * 100;
    return `color-mix(in srgb, ${color}, transparent ${mixPercentage}%)`;
  }
  if (color.startsWith("oklch")) {
    if (color.includes("/")) {
      return color.replace(/\/\s*[\d.]+\s*\)/, `/ ${alpha2})`);
    }
    return color.replace(")", ` / ${alpha2})`);
  }
  const { r: r3, g: g2, b: b2 } = toRgba(color);
  return `rgba(${r3}, ${g2}, ${b2}, ${alpha2})`;
}
const alpha = rgba;
const defaultVariantColorsResolver = ({
  color,
  theme: theme2,
  variant,
  gradient,
  autoContrast
}) => {
  const parsed = parseThemeColor({ color, theme: theme2 });
  const _autoContrast = typeof autoContrast === "boolean" ? autoContrast : theme2.autoContrast;
  if (variant === "filled") {
    const textColor = _autoContrast ? parsed.isLight ? "var(--mantine-color-black)" : "var(--mantine-color-white)" : "var(--mantine-color-white)";
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: `var(--mantine-color-${color}-filled)`,
          hover: `var(--mantine-color-${color}-filled-hover)`,
          color: textColor,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        hover: `var(--mantine-color-${parsed.color}-${parsed.shade === 9 ? 8 : parsed.shade + 1})`,
        color: textColor,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: color,
      hover: darken(color, 0.1),
      color: textColor,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "light") {
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: `var(--mantine-color-${color}-light)`,
          hover: `var(--mantine-color-${color}-light-hover)`,
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      const parsedColor = theme2.colors[parsed.color][parsed.shade];
      return {
        background: rgba(parsedColor, 0.1),
        hover: rgba(parsedColor, 0.12),
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: rgba(color, 0.1),
      hover: rgba(color, 0.12),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "outline") {
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: "transparent",
          hover: `var(--mantine-color-${color}-outline-hover)`,
          color: `var(--mantine-color-${color}-outline)`,
          border: `${rem(1)} solid var(--mantine-color-${color}-outline)`
        };
      }
      return {
        background: "transparent",
        hover: rgba(theme2.colors[parsed.color][parsed.shade], 0.05),
        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        border: `${rem(1)} solid var(--mantine-color-${parsed.color}-${parsed.shade})`
      };
    }
    return {
      background: "transparent",
      hover: rgba(color, 0.05),
      color,
      border: `${rem(1)} solid ${color}`
    };
  }
  if (variant === "subtle") {
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: "transparent",
          hover: `var(--mantine-color-${color}-light-hover)`,
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      const parsedColor = theme2.colors[parsed.color][parsed.shade];
      return {
        background: "transparent",
        hover: rgba(parsedColor, 0.12),
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "transparent",
      hover: rgba(color, 0.12),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "transparent") {
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: "transparent",
          hover: "transparent",
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: "transparent",
        hover: "transparent",
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "transparent",
      hover: "transparent",
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "white") {
    if (parsed.isThemeColor) {
      if (parsed.shade === void 0) {
        return {
          background: "var(--mantine-color-white)",
          hover: darken(theme2.white, 0.01),
          color: `var(--mantine-color-${color}-filled)`,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: "var(--mantine-color-white)",
        hover: darken(theme2.white, 0.01),
        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "var(--mantine-color-white)",
      hover: darken(theme2.white, 0.01),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "gradient") {
    return {
      background: getGradient(gradient, theme2),
      hover: getGradient(gradient, theme2),
      color: "var(--mantine-color-white)",
      border: "none"
    };
  }
  if (variant === "default") {
    return {
      background: "var(--mantine-color-default)",
      hover: "var(--mantine-color-default-hover)",
      color: "var(--mantine-color-default-color)",
      border: `${rem(1)} solid var(--mantine-color-default-border)`
    };
  }
  return {};
};
const DEFAULT_COLORS = {
  dark: [
    "#C9C9C9",
    "#b8b8b8",
    "#828282",
    "#696969",
    "#424242",
    "#3b3b3b",
    "#2e2e2e",
    "#242424",
    "#1f1f1f",
    "#141414"
  ],
  gray: [
    "#f8f9fa",
    "#f1f3f5",
    "#e9ecef",
    "#dee2e6",
    "#ced4da",
    "#adb5bd",
    "#868e96",
    "#495057",
    "#343a40",
    "#212529"
  ],
  red: [
    "#fff5f5",
    "#ffe3e3",
    "#ffc9c9",
    "#ffa8a8",
    "#ff8787",
    "#ff6b6b",
    "#fa5252",
    "#f03e3e",
    "#e03131",
    "#c92a2a"
  ],
  pink: [
    "#fff0f6",
    "#ffdeeb",
    "#fcc2d7",
    "#faa2c1",
    "#f783ac",
    "#f06595",
    "#e64980",
    "#d6336c",
    "#c2255c",
    "#a61e4d"
  ],
  grape: [
    "#f8f0fc",
    "#f3d9fa",
    "#eebefa",
    "#e599f7",
    "#da77f2",
    "#cc5de8",
    "#be4bdb",
    "#ae3ec9",
    "#9c36b5",
    "#862e9c"
  ],
  violet: [
    "#f3f0ff",
    "#e5dbff",
    "#d0bfff",
    "#b197fc",
    "#9775fa",
    "#845ef7",
    "#7950f2",
    "#7048e8",
    "#6741d9",
    "#5f3dc4"
  ],
  indigo: [
    "#edf2ff",
    "#dbe4ff",
    "#bac8ff",
    "#91a7ff",
    "#748ffc",
    "#5c7cfa",
    "#4c6ef5",
    "#4263eb",
    "#3b5bdb",
    "#364fc7"
  ],
  blue: [
    "#e7f5ff",
    "#d0ebff",
    "#a5d8ff",
    "#74c0fc",
    "#4dabf7",
    "#339af0",
    "#228be6",
    "#1c7ed6",
    "#1971c2",
    "#1864ab"
  ],
  cyan: [
    "#e3fafc",
    "#c5f6fa",
    "#99e9f2",
    "#66d9e8",
    "#3bc9db",
    "#22b8cf",
    "#15aabf",
    "#1098ad",
    "#0c8599",
    "#0b7285"
  ],
  teal: [
    "#e6fcf5",
    "#c3fae8",
    "#96f2d7",
    "#63e6be",
    "#38d9a9",
    "#20c997",
    "#12b886",
    "#0ca678",
    "#099268",
    "#087f5b"
  ],
  green: [
    "#ebfbee",
    "#d3f9d8",
    "#b2f2bb",
    "#8ce99a",
    "#69db7c",
    "#51cf66",
    "#40c057",
    "#37b24d",
    "#2f9e44",
    "#2b8a3e"
  ],
  lime: [
    "#f4fce3",
    "#e9fac8",
    "#d8f5a2",
    "#c0eb75",
    "#a9e34b",
    "#94d82d",
    "#82c91e",
    "#74b816",
    "#66a80f",
    "#5c940d"
  ],
  yellow: [
    "#fff9db",
    "#fff3bf",
    "#ffec99",
    "#ffe066",
    "#ffd43b",
    "#fcc419",
    "#fab005",
    "#f59f00",
    "#f08c00",
    "#e67700"
  ],
  orange: [
    "#fff4e6",
    "#ffe8cc",
    "#ffd8a8",
    "#ffc078",
    "#ffa94d",
    "#ff922b",
    "#fd7e14",
    "#f76707",
    "#e8590c",
    "#d9480f"
  ]
};
const DEFAULT_FONT_FAMILY = "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji";
const DEFAULT_THEME = {
  scale: 1,
  fontSmoothing: true,
  focusRing: "auto",
  white: "#fff",
  black: "#000",
  colors: DEFAULT_COLORS,
  primaryShade: { light: 6, dark: 8 },
  primaryColor: "blue",
  variantColorResolver: defaultVariantColorsResolver,
  autoContrast: false,
  luminanceThreshold: 0.3,
  fontFamily: DEFAULT_FONT_FAMILY,
  fontFamilyMonospace: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace",
  respectReducedMotion: false,
  cursorType: "default",
  defaultGradient: { from: "blue", to: "cyan", deg: 45 },
  defaultRadius: "sm",
  activeClassName: "mantine-active",
  focusClassName: "",
  headings: {
    fontFamily: DEFAULT_FONT_FAMILY,
    fontWeight: "700",
    textWrap: "wrap",
    sizes: {
      h1: { fontSize: rem(34), lineHeight: "1.3" },
      h2: { fontSize: rem(26), lineHeight: "1.35" },
      h3: { fontSize: rem(22), lineHeight: "1.4" },
      h4: { fontSize: rem(18), lineHeight: "1.45" },
      h5: { fontSize: rem(16), lineHeight: "1.5" },
      h6: { fontSize: rem(14), lineHeight: "1.5" }
    }
  },
  fontSizes: {
    xs: rem(12),
    sm: rem(14),
    md: rem(16),
    lg: rem(18),
    xl: rem(20)
  },
  lineHeights: {
    xs: "1.4",
    sm: "1.45",
    md: "1.55",
    lg: "1.6",
    xl: "1.65"
  },
  radius: {
    xs: rem(2),
    sm: rem(4),
    md: rem(8),
    lg: rem(16),
    xl: rem(32)
  },
  spacing: {
    xs: rem(10),
    sm: rem(12),
    md: rem(16),
    lg: rem(20),
    xl: rem(32)
  },
  breakpoints: {
    xs: "36em",
    sm: "48em",
    md: "62em",
    lg: "75em",
    xl: "88em"
  },
  shadows: {
    xs: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), 0 ${rem(1)} ${rem(2)} rgba(0, 0, 0, 0.1)`,
    sm: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(10)} ${rem(
      15
    )} ${rem(-5)}, rgba(0, 0, 0, 0.04) 0 ${rem(7)} ${rem(7)} ${rem(-5)}`,
    md: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(20)} ${rem(
      25
    )} ${rem(-5)}, rgba(0, 0, 0, 0.04) 0 ${rem(10)} ${rem(10)} ${rem(-5)}`,
    lg: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(28)} ${rem(
      23
    )} ${rem(-7)}, rgba(0, 0, 0, 0.04) 0 ${rem(12)} ${rem(12)} ${rem(-7)}`,
    xl: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(36)} ${rem(
      28
    )} ${rem(-7)}, rgba(0, 0, 0, 0.04) 0 ${rem(17)} ${rem(17)} ${rem(-7)}`
  },
  other: {},
  components: {}
};
function isMantineColorScheme(value) {
  return value === "auto" || value === "dark" || value === "light";
}
function localStorageColorSchemeManager({
  key = "mantine-color-scheme-value"
} = {}) {
  let handleStorageEvent;
  return {
    get: (defaultValue) => {
      if (typeof window === "undefined") {
        return defaultValue;
      }
      try {
        const storedColorScheme = window.localStorage.getItem(key);
        return isMantineColorScheme(storedColorScheme) ? storedColorScheme : defaultValue;
      } catch {
        return defaultValue;
      }
    },
    set: (value) => {
      try {
        window.localStorage.setItem(key, value);
      } catch (error2) {
        console.warn(
          "[@mantine/core] Local storage color scheme manager was unable to save color scheme.",
          error2
        );
      }
    },
    subscribe: (onUpdate) => {
      handleStorageEvent = (event) => {
        if (event.storageArea === window.localStorage && event.key === key) {
          isMantineColorScheme(event.newValue) && onUpdate(event.newValue);
        }
      };
      window.addEventListener("storage", handleStorageEvent);
    },
    unsubscribe: () => {
      window.removeEventListener("storage", handleStorageEvent);
    },
    clear: () => {
      window.localStorage.removeItem(key);
    }
  };
}
const INVALID_PRIMARY_COLOR_ERROR = "[@mantine/core] MantineProvider: Invalid theme.primaryColor, it accepts only key of theme.colors, learn more – https://mantine.dev/theming/colors/#primary-color";
const INVALID_PRIMARY_SHADE_ERROR = "[@mantine/core] MantineProvider: Invalid theme.primaryShade, it accepts only 0-9 integers or an object { light: 0-9, dark: 0-9 }";
function isValidPrimaryShade(shade) {
  if (shade < 0 || shade > 9) {
    return false;
  }
  return parseInt(shade.toString(), 10) === shade;
}
function validateMantineTheme(theme2) {
  if (!(theme2.primaryColor in theme2.colors)) {
    throw new Error(INVALID_PRIMARY_COLOR_ERROR);
  }
  if (typeof theme2.primaryShade === "object") {
    if (!isValidPrimaryShade(theme2.primaryShade.dark) || !isValidPrimaryShade(theme2.primaryShade.light)) {
      throw new Error(INVALID_PRIMARY_SHADE_ERROR);
    }
  }
  if (typeof theme2.primaryShade === "number" && !isValidPrimaryShade(theme2.primaryShade)) {
    throw new Error(INVALID_PRIMARY_SHADE_ERROR);
  }
}
function mergeMantineTheme(currentTheme, themeOverride) {
  var _a;
  if (!themeOverride) {
    validateMantineTheme(currentTheme);
    return currentTheme;
  }
  const result = deepMerge(currentTheme, themeOverride);
  if (themeOverride.fontFamily && !((_a = themeOverride.headings) == null ? void 0 : _a.fontFamily)) {
    result.headings.fontFamily = themeOverride.fontFamily;
  }
  validateMantineTheme(result);
  return result;
}
const MantineThemeContext = reactExports.createContext(null);
const useSafeMantineTheme = () => reactExports.useContext(MantineThemeContext) || DEFAULT_THEME;
function useMantineTheme() {
  const ctx = reactExports.useContext(MantineThemeContext);
  if (!ctx) {
    throw new Error(
      "@mantine/core: MantineProvider was not found in component tree, make sure you have it in your app"
    );
  }
  return ctx;
}
function MantineThemeProvider({
  theme: theme2,
  children,
  inherit = true
}) {
  const parentTheme = useSafeMantineTheme();
  const mergedTheme = reactExports.useMemo(
    () => mergeMantineTheme(inherit ? parentTheme : DEFAULT_THEME, theme2),
    [theme2, parentTheme, inherit]
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(MantineThemeContext.Provider, { value: mergedTheme, children });
}
MantineThemeProvider.displayName = "@mantine/core/MantineThemeProvider";
function MantineClasses() {
  const theme2 = useMantineTheme();
  const nonce = useMantineStyleNonce();
  const classes2 = keys(theme2.breakpoints).reduce((acc, breakpoint) => {
    const isPxBreakpoint = theme2.breakpoints[breakpoint].includes("px");
    const pxValue = px(theme2.breakpoints[breakpoint]);
    const maxWidthBreakpoint = isPxBreakpoint ? `${pxValue - 0.1}px` : em(pxValue - 0.1);
    const minWidthBreakpoint = isPxBreakpoint ? `${pxValue}px` : em(pxValue);
    return `${acc}@media (max-width: ${maxWidthBreakpoint}) {.mantine-visible-from-${breakpoint} {display: none !important;}}@media (min-width: ${minWidthBreakpoint}) {.mantine-hidden-from-${breakpoint} {display: none !important;}}`;
  }, "");
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "style",
    {
      "data-mantine-styles": "classes",
      nonce: nonce == null ? void 0 : nonce(),
      dangerouslySetInnerHTML: { __html: classes2 }
    }
  );
}
function cssVariablesObjectToString(variables) {
  return Object.entries(variables).map(([name, value]) => `${name}: ${value};`).join("");
}
function wrapWithSelector(selectors, code) {
  const _selectors = Array.isArray(selectors) ? selectors : [selectors];
  return _selectors.reduce((acc, selector) => `${selector}{${acc}}`, code);
}
function convertCssVariables(input, selector) {
  const sharedVariables = cssVariablesObjectToString(input.variables);
  const shared = sharedVariables ? wrapWithSelector(selector, sharedVariables) : "";
  const dark = cssVariablesObjectToString(input.dark);
  const light = cssVariablesObjectToString(input.light);
  const darkForced = dark ? selector === ":host" ? wrapWithSelector(`${selector}([data-mantine-color-scheme="dark"])`, dark) : wrapWithSelector(`${selector}[data-mantine-color-scheme="dark"]`, dark) : "";
  const lightForced = light ? selector === ":host" ? wrapWithSelector(`${selector}([data-mantine-color-scheme="light"])`, light) : wrapWithSelector(`${selector}[data-mantine-color-scheme="light"]`, light) : "";
  return `${shared}${darkForced}${lightForced}`;
}
function getContrastColor({ color, theme: theme2, autoContrast }) {
  const _autoContrast = typeof autoContrast === "boolean" ? autoContrast : theme2.autoContrast;
  if (!_autoContrast) {
    return "var(--mantine-color-white)";
  }
  const parsed = parseThemeColor({ color: color || theme2.primaryColor, theme: theme2 });
  return parsed.isLight ? "var(--mantine-color-black)" : "var(--mantine-color-white)";
}
function getPrimaryContrastColor(theme2, colorScheme) {
  return getContrastColor({
    color: theme2.colors[theme2.primaryColor][getPrimaryShade(theme2, colorScheme)],
    theme: theme2,
    autoContrast: null
  });
}
function getCSSColorVariables({
  theme: theme2,
  color,
  colorScheme,
  name = color,
  withColorValues = true
}) {
  if (!theme2.colors[color]) {
    return {};
  }
  if (colorScheme === "light") {
    const primaryShade2 = getPrimaryShade(theme2, "light");
    const dynamicVariables2 = {
      [`--mantine-color-${name}-text`]: `var(--mantine-color-${name}-filled)`,
      [`--mantine-color-${name}-filled`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-filled-hover`]: `var(--mantine-color-${name}-${primaryShade2 === 9 ? 8 : primaryShade2 + 1})`,
      [`--mantine-color-${name}-light`]: alpha(theme2.colors[color][primaryShade2], 0.1),
      [`--mantine-color-${name}-light-hover`]: alpha(theme2.colors[color][primaryShade2], 0.12),
      [`--mantine-color-${name}-light-color`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-outline`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-outline-hover`]: alpha(theme2.colors[color][primaryShade2], 0.05)
    };
    if (!withColorValues) {
      return dynamicVariables2;
    }
    return {
      [`--mantine-color-${name}-0`]: theme2.colors[color][0],
      [`--mantine-color-${name}-1`]: theme2.colors[color][1],
      [`--mantine-color-${name}-2`]: theme2.colors[color][2],
      [`--mantine-color-${name}-3`]: theme2.colors[color][3],
      [`--mantine-color-${name}-4`]: theme2.colors[color][4],
      [`--mantine-color-${name}-5`]: theme2.colors[color][5],
      [`--mantine-color-${name}-6`]: theme2.colors[color][6],
      [`--mantine-color-${name}-7`]: theme2.colors[color][7],
      [`--mantine-color-${name}-8`]: theme2.colors[color][8],
      [`--mantine-color-${name}-9`]: theme2.colors[color][9],
      ...dynamicVariables2
    };
  }
  const primaryShade = getPrimaryShade(theme2, "dark");
  const dynamicVariables = {
    [`--mantine-color-${name}-text`]: `var(--mantine-color-${name}-4)`,
    [`--mantine-color-${name}-filled`]: `var(--mantine-color-${name}-${primaryShade})`,
    [`--mantine-color-${name}-filled-hover`]: `var(--mantine-color-${name}-${primaryShade === 9 ? 8 : primaryShade + 1})`,
    [`--mantine-color-${name}-light`]: alpha(
      theme2.colors[color][Math.max(0, primaryShade - 2)],
      0.15
    ),
    [`--mantine-color-${name}-light-hover`]: alpha(
      theme2.colors[color][Math.max(0, primaryShade - 2)],
      0.2
    ),
    [`--mantine-color-${name}-light-color`]: `var(--mantine-color-${name}-${Math.max(primaryShade - 5, 0)})`,
    [`--mantine-color-${name}-outline`]: `var(--mantine-color-${name}-${Math.max(primaryShade - 4, 0)})`,
    [`--mantine-color-${name}-outline-hover`]: alpha(
      theme2.colors[color][Math.max(primaryShade - 4, 0)],
      0.05
    )
  };
  if (!withColorValues) {
    return dynamicVariables;
  }
  return {
    [`--mantine-color-${name}-0`]: theme2.colors[color][0],
    [`--mantine-color-${name}-1`]: theme2.colors[color][1],
    [`--mantine-color-${name}-2`]: theme2.colors[color][2],
    [`--mantine-color-${name}-3`]: theme2.colors[color][3],
    [`--mantine-color-${name}-4`]: theme2.colors[color][4],
    [`--mantine-color-${name}-5`]: theme2.colors[color][5],
    [`--mantine-color-${name}-6`]: theme2.colors[color][6],
    [`--mantine-color-${name}-7`]: theme2.colors[color][7],
    [`--mantine-color-${name}-8`]: theme2.colors[color][8],
    [`--mantine-color-${name}-9`]: theme2.colors[color][9],
    ...dynamicVariables
  };
}
function isVirtualColor(value) {
  return !!value && typeof value === "object" && "mantine-virtual-color" in value;
}
function assignSizeVariables(variables, sizes2, name) {
  keys(sizes2).forEach(
    (size2) => Object.assign(variables, { [`--mantine-${name}-${size2}`]: sizes2[size2] })
  );
}
const defaultCssVariablesResolver = (theme2) => {
  const lightPrimaryShade = getPrimaryShade(theme2, "light");
  const defaultRadius = theme2.defaultRadius in theme2.radius ? theme2.radius[theme2.defaultRadius] : rem(theme2.defaultRadius);
  const result = {
    variables: {
      "--mantine-scale": theme2.scale.toString(),
      "--mantine-cursor-type": theme2.cursorType,
      "--mantine-color-scheme": "light dark",
      "--mantine-webkit-font-smoothing": theme2.fontSmoothing ? "antialiased" : "unset",
      "--mantine-moz-font-smoothing": theme2.fontSmoothing ? "grayscale" : "unset",
      "--mantine-color-white": theme2.white,
      "--mantine-color-black": theme2.black,
      "--mantine-line-height": theme2.lineHeights.md,
      "--mantine-font-family": theme2.fontFamily,
      "--mantine-font-family-monospace": theme2.fontFamilyMonospace,
      "--mantine-font-family-headings": theme2.headings.fontFamily,
      "--mantine-heading-font-weight": theme2.headings.fontWeight,
      "--mantine-heading-text-wrap": theme2.headings.textWrap,
      "--mantine-radius-default": defaultRadius,
      // Primary colors
      "--mantine-primary-color-filled": `var(--mantine-color-${theme2.primaryColor}-filled)`,
      "--mantine-primary-color-filled-hover": `var(--mantine-color-${theme2.primaryColor}-filled-hover)`,
      "--mantine-primary-color-light": `var(--mantine-color-${theme2.primaryColor}-light)`,
      "--mantine-primary-color-light-hover": `var(--mantine-color-${theme2.primaryColor}-light-hover)`,
      "--mantine-primary-color-light-color": `var(--mantine-color-${theme2.primaryColor}-light-color)`
    },
    light: {
      "--mantine-primary-color-contrast": getPrimaryContrastColor(theme2, "light"),
      "--mantine-color-bright": "var(--mantine-color-black)",
      "--mantine-color-text": theme2.black,
      "--mantine-color-body": theme2.white,
      "--mantine-color-error": "var(--mantine-color-red-6)",
      "--mantine-color-placeholder": "var(--mantine-color-gray-5)",
      "--mantine-color-anchor": `var(--mantine-color-${theme2.primaryColor}-${lightPrimaryShade})`,
      "--mantine-color-default": "var(--mantine-color-white)",
      "--mantine-color-default-hover": "var(--mantine-color-gray-0)",
      "--mantine-color-default-color": "var(--mantine-color-black)",
      "--mantine-color-default-border": "var(--mantine-color-gray-4)",
      "--mantine-color-dimmed": "var(--mantine-color-gray-6)"
    },
    dark: {
      "--mantine-primary-color-contrast": getPrimaryContrastColor(theme2, "dark"),
      "--mantine-color-bright": "var(--mantine-color-white)",
      "--mantine-color-text": "var(--mantine-color-dark-0)",
      "--mantine-color-body": "var(--mantine-color-dark-7)",
      "--mantine-color-error": "var(--mantine-color-red-8)",
      "--mantine-color-placeholder": "var(--mantine-color-dark-3)",
      "--mantine-color-anchor": `var(--mantine-color-${theme2.primaryColor}-4)`,
      "--mantine-color-default": "var(--mantine-color-dark-6)",
      "--mantine-color-default-hover": "var(--mantine-color-dark-5)",
      "--mantine-color-default-color": "var(--mantine-color-white)",
      "--mantine-color-default-border": "var(--mantine-color-dark-4)",
      "--mantine-color-dimmed": "var(--mantine-color-dark-2)"
    }
  };
  assignSizeVariables(result.variables, theme2.breakpoints, "breakpoint");
  assignSizeVariables(result.variables, theme2.spacing, "spacing");
  assignSizeVariables(result.variables, theme2.fontSizes, "font-size");
  assignSizeVariables(result.variables, theme2.lineHeights, "line-height");
  assignSizeVariables(result.variables, theme2.shadows, "shadow");
  assignSizeVariables(result.variables, theme2.radius, "radius");
  theme2.colors[theme2.primaryColor].forEach((_, index2) => {
    result.variables[`--mantine-primary-color-${index2}`] = `var(--mantine-color-${theme2.primaryColor}-${index2})`;
  });
  keys(theme2.colors).forEach((color) => {
    const value = theme2.colors[color];
    if (isVirtualColor(value)) {
      Object.assign(
        result.light,
        getCSSColorVariables({
          theme: theme2,
          name: value.name,
          color: value.light,
          colorScheme: "light",
          withColorValues: true
        })
      );
      Object.assign(
        result.dark,
        getCSSColorVariables({
          theme: theme2,
          name: value.name,
          color: value.dark,
          colorScheme: "dark",
          withColorValues: true
        })
      );
      return;
    }
    value.forEach((shade, index2) => {
      result.variables[`--mantine-color-${color}-${index2}`] = shade;
    });
    Object.assign(
      result.light,
      getCSSColorVariables({
        theme: theme2,
        color,
        colorScheme: "light",
        withColorValues: false
      })
    );
    Object.assign(
      result.dark,
      getCSSColorVariables({
        theme: theme2,
        color,
        colorScheme: "dark",
        withColorValues: false
      })
    );
  });
  const headings2 = theme2.headings.sizes;
  keys(headings2).forEach((heading) => {
    result.variables[`--mantine-${heading}-font-size`] = headings2[heading].fontSize;
    result.variables[`--mantine-${heading}-line-height`] = headings2[heading].lineHeight;
    result.variables[`--mantine-${heading}-font-weight`] = headings2[heading].fontWeight || theme2.headings.fontWeight;
  });
  return result;
};
function getMergedVariables({ theme: theme2, generator }) {
  const defaultResolver = defaultCssVariablesResolver(theme2);
  const providerGenerator = generator == null ? void 0 : generator(theme2);
  return providerGenerator ? deepMerge(defaultResolver, providerGenerator) : defaultResolver;
}
const defaultCssVariables = defaultCssVariablesResolver(DEFAULT_THEME);
function removeDefaultVariables(input) {
  const cleaned = {
    variables: {},
    light: {},
    dark: {}
  };
  keys(input.variables).forEach((key) => {
    if (defaultCssVariables.variables[key] !== input.variables[key]) {
      cleaned.variables[key] = input.variables[key];
    }
  });
  keys(input.light).forEach((key) => {
    if (defaultCssVariables.light[key] !== input.light[key]) {
      cleaned.light[key] = input.light[key];
    }
  });
  keys(input.dark).forEach((key) => {
    if (defaultCssVariables.dark[key] !== input.dark[key]) {
      cleaned.dark[key] = input.dark[key];
    }
  });
  return cleaned;
}
function getColorSchemeCssVariables(selector) {
  return `
  ${selector}[data-mantine-color-scheme="dark"] { --mantine-color-scheme: dark; }
  ${selector}[data-mantine-color-scheme="light"] { --mantine-color-scheme: light; }
`;
}
function MantineCssVariables({
  cssVariablesSelector,
  deduplicateCssVariables
}) {
  const theme2 = useMantineTheme();
  const nonce = useMantineStyleNonce();
  const generator = useMantineCssVariablesResolver();
  const mergedVariables = getMergedVariables({ theme: theme2, generator });
  const shouldCleanVariables = cssVariablesSelector === ":root" && deduplicateCssVariables;
  const cleanedVariables = shouldCleanVariables ? removeDefaultVariables(mergedVariables) : mergedVariables;
  const css = convertCssVariables(cleanedVariables, cssVariablesSelector);
  if (css) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      "style",
      {
        "data-mantine-styles": true,
        nonce: nonce == null ? void 0 : nonce(),
        dangerouslySetInnerHTML: {
          __html: `${css}${shouldCleanVariables ? "" : getColorSchemeCssVariables(cssVariablesSelector)}`
        }
      }
    );
  }
  return null;
}
MantineCssVariables.displayName = "@mantine/CssVariables";
function suppressNextjsWarning() {
  const originalError = console.error;
  console.error = (...args) => {
    if (args.length > 1 && typeof args[0] === "string" && args[0].toLowerCase().includes("extra attributes from the server") && typeof args[1] === "string" && args[1].toLowerCase().includes("data-mantine-color-scheme"))
      ;
    else {
      originalError(...args);
    }
  };
}
function setColorSchemeAttribute(colorScheme, getRootElement) {
  var _a, _b;
  const hasDarkColorScheme = typeof window !== "undefined" && "matchMedia" in window && ((_a = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a.matches);
  const computedColorScheme = colorScheme !== "auto" ? colorScheme : hasDarkColorScheme ? "dark" : "light";
  (_b = getRootElement()) == null ? void 0 : _b.setAttribute("data-mantine-color-scheme", computedColorScheme);
}
function useProviderColorScheme({
  manager,
  defaultColorScheme,
  getRootElement,
  forceColorScheme
}) {
  const media = reactExports.useRef(null);
  const [value, setValue] = reactExports.useState(() => manager.get(defaultColorScheme));
  const colorSchemeValue = forceColorScheme || value;
  const setColorScheme = reactExports.useCallback(
    (colorScheme) => {
      if (!forceColorScheme) {
        setColorSchemeAttribute(colorScheme, getRootElement);
        setValue(colorScheme);
        manager.set(colorScheme);
      }
    },
    [manager.set, colorSchemeValue, forceColorScheme]
  );
  const clearColorScheme = reactExports.useCallback(() => {
    setValue(defaultColorScheme);
    setColorSchemeAttribute(defaultColorScheme, getRootElement);
    manager.clear();
  }, [manager.clear, defaultColorScheme]);
  reactExports.useEffect(() => {
    manager.subscribe(setColorScheme);
    return manager.unsubscribe;
  }, [manager.subscribe, manager.unsubscribe]);
  useIsomorphicEffect$1(() => {
    setColorSchemeAttribute(manager.get(defaultColorScheme), getRootElement);
  }, []);
  reactExports.useEffect(() => {
    var _a;
    if (forceColorScheme) {
      setColorSchemeAttribute(forceColorScheme, getRootElement);
      return () => {
      };
    }
    if (forceColorScheme === void 0) {
      setColorSchemeAttribute(value, getRootElement);
    }
    if (typeof window !== "undefined" && "matchMedia" in window) {
      media.current = window.matchMedia("(prefers-color-scheme: dark)");
    }
    const listener = (event) => {
      if (value === "auto") {
        setColorSchemeAttribute(event.matches ? "dark" : "light", getRootElement);
      }
    };
    (_a = media.current) == null ? void 0 : _a.addEventListener("change", listener);
    return () => {
      var _a2;
      return (_a2 = media.current) == null ? void 0 : _a2.removeEventListener("change", listener);
    };
  }, [value, forceColorScheme]);
  return { colorScheme: colorSchemeValue, setColorScheme, clearColorScheme };
}
function useRespectReduceMotion({
  respectReducedMotion,
  getRootElement
}) {
  useIsomorphicEffect$1(() => {
    var _a;
    if (respectReducedMotion) {
      (_a = getRootElement()) == null ? void 0 : _a.setAttribute("data-respect-reduced-motion", "true");
    }
  }, [respectReducedMotion]);
}
suppressNextjsWarning();
function MantineProvider({
  theme: theme2,
  children,
  getStyleNonce,
  withStaticClasses = true,
  withGlobalClasses = true,
  deduplicateCssVariables = true,
  withCssVariables = true,
  cssVariablesSelector = ":root",
  classNamesPrefix = "mantine",
  colorSchemeManager = localStorageColorSchemeManager(),
  defaultColorScheme = "light",
  getRootElement = () => document.documentElement,
  cssVariablesResolver,
  forceColorScheme,
  stylesTransform: stylesTransform2
}) {
  const { colorScheme, setColorScheme, clearColorScheme } = useProviderColorScheme({
    defaultColorScheme,
    forceColorScheme,
    manager: colorSchemeManager,
    getRootElement
  });
  useRespectReduceMotion({
    respectReducedMotion: (theme2 == null ? void 0 : theme2.respectReducedMotion) || false,
    getRootElement
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    MantineContext.Provider,
    {
      value: {
        colorScheme,
        setColorScheme,
        clearColorScheme,
        getRootElement,
        classNamesPrefix,
        getStyleNonce,
        cssVariablesResolver,
        cssVariablesSelector,
        withStaticClasses,
        stylesTransform: stylesTransform2
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(MantineThemeProvider, { theme: theme2, children: [
        withCssVariables && /* @__PURE__ */ jsxRuntimeExports.jsx(
          MantineCssVariables,
          {
            cssVariablesSelector,
            deduplicateCssVariables
          }
        ),
        withGlobalClasses && /* @__PURE__ */ jsxRuntimeExports.jsx(MantineClasses, {}),
        children
      ] })
    }
  );
}
MantineProvider.displayName = "@mantine/core/MantineProvider";
function useResolvedStylesApi({
  classNames,
  styles: styles2,
  props,
  stylesCtx
}) {
  const theme2 = useMantineTheme();
  return {
    resolvedClassNames: resolveClassNames({
      theme: theme2,
      classNames,
      props,
      stylesCtx: stylesCtx || void 0
    }),
    resolvedStyles: resolveStyles({
      theme: theme2,
      styles: styles2,
      props,
      stylesCtx: stylesCtx || void 0
    })
  };
}
const FOCUS_CLASS_NAMES = {
  always: "mantine-focus-always",
  auto: "mantine-focus-auto",
  never: "mantine-focus-never"
};
function getGlobalClassNames({ theme: theme2, options, unstyled }) {
  return clsx$1(
    (options == null ? void 0 : options.focusable) && !unstyled && (theme2.focusClassName || FOCUS_CLASS_NAMES[theme2.focusRing]),
    (options == null ? void 0 : options.active) && !unstyled && theme2.activeClassName
  );
}
function getOptionsClassNames({
  selector,
  stylesCtx,
  options,
  props,
  theme: theme2
}) {
  return resolveClassNames({
    theme: theme2,
    classNames: options == null ? void 0 : options.classNames,
    props: (options == null ? void 0 : options.props) || props,
    stylesCtx
  })[selector];
}
function getResolvedClassNames({
  selector,
  stylesCtx,
  theme: theme2,
  classNames,
  props
}) {
  return resolveClassNames({ theme: theme2, classNames, props, stylesCtx })[selector];
}
function getRootClassName({ rootSelector, selector, className }) {
  return rootSelector === selector ? className : void 0;
}
function getSelectorClassName({ selector, classes: classes2, unstyled }) {
  return unstyled ? void 0 : classes2[selector];
}
function getStaticClassNames({
  themeName,
  classNamesPrefix,
  selector,
  withStaticClass
}) {
  if (withStaticClass === false) {
    return [];
  }
  return themeName.map((n) => `${classNamesPrefix}-${n}-${selector}`);
}
function getThemeClassNames({
  themeName,
  theme: theme2,
  selector,
  props,
  stylesCtx
}) {
  return themeName.map(
    (n) => {
      var _a, _b;
      return (_b = resolveClassNames({
        theme: theme2,
        classNames: (_a = theme2.components[n]) == null ? void 0 : _a.classNames,
        props,
        stylesCtx
      })) == null ? void 0 : _b[selector];
    }
  );
}
function getVariantClassName({
  options,
  classes: classes2,
  selector,
  unstyled
}) {
  return (options == null ? void 0 : options.variant) && !unstyled ? classes2[`${selector}--${options.variant}`] : void 0;
}
function getClassName({
  theme: theme2,
  options,
  themeName,
  selector,
  classNamesPrefix,
  classNames,
  classes: classes2,
  unstyled,
  className,
  rootSelector,
  props,
  stylesCtx,
  withStaticClasses,
  headless,
  transformedStyles
}) {
  return clsx$1(
    getGlobalClassNames({ theme: theme2, options, unstyled: unstyled || headless }),
    getThemeClassNames({ theme: theme2, themeName, selector, props, stylesCtx }),
    getVariantClassName({ options, classes: classes2, selector, unstyled }),
    getResolvedClassNames({ selector, stylesCtx, theme: theme2, classNames, props }),
    getResolvedClassNames({ selector, stylesCtx, theme: theme2, classNames: transformedStyles, props }),
    getOptionsClassNames({ selector, stylesCtx, options, props, theme: theme2 }),
    getRootClassName({ rootSelector, selector, className }),
    getSelectorClassName({ selector, classes: classes2, unstyled: unstyled || headless }),
    withStaticClasses && !headless && getStaticClassNames({
      themeName,
      classNamesPrefix,
      selector,
      withStaticClass: options == null ? void 0 : options.withStaticClass
    }),
    options == null ? void 0 : options.className
  );
}
function getThemeStyles({
  theme: theme2,
  themeName,
  props,
  stylesCtx,
  selector
}) {
  return themeName.map(
    (n) => {
      var _a;
      return resolveStyles({
        theme: theme2,
        styles: (_a = theme2.components[n]) == null ? void 0 : _a.styles,
        props,
        stylesCtx
      })[selector];
    }
  ).reduce((acc, val) => ({ ...acc, ...val }), {});
}
function resolveStyle({ style, theme: theme2 }) {
  if (Array.isArray(style)) {
    return [...style].reduce(
      (acc, item) => ({ ...acc, ...resolveStyle({ style: item, theme: theme2 }) }),
      {}
    );
  }
  if (typeof style === "function") {
    return style(theme2);
  }
  if (style == null) {
    return {};
  }
  return style;
}
function mergeVars(vars) {
  return vars.reduce((acc, current) => {
    if (current) {
      Object.keys(current).forEach((key) => {
        acc[key] = { ...acc[key], ...filterProps(current[key]) };
      });
    }
    return acc;
  }, {});
}
function resolveVars({
  vars,
  varsResolver: varsResolver2,
  theme: theme2,
  props,
  stylesCtx,
  selector,
  themeName,
  headless
}) {
  var _a;
  return (_a = mergeVars([
    headless ? {} : varsResolver2 == null ? void 0 : varsResolver2(theme2, props, stylesCtx),
    ...themeName.map((name) => {
      var _a2, _b, _c;
      return (_c = (_b = (_a2 = theme2.components) == null ? void 0 : _a2[name]) == null ? void 0 : _b.vars) == null ? void 0 : _c.call(_b, theme2, props, stylesCtx);
    }),
    vars == null ? void 0 : vars(theme2, props, stylesCtx)
  ])) == null ? void 0 : _a[selector];
}
function getStyle({
  theme: theme2,
  themeName,
  selector,
  options,
  props,
  stylesCtx,
  rootSelector,
  styles: styles2,
  style,
  vars,
  varsResolver: varsResolver2,
  headless,
  withStylesTransform
}) {
  return {
    ...!withStylesTransform && getThemeStyles({ theme: theme2, themeName, props, stylesCtx, selector }),
    ...!withStylesTransform && resolveStyles({ theme: theme2, styles: styles2, props, stylesCtx })[selector],
    ...!withStylesTransform && resolveStyles({ theme: theme2, styles: options == null ? void 0 : options.styles, props: (options == null ? void 0 : options.props) || props, stylesCtx })[selector],
    ...resolveVars({ theme: theme2, props, stylesCtx, vars, varsResolver: varsResolver2, selector, themeName, headless }),
    ...rootSelector === selector ? resolveStyle({ style, theme: theme2 }) : null,
    ...resolveStyle({ style: options == null ? void 0 : options.style, theme: theme2 })
  };
}
function useStylesTransform({ props, stylesCtx, themeName }) {
  var _a;
  const theme2 = useMantineTheme();
  const stylesTransform2 = (_a = useMantineStylesTransform()) == null ? void 0 : _a();
  const getTransformedStyles = (styles2) => {
    if (!stylesTransform2) {
      return [];
    }
    const transformedStyles = styles2.map(
      (style) => stylesTransform2(style, { props, theme: theme2, ctx: stylesCtx })
    );
    return [
      ...transformedStyles,
      ...themeName.map(
        (n) => {
          var _a2;
          return stylesTransform2((_a2 = theme2.components[n]) == null ? void 0 : _a2.styles, { props, theme: theme2, ctx: stylesCtx });
        }
      )
    ].filter(Boolean);
  };
  return {
    getTransformedStyles,
    withStylesTransform: !!stylesTransform2
  };
}
function useStyles({
  name,
  classes: classes2,
  props,
  stylesCtx,
  className,
  style,
  rootSelector = "root",
  unstyled,
  classNames,
  styles: styles2,
  vars,
  varsResolver: varsResolver2
}) {
  const theme2 = useMantineTheme();
  const classNamesPrefix = useMantineClassNamesPrefix();
  const withStaticClasses = useMantineWithStaticClasses();
  const headless = useMantineIsHeadless();
  const themeName = (Array.isArray(name) ? name : [name]).filter((n) => n);
  const { withStylesTransform, getTransformedStyles } = useStylesTransform({
    props,
    stylesCtx,
    themeName
  });
  return (selector, options) => ({
    className: getClassName({
      theme: theme2,
      options,
      themeName,
      selector,
      classNamesPrefix,
      classNames,
      classes: classes2,
      unstyled,
      className,
      rootSelector,
      props,
      stylesCtx,
      withStaticClasses,
      headless,
      transformedStyles: getTransformedStyles([options == null ? void 0 : options.styles, styles2])
    }),
    style: getStyle({
      theme: theme2,
      themeName,
      selector,
      options,
      props,
      stylesCtx,
      rootSelector,
      styles: styles2,
      style,
      vars,
      varsResolver: varsResolver2,
      headless,
      withStylesTransform
    })
  });
}
function getAutoContrastValue(autoContrast, theme2) {
  return typeof autoContrast === "boolean" ? autoContrast : theme2.autoContrast;
}
function disableTransition(nonce) {
  const style = document.createElement("style");
  style.setAttribute("data-mantine-styles", "inline");
  style.innerHTML = "*, *::before, *::after {transition: none !important;}";
  style.setAttribute("data-mantine-disable-transition", "true");
  nonce && style.setAttribute("nonce", nonce);
  document.head.appendChild(style);
  const clear = () => document.querySelectorAll("[data-mantine-disable-transition]").forEach((element) => element.remove());
  return clear;
}
function useMantineColorScheme({ keepTransitions } = {}) {
  const clearStylesRef = reactExports.useRef(noop$2);
  const timeoutRef = reactExports.useRef(-1);
  const ctx = reactExports.useContext(MantineContext);
  const nonce = useMantineStyleNonce();
  const nonceValue = reactExports.useRef(nonce == null ? void 0 : nonce());
  if (!ctx) {
    throw new Error("[@mantine/core] MantineProvider was not found in tree");
  }
  const setColorScheme = (value) => {
    ctx.setColorScheme(value);
    clearStylesRef.current = keepTransitions ? () => {
    } : disableTransition(nonceValue.current);
    window.clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(() => {
      var _a;
      (_a = clearStylesRef.current) == null ? void 0 : _a.call(clearStylesRef);
    }, 10);
  };
  const clearColorScheme = () => {
    ctx.clearColorScheme();
    clearStylesRef.current = keepTransitions ? () => {
    } : disableTransition(nonceValue.current);
    window.clearTimeout(timeoutRef.current);
    timeoutRef.current = window.setTimeout(() => {
      var _a;
      (_a = clearStylesRef.current) == null ? void 0 : _a.call(clearStylesRef);
    }, 10);
  };
  const osColorScheme = useColorScheme("light", { getInitialValueInEffect: false });
  const computedColorScheme = ctx.colorScheme === "auto" ? osColorScheme : ctx.colorScheme;
  const toggleColorScheme = reactExports.useCallback(
    () => setColorScheme(computedColorScheme === "light" ? "dark" : "light"),
    [setColorScheme, computedColorScheme]
  );
  reactExports.useEffect(
    () => () => {
      var _a;
      (_a = clearStylesRef.current) == null ? void 0 : _a.call(clearStylesRef);
      window.clearTimeout(timeoutRef.current);
    },
    []
  );
  return {
    colorScheme: ctx.colorScheme,
    setColorScheme,
    clearColorScheme,
    toggleColorScheme
  };
}
function useProps(component, defaultProps2, props) {
  var _a;
  const theme2 = useMantineTheme();
  const contextPropsPayload = (_a = theme2.components[component]) == null ? void 0 : _a.defaultProps;
  const contextProps = typeof contextPropsPayload === "function" ? contextPropsPayload(theme2) : contextPropsPayload;
  return { ...defaultProps2, ...contextProps, ...filterProps(props) };
}
function createTheme(theme2) {
  return theme2;
}
function cssObjectToString(css) {
  return keys(css).reduce(
    (acc, rule) => css[rule] !== void 0 ? `${acc}${camelToKebabCase(rule)}:${css[rule]};` : acc,
    ""
  ).trim();
}
function stylesToString({ selector, styles: styles2, media, container }) {
  const baseStyles = styles2 ? cssObjectToString(styles2) : "";
  const mediaQueryStyles = !Array.isArray(media) ? [] : media.map((item) => `@media${item.query}{${selector}{${cssObjectToString(item.styles)}}}`);
  const containerStyles = !Array.isArray(container) ? [] : container.map(
    (item) => `@container ${item.query}{${selector}{${cssObjectToString(item.styles)}}}`
  );
  return `${baseStyles ? `${selector}{${baseStyles}}` : ""}${mediaQueryStyles.join("")}${containerStyles.join("")}`.trim();
}
function InlineStyles(props) {
  const nonce = useMantineStyleNonce();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "style",
    {
      "data-mantine-styles": "inline",
      nonce: nonce == null ? void 0 : nonce(),
      dangerouslySetInnerHTML: { __html: stylesToString(props) }
    }
  );
}
function extractStyleProps(others) {
  const {
    m: m2,
    mx,
    my,
    mt: mt2,
    mb,
    ml,
    mr,
    me: me2,
    ms,
    p: p2,
    px: px2,
    py,
    pt: pt2,
    pb,
    pl,
    pr,
    pe: pe2,
    ps: ps2,
    bd,
    bg,
    c,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta: ta2,
    lh,
    fs,
    tt,
    td,
    w: w2,
    miw,
    maw,
    h: h2,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top,
    left,
    bottom,
    right,
    inset,
    display,
    flex,
    hiddenFrom,
    visibleFrom,
    lightHidden,
    darkHidden,
    sx,
    ...rest
  } = others;
  const styleProps = filterProps({
    m: m2,
    mx,
    my,
    mt: mt2,
    mb,
    ml,
    mr,
    me: me2,
    ms,
    p: p2,
    px: px2,
    py,
    pt: pt2,
    pb,
    pl,
    pr,
    pe: pe2,
    ps: ps2,
    bd,
    bg,
    c,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta: ta2,
    lh,
    fs,
    tt,
    td,
    w: w2,
    miw,
    maw,
    h: h2,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top,
    left,
    bottom,
    right,
    inset,
    display,
    flex,
    hiddenFrom,
    visibleFrom,
    lightHidden,
    darkHidden,
    sx
  });
  return { styleProps, rest };
}
const STYlE_PROPS_DATA = {
  m: { type: "spacing", property: "margin" },
  mt: { type: "spacing", property: "marginTop" },
  mb: { type: "spacing", property: "marginBottom" },
  ml: { type: "spacing", property: "marginLeft" },
  mr: { type: "spacing", property: "marginRight" },
  ms: { type: "spacing", property: "marginInlineStart" },
  me: { type: "spacing", property: "marginInlineEnd" },
  mx: { type: "spacing", property: "marginInline" },
  my: { type: "spacing", property: "marginBlock" },
  p: { type: "spacing", property: "padding" },
  pt: { type: "spacing", property: "paddingTop" },
  pb: { type: "spacing", property: "paddingBottom" },
  pl: { type: "spacing", property: "paddingLeft" },
  pr: { type: "spacing", property: "paddingRight" },
  ps: { type: "spacing", property: "paddingInlineStart" },
  pe: { type: "spacing", property: "paddingInlineEnd" },
  px: { type: "spacing", property: "paddingInline" },
  py: { type: "spacing", property: "paddingBlock" },
  bd: { type: "border", property: "border" },
  bg: { type: "color", property: "background" },
  c: { type: "textColor", property: "color" },
  opacity: { type: "identity", property: "opacity" },
  ff: { type: "fontFamily", property: "fontFamily" },
  fz: { type: "fontSize", property: "fontSize" },
  fw: { type: "identity", property: "fontWeight" },
  lts: { type: "size", property: "letterSpacing" },
  ta: { type: "identity", property: "textAlign" },
  lh: { type: "lineHeight", property: "lineHeight" },
  fs: { type: "identity", property: "fontStyle" },
  tt: { type: "identity", property: "textTransform" },
  td: { type: "identity", property: "textDecoration" },
  w: { type: "spacing", property: "width" },
  miw: { type: "spacing", property: "minWidth" },
  maw: { type: "spacing", property: "maxWidth" },
  h: { type: "spacing", property: "height" },
  mih: { type: "spacing", property: "minHeight" },
  mah: { type: "spacing", property: "maxHeight" },
  bgsz: { type: "size", property: "backgroundSize" },
  bgp: { type: "identity", property: "backgroundPosition" },
  bgr: { type: "identity", property: "backgroundRepeat" },
  bga: { type: "identity", property: "backgroundAttachment" },
  pos: { type: "identity", property: "position" },
  top: { type: "size", property: "top" },
  left: { type: "size", property: "left" },
  bottom: { type: "size", property: "bottom" },
  right: { type: "size", property: "right" },
  inset: { type: "size", property: "inset" },
  display: { type: "identity", property: "display" },
  flex: { type: "identity", property: "flex" }
};
function colorResolver(color, theme2) {
  const parsedColor = parseThemeColor({ color, theme: theme2 });
  if (parsedColor.color === "dimmed") {
    return "var(--mantine-color-dimmed)";
  }
  if (parsedColor.color === "bright") {
    return "var(--mantine-color-bright)";
  }
  return parsedColor.variable ? `var(${parsedColor.variable})` : parsedColor.color;
}
function textColorResolver(color, theme2) {
  const parsedColor = parseThemeColor({ color, theme: theme2 });
  if (parsedColor.isThemeColor && parsedColor.shade === void 0) {
    return `var(--mantine-color-${parsedColor.color}-text)`;
  }
  return colorResolver(color, theme2);
}
function borderResolver(value, theme2) {
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    const [size2, style, ...colorTuple] = value.split(" ").filter((val) => val.trim() !== "");
    let result = `${rem(size2)}`;
    style && (result += ` ${style}`);
    colorTuple.length > 0 && (result += ` ${colorResolver(colorTuple.join(" "), theme2)}`);
    return result.trim();
  }
  return value;
}
const values = {
  text: "var(--mantine-font-family)",
  mono: "var(--mantine-font-family-monospace)",
  monospace: "var(--mantine-font-family-monospace)",
  heading: "var(--mantine-font-family-headings)",
  headings: "var(--mantine-font-family-headings)"
};
function fontFamilyResolver(fontFamily) {
  if (typeof fontFamily === "string" && fontFamily in values) {
    return values[fontFamily];
  }
  return fontFamily;
}
const headings$2 = ["h1", "h2", "h3", "h4", "h5", "h6"];
function fontSizeResolver(value, theme2) {
  if (typeof value === "string" && value in theme2.fontSizes) {
    return `var(--mantine-font-size-${value})`;
  }
  if (typeof value === "string" && headings$2.includes(value)) {
    return `var(--mantine-${value}-font-size)`;
  }
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    return rem(value);
  }
  return value;
}
function identityResolver(value) {
  return value;
}
const headings$1 = ["h1", "h2", "h3", "h4", "h5", "h6"];
function lineHeightResolver(value, theme2) {
  if (typeof value === "string" && value in theme2.lineHeights) {
    return `var(--mantine-line-height-${value})`;
  }
  if (typeof value === "string" && headings$1.includes(value)) {
    return `var(--mantine-${value}-line-height)`;
  }
  return value;
}
function sizeResolver(value) {
  if (typeof value === "number") {
    return rem(value);
  }
  return value;
}
function spacingResolver(value, theme2) {
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    const mod = value.replace("-", "");
    if (!(mod in theme2.spacing)) {
      return rem(value);
    }
    const variable = `--mantine-spacing-${mod}`;
    return value.startsWith("-") ? `calc(var(${variable}) * -1)` : `var(${variable})`;
  }
  return value;
}
const resolvers = {
  color: colorResolver,
  textColor: textColorResolver,
  fontSize: fontSizeResolver,
  spacing: spacingResolver,
  identity: identityResolver,
  size: sizeResolver,
  lineHeight: lineHeightResolver,
  fontFamily: fontFamilyResolver,
  border: borderResolver
};
function replaceMediaQuery(query) {
  return query.replace("(min-width: ", "").replace("em)", "");
}
function sortMediaQueries({
  media,
  ...props
}) {
  const breakpoints = Object.keys(media);
  const sortedMedia = breakpoints.sort((a, b2) => Number(replaceMediaQuery(a)) - Number(replaceMediaQuery(b2))).map((query) => ({ query, styles: media[query] }));
  return { ...props, media: sortedMedia };
}
function hasResponsiveStyles(styleProp) {
  if (typeof styleProp !== "object" || styleProp === null) {
    return false;
  }
  const breakpoints = Object.keys(styleProp);
  if (breakpoints.length === 1 && breakpoints[0] === "base") {
    return false;
  }
  return true;
}
function getBaseValue(value) {
  if (typeof value === "object" && value !== null) {
    if ("base" in value) {
      return value.base;
    }
    return void 0;
  }
  return value;
}
function getBreakpointKeys(value) {
  if (typeof value === "object" && value !== null) {
    return keys(value).filter((key) => key !== "base");
  }
  return [];
}
function getBreakpointValue$1(value, breakpoint) {
  if (typeof value === "object" && value !== null && breakpoint in value) {
    return value[breakpoint];
  }
  return value;
}
function parseStyleProps({
  styleProps,
  data,
  theme: theme2
}) {
  return sortMediaQueries(
    keys(styleProps).reduce(
      (acc, styleProp) => {
        if (styleProp === "hiddenFrom" || styleProp === "visibleFrom" || styleProp === "sx") {
          return acc;
        }
        const propertyData = data[styleProp];
        const properties = Array.isArray(propertyData.property) ? propertyData.property : [propertyData.property];
        const baseValue = getBaseValue(styleProps[styleProp]);
        if (!hasResponsiveStyles(styleProps[styleProp])) {
          properties.forEach((property) => {
            acc.inlineStyles[property] = resolvers[propertyData.type](baseValue, theme2);
          });
          return acc;
        }
        acc.hasResponsiveStyles = true;
        const breakpoints = getBreakpointKeys(styleProps[styleProp]);
        properties.forEach((property) => {
          if (baseValue) {
            acc.styles[property] = resolvers[propertyData.type](baseValue, theme2);
          }
          breakpoints.forEach((breakpoint) => {
            const bp = `(min-width: ${theme2.breakpoints[breakpoint]})`;
            acc.media[bp] = {
              ...acc.media[bp],
              [property]: resolvers[propertyData.type](
                getBreakpointValue$1(styleProps[styleProp], breakpoint),
                theme2
              )
            };
          });
        });
        return acc;
      },
      {
        hasResponsiveStyles: false,
        styles: {},
        inlineStyles: {},
        media: {}
      }
    )
  );
}
function useRandomClassName() {
  const id = reactExports.useId().replace(/:/g, "");
  return `__m__-${id}`;
}
function getStyleObject(style, theme2) {
  if (Array.isArray(style)) {
    return [...style].reduce(
      (acc, item) => ({ ...acc, ...getStyleObject(item, theme2) }),
      {}
    );
  }
  if (typeof style === "function") {
    return style(theme2);
  }
  if (style == null) {
    return {};
  }
  return style;
}
function createPolymorphicComponent(component) {
  return component;
}
function transformModKey(key) {
  return key.startsWith("data-") ? key : `data-${key}`;
}
function getMod(props) {
  return Object.keys(props).reduce((acc, key) => {
    const value = props[key];
    if (value === void 0 || value === "" || value === false || value === null) {
      return acc;
    }
    acc[transformModKey(key)] = props[key];
    return acc;
  }, {});
}
function getBoxMod(mod) {
  if (!mod) {
    return null;
  }
  if (typeof mod === "string") {
    return { [transformModKey(mod)]: true };
  }
  if (Array.isArray(mod)) {
    return [...mod].reduce(
      (acc, value) => ({ ...acc, ...getBoxMod(value) }),
      {}
    );
  }
  return getMod(mod);
}
function mergeStyles(styles2, theme2) {
  if (Array.isArray(styles2)) {
    return [...styles2].reduce(
      (acc, item) => ({ ...acc, ...mergeStyles(item, theme2) }),
      {}
    );
  }
  if (typeof styles2 === "function") {
    return styles2(theme2);
  }
  if (styles2 == null) {
    return {};
  }
  return styles2;
}
function getBoxStyle({
  theme: theme2,
  style,
  vars,
  styleProps
}) {
  const _style = mergeStyles(style, theme2);
  const _vars = mergeStyles(vars, theme2);
  return { ..._style, ..._vars, ...styleProps };
}
const _Box = reactExports.forwardRef(
  ({
    component,
    style,
    __vars,
    className,
    variant,
    mod,
    size: size2,
    hiddenFrom,
    visibleFrom,
    lightHidden,
    darkHidden,
    renderRoot,
    __size,
    ...others
  }, ref) => {
    var _a;
    const theme2 = useMantineTheme();
    const Element2 = component || "div";
    const { styleProps, rest } = extractStyleProps(others);
    const useSxTransform = useMantineSxTransform();
    const transformedSx = (_a = useSxTransform == null ? void 0 : useSxTransform()) == null ? void 0 : _a(styleProps.sx);
    const responsiveClassName = useRandomClassName();
    const parsedStyleProps = parseStyleProps({
      styleProps,
      theme: theme2,
      data: STYlE_PROPS_DATA
    });
    const props = {
      ref,
      style: getBoxStyle({
        theme: theme2,
        style,
        vars: __vars,
        styleProps: parsedStyleProps.inlineStyles
      }),
      className: clsx$1(className, transformedSx, {
        [responsiveClassName]: parsedStyleProps.hasResponsiveStyles,
        "mantine-light-hidden": lightHidden,
        "mantine-dark-hidden": darkHidden,
        [`mantine-hidden-from-${hiddenFrom}`]: hiddenFrom,
        [`mantine-visible-from-${visibleFrom}`]: visibleFrom
      }),
      "data-variant": variant,
      "data-size": isNumberLike(size2) ? void 0 : size2 || void 0,
      size: __size,
      ...getBoxMod(mod),
      ...rest
    };
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      parsedStyleProps.hasResponsiveStyles && /* @__PURE__ */ jsxRuntimeExports.jsx(
        InlineStyles,
        {
          selector: `.${responsiveClassName}`,
          styles: parsedStyleProps.styles,
          media: parsedStyleProps.media
        }
      ),
      typeof renderRoot === "function" ? renderRoot(props) : /* @__PURE__ */ jsxRuntimeExports.jsx(Element2, { ...props })
    ] });
  }
);
_Box.displayName = "@mantine/core/Box";
const Box = createPolymorphicComponent(_Box);
function identity(value) {
  return value;
}
function factory(ui) {
  const Component = reactExports.forwardRef(ui);
  Component.extend = identity;
  Component.withProps = (fixedProps) => {
    const Extended = reactExports.forwardRef((props, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Component, { ...fixedProps, ...props, ref }));
    Extended.extend = Component.extend;
    Extended.displayName = `WithProps(${Component.displayName})`;
    return Extended;
  };
  return Component;
}
function polymorphicFactory(ui) {
  const Component = reactExports.forwardRef(ui);
  Component.withProps = (fixedProps) => {
    const Extended = reactExports.forwardRef((props, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Component, { ...fixedProps, ...props, ref }));
    Extended.extend = Component.extend;
    Extended.displayName = `WithProps(${Component.displayName})`;
    return Extended;
  };
  Component.extend = identity;
  return Component;
}
const DirectionContext = reactExports.createContext({
  dir: "ltr",
  toggleDirection: () => {
  },
  setDirection: () => {
  }
});
function useDirection() {
  return reactExports.useContext(DirectionContext);
}
const [ScrollAreaProvider, useScrollAreaContext] = createSafeContext(
  "ScrollArea.Root component was not found in tree"
);
function useResizeObserver(element, onResize) {
  const handleResize = useCallbackRef(onResize);
  useIsomorphicEffect$1(() => {
    let rAF = 0;
    if (element) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element);
      };
    }
    return void 0;
  }, [element, handleResize]);
}
const Corner = reactExports.forwardRef((props, ref) => {
  const { style, ...others } = props;
  const ctx = useScrollAreaContext();
  const [width, setWidth] = reactExports.useState(0);
  const [height, setHeight] = reactExports.useState(0);
  const hasSize = Boolean(width && height);
  useResizeObserver(ctx.scrollbarX, () => {
    var _a;
    const h2 = ((_a = ctx.scrollbarX) == null ? void 0 : _a.offsetHeight) || 0;
    ctx.onCornerHeightChange(h2);
    setHeight(h2);
  });
  useResizeObserver(ctx.scrollbarY, () => {
    var _a;
    const w2 = ((_a = ctx.scrollbarY) == null ? void 0 : _a.offsetWidth) || 0;
    ctx.onCornerWidthChange(w2);
    setWidth(w2);
  });
  return hasSize ? /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...others, ref, style: { ...style, width, height } }) : null;
});
const ScrollAreaCorner = reactExports.forwardRef((props, ref) => {
  const ctx = useScrollAreaContext();
  const hasBothScrollbarsVisible = Boolean(ctx.scrollbarX && ctx.scrollbarY);
  const hasCorner = ctx.type !== "scroll" && hasBothScrollbarsVisible;
  return hasCorner ? /* @__PURE__ */ jsxRuntimeExports.jsx(Corner, { ...props, ref }) : null;
});
const defaultProps$1C = {
  scrollHideDelay: 1e3,
  type: "hover"
};
const ScrollAreaRoot = reactExports.forwardRef((_props, ref) => {
  const props = useProps("ScrollAreaRoot", defaultProps$1C, _props);
  const { type, scrollHideDelay, scrollbars, ...others } = props;
  const [scrollArea, setScrollArea] = reactExports.useState(null);
  const [viewport, setViewport] = reactExports.useState(null);
  const [content, setContent] = reactExports.useState(null);
  const [scrollbarX, setScrollbarX] = reactExports.useState(null);
  const [scrollbarY, setScrollbarY] = reactExports.useState(null);
  const [cornerWidth, setCornerWidth] = reactExports.useState(0);
  const [cornerHeight, setCornerHeight] = reactExports.useState(0);
  const [scrollbarXEnabled, setScrollbarXEnabled] = reactExports.useState(false);
  const [scrollbarYEnabled, setScrollbarYEnabled] = reactExports.useState(false);
  const rootRef = useMergedRef(ref, (node2) => setScrollArea(node2));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ScrollAreaProvider,
    {
      value: {
        type,
        scrollHideDelay,
        scrollArea,
        viewport,
        onViewportChange: setViewport,
        content,
        onContentChange: setContent,
        scrollbarX,
        onScrollbarXChange: setScrollbarX,
        scrollbarXEnabled,
        onScrollbarXEnabledChange: setScrollbarXEnabled,
        scrollbarY,
        onScrollbarYChange: setScrollbarY,
        scrollbarYEnabled,
        onScrollbarYEnabledChange: setScrollbarYEnabled,
        onCornerWidthChange: setCornerWidth,
        onCornerHeightChange: setCornerHeight
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Box,
        {
          ...others,
          ref: rootRef,
          __vars: {
            "--sa-corner-width": scrollbars !== "xy" ? "0px" : `${cornerWidth}px`,
            "--sa-corner-height": scrollbars !== "xy" ? "0px" : `${cornerHeight}px`
          }
        }
      )
    }
  );
});
ScrollAreaRoot.displayName = "@mantine/core/ScrollAreaRoot";
function getThumbRatio(viewportSize, contentSize) {
  const ratio = viewportSize / contentSize;
  return Number.isNaN(ratio) ? 0 : ratio;
}
function getThumbSize(sizes2) {
  const ratio = getThumbRatio(sizes2.viewport, sizes2.content);
  const scrollbarPadding = sizes2.scrollbar.paddingStart + sizes2.scrollbar.paddingEnd;
  const thumbSize = (sizes2.scrollbar.size - scrollbarPadding) * ratio;
  return Math.max(thumbSize, 18);
}
function linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1]) {
      return output[0];
    }
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}
function clamp$1(value, [min2, max2]) {
  return Math.min(max2, Math.max(min2, value));
}
function getThumbOffsetFromScroll(scrollPos, sizes2, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes2);
  const scrollbarPadding = sizes2.scrollbar.paddingStart + sizes2.scrollbar.paddingEnd;
  const scrollbar = sizes2.scrollbar.size - scrollbarPadding;
  const maxScrollPos = sizes2.content - sizes2.viewport;
  const maxThumbPos = scrollbar - thumbSizePx;
  const scrollClampRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const scrollWithoutMomentum = clamp$1(scrollPos, scrollClampRange);
  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);
  return interpolate(scrollWithoutMomentum);
}
function getScrollPositionFromPointer(pointerPos, pointerOffset, sizes2, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes2);
  const thumbCenter = thumbSizePx / 2;
  const offset2 = pointerOffset || thumbCenter;
  const thumbOffsetFromEnd = thumbSizePx - offset2;
  const minPointerPos = sizes2.scrollbar.paddingStart + offset2;
  const maxPointerPos = sizes2.scrollbar.size - sizes2.scrollbar.paddingEnd - thumbOffsetFromEnd;
  const maxScrollPos = sizes2.content - sizes2.viewport;
  const scrollRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);
  return interpolate(pointerPos);
}
function isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
  return scrollPos > 0 && scrollPos < maxScrollPos;
}
function toInt(value) {
  return value ? parseInt(value, 10) : 0;
}
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return (event) => {
    originalEventHandler == null ? void 0 : originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      ourEventHandler == null ? void 0 : ourEventHandler(event);
    }
  };
}
const [ScrollbarProvider, useScrollbarContext] = createSafeContext(
  "ScrollAreaScrollbar was not found in tree"
);
const Scrollbar = reactExports.forwardRef((props, forwardedRef) => {
  const {
    sizes: sizes2,
    hasThumb,
    onThumbChange,
    onThumbPointerUp,
    onThumbPointerDown,
    onThumbPositionChange,
    onDragScroll,
    onWheelScroll,
    onResize,
    ...scrollbarProps
  } = props;
  const context = useScrollAreaContext();
  const [scrollbar, setScrollbar] = reactExports.useState(null);
  const composeRefs = useMergedRef(forwardedRef, (node2) => setScrollbar(node2));
  const rectRef = reactExports.useRef(null);
  const prevWebkitUserSelectRef = reactExports.useRef("");
  const { viewport } = context;
  const maxScrollPos = sizes2.content - sizes2.viewport;
  const handleWheelScroll = useCallbackRef(onWheelScroll);
  const handleThumbPositionChange = useCallbackRef(onThumbPositionChange);
  const handleResize = useDebouncedCallback(onResize, 10);
  const handleDragScroll = (event) => {
    if (rectRef.current) {
      const x = event.clientX - rectRef.current.left;
      const y2 = event.clientY - rectRef.current.top;
      onDragScroll({ x, y: y2 });
    }
  };
  reactExports.useEffect(() => {
    const handleWheel = (event) => {
      const element = event.target;
      const isScrollbarWheel = scrollbar == null ? void 0 : scrollbar.contains(element);
      if (isScrollbarWheel) {
        handleWheelScroll(event, maxScrollPos);
      }
    };
    document.addEventListener("wheel", handleWheel, { passive: false });
    return () => document.removeEventListener("wheel", handleWheel, { passive: false });
  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);
  reactExports.useEffect(handleThumbPositionChange, [sizes2, handleThumbPositionChange]);
  useResizeObserver(scrollbar, handleResize);
  useResizeObserver(context.content, handleResize);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ScrollbarProvider,
    {
      value: {
        scrollbar,
        hasThumb,
        onThumbChange: useCallbackRef(onThumbChange),
        onThumbPointerUp: useCallbackRef(onThumbPointerUp),
        onThumbPositionChange: handleThumbPositionChange,
        onThumbPointerDown: useCallbackRef(onThumbPointerDown)
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "div",
        {
          ...scrollbarProps,
          ref: composeRefs,
          "data-mantine-scrollbar": true,
          style: { position: "absolute", ...scrollbarProps.style },
          onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
            event.preventDefault();
            const mainPointer = 0;
            if (event.button === mainPointer) {
              const element = event.target;
              element.setPointerCapture(event.pointerId);
              rectRef.current = scrollbar.getBoundingClientRect();
              prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
              document.body.style.webkitUserSelect = "none";
              handleDragScroll(event);
            }
          }),
          onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),
          onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
            event.preventDefault();
            const element = event.target;
            if (element.hasPointerCapture(event.pointerId)) {
              element.releasePointerCapture(event.pointerId);
            }
            document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
            rectRef.current = null;
          })
        }
      )
    }
  );
});
const ScrollAreaScrollbarX = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { sizes: sizes2, onSizesChange, style, ...others } = props;
    const ctx = useScrollAreaContext();
    const [computedStyle, setComputedStyle] = reactExports.useState();
    const ref = reactExports.useRef(null);
    const composeRefs = useMergedRef(forwardedRef, ref, ctx.onScrollbarXChange);
    reactExports.useEffect(() => {
      if (ref.current) {
        setComputedStyle(getComputedStyle(ref.current));
      }
    }, [ref]);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Scrollbar,
      {
        "data-orientation": "horizontal",
        ...others,
        ref: composeRefs,
        sizes: sizes2,
        style: {
          ...style,
          ["--sa-thumb-width"]: `${getThumbSize(sizes2)}px`
        },
        onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
        onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
        onWheelScroll: (event, maxScrollPos) => {
          if (ctx.viewport) {
            const scrollPos = ctx.viewport.scrollLeft + event.deltaX;
            props.onWheelScroll(scrollPos);
            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
              event.preventDefault();
            }
          }
        },
        onResize: () => {
          if (ref.current && ctx.viewport && computedStyle) {
            onSizesChange({
              content: ctx.viewport.scrollWidth,
              viewport: ctx.viewport.offsetWidth,
              scrollbar: {
                size: ref.current.clientWidth,
                paddingStart: toInt(computedStyle.paddingLeft),
                paddingEnd: toInt(computedStyle.paddingRight)
              }
            });
          }
        }
      }
    );
  }
);
ScrollAreaScrollbarX.displayName = "@mantine/core/ScrollAreaScrollbarX";
const ScrollAreaScrollbarY = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { sizes: sizes2, onSizesChange, style, ...others } = props;
    const context = useScrollAreaContext();
    const [computedStyle, setComputedStyle] = reactExports.useState();
    const ref = reactExports.useRef(null);
    const composeRefs = useMergedRef(forwardedRef, ref, context.onScrollbarYChange);
    reactExports.useEffect(() => {
      if (ref.current) {
        setComputedStyle(window.getComputedStyle(ref.current));
      }
    }, []);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Scrollbar,
      {
        ...others,
        "data-orientation": "vertical",
        ref: composeRefs,
        sizes: sizes2,
        style: {
          ["--sa-thumb-height"]: `${getThumbSize(sizes2)}px`,
          ...style
        },
        onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
        onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
        onWheelScroll: (event, maxScrollPos) => {
          if (context.viewport) {
            const scrollPos = context.viewport.scrollTop + event.deltaY;
            props.onWheelScroll(scrollPos);
            if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
              event.preventDefault();
            }
          }
        },
        onResize: () => {
          if (ref.current && context.viewport && computedStyle) {
            onSizesChange({
              content: context.viewport.scrollHeight,
              viewport: context.viewport.offsetHeight,
              scrollbar: {
                size: ref.current.clientHeight,
                paddingStart: toInt(computedStyle.paddingTop),
                paddingEnd: toInt(computedStyle.paddingBottom)
              }
            });
          }
        }
      }
    );
  }
);
ScrollAreaScrollbarY.displayName = "@mantine/core/ScrollAreaScrollbarY";
const ScrollAreaScrollbarVisible = reactExports.forwardRef((props, forwardedRef) => {
  const { orientation = "vertical", ...scrollbarProps } = props;
  const { dir } = useDirection();
  const context = useScrollAreaContext();
  const thumbRef = reactExports.useRef(null);
  const pointerOffsetRef = reactExports.useRef(0);
  const [sizes2, setSizes] = reactExports.useState({
    content: 0,
    viewport: 0,
    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
  });
  const thumbRatio = getThumbRatio(sizes2.viewport, sizes2.content);
  const commonProps = {
    ...scrollbarProps,
    sizes: sizes2,
    onSizesChange: setSizes,
    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
    onThumbChange: (thumb) => {
      thumbRef.current = thumb;
    },
    onThumbPointerUp: () => {
      pointerOffsetRef.current = 0;
    },
    onThumbPointerDown: (pointerPos) => {
      pointerOffsetRef.current = pointerPos;
    }
  };
  const getScrollPosition = (pointerPos, direction) => getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes2, direction);
  if (orientation === "horizontal") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      ScrollAreaScrollbarX,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollLeft;
            const offset2 = getThumbOffsetFromScroll(scrollPos, sizes2, dir);
            thumbRef.current.style.transform = `translate3d(${offset2}px, 0, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport) {
            context.viewport.scrollLeft = scrollPos;
          }
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport) {
            context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);
          }
        }
      }
    );
  }
  if (orientation === "vertical") {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      ScrollAreaScrollbarY,
      {
        ...commonProps,
        ref: forwardedRef,
        onThumbPositionChange: () => {
          if (context.viewport && thumbRef.current) {
            const scrollPos = context.viewport.scrollTop;
            const offset2 = getThumbOffsetFromScroll(scrollPos, sizes2);
            if (sizes2.scrollbar.size === 0) {
              thumbRef.current.style.setProperty("--thumb-opacity", "0");
            } else {
              thumbRef.current.style.setProperty("--thumb-opacity", "1");
            }
            thumbRef.current.style.transform = `translate3d(0, ${offset2}px, 0)`;
          }
        },
        onWheelScroll: (scrollPos) => {
          if (context.viewport) {
            context.viewport.scrollTop = scrollPos;
          }
        },
        onDragScroll: (pointerPos) => {
          if (context.viewport) {
            context.viewport.scrollTop = getScrollPosition(pointerPos);
          }
        }
      }
    );
  }
  return null;
});
ScrollAreaScrollbarVisible.displayName = "@mantine/core/ScrollAreaScrollbarVisible";
const ScrollAreaScrollbarAuto = reactExports.forwardRef(
  (props, ref) => {
    const context = useScrollAreaContext();
    const { forceMount, ...scrollbarProps } = props;
    const [visible2, setVisible] = reactExports.useState(false);
    const isHorizontal = props.orientation === "horizontal";
    const handleResize = useDebouncedCallback(() => {
      if (context.viewport) {
        const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
        const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
        setVisible(isHorizontal ? isOverflowX : isOverflowY);
      }
    }, 10);
    useResizeObserver(context.viewport, handleResize);
    useResizeObserver(context.content, handleResize);
    if (forceMount || visible2) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ScrollAreaScrollbarVisible,
        {
          "data-state": visible2 ? "visible" : "hidden",
          ...scrollbarProps,
          ref
        }
      );
    }
    return null;
  }
);
ScrollAreaScrollbarAuto.displayName = "@mantine/core/ScrollAreaScrollbarAuto";
const ScrollAreaScrollbarHover = reactExports.forwardRef(
  (props, ref) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext();
    const [visible2, setVisible] = reactExports.useState(false);
    reactExports.useEffect(() => {
      const { scrollArea } = context;
      let hideTimer = 0;
      if (scrollArea) {
        const handlePointerEnter = () => {
          window.clearTimeout(hideTimer);
          setVisible(true);
        };
        const handlePointerLeave = () => {
          hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);
        };
        scrollArea.addEventListener("pointerenter", handlePointerEnter);
        scrollArea.addEventListener("pointerleave", handlePointerLeave);
        return () => {
          window.clearTimeout(hideTimer);
          scrollArea.removeEventListener("pointerenter", handlePointerEnter);
          scrollArea.removeEventListener("pointerleave", handlePointerLeave);
        };
      }
      return void 0;
    }, [context.scrollArea, context.scrollHideDelay]);
    if (forceMount || visible2) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ScrollAreaScrollbarAuto,
        {
          "data-state": visible2 ? "visible" : "hidden",
          ...scrollbarProps,
          ref
        }
      );
    }
    return null;
  }
);
ScrollAreaScrollbarHover.displayName = "@mantine/core/ScrollAreaScrollbarHover";
const ScrollAreaScrollbarScroll = reactExports.forwardRef(
  (props, red) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext();
    const isHorizontal = props.orientation === "horizontal";
    const [state, setState] = reactExports.useState("hidden");
    const debounceScrollEnd = useDebouncedCallback(() => setState("idle"), 100);
    reactExports.useEffect(() => {
      if (state === "idle") {
        const hideTimer = window.setTimeout(() => setState("hidden"), context.scrollHideDelay);
        return () => window.clearTimeout(hideTimer);
      }
      return void 0;
    }, [state, context.scrollHideDelay]);
    reactExports.useEffect(() => {
      const { viewport } = context;
      const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
      if (viewport) {
        let prevScrollPos = viewport[scrollDirection];
        const handleScroll2 = () => {
          const scrollPos = viewport[scrollDirection];
          const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
          if (hasScrollInDirectionChanged) {
            setState("scrolling");
            debounceScrollEnd();
          }
          prevScrollPos = scrollPos;
        };
        viewport.addEventListener("scroll", handleScroll2);
        return () => viewport.removeEventListener("scroll", handleScroll2);
      }
      return void 0;
    }, [context.viewport, isHorizontal, debounceScrollEnd]);
    if (forceMount || state !== "hidden") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(
        ScrollAreaScrollbarVisible,
        {
          "data-state": state === "hidden" ? "hidden" : "visible",
          ...scrollbarProps,
          ref: red,
          onPointerEnter: composeEventHandlers(props.onPointerEnter, () => setState("interacting")),
          onPointerLeave: composeEventHandlers(props.onPointerLeave, () => setState("idle"))
        }
      );
    }
    return null;
  }
);
const ScrollAreaScrollbar = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...scrollbarProps } = props;
    const context = useScrollAreaContext();
    const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
    const isHorizontal = props.orientation === "horizontal";
    reactExports.useEffect(() => {
      isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
      return () => {
        isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
      };
    }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);
    return context.type === "hover" ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaScrollbarHover, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "scroll" ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaScrollbarScroll, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "auto" ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaScrollbarAuto, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "always" ? /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaScrollbarVisible, { ...scrollbarProps, ref: forwardedRef }) : null;
  }
);
ScrollAreaScrollbar.displayName = "@mantine/core/ScrollAreaScrollbar";
function addUnlinkedScrollListener(node2, handler = () => {
}) {
  let prevPosition = { left: node2.scrollLeft, top: node2.scrollTop };
  let rAF = 0;
  (function loop() {
    const position2 = { left: node2.scrollLeft, top: node2.scrollTop };
    const isHorizontalScroll = prevPosition.left !== position2.left;
    const isVerticalScroll = prevPosition.top !== position2.top;
    if (isHorizontalScroll || isVerticalScroll) {
      handler();
    }
    prevPosition = position2;
    rAF = window.requestAnimationFrame(loop);
  })();
  return () => window.cancelAnimationFrame(rAF);
}
const Thumb = reactExports.forwardRef((props, forwardedRef) => {
  const { style, ...others } = props;
  const scrollAreaContext = useScrollAreaContext();
  const scrollbarContext = useScrollbarContext();
  const { onThumbPositionChange } = scrollbarContext;
  const composedRef = useMergedRef(forwardedRef, (node2) => scrollbarContext.onThumbChange(node2));
  const removeUnlinkedScrollListenerRef = reactExports.useRef(void 0);
  const debounceScrollEnd = useDebouncedCallback(() => {
    if (removeUnlinkedScrollListenerRef.current) {
      removeUnlinkedScrollListenerRef.current();
      removeUnlinkedScrollListenerRef.current = void 0;
    }
  }, 100);
  reactExports.useEffect(() => {
    const { viewport } = scrollAreaContext;
    if (viewport) {
      const handleScroll2 = () => {
        debounceScrollEnd();
        if (!removeUnlinkedScrollListenerRef.current) {
          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);
          removeUnlinkedScrollListenerRef.current = listener;
          onThumbPositionChange();
        }
      };
      onThumbPositionChange();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
    return void 0;
  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "div",
    {
      "data-state": scrollbarContext.hasThumb ? "visible" : "hidden",
      ...others,
      ref: composedRef,
      style: {
        width: "var(--sa-thumb-width)",
        height: "var(--sa-thumb-height)",
        ...style
      },
      onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, (event) => {
        const thumb = event.target;
        const thumbRect = thumb.getBoundingClientRect();
        const x = event.clientX - thumbRect.left;
        const y2 = event.clientY - thumbRect.top;
        scrollbarContext.onThumbPointerDown({ x, y: y2 });
      }),
      onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)
    }
  );
});
Thumb.displayName = "@mantine/core/ScrollAreaThumb";
const ScrollAreaThumb = reactExports.forwardRef(
  (props, forwardedRef) => {
    const { forceMount, ...thumbProps } = props;
    const scrollbarContext = useScrollbarContext();
    if (forceMount || scrollbarContext.hasThumb) {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(Thumb, { ref: forwardedRef, ...thumbProps });
    }
    return null;
  }
);
ScrollAreaThumb.displayName = "@mantine/core/ScrollAreaThumb";
const ScrollAreaViewport = reactExports.forwardRef(
  ({ children, style, ...others }, ref) => {
    const ctx = useScrollAreaContext();
    const rootRef = useMergedRef(ref, ctx.onViewportChange);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ...others,
        ref: rootRef,
        style: {
          overflowX: ctx.scrollbarXEnabled ? "scroll" : "hidden",
          overflowY: ctx.scrollbarYEnabled ? "scroll" : "hidden",
          ...style
        },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { style: { minWidth: "100%", display: "table" }, ref: ctx.onContentChange, children })
      }
    );
  }
);
ScrollAreaViewport.displayName = "@mantine/core/ScrollAreaViewport";
var classes$L = { "root": "m_d57069b5", "viewport": "m_c0783ff9", "viewportInner": "m_f8f631dd", "scrollbar": "m_c44ba933", "thumb": "m_d8b5e363", "corner": "m_21657268" };
const defaultProps$1B = {
  scrollHideDelay: 1e3,
  type: "hover",
  scrollbars: "xy"
};
const varsResolver$K = createVarsResolver((_, { scrollbarSize }) => ({
  root: {
    "--scrollarea-scrollbar-size": rem(scrollbarSize)
  }
}));
const ScrollArea = factory((_props, ref) => {
  const props = useProps("ScrollArea", defaultProps$1B, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    scrollbarSize,
    vars,
    type,
    scrollHideDelay,
    viewportProps,
    viewportRef,
    onScrollPositionChange,
    children,
    offsetScrollbars,
    scrollbars,
    onBottomReached,
    onTopReached,
    ...others
  } = props;
  const [scrollbarHovered, setScrollbarHovered] = reactExports.useState(false);
  const getStyles2 = useStyles({
    name: "ScrollArea",
    props,
    classes: classes$L,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$K
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    ScrollAreaRoot,
    {
      type: type === "never" ? "always" : type,
      scrollHideDelay,
      ref,
      scrollbars,
      ...getStyles2("root"),
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ScrollAreaViewport,
          {
            ...viewportProps,
            ...getStyles2("viewport", { style: viewportProps == null ? void 0 : viewportProps.style }),
            ref: viewportRef,
            "data-offset-scrollbars": offsetScrollbars === true ? "xy" : offsetScrollbars || void 0,
            "data-scrollbars": scrollbars || void 0,
            onScroll: (e) => {
              var _a;
              (_a = viewportProps == null ? void 0 : viewportProps.onScroll) == null ? void 0 : _a.call(viewportProps, e);
              onScrollPositionChange == null ? void 0 : onScrollPositionChange({ x: e.currentTarget.scrollLeft, y: e.currentTarget.scrollTop });
              const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
              if (scrollTop - (scrollHeight - clientHeight) >= 0) {
                onBottomReached == null ? void 0 : onBottomReached();
              }
              if (scrollTop === 0) {
                onTopReached == null ? void 0 : onTopReached();
              }
            },
            children
          }
        ),
        (scrollbars === "xy" || scrollbars === "x") && /* @__PURE__ */ jsxRuntimeExports.jsx(
          ScrollAreaScrollbar,
          {
            ...getStyles2("scrollbar"),
            orientation: "horizontal",
            "data-hidden": type === "never" || void 0,
            forceMount: true,
            onMouseEnter: () => setScrollbarHovered(true),
            onMouseLeave: () => setScrollbarHovered(false),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaThumb, { ...getStyles2("thumb") })
          }
        ),
        (scrollbars === "xy" || scrollbars === "y") && /* @__PURE__ */ jsxRuntimeExports.jsx(
          ScrollAreaScrollbar,
          {
            ...getStyles2("scrollbar"),
            orientation: "vertical",
            "data-hidden": type === "never" || void 0,
            forceMount: true,
            onMouseEnter: () => setScrollbarHovered(true),
            onMouseLeave: () => setScrollbarHovered(false),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(ScrollAreaThumb, { ...getStyles2("thumb") })
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          ScrollAreaCorner,
          {
            ...getStyles2("corner"),
            "data-hovered": scrollbarHovered || void 0,
            "data-hidden": type === "never" || void 0
          }
        )
      ]
    }
  );
});
ScrollArea.displayName = "@mantine/core/ScrollArea";
const ScrollAreaAutosize = factory((props, ref) => {
  const {
    children,
    classNames,
    styles: styles2,
    scrollbarSize,
    scrollHideDelay,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled,
    variant,
    viewportProps,
    scrollbars,
    style,
    vars,
    onBottomReached,
    onTopReached,
    ...others
  } = useProps("ScrollAreaAutosize", defaultProps$1B, props);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ...others, ref, style: [{ display: "flex", overflow: "auto" }, style], children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { style: { display: "flex", flexDirection: "column", flex: 1 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    ScrollArea,
    {
      classNames,
      styles: styles2,
      scrollHideDelay,
      scrollbarSize,
      type,
      dir,
      offsetScrollbars,
      viewportRef,
      onScrollPositionChange,
      unstyled,
      variant,
      viewportProps,
      vars,
      scrollbars,
      onBottomReached,
      onTopReached,
      children
    }
  ) }) });
});
ScrollArea.classes = classes$L;
ScrollAreaAutosize.displayName = "@mantine/core/ScrollAreaAutosize";
ScrollAreaAutosize.classes = classes$L;
ScrollArea.Autosize = ScrollAreaAutosize;
var classes$K = { "root": "m_87cf2631" };
const defaultProps$1A = {
  __staticSelector: "UnstyledButton"
};
const UnstyledButton = polymorphicFactory(
  (_props, ref) => {
    const props = useProps("UnstyledButton", defaultProps$1A, _props);
    const {
      className,
      component = "button",
      __staticSelector,
      unstyled,
      classNames,
      styles: styles2,
      style,
      ...others
    } = props;
    const getStyles2 = useStyles({
      name: __staticSelector,
      props,
      classes: classes$K,
      className,
      style,
      classNames,
      styles: styles2,
      unstyled
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ...getStyles2("root", { focusable: true }),
        component,
        ref,
        type: component === "button" ? "button" : void 0,
        ...others
      }
    );
  }
);
UnstyledButton.classes = classes$K;
UnstyledButton.displayName = "@mantine/core/UnstyledButton";
var classes$J = { "root": "m_515a97f8" };
const defaultProps$1z = {};
const VisuallyHidden = factory((_props, ref) => {
  const props = useProps("VisuallyHidden", defaultProps$1z, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, ...others } = props;
  const getStyles2 = useStyles({
    name: "VisuallyHidden",
    classes: classes$J,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", ref, ...getStyles2("root"), ...others });
});
VisuallyHidden.classes = classes$J;
VisuallyHidden.displayName = "@mantine/core/VisuallyHidden";
var classes$I = { "root": "m_1b7284a3" };
const defaultProps$1y = {};
const varsResolver$J = createVarsResolver((_, { radius, shadow }) => ({
  root: {
    "--paper-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--paper-shadow": getShadow(shadow)
  }
}));
const Paper = polymorphicFactory((_props, ref) => {
  const props = useProps("Paper", defaultProps$1y, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    withBorder,
    vars,
    radius,
    shadow,
    variant,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Paper",
    props,
    classes: classes$I,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$J
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      mod: [{ "data-with-border": withBorder }, mod],
      ...getStyles2("root"),
      variant,
      ...others
    }
  );
});
Paper.classes = classes$I;
Paper.displayName = "@mantine/core/Paper";
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node2) {
  if (isNode(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref;
  return (_ref = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node2.assignedSlot || // DOM Element detected.
    node2.parentNode || // ShadowRoot detected.
    isShadowRoot(node2) && node2.host || // Fallback.
    getDocumentElement(node2)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null || (_activeElement = _activeElement.shadowRoot) == null ? void 0 : _activeElement.activeElement) != null) {
    var _activeElement;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next2 = child;
    while (next2) {
      if (parent === next2) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    }
  }
  return false;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isVirtualPointerEvent(event) {
  if (isJSDOM())
    return false;
  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "touch";
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isAndroid() {
  const re2 = /android/i;
  return re2.test(getPlatform()) || re2.test(getUserAgent());
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isJSDOM() {
  return getUserAgent().includes("jsdom/");
}
function isMouseLikePointerType(pointerType, strict) {
  const values2 = ["mouse", "pen"];
  if (!strict) {
    values2.push("", void 0);
  }
  return values2.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function isRootElement(element) {
  return element.matches("html,body");
}
function getDocument(node2) {
  return (node2 == null ? void 0 : node2.ownerDocument) || document;
}
function isEventTargetWithin(event, node2) {
  if (node2 == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node2);
  }
  const e = event;
  return e.target != null && node2.contains(e.target);
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
const TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length2 = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length2] > rects.floating[length2]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr2 = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr2;
      return isStart ? lr2 : rl;
    case "left":
    case "right":
      return isStart ? tb : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y: y2,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y2,
    left: x,
    right: x + width,
    bottom: y2 + height,
    x,
    y: y2
  };
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware2.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y: y2,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y: y2,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const arrow$3 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x,
      y: y2,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x,
      y: y2
    };
    const axis = getAlignmentAxis(placement);
    const length2 = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length2];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length2] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
    const offset2 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
const flip$2 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a, b2) => a.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d2.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b2) => a[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a, b2) => a.y - b2.y);
  const groups = [];
  let prevRect = null;
  for (let i = 0; i < sortedRects.length; i++) {
    const rect = sortedRects[i];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
const inline$2 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "inline",
    options,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform: platform2,
        strategy
      } = state;
      const {
        padding = 2,
        x,
        y: y2
      } = evaluate(options, state);
      const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
      const paddingObject = getPaddingObject(padding);
      function getBoundingClientRect2() {
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y2 != null) {
          return clientRects.find((rect) => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y2 > rect.top - paddingObject.top && y2 < rect.bottom + paddingObject.bottom) || fallback;
        }
        if (clientRects.length >= 2) {
          if (getSideAxis(placement) === "y") {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide(placement) === "top";
            const top2 = firstRect.top;
            const bottom2 = lastRect.bottom;
            const left2 = isTop ? firstRect.left : lastRect.left;
            const right2 = isTop ? firstRect.right : lastRect.right;
            const width2 = right2 - left2;
            const height2 = bottom2 - top2;
            return {
              top: top2,
              bottom: bottom2,
              left: left2,
              right: right2,
              width: width2,
              height: height2,
              x: left2,
              y: top2
            };
          }
          const isLeftSide = getSide(placement) === "left";
          const maxRight = max(...clientRects.map((rect) => rect.right));
          const minLeft = min(...clientRects.map((rect) => rect.left));
          const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top = measureRects[0].top;
          const bottom = measureRects[measureRects.length - 1].bottom;
          const left = minLeft;
          const right = maxRight;
          const width = right - left;
          const height = bottom - top;
          return {
            top,
            bottom,
            left,
            right,
            width,
            height,
            x: left,
            y: top
          };
        }
        return fallback;
      }
      const resetRects = await platform2.getElementRects({
        reference: {
          getBoundingClientRect: getBoundingClientRect2
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset$2 = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x,
        y: y2,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x + diffCoords.x,
        y: y2 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
const shift$2 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x,
        y: y2,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y3
            } = _ref;
            return {
              x: x2,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x,
        y: y2
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y2,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
const limitShift$2 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x,
        y: y2,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x,
        y: y2
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset2, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
const size$2 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};
function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x = ($2 ? round(rect.width) : rect.width) / width;
  let y2 = ($2 ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x,
    y: y2
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y: y2
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y2 = htmlRect.top + scroll.scrollTop;
  return {
    x,
    y: y2
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body2 = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body2.scrollWidth, body2.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body2.scrollHeight, body2.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle$1(body2).direction === "rtl") {
    x += max(html.clientWidth, body2.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y: y2
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y: y2
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y2 = top * scale.y;
  return {
    width,
    height,
    x,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x,
    y: y2,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle$1(element).position === "static";
}
function getTrueOffsetParent(element, polyfill2) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill2) {
    return polyfill2(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill2) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill2);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill2);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
const getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a, b2) {
  return a.x === b2.x && a.y === b2.y && a.width === b2.width && a.height === b2.height;
}
function observeMove(element, onMove) {
  let io2 = null;
  let timeoutId;
  const root2 = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io2) == null || _io.disconnect();
    io2 = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root2.clientWidth - (left + width));
    const insetBottom = floor(root2.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io2 = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root2.ownerDocument
      });
    } catch (e) {
      io2 = new IntersectionObserver(handleObserve, options);
    }
    io2.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const offset$1 = offset$2;
const shift$1 = shift$2;
const flip$1 = flip$2;
const size$1 = size$2;
const arrow$2 = arrow$3;
const inline$1 = inline$2;
const limitShift$1 = limitShift$2;
const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
var index$2 = typeof document !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function deepEqual(a, b2) {
  if (a === b2) {
    return true;
  }
  if (typeof a !== typeof b2) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b2.toString()) {
    return true;
  }
  let length2;
  let i;
  let keys2;
  if (a && b2 && typeof a === "object") {
    if (Array.isArray(a)) {
      length2 = a.length;
      if (length2 !== b2.length)
        return false;
      for (i = length2; i-- !== 0; ) {
        if (!deepEqual(a[i], b2[i])) {
          return false;
        }
      }
      return true;
    }
    keys2 = Object.keys(a);
    length2 = keys2.length;
    if (length2 !== Object.keys(b2).length) {
      return false;
    }
    for (i = length2; i-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b2, keys2[i])) {
        return false;
      }
    }
    for (i = length2; i-- !== 0; ) {
      const key = keys2[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b2[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b2 !== b2;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef$1(value) {
  const ref = reactExports.useRef(value);
  index$2(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating$1(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = reactExports.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = reactExports.useState(middleware2);
  if (!deepEqual(latestMiddleware, middleware2)) {
    setLatestMiddleware(middleware2);
  }
  const [_reference, _setReference] = reactExports.useState(null);
  const [_floating, _setFloating] = reactExports.useState(null);
  const setReference = reactExports.useCallback((node2) => {
    if (node2 !== referenceRef.current) {
      referenceRef.current = node2;
      _setReference(node2);
    }
  }, []);
  const setFloating = reactExports.useCallback((node2) => {
    if (node2 !== floatingRef.current) {
      floatingRef.current = node2;
      _setFloating(node2);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = reactExports.useRef(null);
  const floatingRef = reactExports.useRef(null);
  const dataRef = reactExports.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef$1(whileElementsMounted);
  const platformRef = useLatestRef$1(platform2);
  const openRef = useLatestRef$1(open);
  const update = reactExports.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        // The floating element's position may be recomputed while it's closed
        // but still mounted (such as when transitioning out). To ensure
        // `isPositioned` will be `false` initially on the next open, avoid
        // setting it to `true` when `open === false` (must be specified).
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        reactDomExports.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index$2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = reactExports.useRef(false);
  index$2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index$2(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = reactExports.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = reactExports.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = reactExports.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x = roundByDPR(elements.floating, data.x);
    const y2 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x + "px, " + y2 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x,
      top: y2
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return reactExports.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
const arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow$2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow$2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
const offset = (options, deps) => ({
  ...offset$1(options),
  options: [options, deps]
});
const shift = (options, deps) => ({
  ...shift$1(options),
  options: [options, deps]
});
const limitShift = (options, deps) => ({
  ...limitShift$1(options),
  options: [options, deps]
});
const flip = (options, deps) => ({
  ...flip$1(options),
  options: [options, deps]
});
const size = (options, deps) => ({
  ...size$1(options),
  options: [options, deps]
});
const inline = (options, deps) => ({
  ...inline$1(options),
  options: [options, deps]
});
const arrow = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});
const SafeReact = {
  ...React$1
};
const useInsertionEffect$1 = SafeReact.useInsertionEffect;
const useSafeInsertionEffect = useInsertionEffect$1 || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = reactExports.useRef(() => {
    {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return reactExports.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
var index$1 = typeof document !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
let serverHandoffComplete = false;
let count = 0;
const genId = () => (
  // Ensure the id is unique with multiple independent versions of Floating UI
  // on <React 18
  "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++
);
function useFloatingId() {
  const [id, setId] = reactExports.useState(() => serverHandoffComplete ? genId() : void 0);
  index$1(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  reactExports.useEffect(() => {
    serverHandoffComplete = true;
  }, []);
  return id;
}
const useReactId = SafeReact.useId;
const useId = useReactId || useFloatingId;
let devMessageSet;
{
  devMessageSet = /* @__PURE__ */ new Set();
}
function error() {
  var _devMessageSet3;
  for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    messages[_key2] = arguments[_key2];
  }
  const message = "Floating UI: " + messages.join(" ");
  if (!((_devMessageSet3 = devMessageSet) != null && _devMessageSet3.has(message))) {
    var _devMessageSet4;
    (_devMessageSet4 = devMessageSet) == null || _devMessageSet4.add(message);
    console.error(message);
  }
}
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null || _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l) => l !== listener)) || []);
    }
  };
}
const FloatingNodeContext = /* @__PURE__ */ reactExports.createContext(null);
const FloatingTreeContext = /* @__PURE__ */ reactExports.createContext(null);
const useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = reactExports.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
const useFloatingTree = () => reactExports.useContext(FloatingTreeContext);
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function useLatestRef(value) {
  const ref = reactExports.useRef(value);
  index$1(() => {
    ref.current = value;
  });
  return ref;
}
const safePolygonIdentifier = /* @__PURE__ */ createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function useHover(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef(handleClose);
  const delayRef = useLatestRef(delay);
  const openRef = useLatestRef(open);
  const pointerTypeRef = reactExports.useRef();
  const timeoutRef = reactExports.useRef(-1);
  const handlerRef = reactExports.useRef();
  const restTimeoutRef = reactExports.useRef(-1);
  const blockMouseMoveRef = reactExports.useRef(true);
  const performedPointerEventsMutationRef = reactExports.useRef(false);
  const unbindMouseMoveRef = reactExports.useRef(() => {
  });
  const restTimeoutPendingRef = reactExports.useRef(false);
  const isHoverOpen = reactExports.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  reactExports.useEffect(() => {
    if (!enabled)
      return;
    function onOpenChange2(_ref) {
      let {
        open: open2
      } = _ref;
      if (!open2) {
        clearTimeout(timeoutRef.current);
        clearTimeout(restTimeoutRef.current);
        blockMouseMoveRef.current = true;
        restTimeoutPendingRef.current = false;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [enabled, events]);
  reactExports.useEffect(() => {
    if (!enabled)
      return;
    if (!handleCloseRef.current)
      return;
    if (!open)
      return;
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event, "hover");
      }
    }
    const html = getDocument(elements.floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);
  const closeWithDelay = reactExports.useCallback(function(event, runElseBranch, reason) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    if (reason === void 0) {
      reason = "hover";
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false, event, reason);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = useEffectEvent(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  });
  const clearPointerEvents = useEffectEvent(() => {
    if (performedPointerEventsMutationRef.current) {
      const body2 = getDocument(elements.floating).body;
      body2.style.pointerEvents = "";
      body2.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  });
  const isClickLikeOpenEvent = useEffectEvent(() => {
    return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
  });
  reactExports.useEffect(() => {
    if (!enabled)
      return;
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, "open")) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = window.setTimeout(() => {
          if (!openRef.current) {
            onOpenChange(true, event, "hover");
          }
        }, openDelay);
      } else if (!open) {
        onOpenChange(true, event, "hover");
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent())
        return;
      unbindMouseMoveRef.current();
      const doc = getDocument(elements.floating);
      clearTimeout(restTimeoutRef.current);
      restTimeoutPendingRef.current = false;
      if (handleCloseRef.current && dataRef.current.floatingContext) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...dataRef.current.floatingContext,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            if (!isClickLikeOpenEvent()) {
              closeWithDelay(event, true, "safe-polygon");
            }
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(elements.floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent())
        return;
      if (!dataRef.current.floatingContext)
        return;
      handleCloseRef.current == null || handleCloseRef.current({
        ...dataRef.current.floatingContext,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          if (!isClickLikeOpenEvent()) {
            closeWithDelay(event);
          }
        }
      })(event);
    }
    if (isElement(elements.domReference)) {
      var _elements$floating;
      const ref = elements.domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        var _elements$floating2;
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [elements, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);
  index$1(() => {
    var _handleCloseRef$curre;
    if (!enabled)
      return;
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      performedPointerEventsMutationRef.current = true;
      const floatingEl = elements.floating;
      if (isElement(elements.domReference) && floatingEl) {
        var _tree$nodesRef$curren;
        const body2 = getDocument(elements.floating).body;
        body2.setAttribute(safePolygonIdentifier, "");
        const ref = elements.domReference;
        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node2) => node2.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        body2.style.pointerEvents = "none";
        ref.style.pointerEvents = "auto";
        floatingEl.style.pointerEvents = "auto";
        return () => {
          body2.style.pointerEvents = "";
          ref.style.pointerEvents = "";
          floatingEl.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);
  index$1(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      restTimeoutPendingRef.current = false;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  reactExports.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);
  const reference = reactExports.useMemo(() => {
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef,
      onMouseMove(event) {
        const {
          nativeEvent
        } = event;
        function handleMouseMove() {
          if (!blockMouseMoveRef.current && !openRef.current) {
            onOpenChange(true, nativeEvent, "hover");
          }
        }
        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {
          return;
        }
        if (open || restMs === 0) {
          return;
        }
        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {
          return;
        }
        clearTimeout(restTimeoutRef.current);
        if (pointerTypeRef.current === "touch") {
          handleMouseMove();
        } else {
          restTimeoutPendingRef.current = true;
          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);
        }
      }
    };
  }, [mouseOnly, onOpenChange, open, openRef, restMs]);
  const floating = reactExports.useMemo(() => ({
    onMouseEnter() {
      clearTimeout(timeoutRef.current);
    },
    onMouseLeave(event) {
      if (!isClickLikeOpenEvent()) {
        closeWithDelay(event.nativeEvent, false);
      }
    }
  }), [closeWithDelay, isClickLikeOpenEvent]);
  return reactExports.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
const NOOP = () => {
};
const FloatingDelayGroupContext = /* @__PURE__ */ reactExports.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: NOOP,
  setState: NOOP,
  isInstantPhase: false
});
const useDelayGroupContext = () => reactExports.useContext(FloatingDelayGroupContext);
function FloatingDelayGroup(props) {
  const {
    children,
    delay,
    timeoutMs = 0
  } = props;
  const [state, setState] = reactExports.useReducer((prev2, next2) => ({
    ...prev2,
    ...next2
  }), {
    delay,
    timeoutMs,
    initialDelay: delay,
    currentId: null,
    isInstantPhase: false
  });
  const initialCurrentIdRef = reactExports.useRef(null);
  const setCurrentId = reactExports.useCallback((currentId) => {
    setState({
      currentId
    });
  }, []);
  index$1(() => {
    if (state.currentId) {
      if (initialCurrentIdRef.current === null) {
        initialCurrentIdRef.current = state.currentId;
      } else if (!state.isInstantPhase) {
        setState({
          isInstantPhase: true
        });
      }
    } else {
      if (state.isInstantPhase) {
        setState({
          isInstantPhase: false
        });
      }
      initialCurrentIdRef.current = null;
    }
  }, [state.currentId, state.isInstantPhase]);
  return /* @__PURE__ */ reactExports.createElement(FloatingDelayGroupContext.Provider, {
    value: reactExports.useMemo(() => ({
      ...state,
      setState,
      setCurrentId
    }), [state, setCurrentId])
  }, children);
}
function useDelayGroup(context, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    open,
    onOpenChange,
    floatingId
  } = context;
  const {
    id: optionId,
    enabled = true
  } = options;
  const id = optionId != null ? optionId : floatingId;
  const groupContext = useDelayGroupContext();
  const {
    currentId,
    setCurrentId,
    initialDelay,
    setState,
    timeoutMs
  } = groupContext;
  index$1(() => {
    if (!enabled)
      return;
    if (!currentId)
      return;
    setState({
      delay: {
        open: 1,
        close: getDelay(initialDelay, "close")
      }
    });
    if (currentId !== id) {
      onOpenChange(false);
    }
  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);
  index$1(() => {
    function unset() {
      onOpenChange(false);
      setState({
        delay: initialDelay,
        currentId: null
      });
    }
    if (!enabled)
      return;
    if (!currentId)
      return;
    if (!open && currentId === id) {
      if (timeoutMs) {
        const timeout = window.setTimeout(unset, timeoutMs);
        return () => {
          clearTimeout(timeout);
        };
      }
      unset();
    }
  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);
  index$1(() => {
    if (!enabled)
      return;
    if (setCurrentId === NOOP || !open)
      return;
    setCurrentId(id);
  }, [enabled, open, setCurrentId, id]);
  return groupContext;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node2) => {
    var _node$context;
    return node2.parentId === id && ((_node$context = node2.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node2) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node2.parentId === n.id && ((_node$context2 = node2.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
const FOCUSABLE_ATTRIBUTE = "data-floating-ui-focusable";
const bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
const captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
const normalizeProp = (normalizable) => {
  var _normalizable$escapeK, _normalizable$outside;
  return {
    escapeKey: typeof normalizable === "boolean" ? normalizable : (_normalizable$escapeK = normalizable == null ? void 0 : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
    outsidePress: typeof normalizable === "boolean" ? normalizable : (_normalizable$outside = normalizable == null ? void 0 : normalizable.outsidePress) != null ? _normalizable$outside : true
  };
};
function useDismiss(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    elements,
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles,
    capture
  } = props;
  const tree = useFloatingTree();
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = reactExports.useRef(false);
  const endedOrStartedInsideRef = reactExports.useRef(false);
  const {
    escapeKey: escapeKeyBubbles,
    outsidePress: outsidePressBubbles
  } = normalizeProp(bubbles);
  const {
    escapeKey: escapeKeyCapture,
    outsidePress: outsidePressCapture
  } = normalizeProp(capture);
  const isComposingRef = reactExports.useRef(false);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    var _dataRef$current$floa;
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    if (isComposingRef.current) {
      return;
    }
    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.nodeId;
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, "escape-key");
  });
  const closeOnEscapeKeyDownCapture = useEffectEvent((event) => {
    var _getTarget2;
    const callback = () => {
      var _getTarget;
      closeOnEscapeKeyDown(event);
      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener("keydown", callback);
    };
    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener("keydown", callback);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    var _dataRef$current$floa2;
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    const endedOrStartedInside = endedOrStartedInsideRef.current;
    endedOrStartedInsideRef.current = false;
    if (outsidePressEvent === "click" && endedOrStartedInside) {
      return;
    }
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    const inertSelector = "[" + createAttribute("inert") + "]";
    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);
    let targetRootAncestor = isElement(target) ? target : null;
    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
      const nextParent = getParentNode(targetRootAncestor);
      if (isLastTraversableNode(nextParent) || !isElement(nextParent)) {
        break;
      }
      targetRootAncestor = nextParent;
    }
    if (markers.length && isElement(target) && !isRootElement(target) && // Clicked on a direct ancestor (e.g. FloatingOverlay).
    !contains(target, elements.floating) && // If the target root element contains none of the markers, then the
    // element was injected after the floating element rendered.
    Array.from(markers).every((marker) => !contains(targetRootAncestor, marker))) {
      return;
    }
    if (isHTMLElement(target) && floating) {
      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      let xCond = canScrollY && event.offsetX > target.clientWidth;
      if (canScrollY) {
        const isRTL2 = getComputedStyle$1(target).direction === "rtl";
        if (isRTL2) {
          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
        }
      }
      if (xCond || canScrollX && event.offsetY > target.clientHeight) {
        return;
      }
    }
    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa2.nodeId;
    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node2) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node2.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    onOpenChange(false, event, "outside-press");
  });
  const closeOnPressOutsideCapture = useEffectEvent((event) => {
    var _getTarget4;
    const callback = () => {
      var _getTarget3;
      closeOnPressOutside(event);
      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
    };
    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
  });
  reactExports.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    let compositionTimeout = -1;
    function onScroll(event) {
      onOpenChange(false, event, "ancestor-scroll");
    }
    function handleCompositionStart() {
      window.clearTimeout(compositionTimeout);
      isComposingRef.current = true;
    }
    function handleCompositionEnd() {
      compositionTimeout = window.setTimeout(
        () => {
          isComposingRef.current = false;
        },
        // 0ms or 1ms don't work in Safari. 5ms appears to consistently work.
        // Only apply to WebKit for the test to remain 0ms.
        isWebKit() ? 5 : 0
      );
    }
    const doc = getDocument(elements.floating);
    if (escapeKey) {
      doc.addEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
      doc.addEventListener("compositionstart", handleCompositionStart);
      doc.addEventListener("compositionend", handleCompositionEnd);
    }
    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement(elements.domReference)) {
        ancestors = getOverflowAncestors(elements.domReference);
      }
      if (isElement(elements.floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));
      }
      if (!isElement(elements.reference) && elements.reference && elements.reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      if (escapeKey) {
        doc.removeEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        doc.removeEventListener("compositionstart", handleCompositionStart);
        doc.removeEventListener("compositionend", handleCompositionEnd);
      }
      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
      window.clearTimeout(compositionTimeout);
    };
  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
  reactExports.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  const reference = reactExports.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    [bubbleHandlerKeys[referencePressEvent]]: (event) => {
      if (referencePress) {
        onOpenChange(false, event.nativeEvent, "reference-press");
      }
    }
  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);
  const floating = reactExports.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    onMouseDown() {
      endedOrStartedInsideRef.current = true;
    },
    onMouseUp() {
      endedOrStartedInsideRef.current = true;
    },
    [captureHandlerKeys[outsidePressEvent]]: () => {
      insideReactTreeRef.current = true;
    }
  }), [closeOnEscapeKeyDown, outsidePressEvent]);
  return reactExports.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
function useFloatingRootContext(options) {
  const {
    open = false,
    onOpenChange: onOpenChangeProp,
    elements: elementsProp
  } = options;
  const floatingId = useId();
  const dataRef = reactExports.useRef({});
  const [events] = reactExports.useState(() => createPubSub());
  const nested = useFloatingParentNodeId() != null;
  {
    const optionDomReference = elementsProp.reference;
    if (optionDomReference && !isElement(optionDomReference)) {
      error("Cannot pass a virtual element to the `elements.reference` option,", "as it must be a real DOM element. Use `refs.setPositionReference()`", "instead.");
    }
  }
  const [positionReference, setPositionReference] = reactExports.useState(elementsProp.reference);
  const onOpenChange = useEffectEvent((open2, event, reason) => {
    dataRef.current.openEvent = open2 ? event : void 0;
    events.emit("openchange", {
      open: open2,
      event,
      reason,
      nested
    });
    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);
  });
  const refs = reactExports.useMemo(() => ({
    setPositionReference
  }), []);
  const elements = reactExports.useMemo(() => ({
    reference: positionReference || elementsProp.reference || null,
    floating: elementsProp.floating || null,
    domReference: elementsProp.reference
  }), [positionReference, elementsProp.reference, elementsProp.floating]);
  return reactExports.useMemo(() => ({
    dataRef,
    open,
    onOpenChange,
    elements,
    events,
    floatingId,
    refs
  }), [open, onOpenChange, elements, events, floatingId, refs]);
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    nodeId
  } = options;
  const internalRootContext = useFloatingRootContext({
    ...options,
    elements: {
      reference: null,
      floating: null,
      ...options.elements
    }
  });
  const rootContext = options.rootContext || internalRootContext;
  const computedElements = rootContext.elements;
  const [_domReference, setDomReference] = reactExports.useState(null);
  const [positionReference, _setPositionReference] = reactExports.useState(null);
  const optionDomReference = computedElements == null ? void 0 : computedElements.domReference;
  const domReference = optionDomReference || _domReference;
  const domReferenceRef = reactExports.useRef(null);
  const tree = useFloatingTree();
  index$1(() => {
    if (domReference) {
      domReferenceRef.current = domReference;
    }
  }, [domReference]);
  const position2 = useFloating$1({
    ...options,
    elements: {
      ...computedElements,
      ...positionReference && {
        reference: positionReference
      }
    }
  });
  const setPositionReference = reactExports.useCallback((node2) => {
    const computedPositionReference = isElement(node2) ? {
      getBoundingClientRect: () => node2.getBoundingClientRect(),
      contextElement: node2
    } : node2;
    _setPositionReference(computedPositionReference);
    position2.refs.setReference(computedPositionReference);
  }, [position2.refs]);
  const setReference = reactExports.useCallback((node2) => {
    if (isElement(node2) || node2 === null) {
      domReferenceRef.current = node2;
      setDomReference(node2);
    }
    if (isElement(position2.refs.reference.current) || position2.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node2 !== null && !isElement(node2)) {
      position2.refs.setReference(node2);
    }
  }, [position2.refs]);
  const refs = reactExports.useMemo(() => ({
    ...position2.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position2.refs, setReference, setPositionReference]);
  const elements = reactExports.useMemo(() => ({
    ...position2.elements,
    domReference
  }), [position2.elements, domReference]);
  const context = reactExports.useMemo(() => ({
    ...position2,
    ...rootContext,
    refs,
    elements,
    nodeId
  }), [position2, refs, elements, nodeId, rootContext]);
  index$1(() => {
    rootContext.dataRef.current.floatingContext = context;
    const node2 = tree == null ? void 0 : tree.nodesRef.current.find((node3) => node3.id === nodeId);
    if (node2) {
      node2.context = context;
    }
  });
  return reactExports.useMemo(() => ({
    ...position2,
    context,
    refs,
    elements
  }), [position2, refs, elements, context]);
}
function useFocus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements
  } = context;
  const {
    enabled = true,
    visibleOnly = true
  } = props;
  const blockFocusRef = reactExports.useRef(false);
  const timeoutRef = reactExports.useRef();
  const keyboardModalityRef = reactExports.useRef(true);
  reactExports.useEffect(() => {
    if (!enabled)
      return;
    const win = getWindow(elements.domReference);
    function onBlur() {
      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement(getDocument(elements.domReference))) {
        blockFocusRef.current = true;
      }
    }
    function onKeyDown() {
      keyboardModalityRef.current = true;
    }
    win.addEventListener("blur", onBlur);
    win.addEventListener("keydown", onKeyDown, true);
    return () => {
      win.removeEventListener("blur", onBlur);
      win.removeEventListener("keydown", onKeyDown, true);
    };
  }, [elements.domReference, open, enabled]);
  reactExports.useEffect(() => {
    if (!enabled)
      return;
    function onOpenChange2(_ref) {
      let {
        reason
      } = _ref;
      if (reason === "reference-press" || reason === "escape-key") {
        blockFocusRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [events, enabled]);
  reactExports.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  const reference = reactExports.useMemo(() => ({
    onPointerDown(event) {
      if (isVirtualPointerEvent(event.nativeEvent))
        return;
      keyboardModalityRef.current = false;
    },
    onMouseLeave() {
      blockFocusRef.current = false;
    },
    onFocus(event) {
      if (blockFocusRef.current)
        return;
      const target = getTarget(event.nativeEvent);
      if (visibleOnly && isElement(target)) {
        try {
          if (isSafari() && isMac())
            throw Error();
          if (!target.matches(":focus-visible"))
            return;
        } catch (e) {
          if (!keyboardModalityRef.current && !isTypeableElement(target)) {
            return;
          }
        }
      }
      onOpenChange(true, event.nativeEvent, "focus");
    },
    onBlur(event) {
      blockFocusRef.current = false;
      const relatedTarget = event.relatedTarget;
      const nativeEvent = event.nativeEvent;
      const movedToFocusGuard = isElement(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
      timeoutRef.current = window.setTimeout(() => {
        var _dataRef$current$floa;
        const activeEl = activeElement(elements.domReference ? elements.domReference.ownerDocument : document);
        if (!relatedTarget && activeEl === elements.domReference)
          return;
        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? void 0 : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {
          return;
        }
        onOpenChange(false, nativeEvent, "focus");
      });
    }
  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);
  return reactExports.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
const ACTIVE_KEY = "active";
const SELECTED_KEY = "selected";
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  const isItem = elementKey === "item";
  let domUserProps = userProps;
  if (isItem && userProps) {
    const {
      [ACTIVE_KEY]: _,
      [SELECTED_KEY]: __,
      ...validProps
    } = userProps;
    domUserProps = validProps;
  }
  return {
    ...elementKey === "floating" && {
      tabIndex: -1,
      [FOCUSABLE_ATTRIBUTE]: ""
    },
    ...domUserProps,
    ...propsList.map((value) => {
      const propsOrGetProps = value ? value[elementKey] : null;
      if (typeof propsOrGetProps === "function") {
        return userProps ? propsOrGetProps(userProps) : null;
      }
      return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
          return;
        }
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null || _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const referenceDeps = propsList.map((key) => key == null ? void 0 : key.reference);
  const floatingDeps = propsList.map((key) => key == null ? void 0 : key.floating);
  const itemDeps = propsList.map((key) => key == null ? void 0 : key.item);
  const getReferenceProps = reactExports.useCallback(
    (userProps) => mergeProps(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    referenceDeps
  );
  const getFloatingProps = reactExports.useCallback(
    (userProps) => mergeProps(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    floatingDeps
  );
  const getItemProps = reactExports.useCallback(
    (userProps) => mergeProps(userProps, propsList, "item"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    itemDeps
  );
  return reactExports.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
const componentRoleToAriaRoleMap = /* @__PURE__ */ new Map([["select", "listbox"], ["combobox", "listbox"], ["label", false]]);
function useRole(context, props) {
  var _componentRoleToAriaR;
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
  const referenceId = useId();
  const parentId = useFloatingParentNodeId();
  const isNested = parentId != null;
  const reference = reactExports.useMemo(() => {
    if (ariaRole === "tooltip" || role === "label") {
      return {
        ["aria-" + (role === "label" ? "labelledby" : "describedby")]: open ? floatingId : void 0
      };
    }
    return {
      "aria-expanded": open ? "true" : "false",
      "aria-haspopup": ariaRole === "alertdialog" ? "dialog" : ariaRole,
      "aria-controls": open ? floatingId : void 0,
      ...ariaRole === "listbox" && {
        role: "combobox"
      },
      ...ariaRole === "menu" && {
        id: referenceId
      },
      ...ariaRole === "menu" && isNested && {
        role: "menuitem"
      },
      ...role === "select" && {
        "aria-autocomplete": "none"
      },
      ...role === "combobox" && {
        "aria-autocomplete": "list"
      }
    };
  }, [ariaRole, floatingId, isNested, open, referenceId, role]);
  const floating = reactExports.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      ...ariaRole && {
        role: ariaRole
      }
    };
    if (ariaRole === "tooltip" || role === "label") {
      return floatingProps;
    }
    return {
      ...floatingProps,
      ...ariaRole === "menu" && {
        "aria-labelledby": referenceId
      }
    };
  }, [ariaRole, floatingId, referenceId, role]);
  const item = reactExports.useCallback((_ref) => {
    let {
      active,
      selected
    } = _ref;
    const commonProps = {
      role: "option",
      ...active && {
        id: floatingId + "-option"
      }
    };
    switch (role) {
      case "select":
        return {
          ...commonProps,
          "aria-selected": active && selected
        };
      case "combobox": {
        return {
          ...commonProps,
          ...active && {
            "aria-selected": true
          }
        };
      }
    }
    return {};
  }, [floatingId, role]);
  return reactExports.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}
function getFloatingPosition(dir, position2) {
  if (dir === "rtl" && (position2.includes("right") || position2.includes("left"))) {
    const [side, placement] = position2.split("-");
    const flippedPosition = side === "right" ? "left" : "right";
    return placement === void 0 ? flippedPosition : `${flippedPosition}-${placement}`;
  }
  return position2;
}
function horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {
  if (placement === "center" || arrowPosition === "center") {
    return { top: arrowY };
  }
  if (placement === "end") {
    return { bottom: arrowOffset };
  }
  if (placement === "start") {
    return { top: arrowOffset };
  }
  return {};
}
function verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {
  if (placement === "center" || arrowPosition === "center") {
    return { left: arrowX };
  }
  if (placement === "end") {
    return { [dir === "ltr" ? "right" : "left"]: arrowOffset };
  }
  if (placement === "start") {
    return { [dir === "ltr" ? "left" : "right"]: arrowOffset };
  }
  return {};
}
const radiusByFloatingSide = {
  bottom: "borderTopLeftRadius",
  left: "borderTopRightRadius",
  right: "borderBottomLeftRadius",
  top: "borderBottomRightRadius"
};
function getArrowPositionStyles({
  position: position2,
  arrowSize,
  arrowOffset,
  arrowRadius,
  arrowPosition,
  arrowX,
  arrowY,
  dir
}) {
  const [side, placement = "center"] = position2.split("-");
  const baseStyles = {
    width: arrowSize,
    height: arrowSize,
    transform: "rotate(45deg)",
    position: "absolute",
    [radiusByFloatingSide[side]]: arrowRadius
  };
  const arrowPlacement = -arrowSize / 2;
  if (side === "left") {
    return {
      ...baseStyles,
      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),
      right: arrowPlacement,
      borderLeftColor: "transparent",
      borderBottomColor: "transparent",
      clipPath: "polygon(100% 0, 0 0, 100% 100%)"
    };
  }
  if (side === "right") {
    return {
      ...baseStyles,
      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),
      left: arrowPlacement,
      borderRightColor: "transparent",
      borderTopColor: "transparent",
      clipPath: "polygon(0 100%, 0 0, 100% 100%)"
    };
  }
  if (side === "top") {
    return {
      ...baseStyles,
      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),
      bottom: arrowPlacement,
      borderTopColor: "transparent",
      borderLeftColor: "transparent",
      clipPath: "polygon(0 100%, 100% 100%, 100% 0)"
    };
  }
  if (side === "bottom") {
    return {
      ...baseStyles,
      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),
      top: arrowPlacement,
      borderBottomColor: "transparent",
      borderRightColor: "transparent",
      clipPath: "polygon(0 100%, 0 0, 100% 0)"
    };
  }
  return {};
}
const FloatingArrow = reactExports.forwardRef(
  ({
    position: position2,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    visible: visible2,
    arrowX,
    arrowY,
    style,
    ...others
  }, ref) => {
    const { dir } = useDirection();
    if (!visible2) {
      return null;
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      "div",
      {
        ...others,
        ref,
        style: {
          ...style,
          ...getArrowPositionStyles({
            position: position2,
            arrowSize,
            arrowOffset,
            arrowRadius,
            arrowPosition,
            dir,
            arrowX,
            arrowY
          })
        }
      }
    );
  }
);
FloatingArrow.displayName = "@mantine/core/FloatingArrow";
var classes$H = { "root": "m_9814e45f" };
const defaultProps$1x = {
  zIndex: getDefaultZIndex("modal")
};
const varsResolver$I = createVarsResolver(
  (_, { gradient, color, backgroundOpacity, blur, radius, zIndex }) => ({
    root: {
      "--overlay-bg": gradient || (color !== void 0 || backgroundOpacity !== void 0) && rgba(color || "#000", backgroundOpacity ?? 0.6) || void 0,
      "--overlay-filter": blur ? `blur(${rem(blur)})` : void 0,
      "--overlay-radius": radius === void 0 ? void 0 : getRadius(radius),
      "--overlay-z-index": zIndex == null ? void 0 : zIndex.toString()
    }
  })
);
const Overlay = polymorphicFactory((_props, ref) => {
  const props = useProps("Overlay", defaultProps$1x, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    fixed,
    center,
    children,
    radius,
    zIndex,
    gradient,
    blur,
    color,
    backgroundOpacity,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Overlay",
    props,
    classes: classes$H,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$I
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("root"), mod: [{ center, fixed }, mod], ...others, children });
});
Overlay.classes = classes$H;
Overlay.displayName = "@mantine/core/Overlay";
function createPortalNode(props) {
  const node2 = document.createElement("div");
  node2.setAttribute("data-portal", "true");
  typeof props.className === "string" && node2.classList.add(...props.className.split(" ").filter(Boolean));
  typeof props.style === "object" && Object.assign(node2.style, props.style);
  typeof props.id === "string" && node2.setAttribute("id", props.id);
  return node2;
}
const defaultProps$1w = {};
const Portal = reactExports.forwardRef((props, ref) => {
  const { children, target, ...others } = useProps("Portal", defaultProps$1w, props);
  const [mounted, setMounted] = reactExports.useState(false);
  const nodeRef = reactExports.useRef(null);
  useIsomorphicEffect$1(() => {
    setMounted(true);
    nodeRef.current = !target ? createPortalNode(others) : typeof target === "string" ? document.querySelector(target) : target;
    assignRef(ref, nodeRef.current);
    if (!target && nodeRef.current) {
      document.body.appendChild(nodeRef.current);
    }
    return () => {
      if (!target && nodeRef.current) {
        document.body.removeChild(nodeRef.current);
      }
    };
  }, [target]);
  if (!mounted || !nodeRef.current) {
    return null;
  }
  return reactDomExports.createPortal(/* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children }), nodeRef.current);
});
Portal.displayName = "@mantine/core/Portal";
function OptionalPortal({ withinPortal = true, children, ...others }) {
  if (withinPortal) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Portal, { ...others, children });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
}
OptionalPortal.displayName = "@mantine/core/OptionalPortal";
const popIn = (from2) => ({
  in: { opacity: 1, transform: "scale(1)" },
  out: { opacity: 0, transform: `scale(.9) translateY(${from2 === "bottom" ? 10 : -10}px)` },
  transitionProperty: "transform, opacity"
});
const transitions = {
  fade: {
    in: { opacity: 1 },
    out: { opacity: 0 },
    transitionProperty: "opacity"
  },
  "fade-up": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-down": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(-30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-left": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-right": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(-30px)" },
    transitionProperty: "opacity, transform"
  },
  scale: {
    in: { opacity: 1, transform: "scale(1)" },
    out: { opacity: 0, transform: "scale(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-y": {
    in: { opacity: 1, transform: "scaleY(1)" },
    out: { opacity: 0, transform: "scaleY(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-x": {
    in: { opacity: 1, transform: "scaleX(1)" },
    out: { opacity: 0, transform: "scaleX(0)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "skew-up": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(-20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "skew-down": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-left": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(-5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-right": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-down": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(-100%)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-up": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(100%)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "slide-left": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(100%)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "slide-right": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(-100%)" },
    common: { transformOrigin: "right" },
    transitionProperty: "transform, opacity"
  },
  pop: {
    ...popIn("bottom"),
    common: { transformOrigin: "center center" }
  },
  "pop-bottom-left": {
    ...popIn("bottom"),
    common: { transformOrigin: "bottom left" }
  },
  "pop-bottom-right": {
    ...popIn("bottom"),
    common: { transformOrigin: "bottom right" }
  },
  "pop-top-left": {
    ...popIn("top"),
    common: { transformOrigin: "top left" }
  },
  "pop-top-right": {
    ...popIn("top"),
    common: { transformOrigin: "top right" }
  }
};
const transitionStatuses = {
  entering: "in",
  entered: "in",
  exiting: "out",
  exited: "out",
  "pre-exiting": "out",
  "pre-entering": "out"
};
function getTransitionStyles({
  transition,
  state,
  duration,
  timingFunction
}) {
  const shared = {
    transitionDuration: `${duration}ms`,
    transitionTimingFunction: timingFunction
  };
  if (typeof transition === "string") {
    if (!(transition in transitions)) {
      return {};
    }
    return {
      transitionProperty: transitions[transition].transitionProperty,
      ...shared,
      ...transitions[transition].common,
      ...transitions[transition][transitionStatuses[state]]
    };
  }
  return {
    transitionProperty: transition.transitionProperty,
    ...shared,
    ...transition.common,
    ...transition[transitionStatuses[state]]
  };
}
function useTransition({
  duration,
  exitDuration,
  timingFunction,
  mounted,
  onEnter,
  onExit,
  onEntered,
  onExited,
  enterDelay,
  exitDelay
}) {
  const theme2 = useMantineTheme();
  const shouldReduceMotion = useReducedMotion();
  const reduceMotion = theme2.respectReducedMotion ? shouldReduceMotion : false;
  const [transitionDuration, setTransitionDuration] = reactExports.useState(reduceMotion ? 0 : duration);
  const [transitionStatus, setStatus] = reactExports.useState(mounted ? "entered" : "exited");
  const transitionTimeoutRef = reactExports.useRef(-1);
  const delayTimeoutRef = reactExports.useRef(-1);
  const rafRef = reactExports.useRef(-1);
  const handleStateChange = (shouldMount) => {
    const preHandler = shouldMount ? onEnter : onExit;
    const handler = shouldMount ? onEntered : onExited;
    window.clearTimeout(transitionTimeoutRef.current);
    const newTransitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;
    setTransitionDuration(newTransitionDuration);
    if (newTransitionDuration === 0) {
      typeof preHandler === "function" && preHandler();
      typeof handler === "function" && handler();
      setStatus(shouldMount ? "entered" : "exited");
    } else {
      rafRef.current = requestAnimationFrame(() => {
        ReactDOM.flushSync(() => {
          setStatus(shouldMount ? "pre-entering" : "pre-exiting");
        });
        rafRef.current = requestAnimationFrame(() => {
          typeof preHandler === "function" && preHandler();
          setStatus(shouldMount ? "entering" : "exiting");
          transitionTimeoutRef.current = window.setTimeout(() => {
            typeof handler === "function" && handler();
            setStatus(shouldMount ? "entered" : "exited");
          }, newTransitionDuration);
        });
      });
    }
  };
  const handleTransitionWithDelay = (shouldMount) => {
    window.clearTimeout(delayTimeoutRef.current);
    const delay = shouldMount ? enterDelay : exitDelay;
    if (typeof delay !== "number") {
      handleStateChange(shouldMount);
      return;
    }
    delayTimeoutRef.current = window.setTimeout(
      () => {
        handleStateChange(shouldMount);
      },
      shouldMount ? enterDelay : exitDelay
    );
  };
  useDidUpdate(() => {
    handleTransitionWithDelay(mounted);
  }, [mounted]);
  reactExports.useEffect(
    () => () => {
      window.clearTimeout(transitionTimeoutRef.current);
      cancelAnimationFrame(rafRef.current);
    },
    []
  );
  return {
    transitionDuration,
    transitionStatus,
    transitionTimingFunction: timingFunction || "ease"
  };
}
function Transition({
  keepMounted,
  transition = "fade",
  duration = 250,
  exitDuration = duration,
  mounted,
  children,
  timingFunction = "ease",
  onExit,
  onEntered,
  onEnter,
  onExited,
  enterDelay,
  exitDelay
}) {
  const { transitionDuration, transitionStatus, transitionTimingFunction } = useTransition({
    mounted,
    exitDuration,
    duration,
    timingFunction,
    onExit,
    onEntered,
    onEnter,
    onExited,
    enterDelay,
    exitDelay
  });
  if (transitionDuration === 0) {
    return mounted ? /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: children({}) }) : keepMounted ? children({ display: "none" }) : null;
  }
  return transitionStatus === "exited" ? keepMounted ? children({ display: "none" }) : null : /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: children(
    getTransitionStyles({
      transition,
      duration: transitionDuration,
      state: transitionStatus,
      timingFunction: transitionTimingFunction
    })
  ) });
}
Transition.displayName = "@mantine/core/Transition";
const [PopoverContextProvider, usePopoverContext] = createSafeContext(
  "Popover component was not found in the tree"
);
function FocusTrap({
  children,
  active = true,
  refProp = "ref",
  innerRef
}) {
  const focusTrapRef = useFocusTrap(active);
  const ref = useMergedRef(focusTrapRef, innerRef);
  if (!isElement$1(children)) {
    return children;
  }
  return reactExports.cloneElement(children, { [refProp]: ref });
}
function FocusTrapInitialFocus(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(VisuallyHidden, { tabIndex: -1, "data-autofocus": true, ...props });
}
FocusTrap.displayName = "@mantine/core/FocusTrap";
FocusTrapInitialFocus.displayName = "@mantine/core/FocusTrapInitialFocus";
FocusTrap.InitialFocus = FocusTrapInitialFocus;
var classes$G = { "dropdown": "m_38a85659", "arrow": "m_a31dc6c1", "overlay": "m_3d7bc908" };
const defaultProps$1v = {};
const PopoverDropdown = factory((_props, ref) => {
  var _a, _b, _c, _d;
  const props = useProps("PopoverDropdown", defaultProps$1v, _props);
  const {
    className,
    style,
    vars,
    children,
    onKeyDownCapture,
    variant,
    classNames,
    styles: styles2,
    ...others
  } = props;
  const ctx = usePopoverContext();
  const returnFocus = useFocusReturn({
    opened: ctx.opened,
    shouldReturnFocus: ctx.returnFocus
  });
  const accessibleProps = ctx.withRoles ? {
    "aria-labelledby": ctx.getTargetId(),
    id: ctx.getDropdownId(),
    role: "dialog",
    tabIndex: -1
  } : {};
  const mergedRef = useMergedRef(ref, ctx.floating);
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(OptionalPortal, { ...ctx.portalProps, withinPortal: ctx.withinPortal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Transition,
    {
      mounted: ctx.opened,
      ...ctx.transitionProps,
      transition: ((_a = ctx.transitionProps) == null ? void 0 : _a.transition) || "fade",
      duration: ((_b = ctx.transitionProps) == null ? void 0 : _b.duration) ?? 150,
      keepMounted: ctx.keepMounted,
      exitDuration: typeof ((_c = ctx.transitionProps) == null ? void 0 : _c.exitDuration) === "number" ? ctx.transitionProps.exitDuration : (_d = ctx.transitionProps) == null ? void 0 : _d.duration,
      children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, { active: ctx.trapFocus && ctx.opened, innerRef: mergedRef, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
        Box,
        {
          ...accessibleProps,
          ...others,
          variant,
          onKeyDownCapture: closeOnEscape(ctx.onClose, {
            active: ctx.closeOnEscape,
            onTrigger: returnFocus,
            onKeyDown: onKeyDownCapture
          }),
          "data-position": ctx.placement,
          "data-fixed": ctx.floatingStrategy === "fixed" || void 0,
          ...ctx.getStyles("dropdown", {
            className,
            props,
            classNames,
            styles: styles2,
            style: [
              {
                ...transitionStyles,
                zIndex: ctx.zIndex,
                top: ctx.y ?? 0,
                left: ctx.x ?? 0,
                width: ctx.width === "target" ? void 0 : rem(ctx.width)
              },
              ctx.resolvedStyles.dropdown,
              styles2 == null ? void 0 : styles2.dropdown,
              style
            ]
          }),
          children: [
            children,
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              FloatingArrow,
              {
                ref: ctx.arrowRef,
                arrowX: ctx.arrowX,
                arrowY: ctx.arrowY,
                visible: ctx.withArrow,
                position: ctx.placement,
                arrowSize: ctx.arrowSize,
                arrowRadius: ctx.arrowRadius,
                arrowOffset: ctx.arrowOffset,
                arrowPosition: ctx.arrowPosition,
                ...ctx.getStyles("arrow", {
                  props,
                  classNames,
                  styles: styles2
                })
              }
            )
          ]
        }
      ) })
    }
  ) });
});
PopoverDropdown.classes = classes$G;
PopoverDropdown.displayName = "@mantine/core/PopoverDropdown";
const defaultProps$1u = {
  refProp: "ref",
  popupType: "dialog"
};
const PopoverTarget = factory((props, ref) => {
  const { children, refProp, popupType, ...others } = useProps(
    "PopoverTarget",
    defaultProps$1u,
    props
  );
  if (!isElement$1(children)) {
    throw new Error(
      "Popover.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const forwardedProps = others;
  const ctx = usePopoverContext();
  const targetRef = useMergedRef(ctx.reference, getRefProp(children), ref);
  const accessibleProps = ctx.withRoles ? {
    "aria-haspopup": popupType,
    "aria-expanded": ctx.opened,
    "aria-controls": ctx.getDropdownId(),
    id: ctx.getTargetId()
  } : {};
  return reactExports.cloneElement(children, {
    ...forwardedProps,
    ...accessibleProps,
    ...ctx.targetProps,
    className: clsx$1(
      ctx.targetProps.className,
      forwardedProps.className,
      children.props.className
    ),
    [refProp]: targetRef,
    ...!ctx.controlled ? { onClick: ctx.onToggle } : null
  });
});
PopoverTarget.displayName = "@mantine/core/PopoverTarget";
function useFloatingAutoUpdate({
  opened,
  floating,
  position: position2,
  positionDependencies
}) {
  const [delayedUpdate, setDelayedUpdate] = reactExports.useState(0);
  reactExports.useEffect(() => {
    if (floating.refs.reference.current && floating.refs.floating.current && opened) {
      return autoUpdate(
        floating.refs.reference.current,
        floating.refs.floating.current,
        floating.update
      );
    }
    return void 0;
  }, [
    floating.refs.reference.current,
    floating.refs.floating.current,
    opened,
    delayedUpdate,
    position2
  ]);
  useDidUpdate(() => {
    floating.update();
  }, positionDependencies);
  useDidUpdate(() => {
    setDelayedUpdate((c) => c + 1);
  }, [opened]);
}
function getDefaultMiddlewares$1(middlewares) {
  if (middlewares === void 0) {
    return { shift: true, flip: true };
  }
  const result = { ...middlewares };
  if (middlewares.shift === void 0) {
    result.shift = true;
  }
  if (middlewares.flip === void 0) {
    result.flip = true;
  }
  return result;
}
function getPopoverMiddlewares(options, getFloating) {
  const middlewaresOptions = getDefaultMiddlewares$1(options.middlewares);
  const middlewares = [offset(options.offset)];
  if (middlewaresOptions.shift) {
    middlewares.push(
      shift(
        typeof middlewaresOptions.shift === "boolean" ? { limiter: limitShift(), padding: 5 } : { limiter: limitShift(), padding: 5, ...middlewaresOptions.shift }
      )
    );
  }
  if (middlewaresOptions.flip) {
    middlewares.push(
      typeof middlewaresOptions.flip === "boolean" ? flip() : flip(middlewaresOptions.flip)
    );
  }
  if (middlewaresOptions.inline) {
    middlewares.push(
      typeof middlewaresOptions.inline === "boolean" ? inline() : inline(middlewaresOptions.inline)
    );
  }
  middlewares.push(arrow({ element: options.arrowRef, padding: options.arrowOffset }));
  if (middlewaresOptions.size || options.width === "target") {
    middlewares.push(
      size({
        ...typeof middlewaresOptions.size === "boolean" ? {} : middlewaresOptions.size,
        apply({ rects, availableWidth, availableHeight, ...rest }) {
          var _a;
          const floating = getFloating();
          const styles2 = ((_a = floating.refs.floating.current) == null ? void 0 : _a.style) ?? {};
          if (middlewaresOptions.size) {
            if (typeof middlewaresOptions.size === "object" && !!middlewaresOptions.size.apply) {
              middlewaresOptions.size.apply({ rects, availableWidth, availableHeight, ...rest });
            } else {
              Object.assign(styles2, {
                maxWidth: `${availableWidth}px`,
                maxHeight: `${availableHeight}px`
              });
            }
          }
          if (options.width === "target") {
            Object.assign(styles2, {
              width: `${rects.reference.width}px`
            });
          }
        }
      })
    );
  }
  return middlewares;
}
function usePopover(options) {
  const [_opened, setOpened] = useUncontrolled({
    value: options.opened,
    defaultValue: options.defaultOpened,
    finalValue: false,
    onChange: options.onChange
  });
  const previouslyOpened = reactExports.useRef(_opened);
  const onClose = () => {
    if (_opened) {
      setOpened(false);
    }
  };
  const onToggle = () => setOpened(!_opened);
  const floating = useFloating({
    strategy: options.strategy,
    placement: options.position,
    middleware: getPopoverMiddlewares(options, () => floating)
  });
  useFloatingAutoUpdate({
    opened: _opened,
    position: options.position,
    positionDependencies: options.positionDependencies || [],
    floating
  });
  useDidUpdate(() => {
    var _a;
    (_a = options.onPositionChange) == null ? void 0 : _a.call(options, floating.placement);
  }, [floating.placement]);
  useDidUpdate(() => {
    var _a, _b;
    if (_opened !== previouslyOpened.current) {
      if (!_opened) {
        (_a = options.onClose) == null ? void 0 : _a.call(options);
      } else {
        (_b = options.onOpen) == null ? void 0 : _b.call(options);
      }
    }
    previouslyOpened.current = _opened;
  }, [_opened, options.onClose, options.onOpen]);
  return {
    floating,
    controlled: typeof options.opened === "boolean",
    opened: _opened,
    onClose,
    onToggle
  };
}
const defaultProps$1t = {
  position: "bottom",
  offset: 8,
  positionDependencies: [],
  transitionProps: { transition: "fade", duration: 150 },
  middlewares: { flip: true, shift: true, inline: false },
  arrowSize: 7,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  closeOnClickOutside: true,
  withinPortal: true,
  closeOnEscape: true,
  trapFocus: false,
  withRoles: true,
  returnFocus: false,
  withOverlay: false,
  clickOutsideEvents: ["mousedown", "touchstart"],
  zIndex: getDefaultZIndex("popover"),
  __staticSelector: "Popover",
  width: "max-content"
};
const varsResolver$H = createVarsResolver((_, { radius, shadow }) => ({
  dropdown: {
    "--popover-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--popover-shadow": getShadow(shadow)
  }
}));
function Popover(_props) {
  var _a, _b, _c, _d, _e, _f;
  const props = useProps("Popover", defaultProps$1t, _props);
  const {
    children,
    position: position2,
    offset: offset2,
    onPositionChange,
    positionDependencies,
    opened,
    transitionProps,
    onExitTransitionEnd,
    onEnterTransitionEnd,
    width,
    middlewares,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    unstyled,
    classNames,
    styles: styles2,
    closeOnClickOutside,
    withinPortal,
    portalProps,
    closeOnEscape: closeOnEscape2,
    clickOutsideEvents,
    trapFocus,
    onClose,
    onOpen,
    onChange,
    zIndex,
    radius,
    shadow,
    id,
    defaultOpened,
    __staticSelector,
    withRoles,
    disabled,
    returnFocus,
    variant,
    keepMounted,
    vars,
    floatingStrategy,
    withOverlay,
    overlayProps,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector,
    props,
    classes: classes$G,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "dropdown",
    vars,
    varsResolver: varsResolver$H
  });
  const { resolvedStyles } = useResolvedStylesApi({ classNames, styles: styles2, props });
  const arrowRef = reactExports.useRef(null);
  const [targetNode, setTargetNode] = reactExports.useState(null);
  const [dropdownNode, setDropdownNode] = reactExports.useState(null);
  const { dir } = useDirection();
  const uid = useId$1(id);
  const popover = usePopover({
    middlewares,
    width,
    position: getFloatingPosition(dir, position2),
    offset: typeof offset2 === "number" ? offset2 + (withArrow ? arrowSize / 2 : 0) : offset2,
    arrowRef,
    arrowOffset,
    onPositionChange,
    positionDependencies,
    opened,
    defaultOpened,
    onChange,
    onOpen,
    onClose,
    strategy: floatingStrategy
  });
  useClickOutside(() => closeOnClickOutside && popover.onClose(), clickOutsideEvents, [
    targetNode,
    dropdownNode
  ]);
  const reference = reactExports.useCallback(
    (node2) => {
      setTargetNode(node2);
      popover.floating.refs.setReference(node2);
    },
    [popover.floating.refs.setReference]
  );
  const floating = reactExports.useCallback(
    (node2) => {
      setDropdownNode(node2);
      popover.floating.refs.setFloating(node2);
    },
    [popover.floating.refs.setFloating]
  );
  const onExited = reactExports.useCallback(() => {
    var _a2;
    (_a2 = transitionProps == null ? void 0 : transitionProps.onExited) == null ? void 0 : _a2.call(transitionProps);
    onExitTransitionEnd == null ? void 0 : onExitTransitionEnd();
  }, [transitionProps == null ? void 0 : transitionProps.onExited, onExitTransitionEnd]);
  const onEntered = reactExports.useCallback(() => {
    var _a2;
    (_a2 = transitionProps == null ? void 0 : transitionProps.onEntered) == null ? void 0 : _a2.call(transitionProps);
    onEnterTransitionEnd == null ? void 0 : onEnterTransitionEnd();
  }, [transitionProps == null ? void 0 : transitionProps.onEntered, onEnterTransitionEnd]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    PopoverContextProvider,
    {
      value: {
        returnFocus,
        disabled,
        controlled: popover.controlled,
        reference,
        floating,
        x: popover.floating.x,
        y: popover.floating.y,
        arrowX: (_c = (_b = (_a = popover.floating) == null ? void 0 : _a.middlewareData) == null ? void 0 : _b.arrow) == null ? void 0 : _c.x,
        arrowY: (_f = (_e = (_d = popover.floating) == null ? void 0 : _d.middlewareData) == null ? void 0 : _e.arrow) == null ? void 0 : _f.y,
        opened: popover.opened,
        arrowRef,
        transitionProps: { ...transitionProps, onExited, onEntered },
        width,
        withArrow,
        arrowSize,
        arrowOffset,
        arrowRadius,
        arrowPosition,
        placement: popover.floating.placement,
        trapFocus,
        withinPortal,
        portalProps,
        zIndex,
        radius,
        shadow,
        closeOnEscape: closeOnEscape2,
        onClose: popover.onClose,
        onToggle: popover.onToggle,
        getTargetId: () => `${uid}-target`,
        getDropdownId: () => `${uid}-dropdown`,
        withRoles,
        targetProps: others,
        __staticSelector,
        classNames,
        styles: styles2,
        unstyled,
        variant,
        keepMounted,
        getStyles: getStyles2,
        resolvedStyles,
        floatingStrategy
      },
      children: [
        children,
        withOverlay && /* @__PURE__ */ jsxRuntimeExports.jsx(
          Transition,
          {
            transition: "fade",
            mounted: popover.opened,
            duration: (transitionProps == null ? void 0 : transitionProps.duration) || 250,
            exitDuration: (transitionProps == null ? void 0 : transitionProps.exitDuration) || 250,
            children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(OptionalPortal, { withinPortal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Overlay,
              {
                ...overlayProps,
                ...getStyles2("overlay", {
                  className: overlayProps == null ? void 0 : overlayProps.className,
                  style: [transitionStyles, overlayProps == null ? void 0 : overlayProps.style]
                })
              }
            ) })
          }
        )
      ]
    }
  );
}
Popover.Target = PopoverTarget;
Popover.Dropdown = PopoverDropdown;
Popover.displayName = "@mantine/core/Popover";
Popover.extend = (input) => input;
var classes$F = { "root": "m_5ae2e3c", "barsLoader": "m_7a2bd4cd", "bar": "m_870bb79", "bars-loader-animation": "m_5d2b3b9d", "dotsLoader": "m_4e3f22d7", "dot": "m_870c4af", "loader-dots-animation": "m_aac34a1", "ovalLoader": "m_b34414df", "oval-loader-animation": "m_f8e89c4b" };
const Bars = reactExports.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { component: "span", className: clsx$1(classes$F.barsLoader, className), ...others, ref, children: [
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.bar }),
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.bar }),
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.bar })
] }));
Bars.displayName = "@mantine/core/Bars";
const Dots = reactExports.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { component: "span", className: clsx$1(classes$F.dotsLoader, className), ...others, ref, children: [
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.dot }),
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.dot }),
  /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: classes$F.dot })
] }));
Dots.displayName = "@mantine/core/Dots";
const Oval = reactExports.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", className: clsx$1(classes$F.ovalLoader, className), ...others, ref }));
Oval.displayName = "@mantine/core/Oval";
const defaultLoaders = {
  bars: Bars,
  oval: Oval,
  dots: Dots
};
const defaultProps$1s = {
  loaders: defaultLoaders,
  type: "oval"
};
const varsResolver$G = createVarsResolver((theme2, { size: size2, color }) => ({
  root: {
    "--loader-size": getSize(size2, "loader-size"),
    "--loader-color": color ? getThemeColor(color, theme2) : void 0
  }
}));
const Loader = factory((_props, ref) => {
  const props = useProps("Loader", defaultProps$1s, _props);
  const {
    size: size2,
    color,
    type,
    vars,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    loaders,
    variant,
    children,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Loader",
    props,
    classes: classes$F,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$G
  });
  if (children) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ...getStyles2("root"), ref, ...others, children });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("root"),
      ref,
      component: loaders[type],
      variant,
      size: size2,
      ...others
    }
  );
});
Loader.defaultLoaders = defaultLoaders;
Loader.classes = classes$F;
Loader.displayName = "@mantine/core/Loader";
var classes$E = { "root": "m_8d3f4000", "icon": "m_8d3afb97", "loader": "m_302b9fb1", "group": "m_1a0f1b21", "groupSection": "m_437b6484" };
const defaultProps$1r = {
  orientation: "horizontal"
};
const varsResolver$F = createVarsResolver((_, { borderWidth }) => ({
  group: { "--ai-border-width": rem(borderWidth) }
}));
const ActionIconGroup = factory((_props, ref) => {
  const props = useProps("ActionIconGroup", defaultProps$1r, _props);
  const {
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    orientation,
    vars,
    borderWidth,
    variant,
    mod,
    ...others
  } = useProps("ActionIconGroup", defaultProps$1r, _props);
  const getStyles2 = useStyles({
    name: "ActionIconGroup",
    props,
    classes: classes$E,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$F,
    rootSelector: "group"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("group"),
      ref,
      variant,
      mod: [{ "data-orientation": orientation }, mod],
      role: "group",
      ...others
    }
  );
});
ActionIconGroup.classes = classes$E;
ActionIconGroup.displayName = "@mantine/core/ActionIconGroup";
const defaultProps$1q = {};
const varsResolver$E = createVarsResolver(
  (theme2, { radius, color, gradient, variant, autoContrast, size: size2 }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      gradient,
      variant: variant || "filled",
      autoContrast
    });
    return {
      groupSection: {
        "--section-height": getSize(size2, "section-height"),
        "--section-padding-x": getSize(size2, "section-padding-x"),
        "--section-fz": getFontSize(size2),
        "--section-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--section-bg": color || variant ? colors2.background : void 0,
        "--section-color": colors2.color,
        "--section-bd": color || variant ? colors2.border : void 0
      }
    };
  }
);
const ActionIconGroupSection = factory((_props, ref) => {
  const props = useProps("ActionIconGroupSection", defaultProps$1q, _props);
  const {
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    variant,
    gradient,
    radius,
    autoContrast,
    ...others
  } = useProps("ActionIconGroupSection", defaultProps$1q, _props);
  const getStyles2 = useStyles({
    name: "ActionIconGroupSection",
    props,
    classes: classes$E,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$E,
    rootSelector: "groupSection"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ...getStyles2("groupSection"), ref, variant, ...others });
});
ActionIconGroupSection.classes = classes$E;
ActionIconGroupSection.displayName = "@mantine/core/ActionIconGroupSection";
const defaultProps$1p = {};
const varsResolver$D = createVarsResolver(
  (theme2, { size: size2, radius, variant, gradient, color, autoContrast }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      gradient,
      variant: variant || "filled",
      autoContrast
    });
    return {
      root: {
        "--ai-size": getSize(size2, "ai-size"),
        "--ai-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--ai-bg": color || variant ? colors2.background : void 0,
        "--ai-hover": color || variant ? colors2.hover : void 0,
        "--ai-hover-color": color || variant ? colors2.hoverColor : void 0,
        "--ai-color": colors2.color,
        "--ai-bd": color || variant ? colors2.border : void 0
      }
    };
  }
);
const ActionIcon = polymorphicFactory((_props, ref) => {
  const props = useProps("ActionIcon", defaultProps$1p, _props);
  const {
    className,
    unstyled,
    variant,
    classNames,
    styles: styles2,
    style,
    loading,
    loaderProps,
    size: size2,
    color,
    radius,
    __staticSelector,
    gradient,
    vars,
    children,
    disabled,
    "data-disabled": dataDisabled,
    autoContrast,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["ActionIcon", __staticSelector],
    props,
    className,
    style,
    classes: classes$E,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$D
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    UnstyledButton,
    {
      ...getStyles2("root", { active: !disabled && !loading && !dataDisabled }),
      ...others,
      unstyled,
      variant,
      size: size2,
      disabled: disabled || loading,
      ref,
      mod: [{ loading, disabled: disabled || dataDisabled }, mod],
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Transition, { mounted: !!loading, transition: "slide-down", duration: 150, children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", ...getStyles2("loader", { style: transitionStyles }), "aria-hidden": true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Loader, { color: "var(--ai-color)", size: "calc(var(--ai-size) * 0.55)", ...loaderProps }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", mod: { loading }, ...getStyles2("icon"), children })
      ]
    }
  );
});
ActionIcon.classes = classes$E;
ActionIcon.displayName = "@mantine/core/ActionIcon";
ActionIcon.Group = ActionIconGroup;
ActionIcon.GroupSection = ActionIconGroupSection;
const CloseIcon = reactExports.forwardRef(
  ({ size: size2 = "var(--cb-icon-size, 70%)", style, ...others }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      viewBox: "0 0 15 15",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      style: { ...style, width: size2, height: size2 },
      ref,
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
          fill: "currentColor",
          fillRule: "evenodd",
          clipRule: "evenodd"
        }
      )
    }
  )
);
CloseIcon.displayName = "@mantine/core/CloseIcon";
var classes$D = { "root": "m_86a44da5", "root--subtle": "m_220c80f2" };
const defaultProps$1o = {
  variant: "subtle"
};
const varsResolver$C = createVarsResolver((_, { size: size2, radius, iconSize }) => ({
  root: {
    "--cb-size": getSize(size2, "cb-size"),
    "--cb-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--cb-icon-size": rem(iconSize)
  }
}));
const CloseButton = polymorphicFactory((_props, ref) => {
  const props = useProps("CloseButton", defaultProps$1o, _props);
  const {
    iconSize,
    children,
    vars,
    radius,
    className,
    classNames,
    style,
    styles: styles2,
    unstyled,
    "data-disabled": dataDisabled,
    disabled,
    variant,
    icon,
    mod,
    __staticSelector,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector || "CloseButton",
    props,
    className,
    style,
    classes: classes$D,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$C
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    UnstyledButton,
    {
      ref,
      ...others,
      unstyled,
      variant,
      disabled,
      mod: [{ disabled: disabled || dataDisabled }, mod],
      ...getStyles2("root", { variant, active: !disabled && !dataDisabled }),
      children: [
        icon || /* @__PURE__ */ jsxRuntimeExports.jsx(CloseIcon, {}),
        children
      ]
    }
  );
});
CloseButton.classes = classes$D;
CloseButton.displayName = "@mantine/core/CloseButton";
function filterFalsyChildren(children) {
  return reactExports.Children.toArray(children).filter(Boolean);
}
var classes$C = { "root": "m_4081bf90" };
const defaultProps$1n = {
  preventGrowOverflow: true,
  gap: "md",
  align: "center",
  justify: "flex-start",
  wrap: "wrap"
};
const varsResolver$B = createVarsResolver(
  (_, { grow, preventGrowOverflow, gap, align, justify, wrap }, { childWidth }) => ({
    root: {
      "--group-child-width": grow && preventGrowOverflow ? childWidth : void 0,
      "--group-gap": getSpacing(gap),
      "--group-align": align,
      "--group-justify": justify,
      "--group-wrap": wrap
    }
  })
);
const Group = factory((_props, ref) => {
  const props = useProps("Group", defaultProps$1n, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    children,
    gap,
    align,
    justify,
    wrap,
    grow,
    preventGrowOverflow,
    vars,
    variant,
    __size,
    mod,
    ...others
  } = props;
  const filteredChildren = filterFalsyChildren(children);
  const childrenCount = filteredChildren.length;
  const resolvedGap = getSpacing(gap ?? "md");
  const childWidth = `calc(${100 / childrenCount}% - (${resolvedGap} - ${resolvedGap} / ${childrenCount}))`;
  const stylesCtx = { childWidth };
  const getStyles2 = useStyles({
    name: "Group",
    props,
    stylesCtx,
    className,
    style,
    classes: classes$C,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$B
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("root"),
      ref,
      variant,
      mod: [{ grow }, mod],
      size: __size,
      ...others,
      children: filteredChildren
    }
  );
});
Group.classes = classes$C;
Group.displayName = "@mantine/core/Group";
const [ModalBaseProvider, useModalBaseContext] = createSafeContext(
  "ModalBase component was not found in tree"
);
function useLockScroll({ opened, transitionDuration }) {
  const [shouldLockScroll, setShouldLockScroll] = reactExports.useState(opened);
  const timeout = reactExports.useRef(-1);
  const reduceMotion = useReducedMotion();
  const _transitionDuration = reduceMotion ? 0 : transitionDuration;
  reactExports.useEffect(() => {
    if (opened) {
      setShouldLockScroll(true);
      window.clearTimeout(timeout.current);
    } else if (_transitionDuration === 0) {
      setShouldLockScroll(false);
    } else {
      timeout.current = window.setTimeout(() => setShouldLockScroll(false), _transitionDuration);
    }
    return () => window.clearTimeout(timeout.current);
  }, [opened, _transitionDuration]);
  return shouldLockScroll;
}
function useModal({
  id,
  transitionProps,
  opened,
  trapFocus,
  closeOnEscape: closeOnEscape2,
  onClose,
  returnFocus
}) {
  const _id = useId$1(id);
  const [titleMounted, setTitleMounted] = reactExports.useState(false);
  const [bodyMounted, setBodyMounted] = reactExports.useState(false);
  const transitionDuration = typeof (transitionProps == null ? void 0 : transitionProps.duration) === "number" ? transitionProps == null ? void 0 : transitionProps.duration : 200;
  const shouldLockScroll = useLockScroll({ opened, transitionDuration });
  useWindowEvent(
    "keydown",
    (event) => {
      var _a;
      if (event.key === "Escape" && closeOnEscape2 && opened) {
        const shouldTrigger = ((_a = event.target) == null ? void 0 : _a.getAttribute("data-mantine-stop-propagation")) !== "true";
        shouldTrigger && onClose();
      }
    },
    { capture: true }
  );
  useFocusReturn({ opened, shouldReturnFocus: trapFocus && returnFocus });
  return {
    _id,
    titleMounted,
    bodyMounted,
    shouldLockScroll,
    setTitleMounted,
    setBodyMounted
  };
}
const ModalBase = reactExports.forwardRef(
  ({
    keepMounted,
    opened,
    onClose,
    id,
    transitionProps,
    onExitTransitionEnd,
    onEnterTransitionEnd,
    trapFocus,
    closeOnEscape: closeOnEscape2,
    returnFocus,
    closeOnClickOutside,
    withinPortal,
    portalProps,
    lockScroll,
    children,
    zIndex,
    shadow,
    padding,
    __vars,
    unstyled,
    removeScrollProps,
    ...others
  }, ref) => {
    const { _id, titleMounted, bodyMounted, shouldLockScroll, setTitleMounted, setBodyMounted } = useModal({ id, transitionProps, opened, trapFocus, closeOnEscape: closeOnEscape2, onClose, returnFocus });
    const { key: removeScrollKey, ...otherRemoveScrollProps } = removeScrollProps || {};
    return /* @__PURE__ */ jsxRuntimeExports.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      ModalBaseProvider,
      {
        value: {
          opened,
          onClose,
          closeOnClickOutside,
          onExitTransitionEnd,
          onEnterTransitionEnd,
          transitionProps: { ...transitionProps, keepMounted },
          getTitleId: () => `${_id}-title`,
          getBodyId: () => `${_id}-body`,
          titleMounted,
          bodyMounted,
          setTitleMounted,
          setBodyMounted,
          trapFocus,
          closeOnEscape: closeOnEscape2,
          zIndex,
          unstyled
        },
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          RemoveScroll,
          {
            enabled: shouldLockScroll && lockScroll,
            ...otherRemoveScrollProps,
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Box,
              {
                ref,
                ...others,
                __vars: {
                  ...__vars,
                  "--mb-z-index": (zIndex || getDefaultZIndex("modal")).toString(),
                  "--mb-shadow": getShadow(shadow),
                  "--mb-padding": getSpacing(padding)
                },
                children
              }
            )
          },
          removeScrollKey
        )
      }
    ) });
  }
);
ModalBase.displayName = "@mantine/core/ModalBase";
function useModalBodyId() {
  const ctx = useModalBaseContext();
  reactExports.useEffect(() => {
    ctx.setBodyMounted(true);
    return () => ctx.setBodyMounted(false);
  }, []);
  return ctx.getBodyId();
}
var classes$B = { "title": "m_615af6c9", "header": "m_b5489c3c", "inner": "m_60c222c7", "content": "m_fd1ab0aa", "close": "m_606cb269", "body": "m_5df29311" };
const ModalBaseBody = reactExports.forwardRef(
  ({ className, ...others }, ref) => {
    const bodyId = useModalBodyId();
    const ctx = useModalBaseContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ref,
        ...others,
        id: bodyId,
        className: clsx$1({ [classes$B.body]: !ctx.unstyled }, className)
      }
    );
  }
);
ModalBaseBody.displayName = "@mantine/core/ModalBaseBody";
const ModalBaseCloseButton = reactExports.forwardRef(
  ({ className, onClick, ...others }, ref) => {
    const ctx = useModalBaseContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      CloseButton,
      {
        ref,
        ...others,
        onClick: (event) => {
          ctx.onClose();
          onClick == null ? void 0 : onClick(event);
        },
        className: clsx$1({ [classes$B.close]: !ctx.unstyled }, className),
        unstyled: ctx.unstyled
      }
    );
  }
);
ModalBaseCloseButton.displayName = "@mantine/core/ModalBaseCloseButton";
const ModalBaseContent = reactExports.forwardRef(
  ({ transitionProps, className, innerProps, onKeyDown, style, ...others }, ref) => {
    const ctx = useModalBaseContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Transition,
      {
        mounted: ctx.opened,
        transition: "pop",
        ...ctx.transitionProps,
        onExited: () => {
          var _a, _b, _c;
          (_a = ctx.onExitTransitionEnd) == null ? void 0 : _a.call(ctx);
          (_c = (_b = ctx.transitionProps) == null ? void 0 : _b.onExited) == null ? void 0 : _c.call(_b);
        },
        onEntered: () => {
          var _a, _b, _c;
          (_a = ctx.onEnterTransitionEnd) == null ? void 0 : _a.call(ctx);
          (_c = (_b = ctx.transitionProps) == null ? void 0 : _b.onEntered) == null ? void 0 : _c.call(_b);
        },
        ...transitionProps,
        children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            ...innerProps,
            className: clsx$1({ [classes$B.inner]: !ctx.unstyled }, innerProps.className),
            children: /* @__PURE__ */ jsxRuntimeExports.jsx(FocusTrap, { active: ctx.opened && ctx.trapFocus, innerRef: ref, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
              Paper,
              {
                ...others,
                component: "section",
                role: "dialog",
                tabIndex: -1,
                "aria-modal": true,
                "aria-describedby": ctx.bodyMounted ? ctx.getBodyId() : void 0,
                "aria-labelledby": ctx.titleMounted ? ctx.getTitleId() : void 0,
                style: [style, transitionStyles],
                className: clsx$1({ [classes$B.content]: !ctx.unstyled }, className),
                unstyled: ctx.unstyled,
                children: others.children
              }
            ) })
          }
        )
      }
    );
  }
);
ModalBaseContent.displayName = "@mantine/core/ModalBaseContent";
const ModalBaseHeader = reactExports.forwardRef(
  ({ className, ...others }, ref) => {
    const ctx = useModalBaseContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        component: "header",
        ref,
        className: clsx$1({ [classes$B.header]: !ctx.unstyled }, className),
        ...others
      }
    );
  }
);
ModalBaseHeader.displayName = "@mantine/core/ModalBaseHeader";
const DEFAULT_TRANSITION = {
  duration: 200,
  timingFunction: "ease",
  transition: "fade"
};
function useModalTransition(transitionOverride) {
  const ctx = useModalBaseContext();
  return { ...DEFAULT_TRANSITION, ...ctx.transitionProps, ...transitionOverride };
}
const ModalBaseOverlay = reactExports.forwardRef(
  ({ onClick, transitionProps, style, visible: visible2, ...others }, ref) => {
    const ctx = useModalBaseContext();
    const transition = useModalTransition(transitionProps);
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Transition,
      {
        mounted: visible2 !== void 0 ? visible2 : ctx.opened,
        ...transition,
        transition: "fade",
        children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(
          Overlay,
          {
            ref,
            fixed: true,
            style: [style, transitionStyles],
            zIndex: ctx.zIndex,
            unstyled: ctx.unstyled,
            onClick: (event) => {
              onClick == null ? void 0 : onClick(event);
              ctx.closeOnClickOutside && ctx.onClose();
            },
            ...others
          }
        )
      }
    );
  }
);
ModalBaseOverlay.displayName = "@mantine/core/ModalBaseOverlay";
function useModalTitle() {
  const ctx = useModalBaseContext();
  reactExports.useEffect(() => {
    ctx.setTitleMounted(true);
    return () => ctx.setTitleMounted(false);
  }, []);
  return ctx.getTitleId();
}
const ModalBaseTitle = reactExports.forwardRef(
  ({ className, ...others }, ref) => {
    const id = useModalTitle();
    const ctx = useModalBaseContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        component: "h2",
        ref,
        className: clsx$1({ [classes$B.title]: !ctx.unstyled }, className),
        ...others,
        id
      }
    );
  }
);
ModalBaseTitle.displayName = "@mantine/core/ModalBaseTitle";
function NativeScrollArea({ children }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
}
const [InputContext, useInputContext] = createOptionalContext({
  size: "sm"
});
const defaultProps$1m = {};
const InputClearButton = factory((_props, ref) => {
  const props = useProps("InputClearButton", defaultProps$1m, _props);
  const { size: size2, variant, vars, classNames, styles: styles2, ...others } = props;
  const ctx = useInputContext();
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles: styles2,
    props
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    CloseButton,
    {
      variant: variant || "transparent",
      ref,
      size: size2 || (ctx == null ? void 0 : ctx.size) || "sm",
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      __staticSelector: "InputClearButton",
      ...others
    }
  );
});
InputClearButton.displayName = "@mantine/core/InputClearButton";
const [InputWrapperProvider, useInputWrapperContext] = createOptionalContext({
  offsetBottom: false,
  offsetTop: false,
  describedBy: void 0,
  getStyles: null,
  inputId: void 0,
  labelId: void 0
});
var classes$A = { "wrapper": "m_6c018570", "input": "m_8fb7ebe7", "section": "m_82577fc2", "placeholder": "m_88bacfd0", "root": "m_46b77525", "label": "m_8fdc1311", "required": "m_78a94662", "error": "m_8f816625", "description": "m_fe47ce59" };
const defaultProps$1l = {};
const varsResolver$A = createVarsResolver((_, { size: size2 }) => ({
  description: {
    "--input-description-size": size2 === void 0 ? void 0 : `calc(${getFontSize(size2)} - ${rem(2)})`
  }
}));
const InputDescription = factory((_props, ref) => {
  const props = useProps("InputDescription", defaultProps$1l, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    size: size2,
    __staticSelector,
    __inheritStyles = true,
    variant,
    ...others
  } = useProps("InputDescription", defaultProps$1l, props);
  const ctx = useInputWrapperContext();
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "description",
    vars,
    varsResolver: varsResolver$A
  });
  const getStyles2 = __inheritStyles && (ctx == null ? void 0 : ctx.getStyles) || _getStyles;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "p",
      ref,
      variant,
      size: size2,
      ...getStyles2("description", (ctx == null ? void 0 : ctx.getStyles) ? { className, style } : void 0),
      ...others
    }
  );
});
InputDescription.classes = classes$A;
InputDescription.displayName = "@mantine/core/InputDescription";
const defaultProps$1k = {};
const varsResolver$z = createVarsResolver((_, { size: size2 }) => ({
  error: {
    "--input-error-size": size2 === void 0 ? void 0 : `calc(${getFontSize(size2)} - ${rem(2)})`
  }
}));
const InputError = factory((_props, ref) => {
  const props = useProps("InputError", defaultProps$1k, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    size: size2,
    __staticSelector,
    __inheritStyles = true,
    variant,
    ...others
  } = props;
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "error",
    vars,
    varsResolver: varsResolver$z
  });
  const ctx = useInputWrapperContext();
  const getStyles2 = __inheritStyles && (ctx == null ? void 0 : ctx.getStyles) || _getStyles;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "p",
      ref,
      variant,
      size: size2,
      ...getStyles2("error", (ctx == null ? void 0 : ctx.getStyles) ? { className, style } : void 0),
      ...others
    }
  );
});
InputError.classes = classes$A;
InputError.displayName = "@mantine/core/InputError";
const defaultProps$1j = {
  labelElement: "label"
};
const varsResolver$y = createVarsResolver((_, { size: size2 }) => ({
  label: {
    "--input-label-size": getFontSize(size2),
    "--input-asterisk-color": void 0
  }
}));
const InputLabel = factory((_props, ref) => {
  const props = useProps("InputLabel", defaultProps$1j, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    labelElement,
    size: size2,
    required,
    htmlFor,
    onMouseDown,
    children,
    __staticSelector,
    variant,
    mod,
    ...others
  } = useProps("InputLabel", defaultProps$1j, props);
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "label",
    vars,
    varsResolver: varsResolver$y
  });
  const ctx = useInputWrapperContext();
  const getStyles2 = (ctx == null ? void 0 : ctx.getStyles) || _getStyles;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      ...getStyles2("label", (ctx == null ? void 0 : ctx.getStyles) ? { className, style } : void 0),
      component: labelElement,
      variant,
      size: size2,
      ref,
      htmlFor: labelElement === "label" ? htmlFor : void 0,
      mod: [{ required }, mod],
      onMouseDown: (event) => {
        onMouseDown == null ? void 0 : onMouseDown(event);
        if (!event.defaultPrevented && event.detail > 1) {
          event.preventDefault();
        }
      },
      ...others,
      children: [
        children,
        required && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("required"), "aria-hidden": true, children: " *" })
      ]
    }
  );
});
InputLabel.classes = classes$A;
InputLabel.displayName = "@mantine/core/InputLabel";
const defaultProps$1i = {};
const InputPlaceholder = factory((_props, ref) => {
  const props = useProps("InputPlaceholder", defaultProps$1i, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    __staticSelector,
    variant,
    error: error2,
    mod,
    ...others
  } = useProps("InputPlaceholder", defaultProps$1i, props);
  const getStyles2 = useStyles({
    name: ["InputPlaceholder", __staticSelector],
    props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "placeholder"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("placeholder"),
      mod: [{ error: !!error2 }, mod],
      component: "span",
      variant,
      ref,
      ...others
    }
  );
});
InputPlaceholder.classes = classes$A;
InputPlaceholder.displayName = "@mantine/core/InputPlaceholder";
function getInputOffsets(inputWrapperOrder, { hasDescription, hasError }) {
  const inputIndex = inputWrapperOrder.findIndex((part) => part === "input");
  const aboveInput = inputWrapperOrder.slice(0, inputIndex);
  const belowInput = inputWrapperOrder.slice(inputIndex + 1);
  const offsetTop = hasDescription && aboveInput.includes("description") || hasError && aboveInput.includes("error");
  const offsetBottom = hasDescription && belowInput.includes("description") || hasError && belowInput.includes("error");
  return { offsetBottom, offsetTop };
}
const defaultProps$1h = {
  labelElement: "label",
  inputContainer: (children) => children,
  inputWrapperOrder: ["label", "description", "input", "error"]
};
const varsResolver$x = createVarsResolver((_, { size: size2 }) => ({
  label: {
    "--input-label-size": getFontSize(size2),
    "--input-asterisk-color": void 0
  },
  error: {
    "--input-error-size": size2 === void 0 ? void 0 : `calc(${getFontSize(size2)} - ${rem(2)})`
  },
  description: {
    "--input-description-size": size2 === void 0 ? void 0 : `calc(${getFontSize(size2)} - ${rem(2)})`
  }
}));
const InputWrapper = factory((_props, ref) => {
  const props = useProps("InputWrapper", defaultProps$1h, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    size: size2,
    variant,
    __staticSelector,
    inputContainer,
    inputWrapperOrder,
    label,
    error: error2,
    description,
    labelProps,
    descriptionProps,
    errorProps,
    labelElement,
    children,
    withAsterisk,
    id,
    required,
    __stylesApiProps,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["InputWrapper", __staticSelector],
    props: __stylesApiProps || props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$x
  });
  const sharedProps = {
    size: size2,
    variant,
    __staticSelector
  };
  const idBase = useId$1(id);
  const isRequired = typeof withAsterisk === "boolean" ? withAsterisk : required;
  const errorId = (errorProps == null ? void 0 : errorProps.id) || `${idBase}-error`;
  const descriptionId = (descriptionProps == null ? void 0 : descriptionProps.id) || `${idBase}-description`;
  const inputId = idBase;
  const hasError = !!error2 && typeof error2 !== "boolean";
  const hasDescription = !!description;
  const _describedBy = `${hasError ? errorId : ""} ${hasDescription ? descriptionId : ""}`;
  const describedBy = _describedBy.trim().length > 0 ? _describedBy.trim() : void 0;
  const labelId = (labelProps == null ? void 0 : labelProps.id) || `${idBase}-label`;
  const _label = label && /* @__PURE__ */ jsxRuntimeExports.jsx(
    InputLabel,
    {
      labelElement,
      id: labelId,
      htmlFor: inputId,
      required: isRequired,
      ...sharedProps,
      ...labelProps,
      children: label
    },
    "label"
  );
  const _description = hasDescription && /* @__PURE__ */ jsxRuntimeExports.jsx(
    InputDescription,
    {
      ...descriptionProps,
      ...sharedProps,
      size: (descriptionProps == null ? void 0 : descriptionProps.size) || sharedProps.size,
      id: (descriptionProps == null ? void 0 : descriptionProps.id) || descriptionId,
      children: description
    },
    "description"
  );
  const _input = /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.Fragment, { children: inputContainer(children) }, "input");
  const _error = hasError && /* @__PURE__ */ reactExports.createElement(
    InputError,
    {
      ...errorProps,
      ...sharedProps,
      size: (errorProps == null ? void 0 : errorProps.size) || sharedProps.size,
      key: "error",
      id: (errorProps == null ? void 0 : errorProps.id) || errorId
    },
    error2
  );
  const content = inputWrapperOrder.map((part) => {
    switch (part) {
      case "label":
        return _label;
      case "input":
        return _input;
      case "description":
        return _description;
      case "error":
        return _error;
      default:
        return null;
    }
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    InputWrapperProvider,
    {
      value: {
        getStyles: getStyles2,
        describedBy,
        inputId,
        labelId,
        ...getInputOffsets(inputWrapperOrder, { hasDescription, hasError })
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Box,
        {
          ref,
          variant,
          size: size2,
          mod: [{ error: !!error2 }, mod],
          ...getStyles2("root"),
          ...others,
          children: content
        }
      )
    }
  );
});
InputWrapper.classes = classes$A;
InputWrapper.displayName = "@mantine/core/InputWrapper";
const defaultProps$1g = {
  variant: "default",
  leftSectionPointerEvents: "none",
  rightSectionPointerEvents: "none",
  withAria: true,
  withErrorStyles: true
};
const varsResolver$w = createVarsResolver((_, props, ctx) => ({
  wrapper: {
    "--input-margin-top": ctx.offsetTop ? "calc(var(--mantine-spacing-xs) / 2)" : void 0,
    "--input-margin-bottom": ctx.offsetBottom ? "calc(var(--mantine-spacing-xs) / 2)" : void 0,
    "--input-height": getSize(props.size, "input-height"),
    "--input-fz": getFontSize(props.size),
    "--input-radius": props.radius === void 0 ? void 0 : getRadius(props.radius),
    "--input-left-section-width": props.leftSectionWidth !== void 0 ? rem(props.leftSectionWidth) : void 0,
    "--input-right-section-width": props.rightSectionWidth !== void 0 ? rem(props.rightSectionWidth) : void 0,
    "--input-padding-y": props.multiline ? getSize(props.size, "input-padding-y") : void 0,
    "--input-left-section-pointer-events": props.leftSectionPointerEvents,
    "--input-right-section-pointer-events": props.rightSectionPointerEvents
  }
}));
const Input = polymorphicFactory((_props, ref) => {
  const props = useProps("Input", defaultProps$1g, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    required,
    __staticSelector,
    __stylesApiProps,
    size: size2,
    wrapperProps,
    error: error2,
    disabled,
    leftSection,
    leftSectionProps,
    leftSectionWidth,
    rightSection,
    rightSectionProps,
    rightSectionWidth,
    rightSectionPointerEvents,
    leftSectionPointerEvents,
    variant,
    vars,
    pointer,
    multiline,
    radius,
    id,
    withAria,
    withErrorStyles,
    mod,
    inputSize,
    __clearSection,
    __clearable,
    __defaultRightSection,
    ...others
  } = props;
  const { styleProps, rest } = extractStyleProps(others);
  const ctx = useInputWrapperContext();
  const stylesCtx = { offsetBottom: ctx == null ? void 0 : ctx.offsetBottom, offsetTop: ctx == null ? void 0 : ctx.offsetTop };
  const getStyles2 = useStyles({
    name: ["Input", __staticSelector],
    props: __stylesApiProps || props,
    classes: classes$A,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    stylesCtx,
    rootSelector: "wrapper",
    vars,
    varsResolver: varsResolver$w
  });
  const ariaAttributes = withAria ? {
    required,
    disabled,
    "aria-invalid": !!error2,
    "aria-describedby": ctx == null ? void 0 : ctx.describedBy,
    id: (ctx == null ? void 0 : ctx.inputId) || id
  } : {};
  const _rightSection = rightSection || __clearable && __clearSection || __defaultRightSection;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(InputContext, { value: { size: size2 || "sm" }, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      ...getStyles2("wrapper"),
      ...styleProps,
      ...wrapperProps,
      mod: [
        {
          error: !!error2 && withErrorStyles,
          pointer,
          disabled,
          multiline,
          "data-with-right-section": !!rightSection,
          "data-with-left-section": !!leftSection
        },
        mod
      ],
      variant,
      size: size2,
      children: [
        leftSection && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            ...leftSectionProps,
            "data-position": "left",
            ...getStyles2("section", {
              className: leftSectionProps == null ? void 0 : leftSectionProps.className,
              style: leftSectionProps == null ? void 0 : leftSectionProps.style
            }),
            children: leftSection
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Box,
          {
            component: "input",
            ...rest,
            ...ariaAttributes,
            ref,
            required,
            mod: { disabled, error: !!error2 && withErrorStyles },
            variant,
            __size: inputSize,
            ...getStyles2("input")
          }
        ),
        _rightSection && /* @__PURE__ */ jsxRuntimeExports.jsx(
          "div",
          {
            ...rightSectionProps,
            "data-position": "right",
            ...getStyles2("section", {
              className: rightSectionProps == null ? void 0 : rightSectionProps.className,
              style: rightSectionProps == null ? void 0 : rightSectionProps.style
            }),
            children: _rightSection
          }
        )
      ]
    }
  ) });
});
Input.classes = classes$A;
Input.Wrapper = InputWrapper;
Input.Label = InputLabel;
Input.Error = InputError;
Input.Description = InputDescription;
Input.Placeholder = InputPlaceholder;
Input.ClearButton = InputClearButton;
Input.displayName = "@mantine/core/Input";
function useInputProps(component, defaultProps2, _props) {
  const props = useProps(component, defaultProps2, _props);
  const {
    label,
    description,
    error: error2,
    required,
    classNames,
    styles: styles2,
    className,
    unstyled,
    __staticSelector,
    __stylesApiProps,
    errorProps,
    labelProps,
    descriptionProps,
    wrapperProps: _wrapperProps,
    id,
    size: size2,
    style,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    variant,
    vars,
    mod,
    ...others
  } = props;
  const { styleProps, rest } = extractStyleProps(others);
  const wrapperProps = {
    label,
    description,
    error: error2,
    required,
    classNames,
    className,
    __staticSelector,
    __stylesApiProps: __stylesApiProps || props,
    errorProps,
    labelProps,
    descriptionProps,
    unstyled,
    styles: styles2,
    size: size2,
    style,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    variant,
    id,
    mod,
    ..._wrapperProps
  };
  return {
    ...rest,
    classNames,
    styles: styles2,
    unstyled,
    wrapperProps: { ...wrapperProps, ...styleProps },
    inputProps: {
      required,
      classNames,
      styles: styles2,
      unstyled,
      size: size2,
      __staticSelector,
      __stylesApiProps: __stylesApiProps || props,
      error: error2,
      variant,
      id
    }
  };
}
const defaultProps$1f = {
  __staticSelector: "InputBase",
  withAria: true
};
const InputBase = polymorphicFactory((props, ref) => {
  const { inputProps, wrapperProps, ...others } = useInputProps("InputBase", defaultProps$1f, props);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Input.Wrapper, { ...wrapperProps, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Input, { ...inputProps, ...others, ref }) });
});
InputBase.classes = { ...Input.classes, ...Input.Wrapper.classes };
InputBase.displayName = "@mantine/core/InputBase";
const FLEX_STYLE_PROPS_DATA = {
  gap: { type: "spacing", property: "gap" },
  rowGap: { type: "spacing", property: "rowGap" },
  columnGap: { type: "spacing", property: "columnGap" },
  align: { type: "identity", property: "alignItems" },
  justify: { type: "identity", property: "justifyContent" },
  wrap: { type: "identity", property: "flexWrap" },
  direction: { type: "identity", property: "flexDirection" }
};
var classes$z = { "root": "m_8bffd616" };
const defaultProps$1e = {};
const Flex = polymorphicFactory((_props, ref) => {
  const props = useProps("Flex", defaultProps$1e, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    gap,
    rowGap,
    columnGap,
    align,
    justify,
    wrap,
    direction,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Flex",
    classes: classes$z,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars
  });
  const theme2 = useMantineTheme();
  const responsiveClassName = useRandomClassName();
  const parsedStyleProps = parseStyleProps({
    styleProps: { gap, rowGap, columnGap, align, justify, wrap, direction },
    theme: theme2,
    data: FLEX_STYLE_PROPS_DATA
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    parsedStyleProps.hasResponsiveStyles && /* @__PURE__ */ jsxRuntimeExports.jsx(
      InlineStyles,
      {
        selector: `.${responsiveClassName}`,
        styles: parsedStyleProps.styles,
        media: parsedStyleProps.media
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ref,
        ...getStyles2("root", {
          className: responsiveClassName,
          style: filterProps(parsedStyleProps.inlineStyles)
        }),
        ...others
      }
    )
  ] });
});
Flex.classes = classes$z;
Flex.displayName = "@mantine/core/Flex";
function isParent(parentElement, childElement) {
  if (!childElement || !parentElement) {
    return false;
  }
  let parent = childElement.parentNode;
  while (parent != null) {
    if (parent === parentElement) {
      return true;
    }
    parent = parent.parentNode;
  }
  return false;
}
function useFloatingIndicator({
  target,
  parent,
  ref,
  displayAfterTransitionEnd
}) {
  const transitionTimeout = reactExports.useRef(-1);
  const [initialized, setInitialized] = reactExports.useState(false);
  const [hidden2, setHidden] = reactExports.useState(
    typeof displayAfterTransitionEnd === "boolean" ? displayAfterTransitionEnd : false
  );
  const updatePosition2 = () => {
    if (!target || !parent || !ref.current) {
      return;
    }
    const targetRect = target.getBoundingClientRect();
    const parentRect = parent.getBoundingClientRect();
    const targetComputedStyle = window.getComputedStyle(target);
    const parentComputedStyle = window.getComputedStyle(parent);
    const borderTopWidth = toInt(targetComputedStyle.borderTopWidth) + toInt(parentComputedStyle.borderTopWidth);
    const borderLeftWidth = toInt(targetComputedStyle.borderLeftWidth) + toInt(parentComputedStyle.borderLeftWidth);
    const position2 = {
      top: targetRect.top - parentRect.top - borderTopWidth,
      left: targetRect.left - parentRect.left - borderLeftWidth,
      width: targetRect.width,
      height: targetRect.height
    };
    ref.current.style.transform = `translateY(${position2.top}px) translateX(${position2.left}px)`;
    ref.current.style.width = `${position2.width}px`;
    ref.current.style.height = `${position2.height}px`;
  };
  const updatePositionWithoutAnimation = () => {
    window.clearTimeout(transitionTimeout.current);
    if (ref.current) {
      ref.current.style.transitionDuration = "0ms";
    }
    updatePosition2();
    transitionTimeout.current = window.setTimeout(() => {
      if (ref.current) {
        ref.current.style.transitionDuration = "";
      }
    }, 30);
  };
  const targetResizeObserver = reactExports.useRef(null);
  const parentResizeObserver = reactExports.useRef(null);
  reactExports.useEffect(() => {
    updatePosition2();
    if (target) {
      targetResizeObserver.current = new ResizeObserver(updatePositionWithoutAnimation);
      targetResizeObserver.current.observe(target);
      if (parent) {
        parentResizeObserver.current = new ResizeObserver(updatePositionWithoutAnimation);
        parentResizeObserver.current.observe(parent);
      }
      return () => {
        var _a, _b;
        (_a = targetResizeObserver.current) == null ? void 0 : _a.disconnect();
        (_b = parentResizeObserver.current) == null ? void 0 : _b.disconnect();
      };
    }
    return void 0;
  }, [parent, target]);
  reactExports.useEffect(() => {
    if (parent) {
      const handleTransitionEnd = (event) => {
        if (isParent(event.target, parent)) {
          updatePositionWithoutAnimation();
          setHidden(false);
        }
      };
      parent.addEventListener("transitionend", handleTransitionEnd);
      return () => {
        parent.removeEventListener("transitionend", handleTransitionEnd);
      };
    }
    return void 0;
  }, [parent]);
  useTimeout(
    () => {
      if (getEnv() !== "test") {
        setInitialized(true);
      }
    },
    20,
    { autoInvoke: true }
  );
  useMutationObserver(
    (mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "attributes" && mutation.attributeName === "dir") {
          updatePositionWithoutAnimation();
        }
      });
    },
    { attributes: true, attributeFilter: ["dir"] },
    () => document.documentElement
  );
  return { initialized, hidden: hidden2 };
}
var classes$y = { "root": "m_96b553a6" };
const defaultProps$1d = {};
const varsResolver$v = createVarsResolver(
  (_theme, { transitionDuration }) => ({
    root: {
      "--transition-duration": typeof transitionDuration === "number" ? `${transitionDuration}ms` : transitionDuration
    }
  })
);
const FloatingIndicator = factory((_props, ref) => {
  const props = useProps("FloatingIndicator", defaultProps$1d, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    target,
    parent,
    transitionDuration,
    mod,
    displayAfterTransitionEnd,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "FloatingIndicator",
    classes: classes$y,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$v
  });
  const innerRef = reactExports.useRef(null);
  const { initialized, hidden: hidden2 } = useFloatingIndicator({
    target,
    parent,
    ref: innerRef,
    displayAfterTransitionEnd
  });
  const mergedRef = useMergedRef(ref, innerRef);
  if (!target || !parent) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref: mergedRef, mod: [{ initialized, hidden: hidden2 }, mod], ...getStyles2("root"), ...others });
});
FloatingIndicator.displayName = "@mantine/core/FloatingIndicator";
FloatingIndicator.classes = classes$y;
var classes$x = { "root": "m_66836ed3", "wrapper": "m_a5d60502", "body": "m_667c2793", "title": "m_6a03f287", "label": "m_698f4f23", "icon": "m_667f2a6a", "message": "m_7fa78076", "closeButton": "m_87f54839" };
const defaultProps$1c = {};
const varsResolver$u = createVarsResolver(
  (theme2, { radius, color, variant, autoContrast }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      variant: variant || "light",
      autoContrast
    });
    return {
      root: {
        "--alert-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--alert-bg": color || variant ? colors2.background : void 0,
        "--alert-color": colors2.color,
        "--alert-bd": color || variant ? colors2.border : void 0
      }
    };
  }
);
const Alert = factory((_props, ref) => {
  const props = useProps("Alert", defaultProps$1c, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    radius,
    color,
    title,
    children,
    id,
    icon,
    withCloseButton,
    onClose,
    closeButtonLabel,
    variant,
    autoContrast,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Alert",
    classes: classes$x,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$u
  });
  const rootId = useId$1(id);
  const titleId = title && `${rootId}-title` || void 0;
  const bodyId = `${rootId}-body`;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      id: rootId,
      ...getStyles2("root", { variant }),
      variant,
      ref,
      ...others,
      role: "alert",
      "aria-describedby": bodyId,
      "aria-labelledby": titleId,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { ...getStyles2("wrapper"), children: [
        icon && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("icon"), children: icon }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { ...getStyles2("body"), children: [
          title && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("title"), "data-with-close-button": withCloseButton || void 0, children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { id: titleId, ...getStyles2("label"), children: title }) }),
          children && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { id: bodyId, ...getStyles2("message"), "data-variant": variant, children })
        ] }),
        withCloseButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
          CloseButton,
          {
            ...getStyles2("closeButton"),
            onClick: onClose,
            variant: "transparent",
            size: 16,
            iconSize: 16,
            "aria-label": closeButtonLabel,
            unstyled
          }
        )
      ] })
    }
  );
});
Alert.classes = classes$x;
Alert.displayName = "@mantine/core/Alert";
var classes$w = { "root": "m_b6d8b162" };
function getTextTruncate(truncate) {
  if (truncate === "start") {
    return "start";
  }
  if (truncate === "end" || truncate) {
    return "end";
  }
  return void 0;
}
const defaultProps$1b = {
  inherit: false
};
const varsResolver$t = createVarsResolver(
  (theme2, { variant, lineClamp, gradient, size: size2, color }) => ({
    root: {
      "--text-fz": getFontSize(size2),
      "--text-lh": getLineHeight(size2),
      "--text-gradient": variant === "gradient" ? getGradient(gradient, theme2) : void 0,
      "--text-line-clamp": typeof lineClamp === "number" ? lineClamp.toString() : void 0,
      "--text-color": color ? getThemeColor(color, theme2) : void 0
    }
  })
);
const Text$1 = polymorphicFactory((_props, ref) => {
  const props = useProps("Text", defaultProps$1b, _props);
  const {
    lineClamp,
    truncate,
    inline: inline2,
    inherit,
    gradient,
    span,
    __staticSelector,
    vars,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    variant,
    mod,
    size: size2,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["Text", __staticSelector],
    props,
    classes: classes$w,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$t
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("root", { focusable: true }),
      ref,
      component: span ? "span" : "p",
      variant,
      mod: [
        {
          "data-truncate": getTextTruncate(truncate),
          "data-line-clamp": typeof lineClamp === "number",
          "data-inline": inline2,
          "data-inherit": inherit
        },
        mod
      ],
      size: size2,
      ...others
    }
  );
});
Text$1.classes = classes$w;
Text$1.displayName = "@mantine/core/Text";
var classes$v = { "root": "m_849cf0da" };
const defaultProps$1a = {
  underline: "hover"
};
const Anchor = polymorphicFactory((props, ref) => {
  const { underline, className, unstyled, mod, ...others } = useProps(
    "Anchor",
    defaultProps$1a,
    props
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Text$1,
    {
      component: "a",
      ref,
      className: clsx$1({ [classes$v.root]: !unstyled }, className),
      ...others,
      mod: [{ underline }, mod],
      __staticSelector: "Anchor",
      unstyled
    }
  );
});
Anchor.classes = classes$v;
Anchor.displayName = "@mantine/core/Anchor";
const [AppShellProvider, useAppShellContext] = createSafeContext(
  "AppShell was not found in tree"
);
var classes$u = { "root": "m_89ab340", "navbar": "m_45252eee", "aside": "m_9cdde9a", "header": "m_3b16f56b", "main": "m_8983817", "footer": "m_3840c879", "section": "m_6dcfc7c7" };
const defaultProps$19 = {};
const AppShellAside = factory((_props, ref) => {
  const props = useProps("AppShellAside", defaultProps$19, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    withBorder,
    zIndex,
    mod,
    ...others
  } = props;
  const ctx = useAppShellContext();
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "aside",
      ref,
      mod: [{ "with-border": withBorder ?? ctx.withBorder }, mod],
      ...ctx.getStyles("aside", { className, classNames, styles: styles2, style }),
      ...others,
      __vars: {
        "--app-shell-aside-z-index": `calc(${zIndex ?? ctx.zIndex} + 1)`
      }
    }
  );
});
AppShellAside.classes = classes$u;
AppShellAside.displayName = "@mantine/core/AppShellAside";
const defaultProps$18 = {};
const AppShellFooter = factory((_props, ref) => {
  var _a;
  const props = useProps("AppShellFooter", defaultProps$18, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    withBorder,
    zIndex,
    mod,
    ...others
  } = props;
  const ctx = useAppShellContext();
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "footer",
      ref,
      mod: [{ "with-border": withBorder ?? ctx.withBorder }, mod],
      ...ctx.getStyles("footer", {
        className: clsx$1({ [RemoveScroll.classNames.zeroRight]: ctx.offsetScrollbars }, className),
        classNames,
        styles: styles2,
        style
      }),
      ...others,
      __vars: { "--app-shell-footer-z-index": (_a = zIndex ?? ctx.zIndex) == null ? void 0 : _a.toString() }
    }
  );
});
AppShellFooter.classes = classes$u;
AppShellFooter.displayName = "@mantine/core/AppShellFooter";
const defaultProps$17 = {};
const AppShellHeader = factory((_props, ref) => {
  var _a;
  const props = useProps("AppShellHeader", defaultProps$17, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    withBorder,
    zIndex,
    mod,
    ...others
  } = props;
  const ctx = useAppShellContext();
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "header",
      ref,
      mod: [{ "with-border": withBorder ?? ctx.withBorder }, mod],
      ...ctx.getStyles("header", {
        className: clsx$1({ [RemoveScroll.classNames.zeroRight]: ctx.offsetScrollbars }, className),
        classNames,
        styles: styles2,
        style
      }),
      ...others,
      __vars: { "--app-shell-header-z-index": (_a = zIndex ?? ctx.zIndex) == null ? void 0 : _a.toString() }
    }
  );
});
AppShellHeader.classes = classes$u;
AppShellHeader.displayName = "@mantine/core/AppShellHeader";
const defaultProps$16 = {};
const AppShellMain = factory((_props, ref) => {
  const props = useProps("AppShellMain", defaultProps$16, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useAppShellContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "main",
      ref,
      ...ctx.getStyles("main", { className, style, classNames, styles: styles2 }),
      ...others
    }
  );
});
AppShellMain.classes = classes$u;
AppShellMain.displayName = "@mantine/core/AppShellMain";
function getBaseSize(size2) {
  if (typeof size2 === "object") {
    return size2.base;
  }
  return size2;
}
function isPrimitiveSize(size2) {
  const isBaseSize = typeof size2 === "object" && size2 !== null && typeof size2.base !== "undefined" && Object.keys(size2).length === 1;
  return typeof size2 === "number" || typeof size2 === "string" || isBaseSize;
}
function isResponsiveSize(size2) {
  if (typeof size2 !== "object" || size2 === null) {
    return false;
  }
  if (Object.keys(size2).length === 1 && "base" in size2) {
    return false;
  }
  return true;
}
function assignAsideVariables({
  baseStyles,
  minMediaStyles,
  maxMediaStyles,
  aside,
  theme: theme2
}) {
  var _a, _b, _c;
  const asideWidth = aside == null ? void 0 : aside.width;
  const collapsedAsideTransform = "translateX(var(--app-shell-aside-width))";
  const collapsedAsideTransformRtl = "translateX(calc(var(--app-shell-aside-width) * -1))";
  if ((aside == null ? void 0 : aside.breakpoint) && !((_a = aside == null ? void 0 : aside.collapsed) == null ? void 0 : _a.mobile)) {
    maxMediaStyles[aside == null ? void 0 : aside.breakpoint] = maxMediaStyles[aside == null ? void 0 : aside.breakpoint] || {};
    maxMediaStyles[aside == null ? void 0 : aside.breakpoint]["--app-shell-aside-width"] = "100%";
    maxMediaStyles[aside == null ? void 0 : aside.breakpoint]["--app-shell-aside-offset"] = "0px";
  }
  if (isPrimitiveSize(asideWidth)) {
    const baseSize = rem(getBaseSize(asideWidth));
    baseStyles["--app-shell-aside-width"] = baseSize;
    baseStyles["--app-shell-aside-offset"] = baseSize;
  }
  if (isResponsiveSize(asideWidth)) {
    if (typeof asideWidth.base !== "undefined") {
      baseStyles["--app-shell-aside-width"] = rem(asideWidth.base);
      baseStyles["--app-shell-aside-offset"] = rem(asideWidth.base);
    }
    keys(asideWidth).forEach((key) => {
      if (key !== "base") {
        minMediaStyles[key] = minMediaStyles[key] || {};
        minMediaStyles[key]["--app-shell-aside-width"] = rem(asideWidth[key]);
        minMediaStyles[key]["--app-shell-aside-offset"] = rem(asideWidth[key]);
      }
    });
  }
  if ((_b = aside == null ? void 0 : aside.collapsed) == null ? void 0 : _b.desktop) {
    const breakpointValue = aside.breakpoint;
    minMediaStyles[breakpointValue] = minMediaStyles[breakpointValue] || {};
    minMediaStyles[breakpointValue]["--app-shell-aside-transform"] = collapsedAsideTransform;
    minMediaStyles[breakpointValue]["--app-shell-aside-transform-rtl"] = collapsedAsideTransformRtl;
    minMediaStyles[breakpointValue]["--app-shell-aside-offset"] = "0px !important";
  }
  if ((_c = aside == null ? void 0 : aside.collapsed) == null ? void 0 : _c.mobile) {
    const breakpointValue = getBreakpointValue$2(aside.breakpoint, theme2.breakpoints) - 0.1;
    maxMediaStyles[breakpointValue] = maxMediaStyles[breakpointValue] || {};
    maxMediaStyles[breakpointValue]["--app-shell-aside-width"] = "100%";
    maxMediaStyles[breakpointValue]["--app-shell-aside-offset"] = "0px";
    maxMediaStyles[breakpointValue]["--app-shell-aside-transform"] = collapsedAsideTransform;
    maxMediaStyles[breakpointValue]["--app-shell-aside-transform-rtl"] = collapsedAsideTransformRtl;
  }
}
function assignFooterVariables({
  baseStyles,
  minMediaStyles,
  footer
}) {
  const footerHeight = footer == null ? void 0 : footer.height;
  const collapsedFooterTransform = "translateY(var(--app-shell-footer-height))";
  const shouldOffset = (footer == null ? void 0 : footer.offset) ?? true;
  if (isPrimitiveSize(footerHeight)) {
    const baseSize = rem(getBaseSize(footerHeight));
    baseStyles["--app-shell-footer-height"] = baseSize;
    if (shouldOffset) {
      baseStyles["--app-shell-footer-offset"] = baseSize;
    }
  }
  if (isResponsiveSize(footerHeight)) {
    if (typeof footerHeight.base !== "undefined") {
      baseStyles["--app-shell-footer-height"] = rem(footerHeight.base);
      if (shouldOffset) {
        baseStyles["--app-shell-footer-offset"] = rem(footerHeight.base);
      }
    }
    keys(footerHeight).forEach((key) => {
      if (key !== "base") {
        minMediaStyles[key] = minMediaStyles[key] || {};
        minMediaStyles[key]["--app-shell-footer-height"] = rem(footerHeight[key]);
        if (shouldOffset) {
          minMediaStyles[key]["--app-shell-footer-offset"] = rem(footerHeight[key]);
        }
      }
    });
  }
  if (footer == null ? void 0 : footer.collapsed) {
    baseStyles["--app-shell-footer-transform"] = collapsedFooterTransform;
    baseStyles["--app-shell-footer-offset"] = "0px !important";
  }
}
function assignHeaderVariables({
  baseStyles,
  minMediaStyles,
  header
}) {
  const headerHeight = header == null ? void 0 : header.height;
  const collapsedHeaderTransform = "translateY(calc(var(--app-shell-header-height) * -1))";
  const shouldOffset = (header == null ? void 0 : header.offset) ?? true;
  if (isPrimitiveSize(headerHeight)) {
    const baseSize = rem(getBaseSize(headerHeight));
    baseStyles["--app-shell-header-height"] = baseSize;
    if (shouldOffset) {
      baseStyles["--app-shell-header-offset"] = baseSize;
    }
  }
  if (isResponsiveSize(headerHeight)) {
    if (typeof headerHeight.base !== "undefined") {
      baseStyles["--app-shell-header-height"] = rem(headerHeight.base);
      if (shouldOffset) {
        baseStyles["--app-shell-header-offset"] = rem(headerHeight.base);
      }
    }
    keys(headerHeight).forEach((key) => {
      if (key !== "base") {
        minMediaStyles[key] = minMediaStyles[key] || {};
        minMediaStyles[key]["--app-shell-header-height"] = rem(headerHeight[key]);
        if (shouldOffset) {
          minMediaStyles[key]["--app-shell-header-offset"] = rem(headerHeight[key]);
        }
      }
    });
  }
  if (header == null ? void 0 : header.collapsed) {
    baseStyles["--app-shell-header-transform"] = collapsedHeaderTransform;
    baseStyles["--app-shell-header-offset"] = "0px !important";
  }
}
function assignNavbarVariables({
  baseStyles,
  minMediaStyles,
  maxMediaStyles,
  navbar,
  theme: theme2
}) {
  var _a, _b, _c;
  const navbarWidth = navbar == null ? void 0 : navbar.width;
  const collapsedNavbarTransform = "translateX(calc(var(--app-shell-navbar-width) * -1))";
  const collapsedNavbarTransformRtl = "translateX(var(--app-shell-navbar-width))";
  if ((navbar == null ? void 0 : navbar.breakpoint) && !((_a = navbar == null ? void 0 : navbar.collapsed) == null ? void 0 : _a.mobile)) {
    maxMediaStyles[navbar == null ? void 0 : navbar.breakpoint] = maxMediaStyles[navbar == null ? void 0 : navbar.breakpoint] || {};
    maxMediaStyles[navbar == null ? void 0 : navbar.breakpoint]["--app-shell-navbar-width"] = "100%";
    maxMediaStyles[navbar == null ? void 0 : navbar.breakpoint]["--app-shell-navbar-offset"] = "0px";
  }
  if (isPrimitiveSize(navbarWidth)) {
    const baseSize = rem(getBaseSize(navbarWidth));
    baseStyles["--app-shell-navbar-width"] = baseSize;
    baseStyles["--app-shell-navbar-offset"] = baseSize;
  }
  if (isResponsiveSize(navbarWidth)) {
    if (typeof navbarWidth.base !== "undefined") {
      baseStyles["--app-shell-navbar-width"] = rem(navbarWidth.base);
      baseStyles["--app-shell-navbar-offset"] = rem(navbarWidth.base);
    }
    keys(navbarWidth).forEach((key) => {
      if (key !== "base") {
        minMediaStyles[key] = minMediaStyles[key] || {};
        minMediaStyles[key]["--app-shell-navbar-width"] = rem(navbarWidth[key]);
        minMediaStyles[key]["--app-shell-navbar-offset"] = rem(navbarWidth[key]);
      }
    });
  }
  if ((_b = navbar == null ? void 0 : navbar.collapsed) == null ? void 0 : _b.desktop) {
    const breakpointValue = navbar.breakpoint;
    minMediaStyles[breakpointValue] = minMediaStyles[breakpointValue] || {};
    minMediaStyles[breakpointValue]["--app-shell-navbar-transform"] = collapsedNavbarTransform;
    minMediaStyles[breakpointValue]["--app-shell-navbar-transform-rtl"] = collapsedNavbarTransformRtl;
    minMediaStyles[breakpointValue]["--app-shell-navbar-offset"] = "0px !important";
  }
  if ((_c = navbar == null ? void 0 : navbar.collapsed) == null ? void 0 : _c.mobile) {
    const breakpointValue = getBreakpointValue$2(navbar.breakpoint, theme2.breakpoints) - 0.1;
    maxMediaStyles[breakpointValue] = maxMediaStyles[breakpointValue] || {};
    maxMediaStyles[breakpointValue]["--app-shell-navbar-width"] = "100%";
    maxMediaStyles[breakpointValue]["--app-shell-navbar-offset"] = "0px";
    maxMediaStyles[breakpointValue]["--app-shell-navbar-transform"] = collapsedNavbarTransform;
    maxMediaStyles[breakpointValue]["--app-shell-navbar-transform-rtl"] = collapsedNavbarTransformRtl;
  }
}
function getPaddingValue(padding) {
  return Number(padding) === 0 ? "0px" : getSpacing(padding);
}
function assignPaddingVariables({
  padding,
  baseStyles,
  minMediaStyles
}) {
  if (isPrimitiveSize(padding)) {
    baseStyles["--app-shell-padding"] = getPaddingValue(getBaseSize(padding));
  }
  if (isResponsiveSize(padding)) {
    if (padding.base) {
      baseStyles["--app-shell-padding"] = getPaddingValue(padding.base);
    }
    keys(padding).forEach((key) => {
      if (key !== "base") {
        minMediaStyles[key] = minMediaStyles[key] || {};
        minMediaStyles[key]["--app-shell-padding"] = getPaddingValue(padding[key]);
      }
    });
  }
}
function getVariables({ navbar, header, footer, aside, padding, theme: theme2 }) {
  const minMediaStyles = {};
  const maxMediaStyles = {};
  const baseStyles = {};
  assignNavbarVariables({
    baseStyles,
    minMediaStyles,
    maxMediaStyles,
    navbar,
    theme: theme2
  });
  assignAsideVariables({
    baseStyles,
    minMediaStyles,
    maxMediaStyles,
    aside,
    theme: theme2
  });
  assignHeaderVariables({ baseStyles, minMediaStyles, header });
  assignFooterVariables({ baseStyles, minMediaStyles, footer });
  assignPaddingVariables({ baseStyles, minMediaStyles, padding });
  const minMedia = getSortedBreakpoints(keys(minMediaStyles), theme2.breakpoints).map(
    (breakpoint) => ({
      query: `(min-width: ${em(breakpoint.px)})`,
      styles: minMediaStyles[breakpoint.value]
    })
  );
  const maxMedia = getSortedBreakpoints(keys(maxMediaStyles), theme2.breakpoints).map(
    (breakpoint) => ({
      query: `(max-width: ${em(breakpoint.px)})`,
      styles: maxMediaStyles[breakpoint.value]
    })
  );
  const media = [...minMedia, ...maxMedia];
  return { baseStyles, media };
}
function AppShellMediaStyles({
  navbar,
  header,
  aside,
  footer,
  padding
}) {
  const theme2 = useMantineTheme();
  const ctx = useMantineContext();
  const { media, baseStyles } = getVariables({ navbar, header, footer, aside, padding, theme: theme2 });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(InlineStyles, { media, styles: baseStyles, selector: ctx.cssVariablesSelector });
}
const defaultProps$15 = {};
const AppShellNavbar = factory((_props, ref) => {
  const props = useProps("AppShellNavbar", defaultProps$15, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    withBorder,
    zIndex,
    mod,
    ...others
  } = props;
  const ctx = useAppShellContext();
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "nav",
      ref,
      mod: [{ "with-border": withBorder ?? ctx.withBorder }, mod],
      ...ctx.getStyles("navbar", { className, classNames, styles: styles2, style }),
      ...others,
      __vars: {
        "--app-shell-navbar-z-index": `calc(${zIndex ?? ctx.zIndex} + 1)`
      }
    }
  );
});
AppShellNavbar.classes = classes$u;
AppShellNavbar.displayName = "@mantine/core/AppShellNavbar";
const defaultProps$14 = {};
const AppShellSection = polymorphicFactory((_props, ref) => {
  const props = useProps("AppShellSection", defaultProps$14, _props);
  const { classNames, className, style, styles: styles2, vars, grow, mod, ...others } = props;
  const ctx = useAppShellContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      mod: [{ grow }, mod],
      ...ctx.getStyles("section", { className, style, classNames, styles: styles2 }),
      ...others
    }
  );
});
AppShellSection.classes = classes$u;
AppShellSection.displayName = "@mantine/core/AppShellSection";
function useResizing({ transitionDuration, disabled }) {
  const [resizing, setResizing] = reactExports.useState(true);
  const resizingTimeout = reactExports.useRef(-1);
  const disabledTimeout = reactExports.useRef(-1);
  useWindowEvent("resize", () => {
    setResizing(true);
    clearTimeout(resizingTimeout.current);
    resizingTimeout.current = window.setTimeout(
      () => reactExports.startTransition(() => {
        setResizing(false);
      }),
      200
    );
  });
  useIsomorphicEffect$1(() => {
    setResizing(true);
    clearTimeout(disabledTimeout.current);
    disabledTimeout.current = window.setTimeout(
      () => reactExports.startTransition(() => {
        setResizing(false);
      }),
      transitionDuration || 0
    );
  }, [disabled, transitionDuration]);
  return resizing;
}
const defaultProps$13 = {
  withBorder: true,
  padding: 0,
  transitionDuration: 200,
  transitionTimingFunction: "ease",
  zIndex: getDefaultZIndex("app")
};
const varsResolver$s = createVarsResolver(
  (_, { transitionDuration, transitionTimingFunction }) => ({
    root: {
      "--app-shell-transition-duration": `${transitionDuration}ms`,
      "--app-shell-transition-timing-function": transitionTimingFunction
    }
  })
);
const AppShell$1 = factory((_props, ref) => {
  const props = useProps("AppShell", defaultProps$13, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    navbar,
    withBorder,
    padding,
    transitionDuration,
    transitionTimingFunction,
    header,
    zIndex,
    layout: layout2,
    disabled,
    aside,
    footer,
    offsetScrollbars = layout2 !== "alt",
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "AppShell",
    classes: classes$u,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$s
  });
  const resizing = useResizing({ disabled, transitionDuration });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(AppShellProvider, { value: { getStyles: getStyles2, withBorder, zIndex, disabled, offsetScrollbars }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      AppShellMediaStyles,
      {
        navbar,
        header,
        aside,
        footer,
        padding
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ref,
        ...getStyles2("root"),
        mod: [{ resizing, layout: layout2, disabled }, mod],
        ...others
      }
    )
  ] });
});
AppShell$1.classes = classes$u;
AppShell$1.displayName = "@mantine/core/AppShell";
AppShell$1.Navbar = AppShellNavbar;
AppShell$1.Header = AppShellHeader;
AppShell$1.Main = AppShellMain;
AppShell$1.Aside = AppShellAside;
AppShell$1.Footer = AppShellFooter;
AppShell$1.Section = AppShellSection;
function parseItem(item) {
  if (typeof item === "string") {
    return { value: item, label: item };
  }
  if ("value" in item && !("label" in item)) {
    return { value: item.value, label: item.value, disabled: item.disabled };
  }
  if (typeof item === "number") {
    return { value: item.toString(), label: item.toString() };
  }
  if ("group" in item) {
    return {
      group: item.group,
      items: item.items.map((i) => parseItem(i))
    };
  }
  return item;
}
function getParsedComboboxData(data) {
  if (!data) {
    return [];
  }
  return data.map((item) => parseItem(item));
}
function getOptionsLockup(options) {
  return options.reduce((acc, item) => {
    if ("group" in item) {
      return { ...acc, ...getOptionsLockup(item.items) };
    }
    acc[item.value] = item;
    return acc;
  }, {});
}
var classes$t = { "dropdown": "m_88b62a41", "search": "m_985517d8", "options": "m_b2821a6e", "option": "m_92253aa5", "empty": "m_2530cd1d", "header": "m_858f94bd", "footer": "m_82b967cb", "group": "m_254f3e4f", "groupLabel": "m_2bb2e9e5", "chevron": "m_2943220b", "optionsDropdownOption": "m_390b5f4", "optionsDropdownCheckIcon": "m_8ee53fc2" };
const defaultProps$12 = {
  error: null
};
const varsResolver$r = createVarsResolver((theme2, { size: size2, color }) => ({
  chevron: {
    "--combobox-chevron-size": getSize(size2, "combobox-chevron-size"),
    "--combobox-chevron-color": color ? getThemeColor(color, theme2) : void 0
  }
}));
const ComboboxChevron = factory((_props, ref) => {
  const props = useProps("ComboboxChevron", defaultProps$12, _props);
  const { size: size2, error: error2, style, className, classNames, styles: styles2, unstyled, vars, mod, ...others } = props;
  const getStyles2 = useStyles({
    name: "ComboboxChevron",
    classes: classes$t,
    props,
    style,
    className,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$r,
    rootSelector: "chevron"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "svg",
      ...others,
      ...getStyles2("chevron"),
      size: size2,
      viewBox: "0 0 15 15",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      mod: ["combobox-chevron", { error: error2 }, mod],
      ref,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
          fill: "currentColor",
          fillRule: "evenodd",
          clipRule: "evenodd"
        }
      )
    }
  );
});
ComboboxChevron.classes = classes$t;
ComboboxChevron.displayName = "@mantine/core/ComboboxChevron";
const [ComboboxProvider, useComboboxContext] = createSafeContext(
  "Combobox component was not found in tree"
);
const ComboboxClearButton = reactExports.forwardRef(
  ({ size: size2, onMouseDown, onClick, onClear, ...others }, ref) => /* @__PURE__ */ jsxRuntimeExports.jsx(
    Input.ClearButton,
    {
      ref,
      tabIndex: -1,
      "aria-hidden": true,
      ...others,
      onMouseDown: (event) => {
        event.preventDefault();
        onMouseDown == null ? void 0 : onMouseDown(event);
      },
      onClick: (event) => {
        onClear();
        onClick == null ? void 0 : onClick(event);
      }
    }
  )
);
ComboboxClearButton.displayName = "@mantine/core/ComboboxClearButton";
const defaultProps$11 = {};
const ComboboxDropdown = factory((props, ref) => {
  const { classNames, styles: styles2, className, style, hidden: hidden2, ...others } = useProps(
    "ComboboxDropdown",
    defaultProps$11,
    props
  );
  const ctx = useComboboxContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Popover.Dropdown,
    {
      ...others,
      ref,
      role: "presentation",
      "data-hidden": hidden2 || void 0,
      ...ctx.getStyles("dropdown", { className, style, classNames, styles: styles2 })
    }
  );
});
ComboboxDropdown.classes = classes$t;
ComboboxDropdown.displayName = "@mantine/core/ComboboxDropdown";
const defaultProps$10 = {
  refProp: "ref"
};
const ComboboxDropdownTarget = factory((props, ref) => {
  const { children, refProp } = useProps("ComboboxDropdownTarget", defaultProps$10, props);
  useComboboxContext();
  if (!isElement$1(children)) {
    throw new Error(
      "Combobox.DropdownTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported"
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Popover.Target, { ref, refProp, children });
});
ComboboxDropdownTarget.displayName = "@mantine/core/ComboboxDropdownTarget";
const defaultProps$$ = {};
const ComboboxEmpty = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, ...others } = useProps(
    "ComboboxEmpty",
    defaultProps$$,
    props
  );
  const ctx = useComboboxContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("empty", { className, classNames, styles: styles2, style }),
      ...others
    }
  );
});
ComboboxEmpty.classes = classes$t;
ComboboxEmpty.displayName = "@mantine/core/ComboboxEmpty";
function useComboboxTargetProps({
  onKeyDown,
  withKeyboardNavigation,
  withAriaAttributes,
  withExpandedAttribute,
  targetType,
  autoComplete
}) {
  const ctx = useComboboxContext();
  const [selectedOptionId, setSelectedOptionId] = reactExports.useState(null);
  const handleKeyDown = (event) => {
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (ctx.readOnly) {
      return;
    }
    if (withKeyboardNavigation) {
      if (event.nativeEvent.isComposing) {
        return;
      }
      if (event.nativeEvent.code === "ArrowDown") {
        event.preventDefault();
        if (!ctx.store.dropdownOpened) {
          ctx.store.openDropdown("keyboard");
          setSelectedOptionId(ctx.store.selectActiveOption());
          ctx.store.updateSelectedOptionIndex("selected", { scrollIntoView: true });
        } else {
          setSelectedOptionId(ctx.store.selectNextOption());
        }
      }
      if (event.nativeEvent.code === "ArrowUp") {
        event.preventDefault();
        if (!ctx.store.dropdownOpened) {
          ctx.store.openDropdown("keyboard");
          setSelectedOptionId(ctx.store.selectActiveOption());
          ctx.store.updateSelectedOptionIndex("selected", { scrollIntoView: true });
        } else {
          setSelectedOptionId(ctx.store.selectPreviousOption());
        }
      }
      if (event.nativeEvent.code === "Enter" || event.nativeEvent.code === "NumpadEnter") {
        if (event.nativeEvent.keyCode === 229) {
          return;
        }
        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();
        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {
          event.preventDefault();
          ctx.store.clickSelectedOption();
        } else if (targetType === "button") {
          event.preventDefault();
          ctx.store.openDropdown("keyboard");
        }
      }
      if (event.key === "Escape") {
        ctx.store.closeDropdown("keyboard");
      }
      if (event.nativeEvent.code === "Space") {
        if (targetType === "button") {
          event.preventDefault();
          ctx.store.toggleDropdown("keyboard");
        }
      }
    }
  };
  const ariaAttributes = withAriaAttributes ? {
    "aria-haspopup": "listbox",
    "aria-expanded": withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened) || void 0,
    "aria-controls": ctx.store.dropdownOpened ? ctx.store.listId : void 0,
    "aria-activedescendant": ctx.store.dropdownOpened ? selectedOptionId || void 0 : void 0,
    autoComplete,
    "data-expanded": ctx.store.dropdownOpened || void 0,
    "data-mantine-stop-propagation": ctx.store.dropdownOpened || void 0
  } : {};
  return {
    ...ariaAttributes,
    onKeyDown: handleKeyDown
  };
}
const defaultProps$_ = {
  refProp: "ref",
  targetType: "input",
  withKeyboardNavigation: true,
  withAriaAttributes: true,
  withExpandedAttribute: false,
  autoComplete: "off"
};
const ComboboxEventsTarget = factory((props, ref) => {
  const {
    children,
    refProp,
    withKeyboardNavigation,
    withAriaAttributes,
    withExpandedAttribute,
    targetType,
    autoComplete,
    ...others
  } = useProps("ComboboxEventsTarget", defaultProps$_, props);
  if (!isElement$1(children)) {
    throw new Error(
      "Combobox.EventsTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const ctx = useComboboxContext();
  const targetProps = useComboboxTargetProps({
    targetType,
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute,
    onKeyDown: children.props.onKeyDown,
    autoComplete
  });
  return reactExports.cloneElement(children, {
    ...targetProps,
    ...others,
    [refProp]: useMergedRef(ref, ctx.store.targetRef, getRefProp(children))
  });
});
ComboboxEventsTarget.displayName = "@mantine/core/ComboboxEventsTarget";
const defaultProps$Z = {};
const ComboboxFooter = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, ...others } = useProps(
    "ComboboxFooter",
    defaultProps$Z,
    props
  );
  const ctx = useComboboxContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("footer", { className, classNames, style, styles: styles2 }),
      ...others,
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  );
});
ComboboxFooter.classes = classes$t;
ComboboxFooter.displayName = "@mantine/core/ComboboxFooter";
const defaultProps$Y = {};
const ComboboxGroup = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, children, label, ...others } = useProps(
    "ComboboxGroup",
    defaultProps$Y,
    props
  );
  const ctx = useComboboxContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      ref,
      ...ctx.getStyles("group", { className, classNames, style, styles: styles2 }),
      ...others,
      children: [
        label && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...ctx.getStyles("groupLabel", { classNames, styles: styles2 }), children: label }),
        children
      ]
    }
  );
});
ComboboxGroup.classes = classes$t;
ComboboxGroup.displayName = "@mantine/core/ComboboxGroup";
const defaultProps$X = {};
const ComboboxHeader = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, ...others } = useProps(
    "ComboboxHeader",
    defaultProps$X,
    props
  );
  const ctx = useComboboxContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("header", { className, classNames, style, styles: styles2 }),
      ...others,
      onMouseDown: (event) => {
        event.preventDefault();
      }
    }
  );
});
ComboboxHeader.classes = classes$t;
ComboboxHeader.displayName = "@mantine/core/ComboboxHeader";
function ComboboxHiddenInput({
  value,
  valuesDivider = ",",
  ...others
}) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "input",
    {
      type: "hidden",
      value: Array.isArray(value) ? value.join(valuesDivider) : value || "",
      ...others
    }
  );
}
ComboboxHiddenInput.displayName = "@mantine/core/ComboboxHiddenInput";
const defaultProps$W = {};
const ComboboxOption = factory((_props, ref) => {
  const props = useProps("ComboboxOption", defaultProps$W, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    vars,
    onClick,
    id,
    active,
    onMouseDown,
    onMouseOver,
    disabled,
    selected,
    mod,
    ...others
  } = props;
  const ctx = useComboboxContext();
  const uuid = reactExports.useId();
  const _id = id || uuid;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...ctx.getStyles("option", { className, classNames, styles: styles2, style }),
      ...others,
      ref,
      id: _id,
      mod: [
        "combobox-option",
        { "combobox-active": active, "combobox-disabled": disabled, "combobox-selected": selected },
        mod
      ],
      role: "option",
      onClick: (event) => {
        var _a;
        if (!disabled) {
          (_a = ctx.onOptionSubmit) == null ? void 0 : _a.call(ctx, props.value, props);
          onClick == null ? void 0 : onClick(event);
        } else {
          event.preventDefault();
        }
      },
      onMouseDown: (event) => {
        event.preventDefault();
        onMouseDown == null ? void 0 : onMouseDown(event);
      },
      onMouseOver: (event) => {
        if (ctx.resetSelectionOnOptionHover) {
          ctx.store.resetSelectedOption();
        }
        onMouseOver == null ? void 0 : onMouseOver(event);
      }
    }
  );
});
ComboboxOption.classes = classes$t;
ComboboxOption.displayName = "@mantine/core/ComboboxOption";
const defaultProps$V = {};
const ComboboxOptions = factory((_props, ref) => {
  const props = useProps("ComboboxOptions", defaultProps$V, _props);
  const { classNames, className, style, styles: styles2, id, onMouseDown, labelledBy, ...others } = props;
  const ctx = useComboboxContext();
  const _id = useId$1(id);
  reactExports.useEffect(() => {
    ctx.store.setListId(_id);
  }, [_id]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("options", { className, style, classNames, styles: styles2 }),
      ...others,
      id: _id,
      role: "listbox",
      "aria-labelledby": labelledBy,
      onMouseDown: (event) => {
        event.preventDefault();
        onMouseDown == null ? void 0 : onMouseDown(event);
      }
    }
  );
});
ComboboxOptions.classes = classes$t;
ComboboxOptions.displayName = "@mantine/core/ComboboxOptions";
const defaultProps$U = {
  withAriaAttributes: true,
  withKeyboardNavigation: true
};
const ComboboxSearch = factory((_props, ref) => {
  const props = useProps("ComboboxSearch", defaultProps$U, _props);
  const {
    classNames,
    styles: styles2,
    unstyled,
    vars,
    withAriaAttributes,
    onKeyDown,
    withKeyboardNavigation,
    size: size2,
    ...others
  } = props;
  const ctx = useComboboxContext();
  const _styles = ctx.getStyles("search");
  const targetProps = useComboboxTargetProps({
    targetType: "input",
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute: false,
    onKeyDown,
    autoComplete: "off"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Input,
    {
      ref: useMergedRef(ref, ctx.store.searchRef),
      classNames: [{ input: _styles.className }, classNames],
      styles: [{ input: _styles.style }, styles2],
      size: size2 || ctx.size,
      ...targetProps,
      ...others,
      __staticSelector: "Combobox"
    }
  );
});
ComboboxSearch.classes = classes$t;
ComboboxSearch.displayName = "@mantine/core/ComboboxSearch";
const defaultProps$T = {
  refProp: "ref",
  targetType: "input",
  withKeyboardNavigation: true,
  withAriaAttributes: true,
  withExpandedAttribute: false,
  autoComplete: "off"
};
const ComboboxTarget = factory((props, ref) => {
  const {
    children,
    refProp,
    withKeyboardNavigation,
    withAriaAttributes,
    withExpandedAttribute,
    targetType,
    autoComplete,
    ...others
  } = useProps("ComboboxTarget", defaultProps$T, props);
  if (!isElement$1(children)) {
    throw new Error(
      "Combobox.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const ctx = useComboboxContext();
  const targetProps = useComboboxTargetProps({
    targetType,
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute,
    onKeyDown: children.props.onKeyDown,
    autoComplete
  });
  const clonedElement = reactExports.cloneElement(children, {
    ...targetProps,
    ...others
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Popover.Target, { ref: useMergedRef(ref, ctx.store.targetRef), children: clonedElement });
});
ComboboxTarget.displayName = "@mantine/core/ComboboxTarget";
function getPreviousIndex(currentIndex, elements, loop) {
  for (let i = currentIndex - 1; i >= 0; i -= 1) {
    if (!elements[i].hasAttribute("data-combobox-disabled")) {
      return i;
    }
  }
  if (loop) {
    for (let i = elements.length - 1; i > -1; i -= 1) {
      if (!elements[i].hasAttribute("data-combobox-disabled")) {
        return i;
      }
    }
  }
  return currentIndex;
}
function getNextIndex(currentIndex, elements, loop) {
  for (let i = currentIndex + 1; i < elements.length; i += 1) {
    if (!elements[i].hasAttribute("data-combobox-disabled")) {
      return i;
    }
  }
  if (loop) {
    for (let i = 0; i < elements.length; i += 1) {
      if (!elements[i].hasAttribute("data-combobox-disabled")) {
        return i;
      }
    }
  }
  return currentIndex;
}
function getFirstIndex(elements) {
  for (let i = 0; i < elements.length; i += 1) {
    if (!elements[i].hasAttribute("data-combobox-disabled")) {
      return i;
    }
  }
  return -1;
}
function useCombobox({
  defaultOpened,
  opened,
  onOpenedChange,
  onDropdownClose,
  onDropdownOpen,
  loop = true,
  scrollBehavior = "instant"
} = {}) {
  const [dropdownOpened, setDropdownOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange: onOpenedChange
  });
  const listId = reactExports.useRef(null);
  const selectedOptionIndex = reactExports.useRef(-1);
  const searchRef = reactExports.useRef(null);
  const targetRef = reactExports.useRef(null);
  const focusSearchTimeout = reactExports.useRef(-1);
  const focusTargetTimeout = reactExports.useRef(-1);
  const selectedIndexUpdateTimeout = reactExports.useRef(-1);
  const openDropdown = reactExports.useCallback(
    (eventSource = "unknown") => {
      if (!dropdownOpened) {
        setDropdownOpened(true);
        onDropdownOpen == null ? void 0 : onDropdownOpen(eventSource);
      }
    },
    [setDropdownOpened, onDropdownOpen, dropdownOpened]
  );
  const closeDropdown = reactExports.useCallback(
    (eventSource = "unknown") => {
      if (dropdownOpened) {
        setDropdownOpened(false);
        onDropdownClose == null ? void 0 : onDropdownClose(eventSource);
      }
    },
    [setDropdownOpened, onDropdownClose, dropdownOpened]
  );
  const toggleDropdown = reactExports.useCallback(
    (eventSource = "unknown") => {
      if (dropdownOpened) {
        closeDropdown(eventSource);
      } else {
        openDropdown(eventSource);
      }
    },
    [closeDropdown, openDropdown, dropdownOpened]
  );
  const clearSelectedItem = reactExports.useCallback(() => {
    const selected = document.querySelector(`#${listId.current} [data-combobox-selected]`);
    selected == null ? void 0 : selected.removeAttribute("data-combobox-selected");
    selected == null ? void 0 : selected.removeAttribute("aria-selected");
  }, []);
  const selectOption = reactExports.useCallback(
    (index2) => {
      const list = document.getElementById(listId.current);
      const items = list == null ? void 0 : list.querySelectorAll("[data-combobox-option]");
      if (!items) {
        return null;
      }
      const nextIndex = index2 >= items.length ? 0 : index2 < 0 ? items.length - 1 : index2;
      selectedOptionIndex.current = nextIndex;
      if ((items == null ? void 0 : items[nextIndex]) && !items[nextIndex].hasAttribute("data-combobox-disabled")) {
        clearSelectedItem();
        items[nextIndex].setAttribute("data-combobox-selected", "true");
        items[nextIndex].setAttribute("aria-selected", "true");
        items[nextIndex].scrollIntoView({ block: "nearest", behavior: scrollBehavior });
        return items[nextIndex].id;
      }
      return null;
    },
    [scrollBehavior, clearSelectedItem]
  );
  const selectActiveOption = reactExports.useCallback(() => {
    const activeOption = document.querySelector(
      `#${listId.current} [data-combobox-active]`
    );
    if (activeOption) {
      const items = document.querySelectorAll(
        `#${listId.current} [data-combobox-option]`
      );
      const index2 = Array.from(items).findIndex((option) => option === activeOption);
      return selectOption(index2);
    }
    return selectOption(0);
  }, [selectOption]);
  const selectNextOption = reactExports.useCallback(
    () => selectOption(
      getNextIndex(
        selectedOptionIndex.current,
        document.querySelectorAll(`#${listId.current} [data-combobox-option]`),
        loop
      )
    ),
    [selectOption, loop]
  );
  const selectPreviousOption = reactExports.useCallback(
    () => selectOption(
      getPreviousIndex(
        selectedOptionIndex.current,
        document.querySelectorAll(`#${listId.current} [data-combobox-option]`),
        loop
      )
    ),
    [selectOption, loop]
  );
  const selectFirstOption = reactExports.useCallback(
    () => selectOption(
      getFirstIndex(
        document.querySelectorAll(`#${listId.current} [data-combobox-option]`)
      )
    ),
    [selectOption]
  );
  const updateSelectedOptionIndex = reactExports.useCallback(
    (target = "selected", options) => {
      selectedIndexUpdateTimeout.current = window.setTimeout(() => {
        var _a;
        const items = document.querySelectorAll(
          `#${listId.current} [data-combobox-option]`
        );
        const index2 = Array.from(items).findIndex(
          (option) => option.hasAttribute(`data-combobox-${target}`)
        );
        selectedOptionIndex.current = index2;
        if (options == null ? void 0 : options.scrollIntoView) {
          (_a = items[index2]) == null ? void 0 : _a.scrollIntoView({ block: "nearest", behavior: scrollBehavior });
        }
      }, 0);
    },
    []
  );
  const resetSelectedOption = reactExports.useCallback(() => {
    selectedOptionIndex.current = -1;
    clearSelectedItem();
  }, [clearSelectedItem]);
  const clickSelectedOption = reactExports.useCallback(() => {
    const items = document.querySelectorAll(
      `#${listId.current} [data-combobox-option]`
    );
    const item = items == null ? void 0 : items[selectedOptionIndex.current];
    item == null ? void 0 : item.click();
  }, []);
  const setListId = reactExports.useCallback((id) => {
    listId.current = id;
  }, []);
  const focusSearchInput = reactExports.useCallback(() => {
    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);
  }, []);
  const focusTarget = reactExports.useCallback(() => {
    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);
  }, []);
  const getSelectedOptionIndex = reactExports.useCallback(() => selectedOptionIndex.current, []);
  reactExports.useEffect(
    () => () => {
      window.clearTimeout(focusSearchTimeout.current);
      window.clearTimeout(focusTargetTimeout.current);
      window.clearTimeout(selectedIndexUpdateTimeout.current);
    },
    []
  );
  return {
    dropdownOpened,
    openDropdown,
    closeDropdown,
    toggleDropdown,
    selectedOptionIndex: selectedOptionIndex.current,
    getSelectedOptionIndex,
    selectOption,
    selectFirstOption,
    selectActiveOption,
    selectNextOption,
    selectPreviousOption,
    resetSelectedOption,
    updateSelectedOptionIndex,
    listId: listId.current,
    setListId,
    clickSelectedOption,
    searchRef,
    focusSearchInput,
    targetRef,
    focusTarget
  };
}
const defaultProps$S = {
  keepMounted: true,
  withinPortal: true,
  resetSelectionOnOptionHover: false,
  width: "target",
  transitionProps: { transition: "fade", duration: 0 }
};
const varsResolver$q = createVarsResolver((_, { size: size2, dropdownPadding }) => ({
  options: {
    "--combobox-option-fz": getFontSize(size2),
    "--combobox-option-padding": getSize(size2, "combobox-option-padding")
  },
  dropdown: {
    "--combobox-padding": dropdownPadding === void 0 ? void 0 : rem(dropdownPadding),
    "--combobox-option-fz": getFontSize(size2),
    "--combobox-option-padding": getSize(size2, "combobox-option-padding")
  }
}));
function Combobox(_props) {
  const props = useProps("Combobox", defaultProps$S, _props);
  const {
    classNames,
    styles: styles2,
    unstyled,
    children,
    store: controlledStore,
    vars,
    onOptionSubmit,
    onClose,
    size: size2,
    dropdownPadding,
    resetSelectionOnOptionHover,
    __staticSelector,
    readOnly,
    ...others
  } = props;
  const uncontrolledStore = useCombobox();
  const store2 = controlledStore || uncontrolledStore;
  const getStyles2 = useStyles({
    name: __staticSelector || "Combobox",
    classes: classes$t,
    props,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$q
  });
  const onDropdownClose = () => {
    onClose == null ? void 0 : onClose();
    store2.closeDropdown();
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ComboboxProvider,
    {
      value: {
        getStyles: getStyles2,
        store: store2,
        onOptionSubmit,
        size: size2,
        resetSelectionOnOptionHover,
        readOnly
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Popover,
        {
          opened: store2.dropdownOpened,
          ...others,
          onChange: (_opened) => !_opened && onDropdownClose(),
          withRoles: false,
          unstyled,
          children
        }
      )
    }
  );
}
const extendCombobox = (c) => c;
Combobox.extend = extendCombobox;
Combobox.classes = classes$t;
Combobox.displayName = "@mantine/core/Combobox";
Combobox.Target = ComboboxTarget;
Combobox.Dropdown = ComboboxDropdown;
Combobox.Options = ComboboxOptions;
Combobox.Option = ComboboxOption;
Combobox.Search = ComboboxSearch;
Combobox.Empty = ComboboxEmpty;
Combobox.Chevron = ComboboxChevron;
Combobox.Footer = ComboboxFooter;
Combobox.Header = ComboboxHeader;
Combobox.EventsTarget = ComboboxEventsTarget;
Combobox.DropdownTarget = ComboboxDropdownTarget;
Combobox.Group = ComboboxGroup;
Combobox.ClearButton = ComboboxClearButton;
Combobox.HiddenInput = ComboboxHiddenInput;
var classes$s = { "root": "m_5f75b09e", "body": "m_5f6e695e", "labelWrapper": "m_d3ea56bb", "label": "m_8ee546b8", "description": "m_328f68c0", "error": "m_8e8a99cc" };
const InlineInputClasses = classes$s;
const InlineInput = reactExports.forwardRef(
  ({
    __staticSelector,
    __stylesApiProps,
    className,
    classNames,
    styles: styles2,
    unstyled,
    children,
    label,
    description,
    id,
    disabled,
    error: error2,
    size: size2,
    labelPosition = "left",
    bodyElement = "div",
    labelElement = "label",
    variant,
    style,
    vars,
    mod,
    ...others
  }, ref) => {
    const getStyles2 = useStyles({
      name: __staticSelector,
      props: __stylesApiProps,
      className,
      style,
      classes: classes$s,
      classNames,
      styles: styles2,
      unstyled
    });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ...getStyles2("root"),
        ref,
        __vars: {
          "--label-fz": getFontSize(size2),
          "--label-lh": getSize(size2, "label-lh")
        },
        mod: [{ "label-position": labelPosition }, mod],
        variant,
        size: size2,
        ...others,
        children: /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Box,
          {
            component: bodyElement,
            htmlFor: bodyElement === "label" ? id : void 0,
            ...getStyles2("body"),
            children: [
              children,
              /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { ...getStyles2("labelWrapper"), "data-disabled": disabled || void 0, children: [
                label && /* @__PURE__ */ jsxRuntimeExports.jsx(
                  Box,
                  {
                    component: labelElement,
                    htmlFor: labelElement === "label" ? id : void 0,
                    ...getStyles2("label"),
                    "data-disabled": disabled || void 0,
                    children: label
                  }
                ),
                description && /* @__PURE__ */ jsxRuntimeExports.jsx(Input.Description, { size: size2, __inheritStyles: false, ...getStyles2("description"), children: description }),
                error2 && typeof error2 !== "boolean" && /* @__PURE__ */ jsxRuntimeExports.jsx(Input.Error, { size: size2, __inheritStyles: false, ...getStyles2("error"), children: error2 })
              ] })
            ]
          }
        )
      }
    );
  }
);
InlineInput.displayName = "@mantine/core/InlineInput";
const CheckboxGroupContext = reactExports.createContext(null);
const CheckboxGroupProvider = CheckboxGroupContext.Provider;
const useCheckboxGroupContext = () => reactExports.useContext(CheckboxGroupContext);
const [CheckboxCardProvider, useCheckboxCardContext] = createOptionalContext();
var classes$r = { "card": "m_26775b0a" };
const defaultProps$R = {
  withBorder: true
};
const varsResolver$p = createVarsResolver((_, { radius }) => ({
  card: {
    "--card-radius": getRadius(radius)
  }
}));
const CheckboxCard = factory((_props, ref) => {
  const props = useProps("CheckboxCard", defaultProps$R, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    checked,
    mod,
    withBorder,
    value,
    onClick,
    defaultChecked,
    onChange,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "CheckboxCard",
    classes: classes$r,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$p,
    rootSelector: "card"
  });
  const ctx = useCheckboxGroupContext();
  const _checked = typeof checked === "boolean" ? checked : ctx ? ctx.value.includes(value || "") : void 0;
  const [_value, setValue] = useUncontrolled({
    value: _checked,
    defaultValue: defaultChecked,
    finalValue: false,
    onChange
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxCardProvider, { value: { checked: _value }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    UnstyledButton,
    {
      ref,
      mod: [{ "with-border": withBorder, checked: _value }, mod],
      ...getStyles2("card"),
      ...others,
      role: "checkbox",
      "aria-checked": _value,
      onClick: (event) => {
        onClick == null ? void 0 : onClick(event);
        ctx == null ? void 0 : ctx.onChange(value || "");
        setValue(!_value);
      }
    }
  ) });
});
CheckboxCard.displayName = "@mantine/core/CheckboxCard";
CheckboxCard.classes = classes$r;
function InputsGroupFieldset({ children, role }) {
  const ctx = useInputWrapperContext();
  if (!ctx) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { role, "aria-labelledby": ctx.labelId, "aria-describedby": ctx.describedBy, children });
}
const defaultProps$Q = {};
const CheckboxGroup = factory((props, ref) => {
  const { value, defaultValue, onChange, size: size2, wrapperProps, children, readOnly, ...others } = useProps("CheckboxGroup", defaultProps$Q, props);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const handleChange = (event) => {
    const itemValue = typeof event === "string" ? event : event.currentTarget.value;
    !readOnly && setValue(
      _value.includes(itemValue) ? _value.filter((item) => item !== itemValue) : [..._value, itemValue]
    );
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckboxGroupProvider, { value: { value: _value, onChange: handleChange, size: size2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Input.Wrapper,
    {
      size: size2,
      ref,
      ...wrapperProps,
      ...others,
      labelElement: "div",
      __staticSelector: "CheckboxGroup",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(InputsGroupFieldset, { role: "group", children })
    }
  ) });
});
CheckboxGroup.classes = Input.Wrapper.classes;
CheckboxGroup.displayName = "@mantine/core/CheckboxGroup";
function CheckIcon({ size: size2, style, ...others }) {
  const _style = size2 !== void 0 ? { width: rem(size2), height: rem(size2), ...style } : style;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      viewBox: "0 0 10 7",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      style: _style,
      "aria-hidden": true,
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z",
          fill: "currentColor",
          fillRule: "evenodd",
          clipRule: "evenodd"
        }
      )
    }
  );
}
function CheckboxIcon({ indeterminate, ...others }) {
  if (indeterminate) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      "svg",
      {
        xmlns: "http://www.w3.org/2000/svg",
        fill: "none",
        viewBox: "0 0 32 6",
        "aria-hidden": true,
        ...others,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx("rect", { width: "32", height: "6", fill: "currentColor", rx: "3" })
      }
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, { ...others });
}
var classes$q = { "indicator": "m_5e5256ee", "icon": "m_1b1c543a", "indicator--outline": "m_76e20374" };
const defaultProps$P = {
  icon: CheckboxIcon
};
const varsResolver$o = createVarsResolver(
  (theme2, { radius, color, size: size2, iconColor, variant, autoContrast }) => {
    const parsedColor = parseThemeColor({ color: color || theme2.primaryColor, theme: theme2 });
    const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;
    return {
      indicator: {
        "--checkbox-size": getSize(size2, "checkbox-size"),
        "--checkbox-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--checkbox-color": variant === "outline" ? outlineColor : getThemeColor(color, theme2),
        "--checkbox-icon-color": iconColor ? getThemeColor(iconColor, theme2) : getAutoContrastValue(autoContrast, theme2) ? getContrastColor({ color, theme: theme2, autoContrast }) : void 0
      }
    };
  }
);
const CheckboxIndicator = factory((_props, ref) => {
  const props = useProps("CheckboxIndicator", defaultProps$P, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    icon,
    indeterminate,
    radius,
    color,
    iconColor,
    autoContrast,
    checked,
    mod,
    variant,
    disabled,
    ...others
  } = props;
  const Icon = icon;
  const getStyles2 = useStyles({
    name: "CheckboxIndicator",
    classes: classes$q,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$o,
    rootSelector: "indicator"
  });
  const ctx = useCheckboxCardContext();
  const _checked = typeof checked === "boolean" || typeof indeterminate === "boolean" ? checked || indeterminate : (ctx == null ? void 0 : ctx.checked) || false;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...getStyles2("indicator", { variant }),
      variant,
      mod: [{ checked: _checked, disabled }, mod],
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { indeterminate, ...getStyles2("icon") })
    }
  );
});
CheckboxIndicator.displayName = "@mantine/core/CheckboxIndicator";
CheckboxIndicator.classes = classes$q;
var classes$p = { "root": "m_bf2d988c", "inner": "m_26062bec", "input": "m_26063560", "icon": "m_bf295423", "input--outline": "m_215c4542" };
const defaultProps$O = {
  labelPosition: "right",
  icon: CheckboxIcon
};
const varsResolver$n = createVarsResolver(
  (theme2, { radius, color, size: size2, iconColor, variant, autoContrast }) => {
    const parsedColor = parseThemeColor({ color: color || theme2.primaryColor, theme: theme2 });
    const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;
    return {
      root: {
        "--checkbox-size": getSize(size2, "checkbox-size"),
        "--checkbox-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--checkbox-color": variant === "outline" ? outlineColor : getThemeColor(color, theme2),
        "--checkbox-icon-color": iconColor ? getThemeColor(iconColor, theme2) : getAutoContrastValue(autoContrast, theme2) ? getContrastColor({ color, theme: theme2, autoContrast }) : void 0
      }
    };
  }
);
const Checkbox = factory((_props, ref) => {
  const props = useProps("Checkbox", defaultProps$O, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    color,
    label,
    id,
    size: size2,
    radius,
    wrapperProps,
    checked,
    labelPosition,
    description,
    error: error2,
    disabled,
    variant,
    indeterminate,
    icon,
    rootRef,
    iconColor,
    onChange,
    autoContrast,
    mod,
    ...others
  } = props;
  const ctx = useCheckboxGroupContext();
  const _size = size2 || (ctx == null ? void 0 : ctx.size);
  const Icon = icon;
  const getStyles2 = useStyles({
    name: "Checkbox",
    props,
    classes: classes$p,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$n
  });
  const { styleProps, rest } = extractStyleProps(others);
  const uuid = useId$1(id);
  const contextProps = ctx ? {
    checked: ctx.value.includes(rest.value),
    onChange: (event) => {
      ctx.onChange(event);
      onChange == null ? void 0 : onChange(event);
    }
  } : {};
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    InlineInput,
    {
      ...getStyles2("root"),
      __staticSelector: "Checkbox",
      __stylesApiProps: props,
      id: uuid,
      size: _size,
      labelPosition,
      label,
      description,
      error: error2,
      disabled,
      classNames,
      styles: styles2,
      unstyled,
      "data-checked": contextProps.checked || checked || void 0,
      variant,
      ref: rootRef,
      mod,
      ...styleProps,
      ...wrapperProps,
      children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Box, { ...getStyles2("inner"), mod: { "data-label-position": labelPosition }, children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(
          Box,
          {
            component: "input",
            id: uuid,
            ref,
            checked,
            disabled,
            mod: { error: !!error2, indeterminate },
            ...getStyles2("input", { focusable: true, variant }),
            onChange,
            ...rest,
            ...contextProps,
            type: "checkbox"
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsx(Icon, { indeterminate, ...getStyles2("icon") })
      ] })
    }
  );
});
Checkbox.classes = { ...classes$p, ...InlineInputClasses };
Checkbox.displayName = "@mantine/core/Checkbox";
Checkbox.Group = CheckboxGroup;
Checkbox.Indicator = CheckboxIndicator;
Checkbox.Card = CheckboxCard;
function isOptionsGroup(item) {
  return "group" in item;
}
function defaultOptionsFilter({
  options,
  search,
  limit
}) {
  const parsedSearch = search.trim().toLowerCase();
  const result = [];
  for (let i = 0; i < options.length; i += 1) {
    const item = options[i];
    if (result.length === limit) {
      return result;
    }
    if (isOptionsGroup(item)) {
      result.push({
        group: item.group,
        items: defaultOptionsFilter({
          options: item.items,
          search,
          limit: limit - result.length
        })
      });
    }
    if (!isOptionsGroup(item)) {
      if (item.label.toLowerCase().includes(parsedSearch)) {
        result.push(item);
      }
    }
  }
  return result;
}
function isEmptyComboboxData(data) {
  if (data.length === 0) {
    return true;
  }
  for (const item of data) {
    if (!("group" in item)) {
      return false;
    }
    if (item.items.length > 0) {
      return false;
    }
  }
  return true;
}
function validateOptions(options, valuesSet = /* @__PURE__ */ new Set()) {
  if (!Array.isArray(options)) {
    return;
  }
  for (const option of options) {
    if (isOptionsGroup(option)) {
      validateOptions(option.items, valuesSet);
    } else {
      if (typeof option.value === "undefined") {
        throw new Error("[@mantine/core] Each option must have value property");
      }
      if (typeof option.value !== "string") {
        throw new Error(
          `[@mantine/core] Option value must be a string, other data formats are not supported, got ${typeof option.value}`
        );
      }
      if (valuesSet.has(option.value)) {
        throw new Error(
          `[@mantine/core] Duplicate options are not supported. Option with value "${option.value}" was provided more than once`
        );
      }
      valuesSet.add(option.value);
    }
  }
}
function isValueChecked(value, optionValue) {
  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;
}
function Option({
  data,
  withCheckIcon,
  value,
  checkIconPosition,
  unstyled,
  renderOption
}) {
  if (!isOptionsGroup(data)) {
    const checked = isValueChecked(value, data.value);
    const check = withCheckIcon && checked && /* @__PURE__ */ jsxRuntimeExports.jsx(CheckIcon, { className: classes$t.optionsDropdownCheckIcon });
    const defaultContent = /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
      checkIconPosition === "left" && check,
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { children: data.label }),
      checkIconPosition === "right" && check
    ] });
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Combobox.Option,
      {
        value: data.value,
        disabled: data.disabled,
        className: clsx$1({ [classes$t.optionsDropdownOption]: !unstyled }),
        "data-reverse": checkIconPosition === "right" || void 0,
        "data-checked": checked || void 0,
        "aria-selected": checked,
        active: checked,
        children: typeof renderOption === "function" ? renderOption({ option: data, checked }) : defaultContent
      }
    );
  }
  const options = data.items.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
    Option,
    {
      data: item,
      value,
      unstyled,
      withCheckIcon,
      checkIconPosition,
      renderOption
    },
    item.value
  ));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Combobox.Group, { label: data.group, children: options });
}
function OptionsDropdown({
  data,
  hidden: hidden2,
  hiddenWhenEmpty,
  filter,
  search,
  limit,
  maxDropdownHeight,
  withScrollArea = true,
  filterOptions = true,
  withCheckIcon = false,
  value,
  checkIconPosition,
  nothingFoundMessage,
  unstyled,
  labelId,
  renderOption,
  scrollAreaProps,
  "aria-label": ariaLabel
}) {
  validateOptions(data);
  const shouldFilter = typeof search === "string";
  const filteredData = shouldFilter ? (filter || defaultOptionsFilter)({
    options: data,
    search: filterOptions ? search : "",
    limit: limit ?? Infinity
  }) : data;
  const isEmpty = isEmptyComboboxData(filteredData);
  const options = filteredData.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(
    Option,
    {
      data: item,
      withCheckIcon,
      value,
      checkIconPosition,
      unstyled,
      renderOption
    },
    isOptionsGroup(item) ? item.group : item.value
  ));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Combobox.Dropdown, { hidden: hidden2 || hiddenWhenEmpty && isEmpty, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Combobox.Options, { labelledBy: labelId, "aria-label": ariaLabel, children: [
    withScrollArea ? /* @__PURE__ */ jsxRuntimeExports.jsx(
      ScrollArea.Autosize,
      {
        mah: maxDropdownHeight ?? 220,
        type: "scroll",
        scrollbarSize: "var(--combobox-padding)",
        offsetScrollbars: "y",
        ...scrollAreaProps,
        children: options
      }
    ) : options,
    isEmpty && nothingFoundMessage && /* @__PURE__ */ jsxRuntimeExports.jsx(Combobox.Empty, { children: nothingFoundMessage })
  ] }) });
}
const AvatarGroupContext = reactExports.createContext(null);
const AvatarGroupProvider = AvatarGroupContext.Provider;
function useAvatarGroupContext() {
  const ctx = reactExports.useContext(AvatarGroupContext);
  return { withinGroup: !!ctx };
}
var classes$o = { "group": "m_11def92b", "root": "m_f85678b6", "image": "m_11f8ac07", "placeholder": "m_104cd71f" };
const defaultProps$N = {};
const varsResolver$m = createVarsResolver((_, { spacing }) => ({
  group: {
    "--ag-spacing": getSpacing(spacing)
  }
}));
const AvatarGroup = factory((_props, ref) => {
  const props = useProps("AvatarGroup", defaultProps$N, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, spacing, ...others } = props;
  const getStyles2 = useStyles({
    name: "AvatarGroup",
    classes: classes$o,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$m,
    rootSelector: "group"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(AvatarGroupProvider, { value: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("group"), ...others }) });
});
AvatarGroup.classes = classes$o;
AvatarGroup.displayName = "@mantine/core/AvatarGroup";
function AvatarPlaceholderIcon(props) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      ...props,
      "data-avatar-placeholder-icon": true,
      viewBox: "0 0 15 15",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        "path",
        {
          d: "M0.877014 7.49988C0.877014 3.84219 3.84216 0.877045 7.49985 0.877045C11.1575 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1575 14.1227 7.49985 14.1227C3.84216 14.1227 0.877014 11.1575 0.877014 7.49988ZM7.49985 1.82704C4.36683 1.82704 1.82701 4.36686 1.82701 7.49988C1.82701 8.97196 2.38774 10.3131 3.30727 11.3213C4.19074 9.94119 5.73818 9.02499 7.50023 9.02499C9.26206 9.02499 10.8093 9.94097 11.6929 11.3208C12.6121 10.3127 13.1727 8.97172 13.1727 7.49988C13.1727 4.36686 10.6328 1.82704 7.49985 1.82704ZM10.9818 11.9787C10.2839 10.7795 8.9857 9.97499 7.50023 9.97499C6.01458 9.97499 4.71624 10.7797 4.01845 11.9791C4.97952 12.7272 6.18765 13.1727 7.49985 13.1727C8.81227 13.1727 10.0206 12.727 10.9818 11.9787ZM5.14999 6.50487C5.14999 5.207 6.20212 4.15487 7.49999 4.15487C8.79786 4.15487 9.84999 5.207 9.84999 6.50487C9.84999 7.80274 8.79786 8.85487 7.49999 8.85487C6.20212 8.85487 5.14999 7.80274 5.14999 6.50487ZM7.49999 5.10487C6.72679 5.10487 6.09999 5.73167 6.09999 6.50487C6.09999 7.27807 6.72679 7.90487 7.49999 7.90487C8.27319 7.90487 8.89999 7.27807 8.89999 6.50487C8.89999 5.73167 8.27319 5.10487 7.49999 5.10487Z",
          fill: "currentColor",
          fillRule: "evenodd",
          clipRule: "evenodd"
        }
      )
    }
  );
}
function hashCode(input) {
  let hash2 = 0;
  for (let i = 0; i < input.length; i += 1) {
    const char2 = input.charCodeAt(i);
    hash2 = (hash2 << 5) - hash2 + char2;
    hash2 |= 0;
  }
  return hash2;
}
const defaultColors = [
  "blue",
  "cyan",
  "grape",
  "green",
  "indigo",
  "lime",
  "orange",
  "pink",
  "red",
  "teal",
  "violet"
];
function getInitialsColor(name, colors2 = defaultColors) {
  const hash2 = hashCode(name);
  const index2 = Math.abs(hash2) % colors2.length;
  return colors2[index2];
}
function getInitials$1(name, limit = 2) {
  const splitted = name.split(" ");
  if (splitted.length === 1) {
    return name.slice(0, limit).toUpperCase();
  }
  return splitted.map((word) => word[0]).slice(0, limit).join("").toUpperCase();
}
const defaultProps$M = {};
const varsResolver$l = createVarsResolver(
  (theme2, { size: size2, radius, variant, gradient, color, autoContrast, name, allowedInitialsColors }) => {
    const _color = color === "initials" && typeof name === "string" ? getInitialsColor(name, allowedInitialsColors) : color;
    const colors2 = theme2.variantColorResolver({
      color: _color || "gray",
      theme: theme2,
      gradient,
      variant: variant || "light",
      autoContrast
    });
    return {
      root: {
        "--avatar-size": getSize(size2, "avatar-size"),
        "--avatar-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--avatar-bg": _color || variant ? colors2.background : void 0,
        "--avatar-color": _color || variant ? colors2.color : void 0,
        "--avatar-bd": _color || variant ? colors2.border : void 0
      }
    };
  }
);
const Avatar = polymorphicFactory((_props, ref) => {
  const props = useProps("Avatar", defaultProps$M, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    src,
    alt,
    radius,
    color,
    gradient,
    imageProps,
    children,
    autoContrast,
    mod,
    name,
    allowedInitialsColors,
    ...others
  } = props;
  const ctx = useAvatarGroupContext();
  const [error2, setError] = reactExports.useState(!src);
  const getStyles2 = useStyles({
    name: "Avatar",
    props,
    classes: classes$o,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$l
  });
  reactExports.useEffect(() => setError(!src), [src]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("root"),
      mod: [{ "within-group": ctx.withinGroup }, mod],
      ref,
      ...others,
      children: error2 ? /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("placeholder"), title: alt, children: children || typeof name === "string" && getInitials$1(name) || /* @__PURE__ */ jsxRuntimeExports.jsx(AvatarPlaceholderIcon, {}) }) : /* @__PURE__ */ jsxRuntimeExports.jsx(
        "img",
        {
          ...imageProps,
          ...getStyles2("image"),
          src,
          alt,
          onError: (event) => {
            var _a;
            setError(true);
            (_a = imageProps == null ? void 0 : imageProps.onError) == null ? void 0 : _a.call(imageProps, event);
          }
        }
      )
    }
  );
});
Avatar.classes = classes$o;
Avatar.displayName = "@mantine/core/Avatar";
Avatar.Group = AvatarGroup;
var classes$n = { "root": "m_347db0ec", "root--dot": "m_fbd81e3d", "label": "m_5add502a", "section": "m_91fdda9b" };
const defaultProps$L = {};
const varsResolver$k = createVarsResolver(
  (theme2, { radius, color, gradient, variant, size: size2, autoContrast }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      gradient,
      variant: variant || "filled",
      autoContrast
    });
    return {
      root: {
        "--badge-height": getSize(size2, "badge-height"),
        "--badge-padding-x": getSize(size2, "badge-padding-x"),
        "--badge-fz": getSize(size2, "badge-fz"),
        "--badge-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--badge-bg": color || variant ? colors2.background : void 0,
        "--badge-color": color || variant ? colors2.color : void 0,
        "--badge-bd": color || variant ? colors2.border : void 0,
        "--badge-dot-color": variant === "dot" ? getThemeColor(color, theme2) : void 0
      }
    };
  }
);
const Badge = polymorphicFactory((_props, ref) => {
  const props = useProps("Badge", defaultProps$L, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    radius,
    color,
    gradient,
    leftSection,
    rightSection,
    children,
    variant,
    fullWidth,
    autoContrast,
    circle,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Badge",
    props,
    classes: classes$n,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$k
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      variant,
      mod: [
        {
          block: fullWidth,
          circle,
          "with-right-section": !!rightSection,
          "with-left-section": !!leftSection
        },
        mod
      ],
      ...getStyles2("root", { variant }),
      ref,
      ...others,
      children: [
        leftSection && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("section"), "data-position": "left", children: leftSection }),
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("label"), children }),
        rightSection && /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("section"), "data-position": "right", children: rightSection })
      ]
    }
  );
});
Badge.classes = classes$n;
Badge.displayName = "@mantine/core/Badge";
var classes$m = { "root": "m_77c9d27d", "inner": "m_80f1301b", "label": "m_811560b9", "section": "m_a74036a", "loader": "m_a25b86ee", "group": "m_80d6d844", "groupSection": "m_70be2a01" };
const defaultProps$K = {
  orientation: "horizontal"
};
const varsResolver$j = createVarsResolver((_, { borderWidth }) => ({
  group: { "--button-border-width": rem(borderWidth) }
}));
const ButtonGroup = factory((_props, ref) => {
  const props = useProps("ButtonGroup", defaultProps$K, _props);
  const {
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    orientation,
    vars,
    borderWidth,
    variant,
    mod,
    ...others
  } = useProps("ButtonGroup", defaultProps$K, _props);
  const getStyles2 = useStyles({
    name: "ButtonGroup",
    props,
    classes: classes$m,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$j,
    rootSelector: "group"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("group"),
      ref,
      variant,
      mod: [{ "data-orientation": orientation }, mod],
      role: "group",
      ...others
    }
  );
});
ButtonGroup.classes = classes$m;
ButtonGroup.displayName = "@mantine/core/ButtonGroup";
const defaultProps$J = {};
const varsResolver$i = createVarsResolver(
  (theme2, { radius, color, gradient, variant, autoContrast, size: size2 }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      gradient,
      variant: variant || "filled",
      autoContrast
    });
    return {
      groupSection: {
        "--section-height": getSize(size2, "section-height"),
        "--section-padding-x": getSize(size2, "section-padding-x"),
        "--section-fz": (size2 == null ? void 0 : size2.includes("compact")) ? getFontSize(size2.replace("compact-", "")) : getFontSize(size2),
        "--section-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--section-bg": color || variant ? colors2.background : void 0,
        "--section-color": colors2.color,
        "--section-bd": color || variant ? colors2.border : void 0
      }
    };
  }
);
const ButtonGroupSection = factory((_props, ref) => {
  const props = useProps("ButtonGroupSection", defaultProps$J, _props);
  const {
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    variant,
    gradient,
    radius,
    autoContrast,
    ...others
  } = useProps("ButtonGroupSection", defaultProps$J, _props);
  const getStyles2 = useStyles({
    name: "ButtonGroupSection",
    props,
    classes: classes$m,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$i,
    rootSelector: "groupSection"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ...getStyles2("groupSection"), ref, variant, ...others });
});
ButtonGroupSection.classes = classes$m;
ButtonGroupSection.displayName = "@mantine/core/ButtonGroupSection";
const loaderTransition = {
  in: { opacity: 1, transform: `translate(-50%, calc(-50% + ${rem(1)}))` },
  out: { opacity: 0, transform: "translate(-50%, -200%)" },
  common: { transformOrigin: "center" },
  transitionProperty: "transform, opacity"
};
const defaultProps$I = {};
const varsResolver$h = createVarsResolver(
  (theme2, { radius, color, gradient, variant, size: size2, justify, autoContrast }) => {
    const colors2 = theme2.variantColorResolver({
      color: color || theme2.primaryColor,
      theme: theme2,
      gradient,
      variant: variant || "filled",
      autoContrast
    });
    return {
      root: {
        "--button-justify": justify,
        "--button-height": getSize(size2, "button-height"),
        "--button-padding-x": getSize(size2, "button-padding-x"),
        "--button-fz": (size2 == null ? void 0 : size2.includes("compact")) ? getFontSize(size2.replace("compact-", "")) : getFontSize(size2),
        "--button-radius": radius === void 0 ? void 0 : getRadius(radius),
        "--button-bg": color || variant ? colors2.background : void 0,
        "--button-hover": color || variant ? colors2.hover : void 0,
        "--button-color": colors2.color,
        "--button-bd": color || variant ? colors2.border : void 0,
        "--button-hover-color": color || variant ? colors2.hoverColor : void 0
      }
    };
  }
);
const Button = polymorphicFactory((_props, ref) => {
  const props = useProps("Button", defaultProps$I, _props);
  const {
    style,
    vars,
    className,
    color,
    disabled,
    children,
    leftSection,
    rightSection,
    fullWidth,
    variant,
    radius,
    loading,
    loaderProps,
    gradient,
    classNames,
    styles: styles2,
    unstyled,
    "data-disabled": dataDisabled,
    autoContrast,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Button",
    props,
    classes: classes$m,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$h
  });
  const hasLeftSection = !!leftSection;
  const hasRightSection = !!rightSection;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    UnstyledButton,
    {
      ref,
      ...getStyles2("root", { active: !disabled && !loading && !dataDisabled }),
      unstyled,
      variant,
      disabled: disabled || loading,
      mod: [
        {
          disabled: disabled || dataDisabled,
          loading,
          block: fullWidth,
          "with-left-section": hasLeftSection,
          "with-right-section": hasRightSection
        },
        mod
      ],
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx(Transition, { mounted: !!loading, transition: loaderTransition, duration: 150, children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", ...getStyles2("loader", { style: transitionStyles }), "aria-hidden": true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Loader,
          {
            color: "var(--button-color)",
            size: "calc(var(--button-height) / 1.8)",
            ...loaderProps
          }
        ) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { ...getStyles2("inner"), children: [
          leftSection && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", ...getStyles2("section"), mod: { position: "left" }, children: leftSection }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", mod: { loading }, ...getStyles2("label"), children }),
          rightSection && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", ...getStyles2("section"), mod: { position: "right" }, children: rightSection })
        ] })
      ]
    }
  );
});
Button.classes = classes$m;
Button.displayName = "@mantine/core/Button";
Button.Group = ButtonGroup;
Button.GroupSection = ButtonGroupSection;
const [CardProvider, useCardContext] = createSafeContext(
  "Card component was not found in tree"
);
var classes$l = { "root": "m_e615b15f", "section": "m_599a2148" };
const defaultProps$H = {};
const CardSection = polymorphicFactory((_props, ref) => {
  const props = useProps("CardSection", defaultProps$H, _props);
  const { classNames, className, style, styles: styles2, vars, withBorder, inheritPadding, mod, ...others } = props;
  const ctx = useCardContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      mod: [{ "with-border": withBorder, "inherit-padding": inheritPadding }, mod],
      ...ctx.getStyles("section", { className, style, styles: styles2, classNames }),
      ...others
    }
  );
});
CardSection.classes = classes$l;
CardSection.displayName = "@mantine/core/CardSection";
const defaultProps$G = {};
const varsResolver$g = createVarsResolver((_, { padding }) => ({
  root: {
    "--card-padding": getSpacing(padding)
  }
}));
const Card = polymorphicFactory((_props, ref) => {
  const props = useProps("Card", defaultProps$G, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, children, padding, ...others } = props;
  const getStyles2 = useStyles({
    name: "Card",
    props,
    classes: classes$l,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$g
  });
  const _children = reactExports.Children.toArray(children);
  const content = _children.map((child, index2) => {
    if (typeof child === "object" && child && "type" in child && child.type === CardSection) {
      return reactExports.cloneElement(child, {
        "data-first-section": index2 === 0 || void 0,
        "data-last-section": index2 === _children.length - 1 || void 0
      });
    }
    return child;
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(CardProvider, { value: { getStyles: getStyles2 }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Paper, { ref, unstyled, ...getStyles2("root"), ...others, children: content }) });
});
Card.classes = classes$l;
Card.displayName = "@mantine/core/Card";
Card.Section = CardSection;
var classes$k = { "root": "m_4451eb3a" };
const defaultProps$F = {};
const Center = polymorphicFactory((_props, ref) => {
  const props = useProps("Center", defaultProps$F, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, inline: inline2, mod, ...others } = props;
  const getStyles2 = useStyles({
    name: "Center",
    props,
    classes: classes$k,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, mod: [{ inline: inline2 }, mod], ...getStyles2("root"), ...others });
});
Center.classes = classes$k;
Center.displayName = "@mantine/core/Center";
var classes$j = { "root": "m_7485cace" };
const defaultProps$E = {};
const varsResolver$f = createVarsResolver((_, { size: size2, fluid }) => ({
  root: {
    "--container-size": fluid ? void 0 : getSize(size2, "container-size")
  }
}));
const Container$1 = factory((_props, ref) => {
  const props = useProps("Container", defaultProps$E, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, fluid, mod, ...others } = props;
  const getStyles2 = useStyles({
    name: "Container",
    classes: classes$j,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$f
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, mod: [{ fluid }, mod], ...getStyles2("root"), ...others });
});
Container$1.classes = classes$j;
Container$1.displayName = "@mantine/core/Container";
const defaultProps$D = {
  timeout: 1e3
};
function CopyButton(props) {
  const { children, timeout, value, ...others } = useProps("CopyButton", defaultProps$D, props);
  const clipboard = useClipboard({ timeout });
  const copy2 = () => clipboard.copy(value);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: children({ copy: copy2, copied: clipboard.copied, ...others }) });
}
CopyButton.displayName = "@mantine/core/CopyButton";
var classes$i = { "root": "m_3eebeb36", "label": "m_9e365f20" };
const defaultProps$C = {
  orientation: "horizontal"
};
const varsResolver$e = createVarsResolver((theme2, { color, variant, size: size2 }) => ({
  root: {
    "--divider-color": color ? getThemeColor(color, theme2) : void 0,
    "--divider-border-style": variant,
    "--divider-size": getSize(size2, "divider-size")
  }
}));
const Divider = factory((_props, ref) => {
  const props = useProps("Divider", defaultProps$C, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    color,
    orientation,
    label,
    labelPosition,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Divider",
    classes: classes$i,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$e
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      mod: [{ orientation, "with-label": !!label }, mod],
      ...getStyles2("root"),
      ...others,
      role: "separator",
      children: label && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { component: "span", mod: { position: labelPosition }, ...getStyles2("label"), children: label })
    }
  );
});
Divider.classes = classes$i;
Divider.displayName = "@mantine/core/Divider";
function useDelayedHover({ open, close, openDelay, closeDelay }) {
  const openTimeout = reactExports.useRef(-1);
  const closeTimeout = reactExports.useRef(-1);
  const clearTimeouts = () => {
    window.clearTimeout(openTimeout.current);
    window.clearTimeout(closeTimeout.current);
  };
  const openDropdown = () => {
    clearTimeouts();
    if (openDelay === 0 || openDelay === void 0) {
      open();
    } else {
      openTimeout.current = window.setTimeout(open, openDelay);
    }
  };
  const closeDropdown = () => {
    clearTimeouts();
    if (closeDelay === 0 || closeDelay === void 0) {
      close();
    } else {
      closeTimeout.current = window.setTimeout(close, closeDelay);
    }
  };
  reactExports.useEffect(() => clearTimeouts, []);
  return { openDropdown, closeDropdown };
}
const [GridProvider, useGridContext] = createSafeContext(
  "Grid component was not found in tree"
);
const getColumnFlexBasis = (colSpan, columns) => {
  if (colSpan === "content") {
    return "auto";
  }
  if (colSpan === "auto") {
    return "0rem";
  }
  return colSpan ? `${100 / (columns / colSpan)}%` : void 0;
};
const getColumnMaxWidth = (colSpan, columns, grow) => {
  if (grow || colSpan === "auto") {
    return "100%";
  }
  if (colSpan === "content") {
    return "unset";
  }
  return getColumnFlexBasis(colSpan, columns);
};
const getColumnFlexGrow = (colSpan, grow) => {
  if (!colSpan) {
    return void 0;
  }
  return colSpan === "auto" || grow ? "1" : "auto";
};
const getColumnOffset = (offset2, columns) => offset2 === 0 ? "0" : offset2 ? `${100 / (columns / offset2)}%` : void 0;
function GridColVariables({ span, order, offset: offset2, selector }) {
  var _a;
  const theme2 = useMantineTheme();
  const ctx = useGridContext();
  const _breakpoints = ctx.breakpoints || theme2.breakpoints;
  const baseValue = getBaseValue$1(span);
  const baseSpan = baseValue === void 0 ? 12 : getBaseValue$1(span);
  const baseStyles = filterProps({
    "--col-order": (_a = getBaseValue$1(order)) == null ? void 0 : _a.toString(),
    "--col-flex-grow": getColumnFlexGrow(baseSpan, ctx.grow),
    "--col-flex-basis": getColumnFlexBasis(baseSpan, ctx.columns),
    "--col-width": baseSpan === "content" ? "auto" : void 0,
    "--col-max-width": getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),
    "--col-offset": getColumnOffset(getBaseValue$1(offset2), ctx.columns)
  });
  const queries = keys(_breakpoints).reduce(
    (acc, breakpoint) => {
      var _a2;
      if (!acc[breakpoint]) {
        acc[breakpoint] = {};
      }
      if (typeof order === "object" && order[breakpoint] !== void 0) {
        acc[breakpoint]["--col-order"] = (_a2 = order[breakpoint]) == null ? void 0 : _a2.toString();
      }
      if (typeof span === "object" && span[breakpoint] !== void 0) {
        acc[breakpoint]["--col-flex-grow"] = getColumnFlexGrow(span[breakpoint], ctx.grow);
        acc[breakpoint]["--col-flex-basis"] = getColumnFlexBasis(span[breakpoint], ctx.columns);
        acc[breakpoint]["--col-width"] = span[breakpoint] === "content" ? "auto" : void 0;
        acc[breakpoint]["--col-max-width"] = getColumnMaxWidth(
          span[breakpoint],
          ctx.columns,
          ctx.grow
        );
      }
      if (typeof offset2 === "object" && offset2[breakpoint] !== void 0) {
        acc[breakpoint]["--col-offset"] = getColumnOffset(offset2[breakpoint], ctx.columns);
      }
      return acc;
    },
    {}
  );
  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(
    (breakpoint) => keys(queries[breakpoint.value]).length > 0
  );
  const values2 = sortedBreakpoints.map((breakpoint) => ({
    query: ctx.type === "container" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,
    styles: queries[breakpoint.value]
  }));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    InlineStyles,
    {
      styles: baseStyles,
      media: ctx.type === "container" ? void 0 : values2,
      container: ctx.type === "container" ? values2 : void 0,
      selector
    }
  );
}
var classes$h = { "container": "m_8478a6da", "root": "m_410352e9", "inner": "m_dee7bd2f", "col": "m_96bdd299" };
const defaultProps$B = {
  span: 12
};
const GridCol = factory((_props, ref) => {
  const props = useProps("GridCol", defaultProps$B, _props);
  const { classNames, className, style, styles: styles2, vars, span, order, offset: offset2, ...others } = props;
  const ctx = useGridContext();
  const responsiveClassName = useRandomClassName();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      GridColVariables,
      {
        selector: `.${responsiveClassName}`,
        span,
        order,
        offset: offset2
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ref,
        ...ctx.getStyles("col", {
          className: clsx$1(className, responsiveClassName),
          style,
          classNames,
          styles: styles2
        }),
        ...others
      }
    )
  ] });
});
GridCol.classes = classes$h;
GridCol.displayName = "@mantine/core/GridCol";
function GridVariables({ gutter, selector, breakpoints, type }) {
  const theme2 = useMantineTheme();
  const _breakpoints = breakpoints || theme2.breakpoints;
  const baseStyles = filterProps({
    "--grid-gutter": getSpacing(getBaseValue$1(gutter))
  });
  const queries = keys(_breakpoints).reduce(
    (acc, breakpoint) => {
      if (!acc[breakpoint]) {
        acc[breakpoint] = {};
      }
      if (typeof gutter === "object" && gutter[breakpoint] !== void 0) {
        acc[breakpoint]["--grid-gutter"] = getSpacing(gutter[breakpoint]);
      }
      return acc;
    },
    {}
  );
  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter(
    (breakpoint) => keys(queries[breakpoint.value]).length > 0
  );
  const values2 = sortedBreakpoints.map((breakpoint) => ({
    query: type === "container" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,
    styles: queries[breakpoint.value]
  }));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    InlineStyles,
    {
      styles: baseStyles,
      media: type === "container" ? void 0 : values2,
      container: type === "container" ? values2 : void 0,
      selector
    }
  );
}
const defaultProps$A = {
  gutter: "md",
  grow: false,
  columns: 12
};
const varsResolver$d = createVarsResolver((_, { justify, align, overflow }) => ({
  root: {
    "--grid-justify": justify,
    "--grid-align": align,
    "--grid-overflow": overflow
  }
}));
const Grid = factory((_props, ref) => {
  const props = useProps("Grid", defaultProps$A, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    grow,
    gutter,
    columns,
    align,
    justify,
    children,
    breakpoints,
    type,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Grid",
    classes: classes$h,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$d
  });
  const responsiveClassName = useRandomClassName();
  if (type === "container" && breakpoints) {
    return /* @__PURE__ */ jsxRuntimeExports.jsxs(GridProvider, { value: { getStyles: getStyles2, grow, columns: columns || 12, breakpoints, type }, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(GridVariables, { selector: `.${responsiveClassName}`, ...props }),
      /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("container"), children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("root", { className: responsiveClassName }), ...others, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("inner"), children }) }) })
    ] });
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(GridProvider, { value: { getStyles: getStyles2, grow, columns: columns || 12, breakpoints, type }, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(GridVariables, { selector: `.${responsiveClassName}`, ...props }),
    /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("root", { className: responsiveClassName }), ...others, children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("inner"), children }) })
  ] });
});
Grid.classes = classes$h;
Grid.displayName = "@mantine/core/Grid";
Grid.Col = GridCol;
var classes$g = { "root": "m_9e117634" };
const defaultProps$z = {};
const varsResolver$c = createVarsResolver((_, { radius, fit }) => ({
  root: {
    "--image-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--image-object-fit": fit
  }
}));
const Image = polymorphicFactory((_props, ref) => {
  const props = useProps("Image", defaultProps$z, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    onError,
    src,
    radius,
    fit,
    fallbackSrc,
    mod,
    ...others
  } = props;
  const [error2, setError] = reactExports.useState(!src);
  reactExports.useEffect(() => setError(!src), [src]);
  const getStyles2 = useStyles({
    name: "Image",
    classes: classes$g,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$c
  });
  if (error2 && fallbackSrc) {
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        component: "img",
        ref,
        src: fallbackSrc,
        ...getStyles2("root"),
        onError,
        mod: ["fallback", mod],
        ...others
      }
    );
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "img",
      ref,
      ...getStyles2("root"),
      src,
      onError: (event) => {
        onError == null ? void 0 : onError(event);
        setError(true);
      },
      mod,
      ...others
    }
  );
});
Image.classes = classes$g;
Image.displayName = "@mantine/core/Image";
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r3 in t)
        ({}).hasOwnProperty.call(t, r3) && (n[r3] = t[r3]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
const [MenuContextProvider, useMenuContext] = createSafeContext(
  "Menu component was not found in the tree"
);
var classes$f = { "dropdown": "m_dc9b7c9f", "label": "m_9bfac126", "divider": "m_efdf90cb", "item": "m_99ac2aa1", "itemLabel": "m_5476e0d3", "itemSection": "m_8b75e504" };
const defaultProps$y = {};
const MenuDivider = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, ...others } = useProps(
    "MenuDivider",
    defaultProps$y,
    props
  );
  const ctx = useMenuContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("divider", { className, style, styles: styles2, classNames }),
      ...others
    }
  );
});
MenuDivider.classes = classes$f;
MenuDivider.displayName = "@mantine/core/MenuDivider";
const defaultProps$x = {};
const MenuDropdown = factory((props, ref) => {
  const {
    classNames,
    className,
    style,
    styles: styles2,
    vars,
    onMouseEnter,
    onMouseLeave,
    onKeyDown,
    children,
    ...others
  } = useProps("MenuDropdown", defaultProps$x, props);
  const wrapperRef = reactExports.useRef(null);
  const ctx = useMenuContext();
  const handleKeyDown = createEventHandler(onKeyDown, (event) => {
    var _a, _b;
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
      event.preventDefault();
      (_b = (_a = wrapperRef.current) == null ? void 0 : _a.querySelectorAll("[data-menu-item]:not(:disabled)")[0]) == null ? void 0 : _b.focus();
    }
  });
  const handleMouseEnter = createEventHandler(
    onMouseEnter,
    () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.openDropdown()
  );
  const handleMouseLeave = createEventHandler(
    onMouseLeave,
    () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.closeDropdown()
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Popover.Dropdown,
    {
      ...others,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      role: "menu",
      "aria-orientation": "vertical",
      ref: useMergedRef(ref, wrapperRef),
      ...ctx.getStyles("dropdown", {
        className,
        style,
        styles: styles2,
        classNames,
        withStaticClass: false
      }),
      tabIndex: -1,
      "data-menu-dropdown": true,
      onKeyDown: handleKeyDown,
      children: [
        ctx.withInitialFocusPlaceholder && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { tabIndex: -1, "data-autofocus": true, "data-mantine-stop-propagation": true, style: { outline: 0 } }),
        children
      ]
    }
  );
});
MenuDropdown.classes = classes$f;
MenuDropdown.displayName = "@mantine/core/MenuDropdown";
const defaultProps$w = {};
const MenuItem = polymorphicFactory((props, ref) => {
  const {
    classNames,
    className,
    style,
    styles: styles2,
    vars,
    color,
    closeMenuOnClick,
    leftSection,
    rightSection,
    children,
    disabled,
    "data-disabled": dataDisabled,
    ...others
  } = useProps("MenuItem", defaultProps$w, props);
  const ctx = useMenuContext();
  const theme2 = useMantineTheme();
  const { dir } = useDirection();
  const itemRef = reactExports.useRef(null);
  const itemIndex = ctx.getItemIndex(itemRef.current);
  const _others = others;
  const handleMouseLeave = createEventHandler(_others.onMouseLeave, () => ctx.setHovered(-1));
  const handleMouseEnter = createEventHandler(
    _others.onMouseEnter,
    () => ctx.setHovered(ctx.getItemIndex(itemRef.current))
  );
  const handleClick = createEventHandler(_others.onClick, () => {
    if (dataDisabled) {
      return;
    }
    if (typeof closeMenuOnClick === "boolean") {
      closeMenuOnClick && ctx.closeDropdownImmediately();
    } else {
      ctx.closeOnItemClick && ctx.closeDropdownImmediately();
    }
  });
  const handleFocus = createEventHandler(
    _others.onFocus,
    () => ctx.setHovered(ctx.getItemIndex(itemRef.current))
  );
  const colors2 = color ? theme2.variantColorResolver({ color, theme: theme2, variant: "light" }) : void 0;
  const parsedThemeColor = color ? parseThemeColor({ color, theme: theme2 }) : null;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    UnstyledButton,
    {
      ...others,
      unstyled: ctx.unstyled,
      tabIndex: ctx.menuItemTabIndex,
      onFocus: handleFocus,
      ...ctx.getStyles("item", { className, style, styles: styles2, classNames }),
      ref: useMergedRef(itemRef, ref),
      role: "menuitem",
      disabled,
      "data-menu-item": true,
      "data-disabled": disabled || dataDisabled || void 0,
      "data-hovered": ctx.hovered === itemIndex ? true : void 0,
      "data-mantine-stop-propagation": true,
      onMouseEnter: handleMouseEnter,
      onMouseLeave: handleMouseLeave,
      onClick: handleClick,
      onKeyDown: createScopedKeydownHandler({
        siblingSelector: "[data-menu-item]:not([data-disabled])",
        parentSelector: "[data-menu-dropdown]",
        activateOnFocus: false,
        loop: ctx.loop,
        dir,
        orientation: "vertical",
        onKeyDown: _others.onKeyDown
      }),
      __vars: {
        "--menu-item-color": (parsedThemeColor == null ? void 0 : parsedThemeColor.isThemeColor) && (parsedThemeColor == null ? void 0 : parsedThemeColor.shade) === void 0 ? `var(--mantine-color-${parsedThemeColor.color}-6)` : colors2 == null ? void 0 : colors2.color,
        "--menu-item-hover": colors2 == null ? void 0 : colors2.hover
      },
      children: [
        leftSection && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...ctx.getStyles("itemSection", { styles: styles2, classNames }), "data-position": "left", children: leftSection }),
        children && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...ctx.getStyles("itemLabel", { styles: styles2, classNames }), children }),
        rightSection && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...ctx.getStyles("itemSection", { styles: styles2, classNames }), "data-position": "right", children: rightSection })
      ]
    }
  );
});
MenuItem.classes = classes$f;
MenuItem.displayName = "@mantine/core/MenuItem";
const defaultProps$v = {};
const MenuLabel = factory((props, ref) => {
  const { classNames, className, style, styles: styles2, vars, ...others } = useProps(
    "MenuLabel",
    defaultProps$v,
    props
  );
  const ctx = useMenuContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ref,
      ...ctx.getStyles("label", { className, style, styles: styles2, classNames }),
      ...others
    }
  );
});
MenuLabel.classes = classes$f;
MenuLabel.displayName = "@mantine/core/MenuLabel";
const defaultProps$u = {
  refProp: "ref"
};
const MenuTarget = reactExports.forwardRef((props, ref) => {
  const { children, refProp, ...others } = useProps("MenuTarget", defaultProps$u, props);
  if (!isElement$1(children)) {
    throw new Error(
      "Menu.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const ctx = useMenuContext();
  const _childrenProps = children.props;
  const onClick = createEventHandler(_childrenProps.onClick, () => {
    if (ctx.trigger === "click") {
      ctx.toggleDropdown();
    } else if (ctx.trigger === "click-hover") {
      ctx.setOpenedViaClick(true);
      if (!ctx.opened) {
        ctx.openDropdown();
      }
    }
  });
  const onMouseEnter = createEventHandler(
    _childrenProps.onMouseEnter,
    () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.openDropdown()
  );
  const onMouseLeave = createEventHandler(_childrenProps.onMouseLeave, () => {
    if (ctx.trigger === "hover") {
      ctx.closeDropdown();
    } else if (ctx.trigger === "click-hover" && !ctx.openedViaClick) {
      ctx.closeDropdown();
    }
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Popover.Target, { refProp, popupType: "menu", ref, ...others, children: reactExports.cloneElement(children, {
    onClick,
    onMouseEnter,
    onMouseLeave,
    "data-expanded": ctx.opened ? true : void 0
  }) });
});
MenuTarget.displayName = "@mantine/core/MenuTarget";
const defaultProps$t = {
  trapFocus: true,
  closeOnItemClick: true,
  withInitialFocusPlaceholder: true,
  clickOutsideEvents: ["mousedown", "touchstart", "keydown"],
  loop: true,
  trigger: "click",
  openDelay: 0,
  closeDelay: 100,
  menuItemTabIndex: -1
};
function Menu(_props) {
  const props = useProps("Menu", defaultProps$t, _props);
  const {
    children,
    onOpen,
    onClose,
    opened,
    defaultOpened,
    trapFocus,
    onChange,
    closeOnItemClick,
    loop,
    closeOnEscape: closeOnEscape2,
    trigger,
    openDelay,
    closeDelay,
    classNames,
    styles: styles2,
    unstyled,
    variant,
    vars,
    menuItemTabIndex,
    keepMounted,
    withInitialFocusPlaceholder,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Menu",
    classes: classes$f,
    props,
    classNames,
    styles: styles2,
    unstyled
  });
  const [hovered, { setHovered, resetHovered }] = useHovered();
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange
  });
  const [openedViaClick, setOpenedViaClick] = reactExports.useState(false);
  const close = () => {
    setOpened(false);
    setOpenedViaClick(false);
    _opened && (onClose == null ? void 0 : onClose());
  };
  const open = () => {
    setOpened(true);
    !_opened && (onOpen == null ? void 0 : onOpen());
  };
  const toggleDropdown = () => {
    _opened ? close() : open();
  };
  const { openDropdown, closeDropdown } = useDelayedHover({ open, close, closeDelay, openDelay });
  const getItemIndex = (node2) => getContextItemIndex("[data-menu-item]", "[data-menu-dropdown]", node2);
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles: styles2,
    props
  });
  useDidUpdate(() => {
    resetHovered();
  }, [_opened]);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    MenuContextProvider,
    {
      value: {
        getStyles: getStyles2,
        opened: _opened,
        toggleDropdown,
        getItemIndex,
        hovered,
        setHovered,
        openedViaClick,
        setOpenedViaClick,
        closeOnItemClick,
        closeDropdown: trigger === "click" ? close : closeDropdown,
        openDropdown: trigger === "click" ? open : openDropdown,
        closeDropdownImmediately: close,
        loop,
        trigger,
        unstyled,
        menuItemTabIndex,
        withInitialFocusPlaceholder
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Popover,
        {
          ...others,
          opened: _opened,
          onChange: toggleDropdown,
          defaultOpened,
          trapFocus: keepMounted ? false : trapFocus,
          closeOnEscape: closeOnEscape2,
          __staticSelector: "Menu",
          classNames: resolvedClassNames,
          styles: resolvedStyles,
          unstyled,
          variant,
          keepMounted,
          children
        }
      )
    }
  );
}
Menu.extend = (input) => input;
Menu.classes = classes$f;
Menu.displayName = "@mantine/core/Menu";
Menu.Item = MenuItem;
Menu.Label = MenuLabel;
Menu.Dropdown = MenuDropdown;
Menu.Target = MenuTarget;
Menu.Divider = MenuDivider;
const [ModalProvider, useModalContext] = createSafeContext(
  "Modal component was not found in tree"
);
var classes$e = { "root": "m_9df02822", "content": "m_54c44539", "inner": "m_1f958f16", "header": "m_d0e2b9cd" };
const defaultProps$s = {};
const ModalBody = factory((_props, ref) => {
  const props = useProps("ModalBody", defaultProps$s, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseBody,
    {
      ref,
      ...ctx.getStyles("body", { classNames, style, styles: styles2, className }),
      ...others
    }
  );
});
ModalBody.classes = classes$e;
ModalBody.displayName = "@mantine/core/ModalBody";
const defaultProps$r = {};
const ModalCloseButton = factory((_props, ref) => {
  const props = useProps("ModalCloseButton", defaultProps$r, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseCloseButton,
    {
      ref,
      ...ctx.getStyles("close", { classNames, style, styles: styles2, className }),
      ...others
    }
  );
});
ModalCloseButton.classes = classes$e;
ModalCloseButton.displayName = "@mantine/core/ModalCloseButton";
const defaultProps$q = {};
const ModalContent = factory((_props, ref) => {
  const props = useProps("ModalContent", defaultProps$q, _props);
  const { classNames, className, style, styles: styles2, vars, children, __hidden, ...others } = props;
  const ctx = useModalContext();
  const Scroll = ctx.scrollAreaComponent || NativeScrollArea;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseContent,
    {
      ...ctx.getStyles("content", { className, style, styles: styles2, classNames }),
      innerProps: ctx.getStyles("inner", { className, style, styles: styles2, classNames }),
      "data-full-screen": ctx.fullScreen || void 0,
      "data-modal-content": true,
      "data-hidden": __hidden || void 0,
      ref,
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Scroll,
        {
          style: {
            maxHeight: ctx.fullScreen ? "100dvh" : `calc(100dvh - (${rem(ctx.yOffset)} * 2))`
          },
          children
        }
      )
    }
  );
});
ModalContent.classes = classes$e;
ModalContent.displayName = "@mantine/core/ModalContent";
const defaultProps$p = {};
const ModalHeader = factory((_props, ref) => {
  const props = useProps("ModalHeader", defaultProps$p, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseHeader,
    {
      ref,
      ...ctx.getStyles("header", { classNames, style, styles: styles2, className }),
      ...others
    }
  );
});
ModalHeader.classes = classes$e;
ModalHeader.displayName = "@mantine/core/ModalHeader";
const defaultProps$o = {};
const ModalOverlay = factory((_props, ref) => {
  const props = useProps("ModalOverlay", defaultProps$o, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseOverlay,
    {
      ref,
      ...ctx.getStyles("overlay", { classNames, style, styles: styles2, className }),
      ...others
    }
  );
});
ModalOverlay.classes = classes$e;
ModalOverlay.displayName = "@mantine/core/ModalOverlay";
const defaultProps$n = {
  __staticSelector: "Modal",
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  transitionProps: { duration: 200, transition: "fade-down" },
  yOffset: "5dvh"
};
const varsResolver$b = createVarsResolver(
  (_, { radius, size: size2, yOffset, xOffset }) => ({
    root: {
      "--modal-radius": radius === void 0 ? void 0 : getRadius(radius),
      "--modal-size": getSize(size2, "modal-size"),
      "--modal-y-offset": rem(yOffset),
      "--modal-x-offset": rem(xOffset)
    }
  })
);
const ModalRoot = factory((_props, ref) => {
  const props = useProps("ModalRoot", defaultProps$n, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    yOffset,
    scrollAreaComponent,
    radius,
    fullScreen,
    centered,
    xOffset,
    __staticSelector,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector,
    classes: classes$e,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$b
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(ModalProvider, { value: { yOffset, scrollAreaComponent, getStyles: getStyles2, fullScreen }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBase,
    {
      ref,
      ...getStyles2("root"),
      "data-full-screen": fullScreen || void 0,
      "data-centered": centered || void 0,
      unstyled,
      ...others
    }
  ) });
});
ModalRoot.classes = classes$e;
ModalRoot.displayName = "@mantine/core/ModalRoot";
const [ModalStackProvider, useModalStackContext] = createOptionalContext();
function ModalStack({ children }) {
  const [stack, setStack] = reactExports.useState([]);
  const [maxZIndex, setMaxZIndex] = reactExports.useState(getDefaultZIndex("modal"));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalStackProvider,
    {
      value: {
        stack,
        addModal: (id, zIndex) => {
          setStack((current) => [.../* @__PURE__ */ new Set([...current, id])]);
          setMaxZIndex(
            (current) => typeof zIndex === "number" && typeof current === "number" ? Math.max(current, zIndex) : current
          );
        },
        removeModal: (id) => setStack((current) => current.filter((currentId) => currentId !== id)),
        getZIndex: (id) => `calc(${maxZIndex} + ${stack.indexOf(id)} + 1)`,
        currentId: stack[stack.length - 1],
        maxZIndex
      },
      children
    }
  );
}
ModalStack.displayName = "@mantine/core/ModalStack";
const defaultProps$m = {};
const ModalTitle = factory((_props, ref) => {
  const props = useProps("ModalTitle", defaultProps$m, _props);
  const { classNames, className, style, styles: styles2, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    ModalBaseTitle,
    {
      ref,
      ...ctx.getStyles("title", { classNames, style, styles: styles2, className }),
      ...others
    }
  );
});
ModalTitle.classes = classes$e;
ModalTitle.displayName = "@mantine/core/ModalTitle";
const defaultProps$l = {
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  transitionProps: { duration: 200, transition: "fade-down" },
  withOverlay: true,
  withCloseButton: true
};
const Modal = factory((_props, ref) => {
  const {
    title,
    withOverlay,
    overlayProps,
    withCloseButton,
    closeButtonProps,
    children,
    radius,
    opened,
    stackId,
    zIndex,
    ...others
  } = useProps("Modal", defaultProps$l, _props);
  const ctx = useModalStackContext();
  const hasHeader = !!title || withCloseButton;
  const stackProps = ctx && stackId ? {
    closeOnEscape: ctx.currentId === stackId,
    trapFocus: ctx.currentId === stackId,
    zIndex: ctx.getZIndex(stackId)
  } : {};
  const overlayVisible = withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;
  reactExports.useEffect(() => {
    if (ctx && stackId) {
      opened ? ctx.addModal(stackId, zIndex || getDefaultZIndex("modal")) : ctx.removeModal(stackId);
    }
  }, [opened, stackId, zIndex]);
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    ModalRoot,
    {
      ref,
      radius,
      opened,
      zIndex: ctx && stackId ? ctx.getZIndex(stackId) : zIndex,
      ...others,
      ...stackProps,
      children: [
        withOverlay && /* @__PURE__ */ jsxRuntimeExports.jsx(
          ModalOverlay,
          {
            visible: overlayVisible,
            transitionProps: ctx && stackId ? { duration: 0 } : void 0,
            ...overlayProps
          }
        ),
        /* @__PURE__ */ jsxRuntimeExports.jsxs(
          ModalContent,
          {
            radius,
            __hidden: ctx && stackId && opened ? stackId !== ctx.currentId : false,
            children: [
              hasHeader && /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalHeader, { children: [
                title && /* @__PURE__ */ jsxRuntimeExports.jsx(ModalTitle, { children: title }),
                withCloseButton && /* @__PURE__ */ jsxRuntimeExports.jsx(ModalCloseButton, { ...closeButtonProps })
              ] }),
              /* @__PURE__ */ jsxRuntimeExports.jsx(ModalBody, { children })
            ]
          }
        )
      ]
    }
  );
});
Modal.classes = classes$e;
Modal.displayName = "@mantine/core/Modal";
Modal.Root = ModalRoot;
Modal.Overlay = ModalOverlay;
Modal.Content = ModalContent;
Modal.Body = ModalBody;
Modal.Header = ModalHeader;
Modal.Title = ModalTitle;
Modal.CloseButton = ModalCloseButton;
Modal.Stack = ModalStack;
const [PillsInputProvider, usePillsInputContext] = createOptionalContext();
const [PillGroupProvider, usePillGroupContext] = createOptionalContext();
var classes$d = { "root": "m_7cda1cd6", "root--default": "m_44da308b", "root--contrast": "m_e3a01f8", "label": "m_1e0e6180", "remove": "m_ae386778", "group": "m_1dcfd90b" };
const defaultProps$k = {};
const varsResolver$a = createVarsResolver((_, { gap }, { size: size2 }) => ({
  group: {
    "--pg-gap": gap !== void 0 ? getSize(gap) : getSize(size2, "pg-gap")
  }
}));
const PillGroup = factory((_props, ref) => {
  const props = useProps("PillGroup", defaultProps$k, _props);
  const { classNames, className, style, styles: styles2, unstyled, vars, size: size2, disabled, ...others } = props;
  const pillsInputCtx = usePillsInputContext();
  const _size = (pillsInputCtx == null ? void 0 : pillsInputCtx.size) || size2 || void 0;
  const getStyles2 = useStyles({
    name: "PillGroup",
    classes: classes$d,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$a,
    stylesCtx: { size: _size },
    rootSelector: "group"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PillGroupProvider, { value: { size: _size, disabled }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, size: _size, ...getStyles2("group"), ...others }) });
});
PillGroup.classes = classes$d;
PillGroup.displayName = "@mantine/core/PillGroup";
const defaultProps$j = {
  variant: "default"
};
const varsResolver$9 = createVarsResolver((_, { radius }, { size: size2 }) => ({
  root: {
    "--pill-fz": getSize(size2, "pill-fz"),
    "--pill-height": getSize(size2, "pill-height"),
    "--pill-radius": radius === void 0 ? void 0 : getRadius(radius)
  }
}));
const Pill = factory((_props, ref) => {
  const props = useProps("Pill", defaultProps$j, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    variant,
    children,
    withRemoveButton,
    onRemove,
    removeButtonProps,
    radius,
    size: size2,
    disabled,
    mod,
    ...others
  } = props;
  const ctx = usePillGroupContext();
  const pillsInputCtx = usePillsInputContext();
  const _size = size2 || (ctx == null ? void 0 : ctx.size) || void 0;
  const _variant = (pillsInputCtx == null ? void 0 : pillsInputCtx.variant) === "filled" ? "contrast" : variant || "default";
  const getStyles2 = useStyles({
    name: "Pill",
    classes: classes$d,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$9,
    stylesCtx: { size: _size }
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      component: "span",
      ref,
      variant: _variant,
      size: _size,
      ...getStyles2("root", { variant: _variant }),
      mod: [
        { "with-remove": withRemoveButton && !disabled, disabled: disabled || (ctx == null ? void 0 : ctx.disabled) },
        mod
      ],
      ...others,
      children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("label"), children }),
        withRemoveButton && /* @__PURE__ */ jsxRuntimeExports.jsx(
          CloseButton,
          {
            variant: "transparent",
            radius,
            tabIndex: -1,
            "aria-hidden": true,
            unstyled,
            ...removeButtonProps,
            ...getStyles2("remove", {
              className: removeButtonProps == null ? void 0 : removeButtonProps.className,
              style: removeButtonProps == null ? void 0 : removeButtonProps.style
            }),
            onMouseDown: (event) => {
              var _a;
              event.preventDefault();
              event.stopPropagation();
              (_a = removeButtonProps == null ? void 0 : removeButtonProps.onMouseDown) == null ? void 0 : _a.call(removeButtonProps, event);
            },
            onClick: (event) => {
              var _a;
              event.stopPropagation();
              onRemove == null ? void 0 : onRemove();
              (_a = removeButtonProps == null ? void 0 : removeButtonProps.onClick) == null ? void 0 : _a.call(removeButtonProps, event);
            }
          }
        )
      ]
    }
  );
});
Pill.classes = classes$d;
Pill.displayName = "@mantine/core/Pill";
Pill.Group = PillGroup;
var classes$c = { "field": "m_45c4369d" };
const defaultProps$i = {
  type: "visible"
};
const PillsInputField = factory((_props, ref) => {
  const props = useProps("PillsInputField", defaultProps$i, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    type,
    disabled,
    id,
    pointer,
    mod,
    ...others
  } = props;
  const ctx = usePillsInputContext();
  const inputWrapperCtx = useInputWrapperContext();
  const getStyles2 = useStyles({
    name: "PillsInputField",
    classes: classes$c,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "field"
  });
  const _disabled = disabled || (ctx == null ? void 0 : ctx.disabled);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: "input",
      ref: useMergedRef(ref, ctx == null ? void 0 : ctx.fieldRef),
      "data-type": type,
      disabled: _disabled,
      mod: [{ disabled: _disabled, pointer }, mod],
      ...getStyles2("field"),
      ...others,
      id: (inputWrapperCtx == null ? void 0 : inputWrapperCtx.inputId) || id,
      "aria-invalid": ctx == null ? void 0 : ctx.hasError,
      "aria-describedby": inputWrapperCtx == null ? void 0 : inputWrapperCtx.describedBy,
      type: "text",
      onMouseDown: (event) => !pointer && event.stopPropagation()
    }
  );
});
PillsInputField.classes = classes$c;
PillsInputField.displayName = "@mantine/core/PillsInputField";
const defaultProps$h = {};
const PillsInput = factory((_props, ref) => {
  const props = useProps("PillsInput", defaultProps$h, _props);
  const {
    children,
    onMouseDown,
    onClick,
    size: size2,
    disabled,
    __staticSelector,
    error: error2,
    variant,
    ...others
  } = props;
  const fieldRef = reactExports.useRef(null);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PillsInputProvider, { value: { fieldRef, size: size2, disabled, hasError: !!error2, variant }, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    InputBase,
    {
      size: size2,
      error: error2,
      variant,
      component: "div",
      ref,
      onMouseDown: (event) => {
        var _a;
        event.preventDefault();
        onMouseDown == null ? void 0 : onMouseDown(event);
        (_a = fieldRef.current) == null ? void 0 : _a.focus();
      },
      onClick: (event) => {
        var _a;
        event.preventDefault();
        onClick == null ? void 0 : onClick(event);
        (_a = fieldRef.current) == null ? void 0 : _a.focus();
      },
      ...others,
      multiline: true,
      disabled,
      __staticSelector: __staticSelector || "PillsInput",
      withAria: false,
      children
    }
  ) });
});
PillsInput.displayName = "@mantine/core/PillsInput";
PillsInput.Field = PillsInputField;
function isGroup(input) {
  return "group" in input;
}
function NativeSelectOption({ data }) {
  if (isGroup(data)) {
    const items = data.items.map((item) => /* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectOption, { data: item }, item.value));
    return /* @__PURE__ */ jsxRuntimeExports.jsx("optgroup", { label: data.group, children: items });
  }
  const { value, label, ...others } = data;
  return /* @__PURE__ */ jsxRuntimeExports.jsx("option", { value: data.value, ...others, children: data.label }, data.value);
}
NativeSelectOption.displayName = "@mantine/core/NativeSelectOption";
const defaultProps$g = {
  rightSectionPointerEvents: "none"
};
const NativeSelect = factory((props, ref) => {
  const { data, children, size: size2, error: error2, rightSection, unstyled, ...others } = useProps(
    "NativeSelect",
    defaultProps$g,
    props
  );
  const options = getParsedComboboxData(data).map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(NativeSelectOption, { data: item }, index2));
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    InputBase,
    {
      component: "select",
      ref,
      ...others,
      __staticSelector: "NativeSelect",
      size: size2,
      pointer: true,
      error: error2,
      unstyled,
      rightSection: rightSection || /* @__PURE__ */ jsxRuntimeExports.jsx(ComboboxChevron, { size: size2, error: error2, unstyled }),
      children: children || options
    }
  );
});
NativeSelect.classes = InputBase.classes;
NativeSelect.displayName = "@mantine/core/NativeSelect";
const [PaginationProvider, usePaginationContext] = createSafeContext(
  "Pagination.Root component was not found in tree"
);
var classes$b = { "root": "m_4addd315", "control": "m_326d024a", "dots": "m_4ad7767d" };
const defaultProps$f = {
  withPadding: true
};
const PaginationControl = factory((_props, ref) => {
  const props = useProps("PaginationControl", defaultProps$f, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    vars,
    active,
    disabled,
    withPadding,
    mod,
    ...others
  } = props;
  const ctx = usePaginationContext();
  const _disabled = disabled || ctx.disabled;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    UnstyledButton,
    {
      ref,
      disabled: _disabled,
      mod: [{ active, disabled: _disabled, "with-padding": withPadding }, mod],
      ...ctx.getStyles("control", { className, style, classNames, styles: styles2, active: !_disabled }),
      ...others
    }
  );
});
PaginationControl.classes = classes$b;
PaginationControl.displayName = "@mantine/core/PaginationControl";
function PaginationIcon({ style, children, path, ...others }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    "svg",
    {
      viewBox: "0 0 16 16",
      xmlns: "http://www.w3.org/2000/svg",
      style: {
        width: "calc(var(--pagination-control-size) / 1.8)",
        height: "calc(var(--pagination-control-size) / 1.8)",
        ...style
      },
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("path", { d: path, fill: "currentColor" })
    }
  );
}
const PaginationNextIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  PaginationIcon,
  {
    ...props,
    path: "M8.781 8l-3.3-3.3.943-.943L10.667 8l-4.243 4.243-.943-.943 3.3-3.3z"
  }
);
const PaginationPreviousIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  PaginationIcon,
  {
    ...props,
    path: "M7.219 8l3.3 3.3-.943.943L5.333 8l4.243-4.243.943.943-3.3 3.3z"
  }
);
const PaginationFirstIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  PaginationIcon,
  {
    ...props,
    path: "M6.85355 3.85355C7.04882 3.65829 7.04882 3.34171 6.85355 3.14645C6.65829 2.95118 6.34171 2.95118 6.14645 3.14645L2.14645 7.14645C1.95118 7.34171 1.95118 7.65829 2.14645 7.85355L6.14645 11.8536C6.34171 12.0488 6.65829 12.0488 6.85355 11.8536C7.04882 11.6583 7.04882 11.3417 6.85355 11.1464L3.20711 7.5L6.85355 3.85355ZM12.8536 3.85355C13.0488 3.65829 13.0488 3.34171 12.8536 3.14645C12.6583 2.95118 12.3417 2.95118 12.1464 3.14645L8.14645 7.14645C7.95118 7.34171 7.95118 7.65829 8.14645 7.85355L12.1464 11.8536C12.3417 12.0488 12.6583 12.0488 12.8536 11.8536C13.0488 11.6583 13.0488 11.3417 12.8536 11.1464L9.20711 7.5L12.8536 3.85355Z"
  }
);
const PaginationLastIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  PaginationIcon,
  {
    ...props,
    path: "M2.14645 11.1464C1.95118 11.3417 1.95118 11.6583 2.14645 11.8536C2.34171 12.0488 2.65829 12.0488 2.85355 11.8536L6.85355 7.85355C7.04882 7.65829 7.04882 7.34171 6.85355 7.14645L2.85355 3.14645C2.65829 2.95118 2.34171 2.95118 2.14645 3.14645C1.95118 3.34171 1.95118 3.65829 2.14645 3.85355L5.79289 7.5L2.14645 11.1464ZM8.14645 11.1464C7.95118 11.3417 7.95118 11.6583 8.14645 11.8536C8.34171 12.0488 8.65829 12.0488 8.85355 11.8536L12.8536 7.85355C13.0488 7.65829 13.0488 7.34171 12.8536 7.14645L8.85355 3.14645C8.65829 2.95118 8.34171 2.95118 8.14645 3.14645C7.95118 3.34171 7.95118 3.65829 8.14645 3.85355L11.7929 7.5L8.14645 11.1464Z"
  }
);
const PaginationDotsIcon = (props) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  PaginationIcon,
  {
    ...props,
    path: "M2 8c0-.733.6-1.333 1.333-1.333.734 0 1.334.6 1.334 1.333s-.6 1.333-1.334 1.333C2.6 9.333 2 8.733 2 8zm9.333 0c0-.733.6-1.333 1.334-1.333C13.4 6.667 14 7.267 14 8s-.6 1.333-1.333 1.333c-.734 0-1.334-.6-1.334-1.333zM6.667 8c0-.733.6-1.333 1.333-1.333s1.333.6 1.333 1.333S8.733 9.333 8 9.333 6.667 8.733 6.667 8z"
  }
);
const defaultProps$e = {
  icon: PaginationDotsIcon
};
const PaginationDots = factory((_props, ref) => {
  const props = useProps("PaginationDots", defaultProps$e, _props);
  const { classNames, className, style, styles: styles2, vars, icon, ...others } = props;
  const ctx = usePaginationContext();
  const Icon = icon;
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...ctx.getStyles("dots", { className, style, styles: styles2, classNames }), ...others, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
    Icon,
    {
      style: {
        width: "calc(var(--pagination-control-size) / 1.8)",
        height: "calc(var(--pagination-control-size) / 1.8)"
      }
    }
  ) });
});
PaginationDots.classes = classes$b;
PaginationDots.displayName = "@mantine/core/PaginationDots";
function createEdgeComponent({ icon, name, action, type }) {
  const defaultProps2 = { icon };
  const Component = reactExports.forwardRef((props, ref) => {
    const { icon: _icon, ...others } = useProps(name, defaultProps2, props);
    const Icon = _icon;
    const ctx = usePaginationContext();
    const disabled = type === "next" ? ctx.active === ctx.total : ctx.active === 1;
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      PaginationControl,
      {
        disabled: ctx.disabled || disabled,
        ref,
        onClick: ctx[action],
        withPadding: false,
        ...others,
        children: /* @__PURE__ */ jsxRuntimeExports.jsx(
          Icon,
          {
            className: "mantine-rotate-rtl",
            style: {
              width: "calc(var(--pagination-control-size) / 1.8)",
              height: "calc(var(--pagination-control-size) / 1.8)"
            }
          }
        )
      }
    );
  });
  Component.displayName = `@mantine/core/${name}`;
  return createPolymorphicComponent(Component);
}
const PaginationNext = createEdgeComponent({
  icon: PaginationNextIcon,
  name: "PaginationNext",
  action: "onNext",
  type: "next"
});
const PaginationPrevious = createEdgeComponent({
  icon: PaginationPreviousIcon,
  name: "PaginationPrevious",
  action: "onPrevious",
  type: "previous"
});
const PaginationFirst = createEdgeComponent({
  icon: PaginationFirstIcon,
  name: "PaginationFirst",
  action: "onFirst",
  type: "previous"
});
const PaginationLast = createEdgeComponent({
  icon: PaginationLastIcon,
  name: "PaginationLast",
  action: "onLast",
  type: "next"
});
function PaginationItems({ dotsIcon }) {
  const ctx = usePaginationContext();
  const items = ctx.range.map((page, index2) => {
    var _a, _b, _c;
    if (page === "dots") {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationDots, { icon: dotsIcon }, index2);
    }
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      PaginationControl,
      {
        active: page === ctx.active,
        "aria-current": page === ctx.active ? "page" : void 0,
        onClick: () => ctx.onChange(page),
        disabled: ctx.disabled,
        ...(_a = ctx.getItemProps) == null ? void 0 : _a.call(ctx, page),
        children: ((_c = (_b = ctx.getItemProps) == null ? void 0 : _b.call(ctx, page)) == null ? void 0 : _c.children) ?? page
      },
      index2
    );
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: items });
}
PaginationItems.displayName = "@mantine/core/PaginationItems";
const defaultProps$d = {
  siblings: 1,
  boundaries: 1
};
const varsResolver$8 = createVarsResolver(
  (theme2, { size: size2, radius, color, autoContrast }) => ({
    root: {
      "--pagination-control-radius": radius === void 0 ? void 0 : getRadius(radius),
      "--pagination-control-size": getSize(size2, "pagination-control-size"),
      "--pagination-control-fz": getFontSize(size2),
      "--pagination-active-bg": color ? getThemeColor(color, theme2) : void 0,
      "--pagination-active-color": getAutoContrastValue(autoContrast, theme2) ? getContrastColor({ color, theme: theme2, autoContrast }) : void 0
    }
  })
);
const PaginationRoot = factory((_props, ref) => {
  const props = useProps("PaginationRoot", defaultProps$d, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    total,
    value,
    defaultValue,
    onChange,
    disabled,
    siblings,
    boundaries,
    color,
    radius,
    onNextPage,
    onPreviousPage,
    onFirstPage,
    onLastPage,
    getItemProps,
    autoContrast,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Pagination",
    classes: classes$b,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$8
  });
  const { range: range2, setPage, next: next2, previous, active, first, last } = usePagination({
    page: value,
    initialPage: defaultValue,
    onChange,
    total,
    siblings,
    boundaries
  });
  const handleNextPage = createEventHandler(onNextPage, next2);
  const handlePreviousPage = createEventHandler(onPreviousPage, previous);
  const handleFirstPage = createEventHandler(onFirstPage, first);
  const handleLastPage = createEventHandler(onLastPage, last);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    PaginationProvider,
    {
      value: {
        total,
        range: range2,
        active,
        disabled,
        getItemProps,
        onChange: setPage,
        onNext: handleNextPage,
        onPrevious: handlePreviousPage,
        onFirst: handleFirstPage,
        onLast: handleLastPage,
        getStyles: getStyles2
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("root"), ...others })
    }
  );
});
PaginationRoot.classes = classes$b;
PaginationRoot.displayName = "@mantine/core/PaginationRoot";
const defaultProps$c = {
  withControls: true,
  withPages: true,
  siblings: 1,
  boundaries: 1,
  gap: 8
};
const Pagination = factory((_props, ref) => {
  const props = useProps("Pagination", defaultProps$c, _props);
  const {
    withEdges,
    withControls,
    getControlProps,
    nextIcon,
    previousIcon,
    lastIcon,
    firstIcon,
    dotsIcon,
    total,
    gap,
    hideWithOnePage,
    withPages,
    ...others
  } = props;
  if (total <= 0 || hideWithOnePage && total === 1) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationRoot, { ref, total, ...others, children: /* @__PURE__ */ jsxRuntimeExports.jsxs(Group, { gap, children: [
    withEdges && /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationFirst, { icon: firstIcon, ...getControlProps == null ? void 0 : getControlProps("first") }),
    withControls && /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationPrevious, { icon: previousIcon, ...getControlProps == null ? void 0 : getControlProps("previous") }),
    withPages && /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationItems, { dotsIcon }),
    withControls && /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationNext, { icon: nextIcon, ...getControlProps == null ? void 0 : getControlProps("next") }),
    withEdges && /* @__PURE__ */ jsxRuntimeExports.jsx(PaginationLast, { icon: lastIcon, ...getControlProps == null ? void 0 : getControlProps("last") })
  ] }) });
});
Pagination.classes = classes$b;
Pagination.displayName = "@mantine/core/Pagination";
Pagination.Root = PaginationRoot;
Pagination.Control = PaginationControl;
Pagination.Dots = PaginationDots;
Pagination.First = PaginationFirst;
Pagination.Last = PaginationLast;
Pagination.Next = PaginationNext;
Pagination.Previous = PaginationPrevious;
Pagination.Items = PaginationItems;
const PasswordToggleIcon = ({
  reveal
}) => /* @__PURE__ */ jsxRuntimeExports.jsx(
  "svg",
  {
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    style: { width: "var(--psi-icon-size)", height: "var(--psi-icon-size)" },
    children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      "path",
      {
        d: reveal ? "M13.3536 2.35355C13.5488 2.15829 13.5488 1.84171 13.3536 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L10.6828 3.61012C9.70652 3.21671 8.63759 3 7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C0.902945 9.08812 2.02314 10.1861 3.36061 10.9323L1.64645 12.6464C1.45118 12.8417 1.45118 13.1583 1.64645 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L4.31723 11.3899C5.29348 11.7833 6.36241 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C14.0971 5.9119 12.9769 4.81391 11.6394 4.06771L13.3536 2.35355ZM9.90428 4.38861C9.15332 4.1361 8.34759 4 7.5 4C4.80285 4 2.52952 5.37816 1.09622 7.50001C1.87284 8.6497 2.89609 9.58106 4.09974 10.1931L9.90428 4.38861ZM5.09572 10.6114L10.9003 4.80685C12.1039 5.41894 13.1272 6.35031 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11C6.65241 11 5.84668 10.8639 5.09572 10.6114Z" : "M7.5 11C4.80285 11 2.52952 9.62184 1.09622 7.50001C2.52952 5.37816 4.80285 4 7.5 4C10.1971 4 12.4705 5.37816 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11ZM7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C1.65639 10.2936 4.30786 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C13.3436 4.70638 10.6921 3 7.5 3ZM7.5 9.5C8.60457 9.5 9.5 8.60457 9.5 7.5C9.5 6.39543 8.60457 5.5 7.5 5.5C6.39543 5.5 5.5 6.39543 5.5 7.5C5.5 8.60457 6.39543 9.5 7.5 9.5Z",
        fill: "currentColor",
        fillRule: "evenodd",
        clipRule: "evenodd"
      }
    )
  }
);
var classes$a = { "root": "m_f61ca620", "input": "m_ccf8da4c", "innerInput": "m_f2d85dd2", "visibilityToggle": "m_b1072d44" };
const defaultProps$b = {
  visibilityToggleIcon: PasswordToggleIcon
};
const varsResolver$7 = createVarsResolver((_, { size: size2 }) => ({
  root: {
    "--psi-icon-size": getSize(size2, "psi-icon-size"),
    "--psi-button-size": getSize(size2, "psi-button-size")
  }
}));
const PasswordInput = factory((_props, ref) => {
  const props = useProps("PasswordInput", defaultProps$b, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    required,
    error: error2,
    leftSection,
    disabled,
    id,
    variant,
    inputContainer,
    description,
    label,
    size: size2,
    errorProps,
    descriptionProps,
    labelProps,
    withAsterisk,
    inputWrapperOrder,
    wrapperProps,
    radius,
    rightSection,
    rightSectionWidth,
    rightSectionPointerEvents,
    leftSectionWidth,
    visible: visible2,
    defaultVisible,
    onVisibilityChange,
    visibilityToggleIcon,
    visibilityToggleButtonProps,
    rightSectionProps,
    leftSectionProps,
    leftSectionPointerEvents,
    withErrorStyles,
    mod,
    ...others
  } = props;
  const uuid = useId$1(id);
  const [_visible, setVisibility] = useUncontrolled({
    value: visible2,
    defaultValue: defaultVisible,
    finalValue: false,
    onChange: onVisibilityChange
  });
  const toggleVisibility = () => setVisibility(!_visible);
  const getStyles2 = useStyles({
    name: "PasswordInput",
    classes: classes$a,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$7
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles: styles2,
    props
  });
  const { styleProps, rest } = extractStyleProps(others);
  const VisibilityToggleIcon = visibilityToggleIcon;
  const visibilityToggleButton = /* @__PURE__ */ jsxRuntimeExports.jsx(
    ActionIcon,
    {
      ...getStyles2("visibilityToggle"),
      disabled,
      radius,
      "aria-hidden": !visibilityToggleButtonProps,
      tabIndex: -1,
      ...visibilityToggleButtonProps,
      variant: (visibilityToggleButtonProps == null ? void 0 : visibilityToggleButtonProps.variant) ?? "subtle",
      color: "gray",
      unstyled,
      onTouchEnd: (event) => {
        var _a;
        event.preventDefault();
        (_a = visibilityToggleButtonProps == null ? void 0 : visibilityToggleButtonProps.onTouchEnd) == null ? void 0 : _a.call(visibilityToggleButtonProps, event);
        toggleVisibility();
      },
      onMouseDown: (event) => {
        var _a;
        event.preventDefault();
        (_a = visibilityToggleButtonProps == null ? void 0 : visibilityToggleButtonProps.onMouseDown) == null ? void 0 : _a.call(visibilityToggleButtonProps, event);
        toggleVisibility();
      },
      onKeyDown: (event) => {
        var _a;
        (_a = visibilityToggleButtonProps == null ? void 0 : visibilityToggleButtonProps.onKeyDown) == null ? void 0 : _a.call(visibilityToggleButtonProps, event);
        if (event.key === " ") {
          event.preventDefault();
          toggleVisibility();
        }
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(VisibilityToggleIcon, { reveal: _visible })
    }
  );
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Input.Wrapper,
    {
      required,
      id: uuid,
      label,
      error: error2,
      description,
      size: size2,
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      __staticSelector: "PasswordInput",
      errorProps,
      descriptionProps,
      unstyled,
      withAsterisk,
      inputWrapperOrder,
      inputContainer,
      variant,
      labelProps: { ...labelProps, htmlFor: uuid },
      mod,
      ...getStyles2("root"),
      ...styleProps,
      ...wrapperProps,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Input,
        {
          component: "div",
          error: error2,
          leftSection,
          size: size2,
          classNames: { ...resolvedClassNames, input: clsx$1(classes$a.input, resolvedClassNames.input) },
          styles: resolvedStyles,
          radius,
          disabled,
          __staticSelector: "PasswordInput",
          rightSectionWidth,
          rightSection: rightSection ?? visibilityToggleButton,
          variant,
          unstyled,
          leftSectionWidth,
          rightSectionPointerEvents: rightSectionPointerEvents || "all",
          rightSectionProps,
          leftSectionProps,
          leftSectionPointerEvents,
          withAria: false,
          withErrorStyles,
          children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            "input",
            {
              required,
              "data-invalid": !!error2 || void 0,
              "data-with-left-section": !!leftSection || void 0,
              ...getStyles2("innerInput"),
              disabled,
              id: uuid,
              ref,
              ...rest,
              autoComplete: rest.autoComplete || "off",
              type: _visible ? "text" : "password"
            }
          )
        }
      )
    }
  );
});
PasswordInput.classes = { ...InputBase.classes, ...classes$a };
PasswordInput.displayName = "@mantine/core/PasswordInput";
const defaultTransition = {
  duration: 100,
  transition: "fade"
};
function getTransitionProps(transitionProps, componentTransition) {
  return { ...defaultTransition, ...componentTransition, ...transitionProps };
}
function useFloatingTooltip({
  offset: offset2,
  position: position2,
  defaultOpened
}) {
  const [opened, setOpened] = reactExports.useState(defaultOpened);
  const boundaryRef = reactExports.useRef(null);
  const { x, y: y2, elements, refs, update, placement } = useFloating({
    placement: position2,
    middleware: [
      shift({
        crossAxis: true,
        padding: 5,
        rootBoundary: "document"
      })
    ]
  });
  const horizontalOffset = placement.includes("right") ? offset2 : position2.includes("left") ? offset2 * -1 : 0;
  const verticalOffset = placement.includes("bottom") ? offset2 : position2.includes("top") ? offset2 * -1 : 0;
  const handleMouseMove = reactExports.useCallback(
    ({ clientX, clientY }) => {
      refs.setPositionReference({
        getBoundingClientRect() {
          return {
            width: 0,
            height: 0,
            x: clientX,
            y: clientY,
            left: clientX + horizontalOffset,
            top: clientY + verticalOffset,
            right: clientX,
            bottom: clientY
          };
        }
      });
    },
    [elements.reference]
  );
  reactExports.useEffect(() => {
    if (refs.floating.current) {
      const boundary = boundaryRef.current;
      boundary.addEventListener("mousemove", handleMouseMove);
      const parents = getOverflowAncestors(refs.floating.current);
      parents.forEach((parent) => {
        parent.addEventListener("scroll", update);
      });
      return () => {
        boundary.removeEventListener("mousemove", handleMouseMove);
        parents.forEach((parent) => {
          parent.removeEventListener("scroll", update);
        });
      };
    }
    return void 0;
  }, [elements.reference, refs.floating.current, update, handleMouseMove, opened]);
  return { handleMouseMove, x, y: y2, opened, setOpened, boundaryRef, floating: refs.setFloating };
}
var classes$9 = { "tooltip": "m_1b3c8819", "arrow": "m_f898399f" };
const defaultProps$a = {
  refProp: "ref",
  withinPortal: true,
  offset: 10,
  defaultOpened: false,
  position: "right",
  zIndex: getDefaultZIndex("popover")
};
const varsResolver$6 = createVarsResolver((theme2, { radius, color }) => ({
  tooltip: {
    "--tooltip-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--tooltip-bg": color ? getThemeColor(color, theme2) : void 0,
    "--tooltip-color": color ? "var(--mantine-color-white)" : void 0
  }
}));
const TooltipFloating = factory((_props, ref) => {
  const props = useProps("TooltipFloating", defaultProps$a, _props);
  const {
    children,
    refProp,
    withinPortal,
    style,
    className,
    classNames,
    styles: styles2,
    unstyled,
    radius,
    color,
    label,
    offset: offset2,
    position: position2,
    multiline,
    zIndex,
    disabled,
    defaultOpened,
    variant,
    vars,
    portalProps,
    ...others
  } = props;
  const theme2 = useMantineTheme();
  const getStyles2 = useStyles({
    name: "TooltipFloating",
    props,
    classes: classes$9,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "tooltip",
    vars,
    varsResolver: varsResolver$6
  });
  const { handleMouseMove, x, y: y2, opened, boundaryRef, floating, setOpened } = useFloatingTooltip({
    offset: offset2,
    position: position2,
    defaultOpened
  });
  if (!isElement$1(children)) {
    throw new Error(
      "[@mantine/core] Tooltip.Floating component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const targetRef = useMergedRef(boundaryRef, getRefProp(children), ref);
  const _childrenProps = children.props;
  const onMouseEnter = (event) => {
    var _a;
    (_a = _childrenProps.onMouseEnter) == null ? void 0 : _a.call(_childrenProps, event);
    handleMouseMove(event);
    setOpened(true);
  };
  const onMouseLeave = (event) => {
    var _a;
    (_a = _childrenProps.onMouseLeave) == null ? void 0 : _a.call(_childrenProps, event);
    setOpened(false);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        ...others,
        ...getStyles2("tooltip", {
          style: {
            ...getStyleObject(style, theme2),
            zIndex,
            display: !disabled && opened ? "block" : "none",
            top: (y2 && Math.round(y2)) ?? "",
            left: (x && Math.round(x)) ?? ""
          }
        }),
        variant,
        ref: floating,
        mod: { multiline },
        children: label
      }
    ) }),
    reactExports.cloneElement(children, {
      ..._childrenProps,
      [refProp]: targetRef,
      onMouseEnter,
      onMouseLeave
    })
  ] });
});
TooltipFloating.classes = classes$9;
TooltipFloating.displayName = "@mantine/core/TooltipFloating";
const TooltipGroupContext = reactExports.createContext(false);
const TooltipGroupProvider = TooltipGroupContext.Provider;
const useTooltipGroupContext = () => reactExports.useContext(TooltipGroupContext);
const defaultProps$9 = {
  openDelay: 0,
  closeDelay: 0
};
function TooltipGroup(props) {
  const { openDelay, closeDelay, children } = useProps("TooltipGroup", defaultProps$9, props);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(TooltipGroupProvider, { value: true, children: /* @__PURE__ */ jsxRuntimeExports.jsx(FloatingDelayGroup, { delay: { open: openDelay, close: closeDelay }, children }) });
}
TooltipGroup.displayName = "@mantine/core/TooltipGroup";
TooltipGroup.extend = (c) => c;
function getDefaultMiddlewares(middlewares) {
  if (middlewares === void 0) {
    return { shift: true, flip: true };
  }
  const result = { ...middlewares };
  if (middlewares.shift === void 0) {
    result.shift = true;
  }
  if (middlewares.flip === void 0) {
    result.flip = true;
  }
  return result;
}
function getTooltipMiddlewares(settings) {
  const middlewaresOptions = getDefaultMiddlewares(settings.middlewares);
  const middlewares = [offset(settings.offset)];
  if (middlewaresOptions.shift) {
    middlewares.push(
      shift(
        typeof middlewaresOptions.shift === "boolean" ? { padding: 8 } : { padding: 8, ...middlewaresOptions.shift }
      )
    );
  }
  if (middlewaresOptions.flip) {
    middlewares.push(
      typeof middlewaresOptions.flip === "boolean" ? flip() : flip(middlewaresOptions.flip)
    );
  }
  middlewares.push(arrow({ element: settings.arrowRef, padding: settings.arrowOffset }));
  if (middlewaresOptions.inline) {
    middlewares.push(
      typeof middlewaresOptions.inline === "boolean" ? inline() : inline(middlewaresOptions.inline)
    );
  } else if (settings.inline) {
    middlewares.push(inline());
  }
  return middlewares;
}
function useTooltip(settings) {
  var _a, _b, _c;
  const [uncontrolledOpened, setUncontrolledOpened] = reactExports.useState(settings.defaultOpened);
  const controlled = typeof settings.opened === "boolean";
  const opened = controlled ? settings.opened : uncontrolledOpened;
  const withinGroup = useTooltipGroupContext();
  const uid = useId$1();
  const onChange = reactExports.useCallback(
    (_opened) => {
      setUncontrolledOpened(_opened);
      if (_opened) {
        setCurrentId(uid);
      }
    },
    [uid]
  );
  const {
    x,
    y: y2,
    context,
    refs,
    update,
    placement,
    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }
  } = useFloating({
    strategy: settings.strategy,
    placement: settings.position,
    open: opened,
    onOpenChange: onChange,
    middleware: getTooltipMiddlewares(settings)
  });
  const { delay: groupDelay, currentId, setCurrentId } = useDelayGroup(context, { id: uid });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useHover(context, {
      enabled: (_a = settings.events) == null ? void 0 : _a.hover,
      delay: withinGroup ? groupDelay : { open: settings.openDelay, close: settings.closeDelay },
      mouseOnly: !((_b = settings.events) == null ? void 0 : _b.touch)
    }),
    useFocus(context, { enabled: (_c = settings.events) == null ? void 0 : _c.focus, visibleOnly: true }),
    useRole(context, { role: "tooltip" }),
    // Cannot be used with controlled tooltip, page jumps
    useDismiss(context, { enabled: typeof settings.opened === "undefined" })
  ]);
  useFloatingAutoUpdate({
    opened,
    position: settings.position,
    positionDependencies: settings.positionDependencies,
    floating: { refs, update }
  });
  useDidUpdate(() => {
    var _a2;
    (_a2 = settings.onPositionChange) == null ? void 0 : _a2.call(settings, placement);
  }, [placement]);
  const isGroupPhase = opened && currentId && currentId !== uid;
  return {
    x,
    y: y2,
    arrowX,
    arrowY,
    reference: refs.setReference,
    floating: refs.setFloating,
    getFloatingProps,
    getReferenceProps,
    isGroupPhase,
    opened,
    placement
  };
}
const defaultProps$8 = {
  position: "top",
  refProp: "ref",
  withinPortal: true,
  inline: false,
  defaultOpened: false,
  arrowSize: 4,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  offset: 5,
  transitionProps: { duration: 100, transition: "fade" },
  events: { hover: true, focus: false, touch: false },
  zIndex: getDefaultZIndex("popover"),
  positionDependencies: [],
  middlewares: { flip: true, shift: true, inline: false }
};
const varsResolver$5 = createVarsResolver((theme2, { radius, color }) => ({
  tooltip: {
    "--tooltip-radius": radius === void 0 ? void 0 : getRadius(radius),
    "--tooltip-bg": color ? getThemeColor(color, theme2) : void 0,
    "--tooltip-color": color ? "var(--mantine-color-white)" : void 0
  }
}));
const Tooltip = factory((_props, ref) => {
  const props = useProps("Tooltip", defaultProps$8, _props);
  const {
    children,
    position: position2,
    refProp,
    label,
    openDelay,
    closeDelay,
    onPositionChange,
    opened,
    defaultOpened,
    withinPortal,
    radius,
    color,
    classNames,
    styles: styles2,
    unstyled,
    style,
    className,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    offset: offset2,
    transitionProps,
    multiline,
    events,
    zIndex,
    disabled,
    positionDependencies,
    onClick,
    onMouseEnter,
    onMouseLeave,
    inline: inline2,
    variant,
    keepMounted,
    vars,
    portalProps,
    mod,
    floatingStrategy,
    middlewares,
    ...others
  } = useProps("Tooltip", defaultProps$8, props);
  const { dir } = useDirection();
  const arrowRef = reactExports.useRef(null);
  const tooltip = useTooltip({
    position: getFloatingPosition(dir, position2),
    closeDelay,
    openDelay,
    onPositionChange,
    opened,
    defaultOpened,
    events,
    arrowRef,
    arrowOffset,
    offset: typeof offset2 === "number" ? offset2 + (withArrow ? arrowSize / 2 : 0) : offset2,
    positionDependencies: [...positionDependencies, children],
    inline: inline2,
    strategy: floatingStrategy,
    middlewares
  });
  const getStyles2 = useStyles({
    name: "Tooltip",
    props,
    classes: classes$9,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "tooltip",
    vars,
    varsResolver: varsResolver$5
  });
  if (!isElement$1(children)) {
    throw new Error(
      "[@mantine/core] Tooltip component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
    );
  }
  const targetRef = useMergedRef(tooltip.reference, getRefProp(children), ref);
  const transition = getTransitionProps(transitionProps, { duration: 100, transition: "fade" });
  const _childrenProps = children.props;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
      Transition,
      {
        ...transition,
        keepMounted,
        mounted: !disabled && !!tooltip.opened,
        duration: tooltip.isGroupPhase ? 10 : transition.duration,
        children: (transitionStyles) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
          Box,
          {
            ...others,
            "data-fixed": floatingStrategy === "fixed" || void 0,
            variant,
            mod: [{ multiline }, mod],
            ...tooltip.getFloatingProps({
              ref: tooltip.floating,
              className: getStyles2("tooltip").className,
              style: {
                ...getStyles2("tooltip").style,
                ...transitionStyles,
                zIndex,
                top: tooltip.y ?? 0,
                left: tooltip.x ?? 0
              }
            }),
            children: [
              label,
              /* @__PURE__ */ jsxRuntimeExports.jsx(
                FloatingArrow,
                {
                  ref: arrowRef,
                  arrowX: tooltip.arrowX,
                  arrowY: tooltip.arrowY,
                  visible: withArrow,
                  position: tooltip.placement,
                  arrowSize,
                  arrowOffset,
                  arrowRadius,
                  arrowPosition,
                  ...getStyles2("arrow")
                }
              )
            ]
          }
        )
      }
    ) }),
    reactExports.cloneElement(
      children,
      tooltip.getReferenceProps({
        onClick,
        onMouseEnter,
        onMouseLeave,
        onMouseMove: props.onMouseMove,
        onPointerDown: props.onPointerDown,
        onPointerEnter: props.onPointerEnter,
        [refProp]: targetRef,
        className: clsx$1(className, _childrenProps.className),
        ..._childrenProps
      })
    )
  ] });
});
Tooltip.classes = classes$9;
Tooltip.displayName = "@mantine/core/Tooltip";
Tooltip.Floating = TooltipFloating;
Tooltip.Group = TooltipGroup;
var classes$8 = { "root": "m_cf365364", "indicator": "m_9e182ccd", "label": "m_1738fcb2", "input": "m_1714d588", "control": "m_69686b9b", "innerLabel": "m_78882f40" };
const defaultProps$7 = {
  withItemsBorders: true
};
const varsResolver$4 = createVarsResolver(
  (theme2, { radius, color, transitionDuration, size: size2, transitionTimingFunction }) => ({
    root: {
      "--sc-radius": radius === void 0 ? void 0 : getRadius(radius),
      "--sc-color": color ? getThemeColor(color, theme2) : void 0,
      "--sc-shadow": color ? void 0 : "var(--mantine-shadow-xs)",
      "--sc-transition-duration": transitionDuration === void 0 ? void 0 : `${transitionDuration}ms`,
      "--sc-transition-timing-function": transitionTimingFunction,
      "--sc-padding": getSize(size2, "sc-padding"),
      "--sc-font-size": getFontSize(size2)
    }
  })
);
const SegmentedControl = factory((_props, ref) => {
  var _a, _b;
  const props = useProps("SegmentedControl", defaultProps$7, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    data,
    value,
    defaultValue,
    onChange,
    size: size2,
    name,
    disabled,
    readOnly,
    fullWidth,
    orientation,
    radius,
    color,
    transitionDuration,
    transitionTimingFunction,
    variant,
    autoContrast,
    withItemsBorders,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "SegmentedControl",
    props,
    classes: classes$8,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$4
  });
  const theme2 = useMantineTheme();
  const _data = data.map(
    (item) => typeof item === "string" ? { label: item, value: item } : item
  );
  const initialized = useMounted();
  const [parent, setParent] = reactExports.useState(null);
  const [refs, setRefs] = reactExports.useState({});
  const setElementRef = (element, val) => {
    refs[val] = element;
    setRefs(refs);
  };
  const [_value, handleValueChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: Array.isArray(data) ? ((_a = _data.find((item) => !item.disabled)) == null ? void 0 : _a.value) ?? ((_b = data[0]) == null ? void 0 : _b.value) ?? null : null,
    onChange
  });
  const uuid = useId$1(name);
  const controls = _data.map((item) => /* @__PURE__ */ reactExports.createElement(
    Box,
    {
      ...getStyles2("control"),
      mod: { active: _value === item.value, orientation },
      key: item.value
    },
    /* @__PURE__ */ reactExports.createElement(
      "input",
      {
        ...getStyles2("input"),
        disabled: disabled || item.disabled,
        type: "radio",
        name: uuid,
        value: item.value,
        id: `${uuid}-${item.value}`,
        checked: _value === item.value,
        onChange: () => !readOnly && handleValueChange(item.value),
        "data-focus-ring": theme2.focusRing,
        key: `${item.value}-input`
      }
    ),
    /* @__PURE__ */ reactExports.createElement(
      Box,
      {
        component: "label",
        ...getStyles2("label"),
        mod: {
          active: _value === item.value && !(disabled || item.disabled),
          disabled: disabled || item.disabled,
          "read-only": readOnly
        },
        htmlFor: `${uuid}-${item.value}`,
        ref: (node2) => setElementRef(node2, item.value),
        __vars: {
          "--sc-label-color": color !== void 0 ? getContrastColor({ color, theme: theme2, autoContrast }) : void 0
        },
        key: `${item.value}-label`
      },
      /* @__PURE__ */ jsxRuntimeExports.jsx("span", { ...getStyles2("innerLabel"), children: item.label })
    )
  ));
  const mergedRef = useMergedRef(ref, (node2) => setParent(node2));
  if (data.length === 0) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(
    Box,
    {
      ...getStyles2("root"),
      variant,
      size: size2,
      ref: mergedRef,
      mod: [
        {
          "full-width": fullWidth,
          orientation,
          initialized,
          "with-items-borders": withItemsBorders
        },
        mod
      ],
      ...others,
      role: "radiogroup",
      "data-disabled": disabled,
      children: [
        typeof _value === "string" && /* @__PURE__ */ jsxRuntimeExports.jsx(
          FloatingIndicator,
          {
            target: refs[_value],
            parent,
            component: "span",
            transitionDuration: "var(--sc-transition-duration)",
            ...getStyles2("indicator")
          }
        ),
        controls
      ]
    }
  );
});
SegmentedControl.classes = classes$8;
SegmentedControl.displayName = "@mantine/core/SegmentedControl";
const defaultProps$6 = {
  searchable: false,
  withCheckIcon: true,
  allowDeselect: true,
  checkIconPosition: "left"
};
const Select = factory((_props, ref) => {
  const props = useProps("Select", defaultProps$6, _props);
  const {
    classNames,
    styles: styles2,
    unstyled,
    vars,
    dropdownOpened,
    defaultDropdownOpened,
    onDropdownClose,
    onDropdownOpen,
    onFocus,
    onBlur,
    onClick,
    onChange,
    data,
    value,
    defaultValue,
    selectFirstOptionOnChange,
    onOptionSubmit,
    comboboxProps,
    readOnly,
    disabled,
    filter,
    limit,
    withScrollArea,
    maxDropdownHeight,
    size: size2,
    searchable,
    rightSection,
    checkIconPosition,
    withCheckIcon,
    nothingFoundMessage,
    name,
    form,
    searchValue,
    defaultSearchValue,
    onSearchChange,
    allowDeselect,
    error: error2,
    rightSectionPointerEvents,
    id,
    clearable,
    clearButtonProps,
    hiddenInputProps,
    renderOption,
    onClear,
    autoComplete,
    scrollAreaProps,
    __defaultRightSection,
    __clearSection,
    __clearable,
    chevronColor,
    ...others
  } = props;
  const parsedData = reactExports.useMemo(() => getParsedComboboxData(data), [data]);
  const optionsLockup = reactExports.useMemo(() => getOptionsLockup(parsedData), [parsedData]);
  const _id = useId$1(id);
  const [_value, setValue, controlled] = useUncontrolled({
    value,
    defaultValue,
    finalValue: null,
    onChange
  });
  const selectedOption = typeof _value === "string" ? optionsLockup[_value] : void 0;
  const previousSelectedOption = usePrevious(selectedOption);
  const [search, setSearch] = useUncontrolled({
    value: searchValue,
    defaultValue: defaultSearchValue,
    finalValue: selectedOption ? selectedOption.label : "",
    onChange: onSearchChange
  });
  const combobox = useCombobox({
    opened: dropdownOpened,
    defaultOpened: defaultDropdownOpened,
    onDropdownOpen: () => {
      onDropdownOpen == null ? void 0 : onDropdownOpen();
      combobox.updateSelectedOptionIndex("active", { scrollIntoView: true });
    },
    onDropdownClose: () => {
      onDropdownClose == null ? void 0 : onDropdownClose();
      combobox.resetSelectedOption();
    }
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    props,
    styles: styles2,
    classNames
  });
  reactExports.useEffect(() => {
    if (selectFirstOptionOnChange) {
      combobox.selectFirstOption();
    }
  }, [selectFirstOptionOnChange, _value]);
  reactExports.useEffect(() => {
    if (value === null) {
      setSearch("");
    }
    if (typeof value === "string" && selectedOption && ((previousSelectedOption == null ? void 0 : previousSelectedOption.value) !== selectedOption.value || (previousSelectedOption == null ? void 0 : previousSelectedOption.label) !== selectedOption.label)) {
      setSearch(selectedOption.label);
    }
  }, [value, selectedOption]);
  const clearButton = /* @__PURE__ */ jsxRuntimeExports.jsx(
    Combobox.ClearButton,
    {
      ...clearButtonProps,
      onClear: () => {
        setValue(null, null);
        setSearch("");
        onClear == null ? void 0 : onClear();
      }
    }
  );
  const _clearable = clearable && !!_value && !disabled && !readOnly;
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxRuntimeExports.jsxs(
      Combobox,
      {
        store: combobox,
        __staticSelector: "Select",
        classNames: resolvedClassNames,
        styles: resolvedStyles,
        unstyled,
        readOnly,
        onOptionSubmit: (val) => {
          onOptionSubmit == null ? void 0 : onOptionSubmit(val);
          const optionLockup = allowDeselect ? optionsLockup[val].value === _value ? null : optionsLockup[val] : optionsLockup[val];
          const nextValue = optionLockup ? optionLockup.value : null;
          nextValue !== _value && setValue(nextValue, optionLockup);
          !controlled && setSearch(typeof nextValue === "string" ? (optionLockup == null ? void 0 : optionLockup.label) || "" : "");
          combobox.closeDropdown();
        },
        size: size2,
        ...comboboxProps,
        children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx(Combobox.Target, { targetType: searchable ? "input" : "button", autoComplete, children: /* @__PURE__ */ jsxRuntimeExports.jsx(
            InputBase,
            {
              id: _id,
              ref,
              __defaultRightSection: /* @__PURE__ */ jsxRuntimeExports.jsx(
                Combobox.Chevron,
                {
                  size: size2,
                  error: error2,
                  unstyled,
                  color: chevronColor
                }
              ),
              __clearSection: clearButton,
              __clearable: _clearable,
              rightSection,
              rightSectionPointerEvents: rightSectionPointerEvents || (_clearable ? "all" : "none"),
              ...others,
              size: size2,
              __staticSelector: "Select",
              disabled,
              readOnly: readOnly || !searchable,
              value: search,
              onChange: (event) => {
                setSearch(event.currentTarget.value);
                combobox.openDropdown();
                selectFirstOptionOnChange && combobox.selectFirstOption();
              },
              onFocus: (event) => {
                searchable && combobox.openDropdown();
                onFocus == null ? void 0 : onFocus(event);
              },
              onBlur: (event) => {
                var _a;
                searchable && combobox.closeDropdown();
                setSearch(_value != null ? ((_a = optionsLockup[_value]) == null ? void 0 : _a.label) || "" : "");
                onBlur == null ? void 0 : onBlur(event);
              },
              onClick: (event) => {
                searchable ? combobox.openDropdown() : combobox.toggleDropdown();
                onClick == null ? void 0 : onClick(event);
              },
              classNames: resolvedClassNames,
              styles: resolvedStyles,
              unstyled,
              pointer: !searchable,
              error: error2
            }
          ) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            OptionsDropdown,
            {
              data: parsedData,
              hidden: readOnly || disabled,
              filter,
              search,
              limit,
              hiddenWhenEmpty: !nothingFoundMessage,
              withScrollArea,
              maxDropdownHeight,
              filterOptions: searchable && (selectedOption == null ? void 0 : selectedOption.label) !== search,
              value: _value,
              checkIconPosition,
              withCheckIcon,
              nothingFoundMessage,
              unstyled,
              labelId: others.label ? `${_id}-label` : void 0,
              "aria-label": others.label ? void 0 : others["aria-label"],
              renderOption,
              scrollAreaProps
            }
          )
        ]
      }
    ),
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Combobox.HiddenInput,
      {
        value: _value,
        name,
        form,
        disabled,
        ...hiddenInputProps
      }
    )
  ] });
});
Select.classes = { ...InputBase.classes, ...Combobox.classes };
Select.displayName = "@mantine/core/Select";
const defaultProps$5 = {};
const Space = factory((props, ref) => {
  const { w: w2, h: h2, miw, mih, ...others } = useProps("Space", defaultProps$5, props);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...others, w: w2, miw: miw ?? w2, h: h2, mih: mih ?? h2 });
});
Space.displayName = "@mantine/core/Space";
var classes$7 = { "root": "m_6d731127" };
const defaultProps$4 = {
  gap: "md",
  align: "stretch",
  justify: "flex-start"
};
const varsResolver$3 = createVarsResolver((_, { gap, align, justify }) => ({
  root: {
    "--stack-gap": getSpacing(gap),
    "--stack-align": align,
    "--stack-justify": justify
  }
}));
const Stack = factory((_props, ref) => {
  const props = useProps("Stack", defaultProps$4, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    align,
    justify,
    gap,
    variant,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Stack",
    props,
    classes: classes$7,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$3
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { ref, ...getStyles2("root"), variant, ...others });
});
Stack.classes = classes$7;
Stack.displayName = "@mantine/core/Stack";
const [TableProvider, useTableContext] = createSafeContext(
  "Table component was not found in the tree"
);
var classes$6 = { "table": "m_b23fa0ef", "th": "m_4e7aa4f3", "tr": "m_4e7aa4fd", "td": "m_4e7aa4ef", "tbody": "m_b2404537", "thead": "m_b242d975", "caption": "m_9e5a3ac7", "scrollContainer": "m_a100c15", "scrollContainerInner": "m_62259741" };
function getDataAttributes(ctx, options) {
  if (!options) {
    return void 0;
  }
  const data = {};
  if (options.columnBorder && ctx.withColumnBorders) {
    data["data-with-column-border"] = true;
  }
  if (options.rowBorder && ctx.withRowBorders) {
    data["data-with-row-border"] = true;
  }
  if (options.striped && ctx.striped) {
    data["data-striped"] = ctx.striped;
  }
  if (options.highlightOnHover && ctx.highlightOnHover) {
    data["data-hover"] = true;
  }
  if (options.captionSide && ctx.captionSide) {
    data["data-side"] = ctx.captionSide;
  }
  if (options.stickyHeader && ctx.stickyHeader) {
    data["data-sticky"] = true;
  }
  return data;
}
function tableElement(element, options) {
  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;
  const Component = factory((_props, ref) => {
    const props = useProps(name, {}, _props);
    const { classNames, className, style, styles: styles2, ...others } = props;
    const ctx = useTableContext();
    return /* @__PURE__ */ jsxRuntimeExports.jsx(
      Box,
      {
        component: element,
        ref,
        ...getDataAttributes(ctx, options),
        ...ctx.getStyles(element, { className, classNames, style, styles: styles2, props }),
        ...others
      }
    );
  });
  Component.displayName = `@mantine/core/${name}`;
  Component.classes = classes$6;
  return Component;
}
const TableTh = tableElement("th", { columnBorder: true });
const TableTd = tableElement("td", { columnBorder: true });
const TableTr = tableElement("tr", {
  rowBorder: true,
  striped: true,
  highlightOnHover: true
});
const TableThead = tableElement("thead", { stickyHeader: true });
const TableTbody = tableElement("tbody");
const TableTfoot = tableElement("tfoot");
const TableCaption = tableElement("caption", { captionSide: true });
function TableDataRenderer({ data }) {
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    data.caption && /* @__PURE__ */ jsxRuntimeExports.jsx(TableCaption, { children: data.caption }),
    data.head && /* @__PURE__ */ jsxRuntimeExports.jsx(TableThead, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableTr, { children: data.head.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableTh, { children: item }, index2)) }) }),
    data.body && /* @__PURE__ */ jsxRuntimeExports.jsx(TableTbody, { children: data.body.map((row, rowIndex) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableTr, { children: row.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableTd, { children: item }, index2)) }, rowIndex)) }),
    data.foot && /* @__PURE__ */ jsxRuntimeExports.jsx(TableTfoot, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(TableTr, { children: data.foot.map((item, index2) => /* @__PURE__ */ jsxRuntimeExports.jsx(TableTh, { children: item }, index2)) }) })
  ] });
}
TableDataRenderer.displayName = "@mantine/core/TableDataRenderer";
const defaultProps$3 = {
  type: "scrollarea"
};
const varsResolver$2 = createVarsResolver((_, { minWidth, type }) => ({
  scrollContainer: {
    "--table-min-width": rem(minWidth),
    "--table-overflow": type === "native" ? "auto" : void 0
  }
}));
const TableScrollContainer = factory((_props, ref) => {
  const props = useProps("TableScrollContainer", defaultProps$3, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    children,
    minWidth,
    type,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "TableScrollContainer",
    classes: classes$6,
    props,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver: varsResolver$2,
    rootSelector: "scrollContainer"
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      component: type === "scrollarea" ? ScrollArea : "div",
      ...type === "scrollarea" ? { offsetScrollbars: "x" } : {},
      ref,
      ...getStyles2("scrollContainer"),
      ...others,
      children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { ...getStyles2("scrollContainerInner"), children })
    }
  );
});
TableScrollContainer.classes = classes$6;
TableScrollContainer.displayName = "@mantine/core/TableScrollContainer";
const defaultProps$2 = {
  withRowBorders: true,
  verticalSpacing: 7
};
const varsResolver$1 = createVarsResolver(
  (theme2, {
    layout: layout2,
    captionSide,
    horizontalSpacing,
    verticalSpacing,
    borderColor,
    stripedColor,
    highlightOnHoverColor,
    striped,
    highlightOnHover,
    stickyHeaderOffset,
    stickyHeader
  }) => ({
    table: {
      "--table-layout": layout2,
      "--table-caption-side": captionSide,
      "--table-horizontal-spacing": getSpacing(horizontalSpacing),
      "--table-vertical-spacing": getSpacing(verticalSpacing),
      "--table-border-color": borderColor ? getThemeColor(borderColor, theme2) : void 0,
      "--table-striped-color": striped && stripedColor ? getThemeColor(stripedColor, theme2) : void 0,
      "--table-highlight-on-hover-color": highlightOnHover && highlightOnHoverColor ? getThemeColor(highlightOnHoverColor, theme2) : void 0,
      "--table-sticky-header-offset": stickyHeader ? rem(stickyHeaderOffset) : void 0
    }
  })
);
const Table = factory((_props, ref) => {
  const props = useProps("Table", defaultProps$2, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    vars,
    horizontalSpacing,
    verticalSpacing,
    captionSide,
    stripedColor,
    highlightOnHoverColor,
    striped,
    highlightOnHover,
    withColumnBorders,
    withRowBorders,
    withTableBorder,
    borderColor,
    layout: layout2,
    variant,
    data,
    children,
    stickyHeader,
    stickyHeaderOffset,
    mod,
    tabularNums,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Table",
    props,
    className,
    style,
    classes: classes$6,
    classNames,
    styles: styles2,
    unstyled,
    rootSelector: "table",
    vars,
    varsResolver: varsResolver$1
  });
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    TableProvider,
    {
      value: {
        getStyles: getStyles2,
        stickyHeader,
        striped: striped === true ? "odd" : striped || void 0,
        highlightOnHover,
        withColumnBorders,
        withRowBorders,
        captionSide: captionSide || "bottom"
      },
      children: /* @__PURE__ */ jsxRuntimeExports.jsx(
        Box,
        {
          component: "table",
          variant,
          ref,
          mod: [{ "data-with-table-border": withTableBorder, "data-tabular-nums": tabularNums }, mod],
          ...getStyles2("table"),
          ...others,
          children: children || !!data && /* @__PURE__ */ jsxRuntimeExports.jsx(TableDataRenderer, { data })
        }
      )
    }
  );
});
Table.classes = classes$6;
Table.displayName = "@mantine/core/Table";
Table.Td = TableTd;
Table.Th = TableTh;
Table.Tr = TableTr;
Table.Thead = TableThead;
Table.Tbody = TableTbody;
Table.Tfoot = TableTfoot;
Table.Caption = TableCaption;
Table.ScrollContainer = TableScrollContainer;
Table.DataRenderer = TableDataRenderer;
const defaultProps$1 = {};
const TextInput = factory((props, ref) => {
  const _props = useProps("TextInput", defaultProps$1, props);
  return /* @__PURE__ */ jsxRuntimeExports.jsx(InputBase, { component: "input", ref, ..._props, __staticSelector: "TextInput" });
});
TextInput.classes = InputBase.classes;
TextInput.displayName = "@mantine/core/TextInput";
const headings = ["h1", "h2", "h3", "h4", "h5", "h6"];
const sizes = ["xs", "sm", "md", "lg", "xl"];
function getTitleSize(order, size2) {
  const titleSize = size2 !== void 0 ? size2 : `h${order}`;
  if (headings.includes(titleSize)) {
    return {
      fontSize: `var(--mantine-${titleSize}-font-size)`,
      fontWeight: `var(--mantine-${titleSize}-font-weight)`,
      lineHeight: `var(--mantine-${titleSize}-line-height)`
    };
  } else if (sizes.includes(titleSize)) {
    return {
      fontSize: `var(--mantine-font-size-${titleSize})`,
      fontWeight: `var(--mantine-h${order}-font-weight)`,
      lineHeight: `var(--mantine-h${order}-line-height)`
    };
  }
  return {
    fontSize: rem(titleSize),
    fontWeight: `var(--mantine-h${order}-font-weight)`,
    lineHeight: `var(--mantine-h${order}-line-height)`
  };
}
var classes$5 = { "root": "m_8a5d1357" };
const defaultProps = {
  order: 1
};
const varsResolver = createVarsResolver((_, { order, size: size2, lineClamp, textWrap }) => {
  const sizeVariables = getTitleSize(order, size2);
  return {
    root: {
      "--title-fw": sizeVariables.fontWeight,
      "--title-lh": sizeVariables.lineHeight,
      "--title-fz": sizeVariables.fontSize,
      "--title-line-clamp": typeof lineClamp === "number" ? lineClamp.toString() : void 0,
      "--title-text-wrap": textWrap
    }
  };
});
const Title = factory((_props, ref) => {
  const props = useProps("Title", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles: styles2,
    unstyled,
    order,
    vars,
    size: size2,
    variant,
    lineClamp,
    textWrap,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Title",
    props,
    classes: classes$5,
    className,
    style,
    classNames,
    styles: styles2,
    unstyled,
    vars,
    varsResolver
  });
  if (![1, 2, 3, 4, 5, 6].includes(order)) {
    return null;
  }
  return /* @__PURE__ */ jsxRuntimeExports.jsx(
    Box,
    {
      ...getStyles2("root"),
      component: `h${order}`,
      variant,
      ref,
      mod: [{ order, "data-line-clamp": typeof lineClamp === "number" }, mod],
      size: size2,
      ...others
    }
  );
});
Title.classes = classes$5;
Title.displayName = "@mantine/core/Title";
var Je = class {
  constructor(e, t) {
    this.operator = e;
    this.child = t;
  }
  toString() {
    return `${this.operator}(${this.child.toString()})`;
  }
}, Z = class {
  constructor(e, t, n) {
    this.operator = e;
    this.left = t;
    this.right = n;
  }
  toString() {
    return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;
  }
}, Ye = class {
  constructor() {
    this.prefixParselets = {};
    this.infixParselets = {};
  }
  registerInfix(e, t) {
    return this.infixParselets[e] = t, this;
  }
  registerPrefix(e, t) {
    return this.prefixParselets[e] = t, this;
  }
  prefix(e, t, n) {
    return this.registerPrefix(e, { parse(i, o) {
      let s = i.consumeAndParse(t);
      return n(o, s);
    } });
  }
  infixLeft(e, t, n) {
    return this.registerInfix(e, { parse(i, o, s) {
      let a = i.consumeAndParse(t);
      return n(o, s, a);
    }, precedence: t });
  }
  construct(e) {
    return new zt(e, this.prefixParselets, this.infixParselets);
  }
}, zt = class {
  constructor(e, t, n) {
    this.tokens = e, this.prefixParselets = t, this.infixParselets = n;
  }
  hasMore() {
    return this.tokens.length > 0;
  }
  match(e) {
    var _a;
    return ((_a = this.peek()) == null ? void 0 : _a.id) !== e ? false : (this.consume(), true);
  }
  consumeAndParse(e = 1 / 0) {
    let t = this.consume(), n = this.prefixParselets[t.id];
    if (!n)
      throw Error(`Parse error at "${t.value}" (line ${t.line}, column ${t.column}). No matching prefix parselet.`);
    let i = n.parse(this, t);
    for (; e > this.getPrecedence(); ) {
      let o = this.consume();
      i = this.getInfixParselet(o).parse(this, i, o);
    }
    return i;
  }
  getPrecedence() {
    let e = this.peek();
    if (!e)
      return 1 / 0;
    let t = this.getInfixParselet(e);
    return t ? t.precedence : 1 / 0;
  }
  consume(e, t) {
    var _a, _b;
    if (!this.tokens.length)
      throw Error("Cant consume unknown more tokens.");
    if (e && ((_a = this.peek()) == null ? void 0 : _a.id) !== e) {
      let n = this.peek();
      throw Error(`Expected ${e} but got "${n.id}" (${n.value}) at line ${n.line} column ${n.column}.`);
    }
    if (t && ((_b = this.peek()) == null ? void 0 : _b.value) !== t) {
      let n = this.peek();
      throw Error(`Expected "${t}" but got "${n.value}" at line ${n.line} column ${n.column}.`);
    }
    return this.tokens.shift();
  }
  peek() {
    return this.tokens.length > 0 ? this.tokens[0] : void 0;
  }
  removeComments() {
    this.tokens = this.tokens.filter((e) => e.id !== "Comment");
  }
  getInfixParselet(e) {
    return this.infixParselets[e.id === "Symbol" ? e.value : e.id];
  }
};
var Jt = "ok", Ze = "created", Zt = "not-modified", Xt = "not-found", tr = "unauthorized", Xe = "accepted", cn = { resourceType: "OperationOutcome", id: Xt, issue: [{ severity: "error", code: "not-found", details: { text: "Not found" } }] }, be = { resourceType: "OperationOutcome", id: tr, issue: [{ severity: "error", code: "login", details: { text: "Unauthorized" } }] }, un = { ...be, issue: [...be.issue, { severity: "error", code: "expired", details: { text: "Token expired" } }] }, rr = { ...be, issue: [...be.issue, { severity: "error", code: "invalid", details: { text: "Token not issued for this audience" } }] };
function E(r3, e) {
  return { resourceType: "OperationOutcome", issue: [{ severity: "error", code: "invalid", details: { text: r3 }, ...e ? { expression: [e] } : void 0 }] };
}
function h(r3) {
  return { resourceType: "OperationOutcome", issue: [{ severity: "error", code: "structure", details: { text: r3 } }] };
}
function ln(r3) {
  return { resourceType: "OperationOutcome", issue: [{ severity: "error", code: "exception", details: { text: "Internal server error" }, diagnostics: r3.toString() }] };
}
function Re(r3) {
  return typeof r3 == "object" && r3 !== null && r3.resourceType === "OperationOutcome";
}
function nr(r3) {
  return r3.id === Jt || r3.id === Ze || r3.id === Zt || r3.id === Xe;
}
var d = class extends Error {
  constructor(e, t) {
    super(pn(e)), this.outcome = e, this.cause = t;
  }
};
function et(r3) {
  return r3 instanceof d ? r3.outcome : Re(r3) ? r3 : E(Ce(r3));
}
function Ce(r3) {
  return r3 ? typeof r3 == "string" ? r3 : r3 instanceof Error ? r3.message : Re(r3) ? pn(r3) : typeof r3 == "object" && "code" in r3 && typeof r3.code == "string" ? r3.code : JSON.stringify(r3) : "Unknown error";
}
function pn(r3) {
  var _a;
  let e = ((_a = r3.issue) == null ? void 0 : _a.map(eo)) ?? [];
  return e.length > 0 ? e.join("; ") : "Unknown error";
}
function eo(r3) {
  var _a, _b;
  let e;
  return ((_a = r3.details) == null ? void 0 : _a.text) ? r3.diagnostics ? e = `${r3.details.text} (${r3.diagnostics})` : e = r3.details.text : r3.diagnostics ? e = r3.diagnostics : e = "Unknown error", ((_b = r3.expression) == null ? void 0 : _b.length) && (e += ` (${r3.expression.join(", ")})`), e;
}
function ro(r3, e) {
  let t = e.max && e.max === Number.MAX_SAFE_INTEGER ? Number.POSITIVE_INFINITY : e.max;
  return { path: r3, description: "", type: e.type ?? [], min: e.min ?? 0, max: t ?? 1, isArray: !!t && t > 1, constraints: [] };
}
function mn(r3) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let [t, n] of Object.entries(r3))
    e[t] = { name: t, type: t, path: t, elements: Object.fromEntries(Object.entries(n.elements).map(([i, o]) => [i, ro(i, o)])), constraints: [], innerTypes: [] };
  return e;
}
var hn = { Element: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] } } }, BackboneElement: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] } } }, Address: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, use: { type: [{ code: "code" }] }, type: { type: [{ code: "code" }] }, text: { type: [{ code: "string" }] }, line: { max: 9007199254740991, type: [{ code: "string" }] }, city: { type: [{ code: "string" }] }, district: { type: [{ code: "string" }] }, state: { type: [{ code: "string" }] }, postalCode: { type: [{ code: "string" }] }, country: { type: [{ code: "string" }] }, period: { type: [{ code: "Period" }] } } }, Age: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, Annotation: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, "author[x]": { type: [{ code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Practitioner", "http://hl7.org/fhir/StructureDefinition/Patient", "http://hl7.org/fhir/StructureDefinition/RelatedPerson", "http://hl7.org/fhir/StructureDefinition/Organization"] }, { code: "string" }] }, time: { type: [{ code: "dateTime" }] }, text: { min: 1, type: [{ code: "markdown" }] } } }, Attachment: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, contentType: { type: [{ code: "code" }] }, language: { type: [{ code: "code" }] }, data: { type: [{ code: "base64Binary" }] }, url: { type: [{ code: "url" }] }, size: { type: [{ code: "unsignedInt" }] }, hash: { type: [{ code: "base64Binary" }] }, title: { type: [{ code: "string" }] }, creation: { type: [{ code: "dateTime" }] } } }, CodeableConcept: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, coding: { max: 9007199254740991, type: [{ code: "Coding" }] }, text: { type: [{ code: "string" }] } } }, Coding: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, system: { type: [{ code: "uri" }] }, version: { type: [{ code: "string" }] }, code: { type: [{ code: "code" }] }, display: { type: [{ code: "string" }] }, userSelected: { type: [{ code: "boolean" }] } } }, ContactDetail: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, name: { type: [{ code: "string" }] }, telecom: { max: 9007199254740991, type: [{ code: "ContactPoint" }] } } }, ContactPoint: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, system: { type: [{ code: "code" }] }, value: { type: [{ code: "string" }] }, use: { type: [{ code: "code" }] }, rank: { type: [{ code: "positiveInt" }] }, period: { type: [{ code: "Period" }] } } }, Contributor: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, type: [{ code: "code" }] }, name: { min: 1, type: [{ code: "string" }] }, contact: { max: 9007199254740991, type: [{ code: "ContactDetail" }] } } }, Count: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, DataRequirement: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, type: [{ code: "code" }] }, profile: { max: 9007199254740991, type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition"] }] }, "subject[x]": { type: [{ code: "CodeableConcept" }, { code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Group"] }] }, mustSupport: { max: 9007199254740991, type: [{ code: "string" }] }, codeFilter: { max: 9007199254740991, type: [{ code: "DataRequirementCodeFilter" }] }, dateFilter: { max: 9007199254740991, type: [{ code: "DataRequirementDateFilter" }] }, limit: { type: [{ code: "positiveInt" }] }, sort: { max: 9007199254740991, type: [{ code: "DataRequirementSort" }] } } }, DataRequirementCodeFilter: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, path: { type: [{ code: "string" }] }, searchParam: { type: [{ code: "string" }] }, valueSet: { type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/ValueSet"] }] }, code: { max: 9007199254740991, type: [{ code: "Coding" }] } } }, DataRequirementDateFilter: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, path: { type: [{ code: "string" }] }, searchParam: { type: [{ code: "string" }] }, "value[x]": { type: [{ code: "dateTime" }, { code: "Period" }, { code: "Duration" }] } } }, DataRequirementSort: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, path: { min: 1, type: [{ code: "string" }] }, direction: { min: 1, type: [{ code: "code" }] } } }, Distance: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, Dosage: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, sequence: { type: [{ code: "integer" }] }, text: { type: [{ code: "string" }] }, additionalInstruction: { max: 9007199254740991, type: [{ code: "CodeableConcept" }] }, patientInstruction: { type: [{ code: "string" }] }, timing: { type: [{ code: "Timing" }] }, "asNeeded[x]": { type: [{ code: "boolean" }, { code: "CodeableConcept" }] }, site: { type: [{ code: "CodeableConcept" }] }, route: { type: [{ code: "CodeableConcept" }] }, method: { type: [{ code: "CodeableConcept" }] }, doseAndRate: { max: 9007199254740991, type: [{ code: "DosageDoseAndRate" }] }, maxDosePerPeriod: { type: [{ code: "Ratio" }] }, maxDosePerAdministration: { type: [{ code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] }, maxDosePerLifetime: { type: [{ code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] } } }, DosageDoseAndRate: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { type: [{ code: "CodeableConcept" }] }, "dose[x]": { type: [{ code: "Range" }, { code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] }, "rate[x]": { type: [{ code: "Ratio" }, { code: "Range" }, { code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] } } }, Duration: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, ElementDefinition: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, path: { min: 1, type: [{ code: "string" }] }, representation: { max: 9007199254740991, type: [{ code: "code" }] }, sliceName: { type: [{ code: "string" }] }, sliceIsConstraining: { type: [{ code: "boolean" }] }, label: { type: [{ code: "string" }] }, code: { max: 9007199254740991, type: [{ code: "Coding" }] }, slicing: { type: [{ code: "ElementDefinitionSlicing" }] }, short: { type: [{ code: "string" }] }, definition: { type: [{ code: "markdown" }] }, comment: { type: [{ code: "markdown" }] }, requirements: { type: [{ code: "markdown" }] }, alias: { max: 9007199254740991, type: [{ code: "string" }] }, min: { type: [{ code: "unsignedInt" }] }, max: { type: [{ code: "string" }] }, base: { type: [{ code: "ElementDefinitionBase" }] }, contentReference: { type: [{ code: "uri" }] }, type: { max: 9007199254740991, type: [{ code: "ElementDefinitionType" }] }, "defaultValue[x]": { type: [{ code: "base64Binary" }, { code: "boolean" }, { code: "canonical" }, { code: "code" }, { code: "date" }, { code: "dateTime" }, { code: "decimal" }, { code: "id" }, { code: "instant" }, { code: "integer" }, { code: "markdown" }, { code: "oid" }, { code: "positiveInt" }, { code: "string" }, { code: "time" }, { code: "unsignedInt" }, { code: "uri" }, { code: "url" }, { code: "uuid" }, { code: "Address" }, { code: "Age" }, { code: "Annotation" }, { code: "Attachment" }, { code: "CodeableConcept" }, { code: "Coding" }, { code: "ContactPoint" }, { code: "Count" }, { code: "Distance" }, { code: "Duration" }, { code: "HumanName" }, { code: "Identifier" }, { code: "Money" }, { code: "Period" }, { code: "Quantity" }, { code: "Range" }, { code: "Ratio" }, { code: "Reference" }, { code: "SampledData" }, { code: "Signature" }, { code: "Timing" }, { code: "ContactDetail" }, { code: "Contributor" }, { code: "DataRequirement" }, { code: "Expression" }, { code: "ParameterDefinition" }, { code: "RelatedArtifact" }, { code: "TriggerDefinition" }, { code: "UsageContext" }, { code: "Dosage" }, { code: "Meta" }] }, meaningWhenMissing: { type: [{ code: "markdown" }] }, orderMeaning: { type: [{ code: "string" }] }, "fixed[x]": { type: [{ code: "base64Binary" }, { code: "boolean" }, { code: "canonical" }, { code: "code" }, { code: "date" }, { code: "dateTime" }, { code: "decimal" }, { code: "id" }, { code: "instant" }, { code: "integer" }, { code: "markdown" }, { code: "oid" }, { code: "positiveInt" }, { code: "string" }, { code: "time" }, { code: "unsignedInt" }, { code: "uri" }, { code: "url" }, { code: "uuid" }, { code: "Address" }, { code: "Age" }, { code: "Annotation" }, { code: "Attachment" }, { code: "CodeableConcept" }, { code: "Coding" }, { code: "ContactPoint" }, { code: "Count" }, { code: "Distance" }, { code: "Duration" }, { code: "HumanName" }, { code: "Identifier" }, { code: "Money" }, { code: "Period" }, { code: "Quantity" }, { code: "Range" }, { code: "Ratio" }, { code: "Reference" }, { code: "SampledData" }, { code: "Signature" }, { code: "Timing" }, { code: "ContactDetail" }, { code: "Contributor" }, { code: "DataRequirement" }, { code: "Expression" }, { code: "ParameterDefinition" }, { code: "RelatedArtifact" }, { code: "TriggerDefinition" }, { code: "UsageContext" }, { code: "Dosage" }, { code: "Meta" }] }, "pattern[x]": { type: [{ code: "base64Binary" }, { code: "boolean" }, { code: "canonical" }, { code: "code" }, { code: "date" }, { code: "dateTime" }, { code: "decimal" }, { code: "id" }, { code: "instant" }, { code: "integer" }, { code: "markdown" }, { code: "oid" }, { code: "positiveInt" }, { code: "string" }, { code: "time" }, { code: "unsignedInt" }, { code: "uri" }, { code: "url" }, { code: "uuid" }, { code: "Address" }, { code: "Age" }, { code: "Annotation" }, { code: "Attachment" }, { code: "CodeableConcept" }, { code: "Coding" }, { code: "ContactPoint" }, { code: "Count" }, { code: "Distance" }, { code: "Duration" }, { code: "HumanName" }, { code: "Identifier" }, { code: "Money" }, { code: "Period" }, { code: "Quantity" }, { code: "Range" }, { code: "Ratio" }, { code: "Reference" }, { code: "SampledData" }, { code: "Signature" }, { code: "Timing" }, { code: "ContactDetail" }, { code: "Contributor" }, { code: "DataRequirement" }, { code: "Expression" }, { code: "ParameterDefinition" }, { code: "RelatedArtifact" }, { code: "TriggerDefinition" }, { code: "UsageContext" }, { code: "Dosage" }, { code: "Meta" }] }, example: { max: 9007199254740991, type: [{ code: "ElementDefinitionExample" }] }, "minValue[x]": { type: [{ code: "date" }, { code: "dateTime" }, { code: "instant" }, { code: "time" }, { code: "decimal" }, { code: "integer" }, { code: "positiveInt" }, { code: "unsignedInt" }, { code: "Quantity" }] }, "maxValue[x]": { type: [{ code: "date" }, { code: "dateTime" }, { code: "instant" }, { code: "time" }, { code: "decimal" }, { code: "integer" }, { code: "positiveInt" }, { code: "unsignedInt" }, { code: "Quantity" }] }, maxLength: { type: [{ code: "integer" }] }, condition: { max: 9007199254740991, type: [{ code: "id" }] }, constraint: { max: 9007199254740991, type: [{ code: "ElementDefinitionConstraint" }] }, mustSupport: { type: [{ code: "boolean" }] }, isModifier: { type: [{ code: "boolean" }] }, isModifierReason: { type: [{ code: "string" }] }, isSummary: { type: [{ code: "boolean" }] }, binding: { type: [{ code: "ElementDefinitionBinding" }] }, mapping: { max: 9007199254740991, type: [{ code: "ElementDefinitionMapping" }] } } }, ElementDefinitionSlicingDiscriminator: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, type: [{ code: "code" }] }, path: { min: 1, type: [{ code: "string" }] } } }, ElementDefinitionSlicing: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, discriminator: { max: 9007199254740991, type: [{ code: "ElementDefinitionSlicingDiscriminator" }] }, description: { type: [{ code: "string" }] }, ordered: { type: [{ code: "boolean" }] }, rules: { min: 1, type: [{ code: "code" }] } } }, ElementDefinitionBase: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, path: { min: 1, type: [{ code: "string" }] }, min: { min: 1, type: [{ code: "unsignedInt" }] }, max: { min: 1, type: [{ code: "string" }] } } }, ElementDefinitionType: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, code: { min: 1, type: [{ code: "uri" }] }, profile: { max: 9007199254740991, type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition", "http://hl7.org/fhir/StructureDefinition/ImplementationGuide"] }] }, targetProfile: { max: 9007199254740991, type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition", "http://hl7.org/fhir/StructureDefinition/ImplementationGuide"] }] }, aggregation: { max: 9007199254740991, type: [{ code: "code" }] }, versioning: { type: [{ code: "code" }] } } }, ElementDefinitionExample: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, label: { min: 1, type: [{ code: "string" }] }, "value[x]": { min: 1, type: [{ code: "base64Binary" }, { code: "boolean" }, { code: "canonical" }, { code: "code" }, { code: "date" }, { code: "dateTime" }, { code: "decimal" }, { code: "id" }, { code: "instant" }, { code: "integer" }, { code: "markdown" }, { code: "oid" }, { code: "positiveInt" }, { code: "string" }, { code: "time" }, { code: "unsignedInt" }, { code: "uri" }, { code: "url" }, { code: "uuid" }, { code: "Address" }, { code: "Age" }, { code: "Annotation" }, { code: "Attachment" }, { code: "CodeableConcept" }, { code: "Coding" }, { code: "ContactPoint" }, { code: "Count" }, { code: "Distance" }, { code: "Duration" }, { code: "HumanName" }, { code: "Identifier" }, { code: "Money" }, { code: "Period" }, { code: "Quantity" }, { code: "Range" }, { code: "Ratio" }, { code: "Reference" }, { code: "SampledData" }, { code: "Signature" }, { code: "Timing" }, { code: "ContactDetail" }, { code: "Contributor" }, { code: "DataRequirement" }, { code: "Expression" }, { code: "ParameterDefinition" }, { code: "RelatedArtifact" }, { code: "TriggerDefinition" }, { code: "UsageContext" }, { code: "Dosage" }, { code: "Meta" }] } } }, ElementDefinitionConstraint: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, key: { min: 1, type: [{ code: "id" }] }, requirements: { type: [{ code: "string" }] }, severity: { min: 1, type: [{ code: "code" }] }, human: { min: 1, type: [{ code: "string" }] }, expression: { type: [{ code: "string" }] }, xpath: { type: [{ code: "string" }] }, source: { type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition"] }] } } }, ElementDefinitionBinding: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, strength: { min: 1, type: [{ code: "code" }] }, description: { type: [{ code: "string" }] }, valueSet: { type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/ValueSet"] }] } } }, ElementDefinitionMapping: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, identity: { min: 1, type: [{ code: "id" }] }, language: { type: [{ code: "code" }] }, map: { min: 1, type: [{ code: "string" }] }, comment: { type: [{ code: "string" }] } } }, Expression: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, description: { type: [{ code: "string" }] }, name: { type: [{ code: "id" }] }, language: { min: 1, type: [{ code: "code" }] }, expression: { type: [{ code: "string" }] }, reference: { type: [{ code: "uri" }] } } }, Extension: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, url: { min: 1, type: [{ code: "uri" }] }, "value[x]": { type: [{ code: "base64Binary" }, { code: "boolean" }, { code: "canonical" }, { code: "code" }, { code: "date" }, { code: "dateTime" }, { code: "decimal" }, { code: "id" }, { code: "instant" }, { code: "integer" }, { code: "markdown" }, { code: "oid" }, { code: "positiveInt" }, { code: "string" }, { code: "time" }, { code: "unsignedInt" }, { code: "uri" }, { code: "url" }, { code: "uuid" }, { code: "Address" }, { code: "Age" }, { code: "Annotation" }, { code: "Attachment" }, { code: "CodeableConcept" }, { code: "Coding" }, { code: "ContactPoint" }, { code: "Count" }, { code: "Distance" }, { code: "Duration" }, { code: "HumanName" }, { code: "Identifier" }, { code: "Money" }, { code: "Period" }, { code: "Quantity" }, { code: "Range" }, { code: "Ratio" }, { code: "Reference" }, { code: "SampledData" }, { code: "Signature" }, { code: "Timing" }, { code: "ContactDetail" }, { code: "Contributor" }, { code: "DataRequirement" }, { code: "Expression" }, { code: "ParameterDefinition" }, { code: "RelatedArtifact" }, { code: "TriggerDefinition" }, { code: "UsageContext" }, { code: "Dosage" }, { code: "Meta" }] } } }, HumanName: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, use: { type: [{ code: "code" }] }, text: { type: [{ code: "string" }] }, family: { type: [{ code: "string" }] }, given: { max: 9007199254740991, type: [{ code: "string" }] }, prefix: { max: 9007199254740991, type: [{ code: "string" }] }, suffix: { max: 9007199254740991, type: [{ code: "string" }] }, period: { type: [{ code: "Period" }] } } }, Identifier: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, use: { type: [{ code: "code" }] }, type: { type: [{ code: "CodeableConcept" }] }, system: { type: [{ code: "uri" }] }, value: { type: [{ code: "string" }] }, period: { type: [{ code: "Period" }] }, assigner: { type: [{ code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Organization"] }] } } }, MarketingStatus: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, country: { min: 1, type: [{ code: "CodeableConcept" }] }, jurisdiction: { type: [{ code: "CodeableConcept" }] }, status: { min: 1, type: [{ code: "CodeableConcept" }] }, dateRange: { min: 1, type: [{ code: "Period" }] }, restoreDate: { type: [{ code: "dateTime" }] } } }, Meta: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, versionId: { type: [{ code: "id" }] }, lastUpdated: { type: [{ code: "instant" }] }, source: { type: [{ code: "uri" }] }, profile: { max: 9007199254740991, type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition"] }] }, security: { max: 9007199254740991, type: [{ code: "Coding" }] }, tag: { max: 9007199254740991, type: [{ code: "Coding" }] }, project: { type: [{ code: "uri" }] }, author: { type: [{ code: "Reference" }] }, onBehalfOf: { type: [{ code: "Reference" }] }, account: { type: [{ code: "Reference" }] }, accounts: { max: 9007199254740991, type: [{ code: "Reference" }] }, compartment: { max: 9007199254740991, type: [{ code: "Reference" }] } } }, Money: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, currency: { type: [{ code: "code" }] } } }, Narrative: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, status: { min: 1, type: [{ code: "code" }] }, div: { min: 1, type: [{ code: "xhtml" }] } } }, ParameterDefinition: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, name: { type: [{ code: "code" }] }, use: { min: 1, type: [{ code: "code" }] }, min: { type: [{ code: "integer" }] }, max: { type: [{ code: "string" }] }, documentation: { type: [{ code: "string" }] }, type: { min: 1, type: [{ code: "code" }] }, profile: { type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/StructureDefinition"] }] } } }, Period: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, start: { type: [{ code: "dateTime" }] }, end: { type: [{ code: "dateTime" }] } } }, Population: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, "age[x]": { type: [{ code: "Range" }, { code: "CodeableConcept" }] }, gender: { type: [{ code: "CodeableConcept" }] }, race: { type: [{ code: "CodeableConcept" }] }, physiologicalCondition: { type: [{ code: "CodeableConcept" }] } } }, ProdCharacteristic: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, height: { type: [{ code: "Quantity" }] }, width: { type: [{ code: "Quantity" }] }, depth: { type: [{ code: "Quantity" }] }, weight: { type: [{ code: "Quantity" }] }, nominalVolume: { type: [{ code: "Quantity" }] }, externalDiameter: { type: [{ code: "Quantity" }] }, shape: { type: [{ code: "string" }] }, color: { max: 9007199254740991, type: [{ code: "string" }] }, imprint: { max: 9007199254740991, type: [{ code: "string" }] }, image: { max: 9007199254740991, type: [{ code: "Attachment" }] }, scoring: { type: [{ code: "CodeableConcept" }] } } }, ProductShelfLife: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, identifier: { type: [{ code: "Identifier" }] }, type: { min: 1, type: [{ code: "CodeableConcept" }] }, period: { min: 1, type: [{ code: "Quantity" }] }, specialPrecautionsForStorage: { max: 9007199254740991, type: [{ code: "CodeableConcept" }] } } }, Quantity: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, Range: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, low: { type: [{ code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] }, high: { type: [{ code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] } } }, Ratio: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, numerator: { type: [{ code: "Quantity" }] }, denominator: { type: [{ code: "Quantity" }] } } }, Reference: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, reference: { type: [{ code: "string" }] }, type: { type: [{ code: "uri" }] }, identifier: { type: [{ code: "Identifier" }] }, display: { type: [{ code: "string" }] } } }, RelatedArtifact: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, type: [{ code: "code" }] }, label: { type: [{ code: "string" }] }, display: { type: [{ code: "string" }] }, citation: { type: [{ code: "markdown" }] }, url: { type: [{ code: "url" }] }, document: { type: [{ code: "Attachment" }] }, resource: { type: [{ code: "canonical", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Resource"] }] } } }, SampledData: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, origin: { min: 1, type: [{ code: "Quantity", profile: ["http://hl7.org/fhir/StructureDefinition/SimpleQuantity"] }] }, period: { min: 1, type: [{ code: "decimal" }] }, factor: { type: [{ code: "decimal" }] }, lowerLimit: { type: [{ code: "decimal" }] }, upperLimit: { type: [{ code: "decimal" }] }, dimensions: { min: 1, type: [{ code: "positiveInt" }] }, data: { type: [{ code: "string" }] } } }, Signature: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, max: 9007199254740991, type: [{ code: "Coding" }] }, when: { min: 1, type: [{ code: "instant" }] }, who: { min: 1, type: [{ code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Practitioner", "http://hl7.org/fhir/StructureDefinition/PractitionerRole", "http://hl7.org/fhir/StructureDefinition/RelatedPerson", "http://hl7.org/fhir/StructureDefinition/Patient", "http://hl7.org/fhir/StructureDefinition/Device", "http://hl7.org/fhir/StructureDefinition/Organization"] }] }, onBehalfOf: { type: [{ code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Practitioner", "http://hl7.org/fhir/StructureDefinition/PractitionerRole", "http://hl7.org/fhir/StructureDefinition/RelatedPerson", "http://hl7.org/fhir/StructureDefinition/Patient", "http://hl7.org/fhir/StructureDefinition/Device", "http://hl7.org/fhir/StructureDefinition/Organization"] }] }, targetFormat: { type: [{ code: "code" }] }, sigFormat: { type: [{ code: "code" }] }, data: { type: [{ code: "base64Binary" }] } } }, SubstanceAmount: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, "amount[x]": { type: [{ code: "Quantity" }, { code: "Range" }, { code: "string" }] }, amountType: { type: [{ code: "CodeableConcept" }] }, amountText: { type: [{ code: "string" }] }, referenceRange: { type: [{ code: "SubstanceAmountReferenceRange" }] } } }, SubstanceAmountReferenceRange: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, lowLimit: { type: [{ code: "Quantity" }] }, highLimit: { type: [{ code: "Quantity" }] } } }, Timing: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, modifierExtension: { max: 9007199254740991, type: [{ code: "Extension" }] }, event: { max: 9007199254740991, type: [{ code: "dateTime" }] }, repeat: { type: [{ code: "TimingRepeat" }] }, code: { type: [{ code: "CodeableConcept" }] } } }, TimingRepeat: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, "bounds[x]": { type: [{ code: "Duration" }, { code: "Range" }, { code: "Period" }] }, count: { type: [{ code: "positiveInt" }] }, countMax: { type: [{ code: "positiveInt" }] }, duration: { type: [{ code: "decimal" }] }, durationMax: { type: [{ code: "decimal" }] }, durationUnit: { type: [{ code: "code" }] }, frequency: { type: [{ code: "positiveInt" }] }, frequencyMax: { type: [{ code: "positiveInt" }] }, period: { type: [{ code: "decimal" }] }, periodMax: { type: [{ code: "decimal" }] }, periodUnit: { type: [{ code: "code" }] }, dayOfWeek: { max: 9007199254740991, type: [{ code: "code" }] }, timeOfDay: { max: 9007199254740991, type: [{ code: "time" }] }, when: { max: 9007199254740991, type: [{ code: "code" }] }, offset: { type: [{ code: "unsignedInt" }] } } }, TriggerDefinition: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, type: { min: 1, type: [{ code: "code" }] }, name: { type: [{ code: "string" }] }, "timing[x]": { type: [{ code: "Timing" }, { code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/Schedule"] }, { code: "date" }, { code: "dateTime" }] }, data: { max: 9007199254740991, type: [{ code: "DataRequirement" }] }, condition: { type: [{ code: "Expression" }] } } }, UsageContext: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, code: { min: 1, type: [{ code: "Coding" }] }, "value[x]": { min: 1, type: [{ code: "CodeableConcept" }, { code: "Quantity" }, { code: "Range" }, { code: "Reference", targetProfile: ["http://hl7.org/fhir/StructureDefinition/PlanDefinition", "http://hl7.org/fhir/StructureDefinition/ResearchStudy", "http://hl7.org/fhir/StructureDefinition/InsurancePlan", "http://hl7.org/fhir/StructureDefinition/HealthcareService", "http://hl7.org/fhir/StructureDefinition/Group", "http://hl7.org/fhir/StructureDefinition/Location", "http://hl7.org/fhir/StructureDefinition/Organization"] }] } } }, MoneyQuantity: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, SimpleQuantity: { elements: { id: { type: [{ code: "string" }] }, extension: { max: 9007199254740991, type: [{ code: "Extension" }] }, value: { type: [{ code: "decimal" }] }, comparator: { max: 0, type: [{ code: "code" }] }, unit: { type: [{ code: "string" }] }, system: { type: [{ code: "uri" }] }, code: { type: [{ code: "code" }] } } }, IdentityProvider: { elements: { authorizeUrl: { min: 1, type: [{ code: "string" }] }, tokenUrl: { min: 1, type: [{ code: "string" }] }, tokenAuthMethod: { type: [{ code: "code" }] }, userInfoUrl: { min: 1, type: [{ code: "string" }] }, clientId: { min: 1, type: [{ code: "string" }] }, clientSecret: { min: 1, type: [{ code: "string" }] }, usePkce: { type: [{ code: "boolean" }] }, useSubject: { type: [{ code: "boolean" }] } } } };
function ar(r3) {
  return new or(r3).parse();
}
var le = mn(hn), cr = /* @__PURE__ */ Object.create(null), yn = /* @__PURE__ */ Object.create(null), io = { "http://hl7.org/fhir/StructureDefinition/MoneyQuantity": "MoneyQuantity", "http://hl7.org/fhir/StructureDefinition/SimpleQuantity": "SimpleQuantity", "http://hl7.org/fhir/uv/sql-on-fhir/StructureDefinition/ViewDefinition": "ViewDefinition" };
function Tn(r3) {
  let e;
  return e = yn[r3], e || (e = yn[r3] = /* @__PURE__ */ Object.create(null)), e;
}
function ur(r3) {
  var _a;
  let t = (Array.isArray(r3) ? r3 : ((_a = r3.entry) == null ? void 0 : _a.map((n) => n.resource)) ?? []).filter((n) => (n == null ? void 0 : n.resourceType) === "StructureDefinition");
  Pn(t);
  for (let n of t)
    lr(n);
}
function lr(r3) {
  var _a, _b;
  if (!(r3 == null ? void 0 : r3.name))
    throw new Error("Failed loading StructureDefinition from bundle");
  if (r3.resourceType !== "StructureDefinition")
    return;
  let e = ar(r3), t = io[r3.url], n, i;
  t ? (n = le, i = t) : r3.url === `http://hl7.org/fhir/StructureDefinition/${r3.type}` || r3.url === `https://medplum.com/fhir/StructureDefinition/${r3.type}` || ((_a = r3.type) == null ? void 0 : _a.startsWith("http://")) || ((_b = r3.type) == null ? void 0 : _b.startsWith("https://")) ? (n = le, i = r3.type) : (n = Tn(r3.url), i = r3.type), n[i] = e;
  for (let o of e.innerTypes)
    o.parentType = e, n[o.name] = o;
  cr[r3.url] = e;
}
function En(r3) {
  return !!le[r3];
}
function Le(r3, e) {
  if (e) {
    let t = Tn(e)[r3];
    if (t)
      return t;
  }
  return le[r3];
}
function X(r3, e) {
  let t = Le(r3, e);
  if (!t)
    throw new d(E("Unknown data type: " + r3));
  return t;
}
function Rn(r3) {
  return !!cr[r3];
}
function Cn(r3) {
  return cr[r3];
}
var or = class {
  constructor(e) {
    var _a;
    if (!((_a = e.snapshot) == null ? void 0 : _a.element) || e.snapshot.element.length === 0)
      throw new Error(`No snapshot defined for StructureDefinition '${e.name}'`);
    this.root = e.snapshot.element[0], this.elements = e.snapshot.element.slice(1), this.elementIndex = /* @__PURE__ */ Object.create(null), this.index = 0, this.resourceSchema = { name: e.name, path: this.root.path, title: e.title, type: e.type, url: e.url, version: e.version, kind: e.kind, description: co(e), elements: {}, constraints: this.parseElementDefinition(this.root).constraints, innerTypes: [], summaryProperties: /* @__PURE__ */ new Set(), mandatoryProperties: /* @__PURE__ */ new Set() }, this.innerTypes = [];
  }
  parse() {
    var _a, _b, _c, _d, _e;
    let e = this.next();
    for (; e; ) {
      if (e.sliceName)
        this.parseSliceStart(e);
      else if ((_a = e.id) == null ? void 0 : _a.includes(":")) {
        if ((_b = this.slicingContext) == null ? void 0 : _b.current) {
          let t = ir(e, this.slicingContext.path);
          this.slicingContext.current.elements[t] = this.parseElementDefinition(e);
        }
      } else {
        let t = this.parseElementDefinition(e);
        this.checkFieldEnter(e, t);
        let n = this.backboneContext;
        for (; n; ) {
          if ((_c = e.path) == null ? void 0 : _c.startsWith(n.path + ".")) {
            n.type.elements[ir(e, n.path)] = t;
            break;
          }
          n = n.parent;
        }
        if (!n) {
          let i = ir(e, this.root.path);
          e.isSummary && ((_d = this.resourceSchema.summaryProperties) == null ? void 0 : _d.add(i.replace("[x]", ""))), t.min > 0 && ((_e = this.resourceSchema.mandatoryProperties) == null ? void 0 : _e.add(i.replace("[x]", ""))), this.resourceSchema.elements[i] = t;
        }
        this.checkFieldExit(e);
      }
      e = this.next();
    }
    return this.checkFieldExit(), this.innerTypes.length > 0 && (this.resourceSchema.innerTypes = this.innerTypes), this.resourceSchema;
  }
  checkFieldEnter(e, t) {
    this.isInnerType(e) && this.enterInnerType(e), this.slicingContext && !Pe(this.slicingContext.path, e == null ? void 0 : e.path) && (this.slicingContext = void 0), e.slicing && !this.slicingContext && this.enterSlice(e, t);
  }
  enterInnerType(e) {
    var _a, _b, _c;
    for (; this.backboneContext && !Pe((_a = this.backboneContext) == null ? void 0 : _a.path, e.path); )
      this.innerTypes.push(this.backboneContext.type), this.backboneContext = this.backboneContext.parent;
    let t = sr(e);
    this.backboneContext = { type: { name: t, type: t, path: e.path, title: e.label, description: e.definition, elements: {}, constraints: this.parseElementDefinition(e).constraints, innerTypes: [] }, path: e.path, parent: Pe((_b = this.backboneContext) == null ? void 0 : _b.path, e.path) ? this.backboneContext : (_c = this.backboneContext) == null ? void 0 : _c.parent };
  }
  enterSlice(e, t) {
    var _a, _b, _c, _d;
    ao(e) && !((_a = this.peek()) == null ? void 0 : _a.sliceName) || (t.slicing = { discriminator: (((_b = e.slicing) == null ? void 0 : _b.discriminator) ?? []).map((n) => {
      if (n.type !== "value" && n.type !== "pattern" && n.type !== "type")
        throw new Error(`Unsupported slicing discriminator type: ${n.type}`);
      return { path: n.path, type: n.type };
    }), slices: [], ordered: ((_c = e.slicing) == null ? void 0 : _c.ordered) ?? false, rule: (_d = e.slicing) == null ? void 0 : _d.rules }, this.slicingContext = { field: t.slicing, path: e.path ?? "" });
  }
  checkFieldExit(e = void 0) {
    if (this.backboneContext && !Pe(this.backboneContext.path, e == null ? void 0 : e.path))
      if (this.backboneContext.parent)
        do
          this.innerTypes.push(this.backboneContext.type), this.backboneContext = this.backboneContext.parent;
        while (this.backboneContext && !Pe(this.backboneContext.path, e == null ? void 0 : e.path));
      else
        this.innerTypes.push(this.backboneContext.type), this.backboneContext = void 0;
  }
  next() {
    let e = this.peek();
    if (e)
      return this.index++, e;
  }
  peek() {
    var _a, _b, _c, _d, _e;
    let e = this.elements[this.index];
    if (e) {
      if (this.elementIndex[e.path ?? ""] = e, e.contentReference) {
        let t = e.contentReference.slice(e.contentReference.indexOf("#") + 1), n = this.elementIndex[t];
        return n ? { ...n, id: e.id, path: e.path, min: e.min ?? n.min, max: e.max ?? n.max, base: { path: ((_a = n.base) == null ? void 0 : _a.path) ?? t, min: ((_b = e.base) == null ? void 0 : _b.min) ?? ((_c = n.base) == null ? void 0 : _c.min) ?? n.min, max: ((_d = e.base) == null ? void 0 : _d.max) ?? ((_e = n.base) == null ? void 0 : _e.max) ?? n.max }, contentReference: e.contentReference, definition: e.definition } : void 0;
      }
      return e;
    }
  }
  isInnerType(e) {
    var _a;
    let t = this.peek();
    return !!(Pe(e == null ? void 0 : e.path, t == null ? void 0 : t.path) && ((_a = e.type) == null ? void 0 : _a.some((n) => ["BackboneElement", "Element"].includes(n.code))));
  }
  parseSliceStart(e) {
    if (!this.slicingContext)
      throw new Error(`Invalid slice start before discriminator: ${e.sliceName} (${e.id})`);
    this.slicingContext.current = { ...this.parseElementDefinition(e), name: e.sliceName ?? "", definition: e.definition, elements: {} }, this.slicingContext.field.slices.push(this.slicingContext.current);
  }
  parseElementDefinitionType(e) {
    return (e.type ?? []).map((t) => {
      var _a;
      let n;
      return (t.code === "BackboneElement" || t.code === "Element") && (n = sr(e)), n || (n = (_a = ee(t, "http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type")) == null ? void 0 : _a.valueUrl), n || (n = t.code ?? ""), { code: n, targetProfile: t.targetProfile, profile: t.profile };
    });
  }
  parseElementDefinition(e) {
    var _a, _b;
    let t = xn(e.max), n = ((_a = e.base) == null ? void 0 : _a.max) ? xn(e.base.max) : t, i = { type: "ElementDefinition", value: e };
    return { description: e.definition || "", path: e.path || ((_b = e.base) == null ? void 0 : _b.path) || "", min: e.min ?? 0, max: t, isArray: n > 1, constraints: (e.constraint ?? []).map((o) => ({ key: o.key ?? "", severity: o.severity ?? "error", expression: o.expression ?? "", description: o.human ?? "" })), type: this.parseElementDefinitionType(e), fixed: vn(P$1(i, "fixed[x]")), pattern: vn(P$1(i, "pattern[x]")), binding: e.binding };
  }
};
function xn(r3) {
  return r3 === "*" ? Number.POSITIVE_INFINITY : Number.parseInt(r3, 10);
}
function ir(r3, e = "") {
  return so(r3.path, e);
}
function so(r3, e) {
  return r3 ? e && r3.startsWith(e) ? r3.substring(e.length + 1) : r3 : "";
}
function Pe(r3, e) {
  return !r3 || !e ? false : e.startsWith(r3 + ".") || e === r3;
}
function vn(r3) {
  return Array.isArray(r3) && r3.length > 0 ? r3[0] : S(r3) ? void 0 : r3;
}
function ao(r3) {
  var _a, _b;
  let e = (_a = r3.slicing) == null ? void 0 : _a.discriminator;
  return !!(((_b = r3.type) == null ? void 0 : _b.some((t) => t.code === "Extension")) && (e == null ? void 0 : e.length) === 1 && e[0].type === "value" && e[0].path === "url");
}
function co(r3) {
  let e = r3.description;
  return (e == null ? void 0 : e.startsWith(`Base StructureDefinition for ${r3.name} Type: `)) && (e = e.substring(`Base StructureDefinition for ${r3.name} Type: `.length)), e;
}
function we(r3, e, t) {
  if (r3 === void 0)
    return [void 0];
  if (e === "$this")
    return [r3];
  let n = (t == null ? void 0 : t.withPath) ? po : P$1, [i, ...o] = e.split("."), s = [n(r3, i, t)];
  for (let a of o) {
    let c = [];
    for (let u of s)
      if (Array.isArray(u))
        for (let l of u)
          c.push(n(l, a, t));
      else
        ((t == null ? void 0 : t.withPath) && u && u.value !== void 0 || !(t == null ? void 0 : t.withPath) && u !== void 0) && c.push(n(u, a, t));
    s = c;
  }
  return s;
}
function po(r3, e, t) {
  let n = r3.path;
  return fo(P$1(r3, e, t), n, e);
}
function fo(r3, e, t) {
  let n = e ? e + "." : "";
  return r3 === void 0 ? { type: "undefined", value: void 0, path: `${n}${t}` } : Array.isArray(r3) ? r3.map((i, o) => ({ ...i, path: `${n}${t}[${o}]` })) : { ...r3, path: `${n}${t}` };
}
var it = { base64Binary: /^([A-Za-z\d+/]{4})*([A-Za-z\d+/]{2}==|[A-Za-z\d+/]{3}=)?$/, canonical: /^\S*$/, code: /^[^\s]+( [^\s]+)*$/, date: /^(\d(\d(\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\d|3[0-1]))?)?$/, dateTime: /^(\d(\d(\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\d|3[0-1])(T([01]\d|2[0-3])(:[0-5]\d:([0-5]\d|60)(\.\d{1,9})?)?)?)?(Z|[+-]((0\d|1[0-3]):[0-5]\d|14:00)?)?)?$/, id: /^[A-Za-z0-9\-.]{1,64}$/, instant: /^(\d(\d(\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\d|3[0-1])T([01]\d|2[0-3]):[0-5]\d:([0-5]\d|60)(\.\d{1,9})?(Z|[+-]((0\d|1[0-3]):[0-5]\d|14:00))$/, markdown: /^[\s\S]+$/, oid: /^urn:oid:[0-2](\.(0|[1-9]\d*))+$/, string: /^[\s\S]+$/, time: /^([01]\d|2[0-3]):[0-5]\d:([0-5]\d|60)(\.\d{1,9})?$/, uri: /^\S*$/, url: /^\S*$/, uuid: /^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/, xhtml: /.*/ };
function yr(r3, e, t, n) {
  var _a;
  if (Array.isArray(r3))
    return false;
  let i;
  e.path === "$this" ? i = t : i = (n ?? t.elements)[e.path];
  let o = t.type;
  switch (e.type) {
    case "value":
    case "pattern":
      if (!r3 || !i)
        return false;
      if (i.pattern)
        return Ue$1(r3, i.pattern);
      if (i.fixed)
        return te(r3, i.fixed);
      if (((_a = i.binding) == null ? void 0 : _a.strength) === "required" && i.binding.valueSet)
        return true;
      break;
    case "type":
      return !r3 || !(o == null ? void 0 : o.length) ? false : o.some((s) => s.code === r3.type);
  }
  return false;
}
function f(r3) {
  return [{ type: p.boolean, value: r3 }];
}
function g(r3) {
  return r3 == null ? { type: "undefined", value: void 0 } : Number.isSafeInteger(r3) ? { type: p.integer, value: r3 } : typeof r3 == "number" ? { type: p.decimal, value: r3 } : typeof r3 == "boolean" ? { type: p.boolean, value: r3 } : typeof r3 == "string" ? { type: p.string, value: r3 } : V(r3) ? { type: p.Quantity, value: r3 } : k(r3) ? { type: r3.resourceType, value: r3 } : Sr(r3) ? { type: p.CodeableConcept, value: r3 } : Tr(r3) ? { type: p.Coding, value: r3 } : { type: p.BackboneElement, value: r3 };
}
function N$1(r3) {
  return r3.length === 0 ? false : !!r3[0].value;
}
function $(r3, e) {
  if (r3.length !== 0) {
    if (r3.length === 1 && (!e || r3[0].type === e))
      return r3[0];
    throw new Error(`Expected singleton of type ${e}, but found ${JSON.stringify(r3)}`);
  }
}
function P$1(r3, e, t) {
  if (!r3.value)
    return;
  let n = at(r3.type, e, t == null ? void 0 : t.profileUrl);
  return n ? To(r3, e, n) : So(r3, e);
}
function To(r3, e, t) {
  let n = r3.value, i = t.type;
  if (!i || i.length === 0)
    return;
  let o, s = "undefined", a, c = t.path.lastIndexOf("."), u = t.path.substring(c + 1);
  for (let l of i) {
    let m2 = u.replace("[x]", I$1(l.code));
    if (o = n[m2], a = n["_" + m2], o !== void 0 || a !== void 0) {
      s = l.code;
      break;
    }
  }
  if (a)
    if (Array.isArray(o)) {
      o = o.slice();
      for (let l = 0; l < Math.max(o.length, a.length); l++)
        o[l] = Vn(o[l], a[l]);
    } else
      o = Vn(o, a);
  if (!S(o))
    return (s === "Element" || s === "BackboneElement") && (s = t.type[0].code), Array.isArray(o) ? o.map((l) => An(l, s)) : An(o, s);
}
function An(r3, e) {
  return e === "Resource" && k(r3) && (e = r3.resourceType), { type: e, value: r3 };
}
function So(r3, e) {
  let t = r3.value;
  if (!t || typeof t != "object")
    return;
  let n;
  if (e in t) {
    let i = t[e];
    Array.isArray(i) ? n = i.map(g) : n = g(i);
  } else {
    let i = e.endsWith("[x]") ? e.substring(0, e.length - 3) : e;
    for (let o of Object.values(p)) {
      let s = i + I$1(o);
      if (s in t) {
        let a = t[s];
        Array.isArray(a) ? n = a.map((c) => ({ type: o, value: c })) : n = { type: o, value: a };
        break;
      }
    }
  }
  if (Array.isArray(n)) {
    if (n.length === 0 || S(n[0]))
      return;
  } else if (S(n))
    return;
  return n;
}
function ot(r3) {
  let e = [];
  for (let t of r3) {
    let n = false;
    for (let i of e)
      if (N$1(gr(t, i))) {
        n = true;
        break;
      }
    n || e.push(t);
  }
  return e;
}
function Dn(r3) {
  return f(!N$1(r3));
}
function Mn(r3, e) {
  return r3.length === 0 || e.length === 0 ? [] : r3.length !== e.length ? f(false) : f(r3.every((t, n) => N$1(gr(t, e[n]))));
}
function _n(r3, e) {
  return r3.length === 0 || e.length === 0 ? [] : r3.length !== e.length ? f(true) : f(r3.some((t, n) => !N$1(gr(t, e[n]))));
}
function gr(r3, e) {
  var _a, _b;
  let t = (_a = r3.value) == null ? void 0 : _a.valueOf(), n = (_b = e.value) == null ? void 0 : _b.valueOf();
  return typeof t == "number" && typeof n == "number" ? f(Math.abs(t - n) < 1e-8) : V(t) && V(n) ? f(Fn(t, n)) : f(typeof t == "object" && typeof n == "object" ? vr(r3, e) : t === n);
}
function xr(r3, e) {
  return r3.length === 0 && e.length === 0 ? f(true) : r3.length !== e.length ? f(false) : (r3.sort(On), e.sort(On), f(r3.every((t, n) => N$1(Eo(t, e[n])))));
}
function Eo(r3, e) {
  let { type: t, value: n } = r3, { type: i, value: o } = e, s = n == null ? void 0 : n.valueOf(), a = o == null ? void 0 : o.valueOf();
  return typeof s == "number" && typeof a == "number" ? f(Math.abs(s - a) < 0.01) : V(s) && V(a) ? f(Fn(s, a)) : f(t === "Coding" && i === "Coding" ? typeof s != "object" || typeof a != "object" ? false : s.code === a.code && s.system === a.system : typeof s == "object" && typeof a == "object" ? vr({ ...s, id: void 0 }, { ...a, id: void 0 }) : typeof s == "string" && typeof a == "string" ? s.toLowerCase() === a.toLowerCase() : s === a);
}
function On(r3, e) {
  var _a, _b;
  let t = (_a = r3.value) == null ? void 0 : _a.valueOf(), n = (_b = e.value) == null ? void 0 : _b.valueOf();
  return typeof t == "number" && typeof n == "number" ? t - n : typeof t == "string" && typeof n == "string" ? t.localeCompare(n) : 0;
}
function st(r3, e) {
  let { value: t } = r3;
  if (t == null)
    return false;
  switch (e) {
    case "Boolean":
      return typeof t == "boolean";
    case "Decimal":
    case "Integer":
      return typeof t == "number";
    case "Date":
      return Nn(t);
    case "DateTime":
      return Ae(t);
    case "Time":
      return typeof t == "string" && !!/^T\d/.exec(t);
    case "Period":
      return Ln(t);
    case "Quantity":
      return V(t);
    default:
      return r3.type === e || typeof t == "object" && (t == null ? void 0 : t.resourceType) === e;
  }
}
function Nn(r3) {
  return typeof r3 == "string" && !!it.date.exec(r3);
}
function Ae(r3) {
  return typeof r3 == "string" && !!it.dateTime.exec(r3);
}
function Ln(r3) {
  return !!(r3 && typeof r3 == "object" && ("start" in r3 && Ae(r3.start) || "end" in r3 && Ae(r3.end)));
}
function V(r3) {
  return !!(r3 && typeof r3 == "object" && "value" in r3 && typeof r3.value == "number");
}
function Fn(r3, e) {
  return Math.abs(r3.value - e.value) < 0.01 && (r3.unit === e.unit || r3.code === e.code || r3.unit === e.code || r3.code === e.unit);
}
function vr(r3, e) {
  let t = Object.keys(r3), n = Object.keys(e);
  if (t.length !== n.length)
    return false;
  for (let i of t) {
    let o = r3[i], s = e[i];
    if (kn(o) && kn(s)) {
      if (!vr(o, s))
        return false;
    } else if (o !== s)
      return false;
  }
  return true;
}
function kn(r3) {
  return r3 !== null && typeof r3 == "object";
}
function Vn(r3, e) {
  if (e) {
    if (typeof e != "object")
      throw new Error("Primitive extension must be an object");
    return bo(r3 ?? {}, e);
  }
  return r3;
}
function bo(r3, e) {
  return delete e.__proto__, delete e.constructor, Object.assign(r3, e);
}
function re(r3) {
  let e = de(r3), t = Co(r3);
  return t === e ? { reference: e } : { reference: e, display: t };
}
function de(r3) {
  return pe(r3) ? r3.reference : `${r3.resourceType}/${r3.id}`;
}
function fe$1(r3) {
  if (r3)
    return pe(r3) ? r3.reference.split("/")[1] : r3.id;
}
function Ro(r3) {
  return r3.resourceType === "Patient" || r3.resourceType === "Practitioner" || r3.resourceType === "RelatedPerson";
}
function Co(r3) {
  if (Ro(r3)) {
    let e = Po(r3);
    if (e)
      return e;
  }
  if (r3.resourceType === "Device") {
    let e = wo(r3);
    if (e)
      return e;
  }
  if (r3.resourceType === "MedicationRequest" && r3.medicationCodeableConcept)
    return Be(r3.medicationCodeableConcept);
  if (r3.resourceType === "Subscription" && r3.criteria)
    return r3.criteria;
  if (r3.resourceType === "User" && r3.email)
    return r3.email;
  if ("name" in r3 && r3.name && typeof r3.name == "string")
    return r3.name;
  if ("code" in r3 && r3.code) {
    let e = r3.code;
    if (Array.isArray(e) && (e = e[0]), Sr(e))
      return Be(e);
    if (No(e))
      return e.text;
  }
  return de(r3);
}
function Po(r3) {
  let e = r3.name;
  if (e && e.length > 0)
    return qe(e[0]);
}
function wo(r3) {
  let e = r3.deviceName;
  if (e && e.length > 0)
    return e[0].name;
}
function Hu(r3) {
  if (!("photo" in r3))
    return;
  let e = r3.photo;
  if (e)
    if (Array.isArray(e))
      for (let t of e) {
        let n = Un(t);
        if (n)
          return n;
      }
    else
      return Un(e);
}
function Un(r3) {
  var _a;
  if (r3.url && ((_a = r3.contentType) == null ? void 0 : _a.startsWith("image/")))
    return r3.url;
}
function ct(r3, e) {
  let t = new Date(r3);
  t.setUTCHours(0, 0, 0, 0);
  let n = e ? new Date(e) : /* @__PURE__ */ new Date();
  n.setUTCHours(0, 0, 0, 0);
  let i = t.getUTCFullYear(), o = t.getUTCMonth(), s = t.getUTCDate(), a = n.getUTCFullYear(), c = n.getUTCMonth(), u = n.getUTCDate(), l = a - i;
  (c < o || c === o && u < s) && l--;
  let m2 = a * 12 + c - (i * 12 + o);
  u < s && m2--;
  let x = Math.floor((n.getTime() - t.getTime()) / (1e3 * 60 * 60 * 24));
  return { years: l, months: m2, days: x };
}
function ee(r3, ...e) {
  var _a;
  let t = r3;
  for (let n = 0; n < e.length && t; n++)
    t = (_a = t == null ? void 0 : t.extension) == null ? void 0 : _a.find((i) => i.url === e[n]);
  return t;
}
function ut(r3, e) {
  return JSON.stringify(r3, Oo, e ? 2 : void 0) ?? "";
}
function Oo(r3, e) {
  return !Io(r3) && S(e) ? void 0 : e;
}
function Io(r3) {
  return !!/\d+$/.exec(r3);
}
function S(r3) {
  if (r3 == null)
    return true;
  let e = typeof r3;
  return e === "string" || e === "object" ? !z(r3) : false;
}
function z(r3) {
  if (r3 == null)
    return false;
  let e = typeof r3;
  return e === "string" && r3 !== "" || e === "object" && ("length" in r3 && r3.length > 0 || Object.keys(r3).length > 0);
}
function te(r3, e, t) {
  return r3 === e || S(r3) && S(e) ? true : S(r3) || S(e) ? false : Array.isArray(r3) && Array.isArray(e) ? ko(r3, e) : Array.isArray(r3) || Array.isArray(e) ? false : R(r3) && R(e) ? Vo(r3, e, t) : false;
}
function ko(r3, e) {
  if (r3.length !== e.length)
    return false;
  for (let t = 0; t < r3.length; t++)
    if (!te(r3[t], e[t]))
      return false;
  return true;
}
function Vo(r3, e, t) {
  let n = /* @__PURE__ */ new Set();
  Object.keys(r3).forEach((i) => n.add(i)), Object.keys(e).forEach((i) => n.add(i)), t === "meta" && (n.delete("versionId"), n.delete("lastUpdated"), n.delete("author"));
  for (let i of n) {
    let o = r3[i], s = e[i];
    if (!te(o, s, i))
      return false;
  }
  return true;
}
function Ue$1(r3, e) {
  return S(r3) ? true : S(e) ? false : Array.isArray(r3) && Array.isArray(e) ? Do(r3, e) : Array.isArray(r3) || Array.isArray(e) ? false : R(r3) && R(e) ? Mo(r3, e) : R(r3) || R(e) ? false : r3 === e;
}
function Do(r3, e) {
  return e.every((t) => r3.some((n) => Ue$1(n, t)));
}
function Mo(r3, e) {
  return Object.entries(e).every(([t, n]) => t in r3 && Ue$1(r3[t], n));
}
function me$1(r3) {
  return r3 === void 0 ? r3 : JSON.parse(JSON.stringify(r3));
}
function Xu(r3) {
  return !!/^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/i.exec(r3);
}
function R(r3) {
  return r3 !== null && typeof r3 == "object";
}
function Tr(r3) {
  return R(r3) && "code" in r3 && typeof r3.code == "string";
}
function Sr(r3) {
  return R(r3) && "coding" in r3 && Array.isArray(r3.coding) && r3.coding.every(Tr);
}
function No(r3) {
  return R(r3) && "text" in r3 && typeof r3.text == "string";
}
var Wn = [];
for (let r3 = 0; r3 < 256; r3++)
  Wn.push(r3.toString(16).padStart(2, "0"));
function $n(r3) {
  let e = Hn(r3), t = new Uint8Array(e), n = new Array(t.length);
  for (let i = 0; i < t.length; i++)
    n[i] = Wn[t[i]];
  return n.join("");
}
function Gn(r3) {
  let e = Hn(r3), t = new Uint8Array(e), n = new Array(t.length);
  for (let i = 0; i < t.length; i++)
    n[i] = String.fromCharCode(t[i]);
  return window.btoa(n.join(""));
}
function Hn(r3) {
  return ArrayBuffer.isView(r3) ? r3.buffer : r3;
}
function I$1(r3) {
  return r3 ? r3.charAt(0).toUpperCase() + r3.substring(1) : "";
}
function Oe$1(r3, e) {
  let t = r3 + ".";
  if (e.startsWith(t))
    return e.slice(t.length);
}
var Rr = (r3) => new Promise((e) => {
  setTimeout(e, r3);
});
function Cr(r3, e, t) {
  let n = [];
  for (let i = 0; i < t - 1; i++) {
    let o = r3.indexOf(e);
    if (o < 0)
      break;
    n.push(r3.slice(0, o)), r3 = r3.slice(o + e.length);
  }
  return n.push(r3), n;
}
function lt(r3) {
  return r3.sort((e, t) => e.localeCompare(t));
}
function Pr(r3) {
  return r3.endsWith("/") ? r3 : r3 + "/";
}
function jo(r3) {
  return r3.startsWith("/") ? r3.slice(1) : r3;
}
function q$1(r3, e) {
  return new URL(jo(e), Pr(r3.toString())).toString();
}
function Jn(r3, e) {
  return q$1(r3, e).toString().replace("http://", "ws://").replace("https://", "wss://");
}
function Yn(r3) {
  return typeof r3 == "object" && !Array.isArray(r3) && !(r3 instanceof URLSearchParams) && (r3 = Object.fromEntries(Object.entries(r3).filter((e) => e[1] !== void 0))), new URLSearchParams(r3).toString();
}
function Go(r3, e) {
  let t = [];
  if (r3.line && t.push(...r3.line), r3.city || r3.state || r3.postalCode) {
    let n = [];
    r3.city && n.push(r3.city), r3.state && n.push(r3.state), r3.postalCode && n.push(r3.postalCode), t.push(n.join(", "));
  }
  return r3.use && ((e == null ? void 0 : e.all) || (e == null ? void 0 : e.use)) && t.push("[" + r3.use + "]"), t.join((e == null ? void 0 : e.lineSeparator) ?? ", ").trim();
}
function qe(r3, e) {
  let t = [];
  if (r3.prefix && (e == null ? void 0 : e.prefix) !== false && t.push(...r3.prefix), r3.given && t.push(...r3.given), r3.family && t.push(r3.family), r3.suffix && (e == null ? void 0 : e.suffix) !== false && t.push(...r3.suffix), r3.use && ((e == null ? void 0 : e.all) || (e == null ? void 0 : e.use)) && t.push("[" + r3.use + "]"), t.length === 0) {
    let n = he(r3.text);
    if (n)
      return n;
  }
  return t.join(" ").trim();
}
function Ar(r3) {
  return r3 instanceof Date && !isNaN(r3.getTime());
}
function Tl(r3, e, t) {
  if (!r3)
    return "";
  let n = new Date(r3);
  return Ar(n) ? (n.setUTCHours(0, 0, 0, 0), n.toLocaleDateString(e, { timeZone: "UTC", ...t })) : "";
}
function Ho(r3, e, t) {
  if (!r3)
    return "";
  let n = /* @__PURE__ */ new Date("2000-01-01T" + r3 + "Z");
  return Ar(n) ? n.toLocaleTimeString(e, t) : "";
}
function wr(r3, e, t) {
  if (!r3)
    return "";
  let n = new Date(r3);
  return Ar(n) ? n.toLocaleString(e, t) : "";
}
function Sl(r3, e, t) {
  return !r3 || !r3.start && !r3.end ? "" : wr(r3.start, e, t) + " - " + wr(r3.end, e, t);
}
var Qo = { s: "every second", min: "every minute", h: "hourly", d: "daily", wk: "weekly", mo: "monthly", a: "annually" }, Ko = { s: "second", min: "minute", h: "hour", d: "day", wk: "week", mo: "month", a: "year" }, zo = { s: "seconds", min: "minutes", h: "hours", d: "days", wk: "weeks", mo: "months", a: "years" };
function El(r3) {
  if (!r3)
    return "";
  let e = [];
  return Jo(e, r3.repeat), r3.event && e.push(r3.event.map((t) => wr(t)).join(", ")), I$1(e.join(" ").trim());
}
function Jo(r3, e) {
  if (!(e == null ? void 0 : e.periodUnit))
    return;
  let t = e.frequency ?? 1, n = e.period ?? 1, i = e.periodUnit;
  t === 1 && n === 1 ? r3.push(Qo[i]) : (t === 1 ? r3.push("once") : r3.push(t + " times"), n === 1 ? r3.push("per " + Ko[i]) : r3.push("per " + n + " " + zo[i])), e.dayOfWeek && r3.push("on " + e.dayOfWeek.map(I$1).join(", ")), e.timeOfDay && r3.push("at " + e.timeOfDay.map((o) => Ho(o)).join(", "));
}
function bl(r3, e, t = false) {
  if (t && e === void 0)
    throw new Error("Precision must be specified for exclusive ranges");
  let n = (r3 == null ? void 0 : r3.low) && { ...r3.low, comparator: void 0 }, i = (r3 == null ? void 0 : r3.high) && { ...r3.high, comparator: void 0 };
  return (n == null ? void 0 : n.value) === void 0 && (i == null ? void 0 : i.value) === void 0 ? "" : (n == null ? void 0 : n.value) !== void 0 && (i == null ? void 0 : i.value) === void 0 ? t && e !== void 0 ? (n.value = Xo(n.value, e), `> ${ne(n, e)}`) : `>= ${ne(n, e)}` : (n == null ? void 0 : n.value) === void 0 && (i == null ? void 0 : i.value) !== void 0 ? t && e !== void 0 ? (i.value = Zo(i.value, e), `< ${ne(i, e)}`) : `<= ${ne(i, e)}` : ((n == null ? void 0 : n.unit) === (i == null ? void 0 : i.unit) && (n == null ? true : delete n.unit), `${ne(n, e)} - ${ne(i, e)}`);
}
function ne(r3, e) {
  if (!r3)
    return "";
  let t = [];
  return r3.comparator && (t.push(r3.comparator), t.push(" ")), r3.value !== void 0 && (e !== void 0 ? t.push(r3.value.toFixed(e)) : t.push(r3.value)), r3.unit && (r3.unit !== "%" && t[t.length - 1] !== " " && t.push(" "), t.push(r3.unit)), t.join("").trim();
}
function Rl(r3) {
  return (r3 == null ? void 0 : r3.value) === void 0 ? "" : r3.value.toLocaleString(void 0, { style: "currency", currency: r3.currency ?? "USD", currencyDisplay: "narrowSymbol" });
}
function Be(r3) {
  if (!r3)
    return "";
  let e = he(r3.text);
  return e || (r3.coding ? r3.coding.map((t) => Zn(t)).join(", ") : "");
}
function Zn(r3, e) {
  let t = he(r3 == null ? void 0 : r3.display);
  if (t) {
    let n = e ? he(r3 == null ? void 0 : r3.code) : void 0;
    return `${t}${n ? " (" + n + ")" : ""}`;
  }
  return he(r3 == null ? void 0 : r3.code) ?? "";
}
function he(r3) {
  return typeof r3 == "string" ? r3 : void 0;
}
function Zo(r3, e, t = 1) {
  return (Xn(r3, e) + t) * Math.pow(10, -e);
}
function Xo(r3, e, t = 1) {
  return (Xn(r3, e) - t) * Math.pow(10, -e);
}
function Xn(r3, e) {
  return e === void 0 ? r3 : Math.round(r3 * Math.pow(10, e));
}
var p = { Address: "Address", Age: "Age", Annotation: "Annotation", Attachment: "Attachment", BackboneElement: "BackboneElement", CodeableConcept: "CodeableConcept", Coding: "Coding", ContactDetail: "ContactDetail", ContactPoint: "ContactPoint", Contributor: "Contributor", Count: "Count", DataRequirement: "DataRequirement", Distance: "Distance", Dosage: "Dosage", Duration: "Duration", Expression: "Expression", Extension: "Extension", HumanName: "HumanName", Identifier: "Identifier", MarketingStatus: "MarketingStatus", Meta: "Meta", Money: "Money", Narrative: "Narrative", ParameterDefinition: "ParameterDefinition", Period: "Period", Population: "Population", ProdCharacteristic: "ProdCharacteristic", ProductShelfLife: "ProductShelfLife", Quantity: "Quantity", Range: "Range", Ratio: "Ratio", Reference: "Reference", RelatedArtifact: "RelatedArtifact", SampledData: "SampledData", Signature: "Signature", SubstanceAmount: "SubstanceAmount", SystemString: "http://hl7.org/fhirpath/System.String", Timing: "Timing", TriggerDefinition: "TriggerDefinition", UsageContext: "UsageContext", base64Binary: "base64Binary", boolean: "boolean", canonical: "canonical", code: "code", date: "date", dateTime: "dateTime", decimal: "decimal", id: "id", instant: "instant", integer: "integer", markdown: "markdown", oid: "oid", positiveInt: "positiveInt", string: "string", time: "time", unsignedInt: "unsignedInt", uri: "uri", url: "url", uuid: "uuid" };
function Pn(r3) {
  var _a;
  let e = Array.isArray(r3) ? r3 : ((_a = r3.entry) == null ? void 0 : _a.map((t) => t.resource)) ?? [];
  for (let t of e)
    (t == null ? void 0 : t.resourceType) === "StructureDefinition" && t.kind === "resource" && ti(t.type);
}
function ti(r3) {
  let e = L.types[r3];
  return e || (e = { searchParamsDetails: {} }, L.types[r3] = e), e.searchParams || (e.searchParams = { _id: { base: [r3], code: "_id", type: "token", expression: r3 + ".id" }, _lastUpdated: { base: [r3], code: "_lastUpdated", type: "date", expression: r3 + ".meta.lastUpdated" }, _compartment: { base: [r3], code: "_compartment", type: "reference", expression: r3 + ".meta.compartment" }, _profile: { base: [r3], code: "_profile", type: "uri", expression: r3 + ".meta.profile" }, _security: { base: [r3], code: "_security", type: "token", expression: r3 + ".meta.security" }, _source: { base: [r3], code: "_source", type: "uri", expression: r3 + ".meta.source" }, _tag: { base: [r3], code: "_tag", type: "token", expression: r3 + ".meta.tag" } }), e;
}
function Or(r3) {
  for (let e of r3.base ?? []) {
    let t = ti(e);
    t.searchParams || (t.searchParams = {}), t.searchParams[r3.code] = r3;
  }
}
function sr(r3) {
  var _a, _b, _c, _d;
  let e = (_b = (_a = r3.type) == null ? void 0 : _a[0]) == null ? void 0 : _b.code;
  return e === "BackboneElement" || e === "Element" ? es((_d = ((_c = r3.base) == null ? void 0 : _c.path) ?? r3.path) == null ? void 0 : _d.split(".")) : e;
}
function es(r3) {
  return r3.length === 1 ? r3[0] : r3.map(I$1).join("");
}
function _l(r3) {
  let e = r3.replaceAll("[x]", "").split(".").pop();
  return ts(e);
}
function ts(r3) {
  let e;
  return r3.length < 100 ? e = r3.match(/[A-Z]+(?![a-z])|[A-Z]?[a-z]+|\d+/g) ?? [] : e = r3.split(/(?=[A-Z])/), e.map(ns).join(" ").replace("_", " ").replace(/\s+/g, " ");
}
var rs = /* @__PURE__ */ new Set(["ID", "IP", "PKCE", "JWKS", "URI", "URL", "OMB", "UDI"]);
function ns(r3) {
  let e = r3.toUpperCase();
  return r3 === e ? r3 : rs.has(e) ? e : e.charAt(0) + r3.slice(1);
}
function at(r3, e, t) {
  let n = Le(r3, t);
  if (n)
    return is(n.elements, e);
}
function is(r3, e) {
  let t = r3[e] ?? r3[e + "[x]"];
  if (t)
    return t;
  for (let n = 0; n < e.length; n++) {
    let i = e[n];
    if (i >= "A" && i <= "Z") {
      let o = e.slice(0, n) + "[x]", s = r3[o];
      if (s)
        return s;
    }
  }
}
function k(r3) {
  return !!(r3 && typeof r3 == "object" && "resourceType" in r3);
}
function pe(r3) {
  return !!(r3 && typeof r3 == "object" && "reference" in r3 && typeof r3.reference == "string");
}
var L = { types: {} };
function ke(r3) {
  if (r3.startsWith("T"))
    return r3 + "T00:00:00.000Z".substring(r3.length);
  if (r3.length <= 10)
    return r3;
  try {
    return new Date(r3).toISOString();
  } catch {
    return r3;
  }
}
var J = () => [], O = { empty: (r3, e) => f(e.length === 0 || e.every((t) => S(t.value))), hasValue: (r3, e) => f(e.length !== 0), exists: (r3, e, t) => t ? f(e.filter((n) => N$1(t.eval(r3, [n]))).length > 0) : f(e.length > 0 && e.every((n) => !S(n.value))), all: (r3, e, t) => f(e.every((n) => N$1(t.eval(r3, [n])))), allTrue: (r3, e) => {
  for (let t of e)
    if (!t.value)
      return f(false);
  return f(true);
}, anyTrue: (r3, e) => {
  for (let t of e)
    if (t.value)
      return f(true);
  return f(false);
}, allFalse: (r3, e) => {
  for (let t of e)
    if (t.value)
      return f(false);
  return f(true);
}, anyFalse: (r3, e) => {
  for (let t of e)
    if (!t.value)
      return f(true);
  return f(false);
}, subsetOf: (r3, e, t) => {
  if (e.length === 0)
    return f(true);
  let n = t.eval(r3, ye(r3));
  return n.length === 0 ? f(false) : f(e.every((i) => n.some((o) => o.value === i.value)));
}, supersetOf: (r3, e, t) => {
  let n = t.eval(r3, ye(r3));
  return n.length === 0 ? f(true) : e.length === 0 ? f(false) : f(n.every((i) => e.some((o) => o.value === i.value)));
}, count: (r3, e) => [{ type: p.integer, value: e.length }], distinct: (r3, e) => {
  let t = [];
  for (let n of e)
    t.some((i) => i.value === n.value) || t.push(n);
  return t;
}, isDistinct: (r3, e) => f(e.length === O.distinct(r3, e).length), where: (r3, e, t) => e.filter((n) => N$1(t.eval(r3, [n]))), select: (r3, e, t) => e.map((n) => t.eval({ parent: r3, variables: { $this: n } }, [n])).flat(), repeat: J, ofType: (r3, e, t) => e.filter((n) => n.type === t.name), single: (r3, e) => {
  if (e.length > 1)
    throw new Error("Expected input length one for single()");
  return e.length === 0 ? [] : e.slice(0, 1);
}, first: (r3, e) => e.length === 0 ? [] : e.slice(0, 1), last: (r3, e) => e.length === 0 ? [] : e.slice(e.length - 1, e.length), tail: (r3, e) => e.length === 0 ? [] : e.slice(1, e.length), skip: (r3, e, t) => {
  var _a;
  let n = (_a = t.eval(r3, e)[0]) == null ? void 0 : _a.value;
  if (typeof n != "number")
    throw new Error("Expected a number for skip(num)");
  return n >= e.length ? [] : n <= 0 ? e : e.slice(n, e.length);
}, take: (r3, e, t) => {
  var _a;
  let n = (_a = t.eval(r3, e)[0]) == null ? void 0 : _a.value;
  if (typeof n != "number")
    throw new Error("Expected a number for take(num)");
  return n >= e.length ? e : n <= 0 ? [] : e.slice(0, n);
}, intersect: (r3, e, t) => {
  if (!t)
    return e;
  let n = t.eval(r3, ye(r3)), i = [];
  for (let o of e)
    !i.some((s) => s.value === o.value) && n.some((s) => s.value === o.value) && i.push(o);
  return i;
}, exclude: (r3, e, t) => {
  if (!t)
    return e;
  let n = t.eval(r3, ye(r3)), i = [];
  for (let o of e)
    n.some((s) => s.value === o.value) || i.push(o);
  return i;
}, union: (r3, e, t) => {
  if (!t)
    return e;
  let n = t.eval(r3, ye(r3));
  return ot([...e, ...n]);
}, combine: (r3, e, t) => {
  if (!t)
    return e;
  let n = t.eval(r3, ye(r3));
  return [...e, ...n];
}, htmlChecks: (r3, e, t) => [g(true)], iif: (r3, e, t, n, i) => {
  let o = t.eval(r3, e);
  if (o.length > 1 || o.length === 1 && typeof o[0].value != "boolean")
    throw new Error("Expected criterion to evaluate to a Boolean");
  return N$1(o) ? n.eval(r3, e) : i ? i.eval(r3, e) : [];
}, toBoolean: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  if (typeof t == "boolean")
    return [{ type: p.boolean, value: t }];
  if (typeof t == "number" && (t === 0 || t === 1))
    return f(!!t);
  if (typeof t == "string") {
    let n = t.toLowerCase();
    if (["true", "t", "yes", "y", "1", "1.0"].includes(n))
      return f(true);
    if (["false", "f", "no", "n", "0", "0.0"].includes(n))
      return f(false);
  }
  return [];
}, convertsToBoolean: (r3, e) => e.length === 0 ? [] : f(O.toBoolean(r3, e).length === 1), toInteger: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return typeof t == "number" ? [{ type: p.integer, value: t }] : typeof t == "string" && /^[+-]?\d+$/.exec(t) ? [{ type: p.integer, value: parseInt(t, 10) }] : typeof t == "boolean" ? [{ type: p.integer, value: t ? 1 : 0 }] : [];
}, convertsToInteger: (r3, e) => e.length === 0 ? [] : f(O.toInteger(r3, e).length === 1), toDate: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return typeof t == "string" && /^\d{4}(-\d{2}(-\d{2})?)?/.exec(t) ? [{ type: p.date, value: ke(t) }] : [];
}, convertsToDate: (r3, e) => e.length === 0 ? [] : f(O.toDate(r3, e).length === 1), toDateTime: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return typeof t == "string" && /^\d{4}(-\d{2}(-\d{2})?)?/.exec(t) ? [{ type: p.dateTime, value: ke(t) }] : [];
}, convertsToDateTime: (r3, e) => e.length === 0 ? [] : f(O.toDateTime(r3, e).length === 1), toDecimal: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return typeof t == "number" ? [{ type: p.decimal, value: t }] : typeof t == "string" && /^-?\d{1,9}(\.\d{1,9})?$/.exec(t) ? [{ type: p.decimal, value: parseFloat(t) }] : typeof t == "boolean" ? [{ type: p.decimal, value: t ? 1 : 0 }] : [];
}, convertsToDecimal: (r3, e) => e.length === 0 ? [] : f(O.toDecimal(r3, e).length === 1), toQuantity: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return V(t) ? [{ type: p.Quantity, value: t }] : typeof t == "number" ? [{ type: p.Quantity, value: { value: t, unit: "1" } }] : typeof t == "string" && /^-?\d{1,9}(\.\d{1,9})?/.exec(t) ? [{ type: p.Quantity, value: { value: parseFloat(t), unit: "1" } }] : typeof t == "boolean" ? [{ type: p.Quantity, value: { value: t ? 1 : 0, unit: "1" } }] : [];
}, convertsToQuantity: (r3, e) => e.length === 0 ? [] : f(O.toQuantity(r3, e).length === 1), toString: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  return t == null ? [] : V(t) ? [{ type: p.string, value: `${t.value} '${t.unit}'` }] : [{ type: p.string, value: t.toString() }];
}, convertsToString: (r3, e) => e.length === 0 ? [] : f(O.toString(r3, e).length === 1), toTime: (r3, e) => {
  if (e.length === 0)
    return [];
  let [{ value: t }] = Q(e, 1);
  if (typeof t == "string") {
    let n = /^T?(\d{2}(:\d{2}(:\d{2})?)?)/.exec(t);
    if (n)
      return [{ type: p.time, value: ke("T" + n[1]) }];
  }
  return [];
}, convertsToTime: (r3, e) => e.length === 0 ? [] : f(O.toTime(r3, e).length === 1), indexOf: (r3, e, t) => F((n, i) => n.indexOf(i), r3, e, t), substring: (r3, e, t, n) => F((i, o, s) => {
  let a = o, c = s ? a + s : i.length;
  return a < 0 || a >= i.length ? void 0 : i.substring(a, c);
}, r3, e, t, n), startsWith: (r3, e, t) => F((n, i) => n.startsWith(i), r3, e, t), endsWith: (r3, e, t) => F((n, i) => n.endsWith(i), r3, e, t), contains: (r3, e, t) => F((n, i) => n.includes(i), r3, e, t), upper: (r3, e) => F((t) => t.toUpperCase(), r3, e), lower: (r3, e) => F((t) => t.toLowerCase(), r3, e), replace: (r3, e, t, n) => F((i, o, s) => i.replaceAll(o, s), r3, e, t, n), matches: (r3, e, t) => F((n, i) => !!new RegExp(i).exec(n), r3, e, t), replaceMatches: (r3, e, t, n) => F((i, o, s) => i.replaceAll(o, s), r3, e, t, n), length: (r3, e) => F((t) => t.length, r3, e), toChars: (r3, e) => F((t) => t ? t.split("") : void 0, r3, e), encode: J, decode: J, escape: J, unescape: J, trim: J, split: J, join: (r3, e, t) => {
  var _a;
  let n = ((_a = t == null ? void 0 : t.eval(r3, ye(r3))[0]) == null ? void 0 : _a.value) ?? "";
  if (typeof n != "string")
    throw new Error("Separator must be a string.");
  return [{ type: p.string, value: e.map((i) => {
    var _a2;
    return ((_a2 = i.value) == null ? void 0 : _a2.toString()) ?? "";
  }).join(n) }];
}, abs: (r3, e) => H(Math.abs, r3, e), ceiling: (r3, e) => H(Math.ceil, r3, e), exp: (r3, e) => H(Math.exp, r3, e), floor: (r3, e) => H(Math.floor, r3, e), ln: (r3, e) => H(Math.log, r3, e), log: (r3, e, t) => H((n, i) => Math.log(n) / Math.log(i), r3, e, t), power: (r3, e, t) => H(Math.pow, r3, e, t), round: (r3, e) => H(Math.round, r3, e), sqrt: (r3, e) => H(Math.sqrt, r3, e), truncate: (r3, e) => H((t) => t | 0, r3, e), children: J, descendants: J, trace: (r3, e, t) => e, now: () => [{ type: p.dateTime, value: (/* @__PURE__ */ new Date()).toISOString() }], timeOfDay: () => [{ type: p.time, value: (/* @__PURE__ */ new Date()).toISOString().substring(11) }], today: () => [{ type: p.date, value: (/* @__PURE__ */ new Date()).toISOString().substring(0, 10) }], between: (r3, e, t, n, i) => {
  var _a;
  let o = O.toDateTime(r3, t.eval(r3, e));
  if (o.length === 0)
    throw new Error("Invalid start date");
  let s = O.toDateTime(r3, n.eval(r3, e));
  if (s.length === 0)
    throw new Error("Invalid end date");
  let a = (_a = i.eval(r3, e)[0]) == null ? void 0 : _a.value;
  if (a !== "years" && a !== "months" && a !== "days")
    throw new Error("Invalid units");
  let c = ct(o[0].value, s[0].value);
  return [{ type: p.Quantity, value: { value: c[a], unit: a } }];
}, is: (r3, e, t) => {
  let n = "";
  return t instanceof j ? n = t.name : t instanceof ie && (n = t.left.name + "." + t.right.name), n ? e.map((i) => ({ type: p.boolean, value: st(i, n) })) : [];
}, not: (r3, e) => O.toBoolean(r3, e).map((t) => ({ type: p.boolean, value: !t.value })), resolve: (r3, e) => e.map((t) => {
  let n = t.value, i;
  if (typeof n == "string")
    i = n;
  else if (typeof n == "object") {
    let o = n;
    if (o.resource)
      return g(o.resource);
    o.reference ? i = o.reference : o.type && o.identifier && (i = `${o.type}?identifier=${o.identifier.system}|${o.identifier.value}`);
  }
  if (i == null ? void 0 : i.includes("?")) {
    let [o] = i.split("?");
    return { type: o, value: { resourceType: o } };
  }
  if (i == null ? void 0 : i.includes("/")) {
    let [o, s] = i.split("/");
    return { type: o, value: { resourceType: o, id: s } };
  }
  return { type: p.BackboneElement, value: void 0 };
}).filter((t) => !!t.value), as: (r3, e) => e, type: (r3, e) => e.map(({ value: t }) => typeof t == "boolean" ? { type: p.BackboneElement, value: { namespace: "System", name: "Boolean" } } : typeof t == "number" ? { type: p.BackboneElement, value: { namespace: "System", name: "Integer" } } : k(t) ? { type: p.BackboneElement, value: { namespace: "FHIR", name: t.resourceType } } : { type: p.BackboneElement, value: null }), conformsTo: (r3, e, t) => {
  let n = t.eval(r3, e)[0].value;
  if (!n.startsWith("http://hl7.org/fhir/StructureDefinition/"))
    throw new Error("Expected a StructureDefinition URL");
  let i = n.replace("http://hl7.org/fhir/StructureDefinition/", "");
  return e.map((o) => {
    var _a;
    return { type: p.boolean, value: ((_a = o.value) == null ? void 0 : _a.resourceType) === i };
  });
}, getResourceKey: (r3, e) => {
  let t = e[0].value;
  return (t == null ? void 0 : t.id) ? [{ type: p.id, value: t.id }] : [];
}, getReferenceKey: (r3, e, t) => {
  let n = e[0].value;
  if (!(n == null ? void 0 : n.reference))
    return [];
  let i = "";
  return t instanceof j && (i = t.name), i && !n.reference.startsWith(i + "/") ? [] : [{ type: p.id, value: fe$1(n) }];
}, extension: (r3, e, t) => {
  var _a;
  let n = t.eval(r3, e)[0].value, i = (_a = e == null ? void 0 : e[0]) == null ? void 0 : _a.value;
  if (i) {
    let o = ee(i, n);
    if (o)
      return [{ type: p.Extension, value: o }];
  }
  return [];
} };
function F(r3, e, t, ...n) {
  if (t.length === 0)
    return [];
  let [{ value: i }] = Q(t, 1);
  if (typeof i != "string")
    throw new Error("String function cannot be called with non-string");
  let o = r3(i, ...n.map((s) => {
    var _a;
    return (_a = s == null ? void 0 : s.eval(e, t)[0]) == null ? void 0 : _a.value;
  }));
  return o === void 0 ? [] : Array.isArray(o) ? o.map(g) : [g(o)];
}
function H(r3, e, t, ...n) {
  if (t.length === 0)
    return [];
  let [{ value: i }] = Q(t, 1), o = V(i), s = o ? i.value : i;
  if (typeof s != "number")
    throw new Error("Math function cannot be called with non-number");
  let a = r3(s, ...n.map((l) => {
    var _a;
    return (_a = l.eval(e, t)[0]) == null ? void 0 : _a.value;
  })), c = o ? p.Quantity : t[0].type, u = o ? { ...i, value: a } : a;
  return [{ type: c, value: u }];
}
function Q(r3, e) {
  if (r3.length !== e)
    throw new Error(`Expected ${e} arguments`);
  for (let t of r3)
    if (t == null)
      throw new Error("Expected non-null argument");
  return r3;
}
function ye(r3) {
  var _a;
  let e = r3;
  for (; (_a = e.parent) == null ? void 0 : _a.variables.$this; )
    e = e.parent;
  return [e.variables.$this];
}
var pt = class {
  constructor(e, t) {
    this.original = e;
    this.child = t;
  }
  eval(e, t) {
    try {
      if (t.length > 0) {
        let n = [];
        for (let i of t)
          n.push(this.child.eval({ parent: e, variables: { $this: i } }, [i]));
        return n.flat();
      } else
        return this.child.eval(e, []);
    } catch (n) {
      throw new Error(`FhirPathError on "${this.original}": ${n}`, { cause: n });
    }
  }
  toString() {
    return this.child.toString();
  }
}, U = class {
  constructor(e) {
    this.value = e;
  }
  eval() {
    return [this.value];
  }
  toString() {
    let e = this.value.value;
    return typeof e == "string" ? `'${e}'` : e.toString();
  }
}, j = class {
  constructor(e) {
    this.name = e;
  }
  eval(e, t) {
    if (this.name === "$this")
      return t;
    let n = this.getVariable(e);
    if (n)
      return [n];
    if (this.name.startsWith("%"))
      throw new Error(`Undefined variable ${this.name}`);
    return t.flatMap((i) => this.evalValue(i)).filter((i) => (i == null ? void 0 : i.value) !== void 0);
  }
  getVariable(e) {
    let t = e.variables[this.name];
    if (t !== void 0)
      return t;
    if (e.parent)
      return this.getVariable(e.parent);
  }
  evalValue(e) {
    let t = e.value;
    if (!(!t || typeof t != "object"))
      return k(t) && t.resourceType === this.name ? e : P$1(e, this.name);
  }
  toString() {
    return this.name;
  }
}, dt = class {
  eval() {
    return [];
  }
  toString() {
    return "{}";
  }
}, ft = class extends Je {
  constructor(t, n, i) {
    super(t, n);
    this.impl = i;
  }
  eval(t, n) {
    return this.impl(this.child.eval(t, n));
  }
  toString() {
    return this.operator + this.child.toString();
  }
}, ge$1 = class ge extends Z {
  constructor(e, t) {
    super("as", e, t);
  }
  eval(e, t) {
    return O.ofType(e, this.left.eval(e, t), this.right);
  }
}, C = class extends Z {
}, D = class extends C {
  constructor(t, n, i, o) {
    super(t, n, i);
    this.impl = o;
  }
  eval(t, n) {
    let i = this.left.eval(t, n);
    if (i.length !== 1)
      return [];
    let o = this.right.eval(t, n);
    if (o.length !== 1)
      return [];
    let s = i[0].value, a = o[0].value, c = V(s) ? s.value : s, u = V(a) ? a.value : a, l = this.impl(c, u);
    return typeof l == "boolean" ? f(l) : V(s) ? [{ type: p.Quantity, value: { ...s, value: l } }] : [g(l)];
  }
}, mt = class extends Z {
  constructor(e, t) {
    super("&", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t), o = [...n, ...i];
    return o.length > 0 && o.every((s) => typeof s.value == "string") ? [{ type: p.string, value: o.map((s) => s.value).join("") }] : o;
  }
}, ht = class extends C {
  constructor(e, t) {
    super("contains", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return f(n.some((o) => o.value === i[0].value));
  }
}, yt = class extends C {
  constructor(e, t) {
    super("in", e, t);
  }
  eval(e, t) {
    let n = $(this.left.eval(e, t)), i = this.right.eval(e, t);
    return n ? f(i.some((o) => o.value === n.value)) : [];
  }
}, ie = class extends Z {
  constructor(e, t) {
    super(".", e, t);
  }
  eval(e, t) {
    return this.right.eval(e, this.left.eval(e, t));
  }
  toString() {
    return `${this.left.toString()}.${this.right.toString()}`;
  }
}, Ve = class extends Z {
  constructor(e, t) {
    super("|", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return ot([...n, ...i]);
  }
}, gt = class extends C {
  constructor(e, t) {
    super("=", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return Mn(n, i);
  }
}, xt = class extends C {
  constructor(e, t) {
    super("!=", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return _n(n, i);
  }
}, vt = class extends C {
  constructor(e, t) {
    super("~", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return xr(n, i);
  }
}, Tt = class extends C {
  constructor(e, t) {
    super("!~", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t), i = this.right.eval(e, t);
    return Dn(xr(n, i));
  }
}, xe = class extends C {
  constructor(e, t) {
    super("is", e, t);
  }
  eval(e, t) {
    let n = this.left.eval(e, t);
    if (n.length !== 1)
      return [];
    let i = this.right.name;
    return f(st(n[0], i));
  }
}, St = class extends C {
  constructor(e, t) {
    super("and", e, t);
  }
  eval(e, t) {
    let n = $(this.left.eval(e, t), "boolean"), i = $(this.right.eval(e, t), "boolean");
    return (n == null ? void 0 : n.value) === true && (i == null ? void 0 : i.value) === true ? f(true) : (n == null ? void 0 : n.value) === false || (i == null ? void 0 : i.value) === false ? f(false) : [];
  }
}, Et = class extends C {
  constructor(e, t) {
    super("or", e, t);
  }
  eval(e, t) {
    let n = $(this.left.eval(e, t), "boolean"), i = $(this.right.eval(e, t), "boolean");
    return (n == null ? void 0 : n.value) === false && (i == null ? void 0 : i.value) === false ? f(false) : (n == null ? void 0 : n.value) || (i == null ? void 0 : i.value) ? f(true) : [];
  }
}, bt = class extends C {
  constructor(e, t) {
    super("xor", e, t);
  }
  eval(e, t) {
    let n = $(this.left.eval(e, t), "boolean"), i = $(this.right.eval(e, t), "boolean");
    return !n || !i ? [] : f(n.value !== i.value);
  }
}, Rt = class extends C {
  constructor(e, t) {
    super("implies", e, t);
  }
  eval(e, t) {
    let n = $(this.left.eval(e, t), "boolean"), i = $(this.right.eval(e, t), "boolean");
    return (i == null ? void 0 : i.value) === true || (n == null ? void 0 : n.value) === false ? f(true) : !n || !i ? [] : f(false);
  }
}, Y = class {
  constructor(e, t) {
    this.name = e;
    this.args = t;
  }
  eval(e, t) {
    let n = O[this.name];
    if (!n)
      throw new Error("Unrecognized function: " + this.name);
    return n(e, t, ...this.args);
  }
  toString() {
    return `${this.name}(${this.args.map((e) => e.toString()).join(", ")})`;
  }
}, ve = class {
  constructor(e, t) {
    this.left = e;
    this.expr = t;
  }
  eval(e, t) {
    let n = this.expr.eval(e, t);
    if (n.length !== 1)
      return [];
    let i = n[0].value;
    if (typeof i != "number")
      throw new Error("Invalid indexer expression: should return integer}");
    let o = this.left.eval(e, t);
    return i in o ? [o[i]] : [];
  }
  toString() {
    return `${this.left.toString()}[${this.expr.toString()}]`;
  }
};
var os = ["year", "years", "month", "months", "week", "weeks", "day", "days", "hour", "hours", "minute", "minutes", "second", "seconds", "millisecond", "milliseconds"], oe = class {
  constructor(e, t, n, i) {
    this.result = [];
    this.pos = { index: 0, line: 1, column: 0 };
    this.markStack = [];
    this.str = e, this.keywords = t, this.operators = n, this.dateTimeLiterals = !!(i == null ? void 0 : i.dateTimeLiterals), this.symbolRegex = (i == null ? void 0 : i.symbolRegex) ?? /[$\w%]/;
  }
  tokenize() {
    for (; this.pos.index < this.str.length; ) {
      let e = this.consumeToken();
      e && this.result.push(e);
    }
    return this.result;
  }
  prevToken() {
    return this.result.slice(-1)[0];
  }
  peekToken() {
    this.mark();
    let e = this.consumeToken();
    return this.reset(), e;
  }
  consumeToken() {
    this.consumeWhitespace();
    let e = this.curr();
    if (!e)
      return;
    this.mark();
    let t = this.peek();
    return e === "/" && t === "*" ? this.consumeMultiLineComment() : e === "/" && t === "/" ? this.consumeSingleLineComment() : e === "'" || e === '"' ? this.consumeString(e) : e === "`" ? this.consumeBacktickSymbol() : e === "@" ? this.consumeDateTime() : /\d/.exec(e) ? this.consumeNumber() : /\w/.exec(e) ? this.consumeSymbol() : (e === "$" || e === "%") && /\w/.exec(t) ? this.consumeSymbol() : this.consumeOperator();
  }
  consumeWhitespace() {
    this.consumeWhile(() => /\s/.exec(this.curr()));
  }
  consumeMultiLineComment() {
    let e = this.pos.index;
    return this.consumeWhile(() => this.curr() !== "*" || this.peek() !== "/"), this.advance(), this.advance(), this.buildToken("Comment", this.str.substring(e, this.pos.index));
  }
  consumeSingleLineComment() {
    return this.buildToken("Comment", this.consumeWhile(() => this.curr() !== `
`));
  }
  consumeString(e) {
    this.advance();
    let t = this.buildToken("String", this.consumeWhile(() => this.prev() === "\\" || this.curr() !== e));
    return this.advance(), t;
  }
  consumeBacktickSymbol() {
    this.advance();
    let e = this.buildToken("Symbol", this.consumeWhile(() => this.curr() !== "`"));
    return this.advance(), e;
  }
  consumeDateTime() {
    this.advance();
    let e = this.pos.index;
    this.consumeWhile(() => /[\d-]/.exec(this.curr()));
    let t = false, n = false;
    if (this.curr() === "T" && (t = true, this.advance(), this.consumeWhile(() => /[\d:]/.exec(this.curr())), this.curr() === "." && /\d/.exec(this.peek()) && (this.advance(), this.consumeWhile(() => /\d/.exec(this.curr()))), this.curr() === "Z" ? (n = true, this.advance()) : (this.curr() === "+" || this.curr() === "-") && (n = true, this.advance(), this.consumeWhile(() => /[\d:]/.exec(this.curr())))), this.pos.index === e)
      throw new Error("Invalid DateTime literal");
    let i = this.str.substring(e, this.pos.index);
    return i.endsWith("T") ? i = i.substring(0, i.length - 1) : !i.startsWith("T") && t && !n && (i += "Z"), this.buildToken("DateTime", i);
  }
  consumeNumber() {
    let e = this.pos.index, t = "Number";
    return this.consumeWhile(() => /\d/.exec(this.curr())), this.curr() === "." && /\d/.exec(this.peek()) && (this.advance(), this.consumeWhile(() => /\d/.exec(this.curr()))), this.curr() === "-" && this.dateTimeLiterals ? (this.pos.index = e - 1, this.consumeDateTime()) : (this.curr() === " " && ss(this.peekToken()) && (t = "Quantity", this.consumeToken()), this.buildToken(t, this.str.substring(e, this.pos.index)));
  }
  consumeSymbol() {
    var _a;
    let e = this.consumeWhile(() => this.symbolRegex.exec(this.curr()));
    return ((_a = this.prevToken()) == null ? void 0 : _a.value) !== "." && this.keywords.includes(e) ? this.buildToken(e, e) : this.buildToken("Symbol", e);
  }
  consumeOperator() {
    let e = this.curr(), t = this.peek(), n = e + t;
    return this.operators.includes(n) ? (this.advance(), this.advance(), this.buildToken(n, n)) : (this.advance(), this.buildToken(e, e));
  }
  consumeWhile(e) {
    let t = this.pos.index;
    for (; this.pos.index < this.str.length && e(); )
      this.advance();
    return this.str.substring(t, this.pos.index);
  }
  curr() {
    return this.str[this.pos.index];
  }
  prev() {
    return this.str[this.pos.index - 1] ?? "";
  }
  peek() {
    return this.str[this.pos.index + 1] ?? "";
  }
  mark() {
    this.markStack.push({ ...this.pos });
  }
  reset() {
    let e = this.markStack.pop();
    if (!e)
      throw new Error("No mark to reset to");
    this.pos.index = e.index, this.pos.line = e.line, this.pos.column = e.column;
  }
  advance() {
    this.pos.index++, this.curr() === `
` ? (this.pos.line++, this.pos.column = 0) : this.pos.column++;
  }
  buildToken(e, t) {
    let n = this.markStack.pop();
    if (!n)
      throw new Error("No mark for token");
    return { id: e, value: t, ...n };
  }
};
function ss(r3) {
  return !!(r3 && (r3.id === "String" || r3.id === "Symbol" && os.includes(r3.value)));
}
var je = ["true", "false"], We = ["!=", "!~", "<=", ">=", "{}", "->"];
function ni(r3) {
  return new oe(r3, je, We).tokenize();
}
var y$1 = { FunctionCall: 0, Dot: 1, Indexer: 2, UnaryAdd: 3, UnarySubtract: 3, Multiply: 4, Divide: 4, IntegerDivide: 4, Modulo: 4, Add: 5, Subtract: 5, Ampersand: 5, Is: 6, As: 6, Union: 7, GreaterThan: 8, GreaterThanOrEquals: 8, LessThan: 8, LessThanOrEquals: 8, Equals: 9, Equivalent: 9, NotEquals: 9, NotEquivalent: 9, In: 10, Contains: 10, And: 11, Xor: 12, Or: 12, Implies: 13, Arrow: 100, Semicolon: 200 }, as = { parse(r3) {
  var _a;
  let e = r3.consumeAndParse();
  if (!r3.match(")"))
    throw new Error("Parse error: expected `)` got `" + ((_a = r3.peek()) == null ? void 0 : _a.value) + "`");
  return e;
} }, cs = { parse(r3, e) {
  let t = r3.consumeAndParse();
  if (!r3.match("]"))
    throw new Error("Parse error: expected `]`");
  return new ve(e, t);
}, precedence: y$1.Indexer }, us = { parse(r3, e) {
  if (!(e instanceof j))
    throw new Error("Unexpected parentheses");
  let t = [];
  for (; !r3.match(")"); )
    t.push(r3.consumeAndParse()), r3.match(",");
  return new Y(e.name, t);
}, precedence: y$1.FunctionCall };
function ls(r3) {
  let e = r3.split(" "), t = parseFloat(e[0]), n = e[1];
  return (n == null ? void 0 : n.startsWith("'")) && n.endsWith("'") ? n = n.substring(1, n.length - 1) : n = "{" + n + "}", { value: t, unit: n };
}
function $e() {
  return new Ye().registerPrefix("String", { parse: (r3, e) => new U({ type: p.string, value: e.value }) }).registerPrefix("DateTime", { parse: (r3, e) => new U({ type: p.dateTime, value: ke(e.value) }) }).registerPrefix("Quantity", { parse: (r3, e) => new U({ type: p.Quantity, value: ls(e.value) }) }).registerPrefix("Number", { parse: (r3, e) => new U({ type: e.value.includes(".") ? p.decimal : p.integer, value: parseFloat(e.value) }) }).registerPrefix("true", { parse: () => new U({ type: p.boolean, value: true }) }).registerPrefix("false", { parse: () => new U({ type: p.boolean, value: false }) }).registerPrefix("Symbol", { parse: (r3, e) => new j(e.value) }).registerPrefix("{}", { parse: () => new dt() }).registerPrefix("(", as).registerInfix("[", cs).registerInfix("(", us).prefix("+", y$1.UnaryAdd, (r3, e) => new ft("+", e, (t) => t)).prefix("-", y$1.UnarySubtract, (r3, e) => new D("-", e, e, (t, n) => -n)).infixLeft(".", y$1.Dot, (r3, e, t) => new ie(r3, t)).infixLeft("/", y$1.Divide, (r3, e, t) => new D("/", r3, t, (n, i) => n / i)).infixLeft("*", y$1.Multiply, (r3, e, t) => new D("*", r3, t, (n, i) => n * i)).infixLeft("+", y$1.Add, (r3, e, t) => new D("+", r3, t, (n, i) => n + i)).infixLeft("-", y$1.Subtract, (r3, e, t) => new D("-", r3, t, (n, i) => n - i)).infixLeft("|", y$1.Union, (r3, e, t) => new Ve(r3, t)).infixLeft("=", y$1.Equals, (r3, e, t) => new gt(r3, t)).infixLeft("!=", y$1.NotEquals, (r3, e, t) => new xt(r3, t)).infixLeft("~", y$1.Equivalent, (r3, e, t) => new vt(r3, t)).infixLeft("!~", y$1.NotEquivalent, (r3, e, t) => new Tt(r3, t)).infixLeft("<", y$1.LessThan, (r3, e, t) => new D("<", r3, t, (n, i) => n < i)).infixLeft("<=", y$1.LessThanOrEquals, (r3, e, t) => new D("<=", r3, t, (n, i) => n <= i)).infixLeft(">", y$1.GreaterThan, (r3, e, t) => new D(">", r3, t, (n, i) => n > i)).infixLeft(">=", y$1.GreaterThanOrEquals, (r3, e, t) => new D(">=", r3, t, (n, i) => n >= i)).infixLeft("&", y$1.Ampersand, (r3, e, t) => new mt(r3, t)).infixLeft("and", y$1.And, (r3, e, t) => new St(r3, t)).infixLeft("as", y$1.As, (r3, e, t) => new ge$1(r3, t)).infixLeft("contains", y$1.Contains, (r3, e, t) => new ht(r3, t)).infixLeft("div", y$1.Divide, (r3, e, t) => new D("div", r3, t, (n, i) => n / i | 0)).infixLeft("in", y$1.In, (r3, e, t) => new yt(r3, t)).infixLeft("is", y$1.Is, (r3, e, t) => new xe(r3, t)).infixLeft("mod", y$1.Modulo, (r3, e, t) => new D("mod", r3, t, (n, i) => n % i)).infixLeft("or", y$1.Or, (r3, e, t) => new Et(r3, t)).infixLeft("xor", y$1.Xor, (r3, e, t) => new bt(r3, t)).infixLeft("implies", y$1.Implies, (r3, e, t) => new Rt(r3, t));
}
var ps = $e();
function Ir(r3) {
  return new pt(r3, ps.construct(ni(r3)).consumeAndParse());
}
function De(r3, e) {
  let t = Array.isArray(e) ? e : [e];
  for (let n = 0; n < t.length; n++) {
    let i = t[n];
    typeof i == "object" && "type" in i && "value" in i || (t[n] = g(t[n]));
  }
  return w$1(r3, t).map((n) => n.value);
}
function w$1(r3, e, t = {}) {
  return Ir(r3).eval({ variables: t }, e).map((i) => {
    var _a;
    return { type: i.type, value: (_a = i.value) == null ? void 0 : _a.valueOf() };
  });
}
var ii = ((l) => (l.BOOLEAN = "BOOLEAN", l.NUMBER = "NUMBER", l.QUANTITY = "QUANTITY", l.TEXT = "TEXT", l.REFERENCE = "REFERENCE", l.CANONICAL = "CANONICAL", l.DATE = "DATE", l.DATETIME = "DATETIME", l.PERIOD = "PERIOD", l.UUID = "UUID", l))(ii || {});
var li = ((v) => (v.EQUALS = "eq", v.NOT_EQUALS = "ne", v.GREATER_THAN = "gt", v.LESS_THAN = "lt", v.GREATER_THAN_OR_EQUALS = "ge", v.LESS_THAN_OR_EQUALS = "le", v.STARTS_AFTER = "sa", v.ENDS_BEFORE = "eb", v.APPROXIMATELY = "ap", v.CONTAINS = "contains", v.STARTS_WITH = "sw", v.EXACT = "exact", v.TEXT = "text", v.NOT = "not", v.ABOVE = "above", v.BELOW = "below", v.IN = "in", v.NOT_IN = "not-in", v.OF_TYPE = "of-type", v.MISSING = "missing", v.PRESENT = "present", v.IDENTIFIER = "identifier", v.ITERATE = "iterate", v))(li || {});
var Bs = ((b2) => (b2.READ = "read", b2.VREAD = "vread", b2.UPDATE = "update", b2.PATCH = "patch", b2.DELETE = "delete", b2.HISTORY = "history", b2.HISTORY_INSTANCE = "history-instance", b2.HISTORY_TYPE = "history-type", b2.HISTORY_SYSTEM = "history-system", b2.CREATE = "create", b2.SEARCH = "search", b2.SEARCH_TYPE = "search-type", b2.SEARCH_SYSTEM = "search-system", b2.SEARCH_COMPARTMENT = "search-compartment", b2.CAPABILITIES = "capabilities", b2.TRANSACTION = "transaction", b2.BATCH = "batch", b2.OPERATION = "operation", b2))(Bs || {});
function mi(r3) {
  if (typeof window < "u") {
    let e = window.atob(r3), t = Uint8Array.from(e, (n) => n.charCodeAt(0));
    return new window.TextDecoder().decode(t);
  }
  if (typeof Buffer < "u")
    return Buffer.from(r3, "base64").toString("utf-8");
  throw new Error("Unable to decode base64");
}
function hi(r3) {
  if (typeof window < "u") {
    let e = new window.TextEncoder().encode(r3), t = String.fromCharCode.apply(null, e);
    return window.btoa(t);
  }
  if (typeof Buffer < "u")
    return Buffer.from(r3, "utf8").toString("base64");
  throw new Error("Unable to encode base64");
}
function Nr() {
  let r3 = new Uint32Array(28);
  return crypto.getRandomValues(r3), $n(r3.buffer);
}
async function yi(r3) {
  return crypto.subtle.digest("SHA-256", new TextEncoder().encode(r3));
}
function Te() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (r3) => {
    let e = Math.random() * 16 | 0;
    return (r3 === "x" ? e : e & 3 | 8).toString(16);
  });
}
var Ot = class {
  constructor(e = 10) {
    this.max = e, this.cache = /* @__PURE__ */ new Map();
  }
  clear() {
    this.cache.clear();
  }
  get(e) {
    let t = this.cache.get(e);
    return t && (this.cache.delete(e), this.cache.set(e, t)), t;
  }
  set(e, t) {
    this.cache.has(e) ? this.cache.delete(e) : this.cache.size >= this.max && this.cache.delete(this.first()), this.cache.set(e, t);
  }
  delete(e) {
    this.cache.delete(e);
  }
  keys() {
    return this.cache.keys();
  }
  first() {
    return this.cache.keys().next().value;
  }
};
var A = { CSS: "text/css", DICOM: "application/dicom", FAVICON: "image/vnd.microsoft.icon", FHIR_JSON: "application/fhir+json", FORM_URL_ENCODED: "application/x-www-form-urlencoded", HL7_V2: "x-application/hl7-v2+er7", HTML: "text/html", JAVASCRIPT: "text/javascript", JSON: "application/json", JSON_PATCH: "application/json-patch+json", PNG: "image/png", SCIM_JSON: "application/scim+json", SVG: "image/svg+xml", TEXT: "text/plain", TYPESCRIPT: "text/typescript", PING: "x-application/ping", XML: "text/xml", CDA_XML: "application/cda+xml" };
var Lr = class {
  constructor() {
    this.listeners = {};
  }
  addEventListener(e, t) {
    this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t);
  }
  removeEventListener(e, t) {
    let n = this.listeners[e];
    if (n) {
      for (let i = 0; i < n.length; i++)
        if (n[i] === t) {
          n.splice(i, 1);
          return;
        }
    }
  }
  dispatchEvent(e) {
    let t = this.listeners[e.type];
    if (t)
      for (let n of t)
        n.call(this, e);
    return !e.defaultPrevented;
  }
  removeAllListeners() {
    this.listeners = {};
  }
}, K = class {
  constructor() {
    this.emitter = new Lr();
  }
  dispatchEvent(e) {
    this.emitter.dispatchEvent(e);
  }
  addEventListener(e, t) {
    this.emitter.addEventListener(e, t);
  }
  removeEventListener(e, t) {
    this.emitter.removeEventListener(e, t);
  }
  removeAllListeners() {
    this.emitter.removeAllListeners();
  }
};
var Fr = { "Patient-open": "Patient-open", "Patient-close": "Patient-close", "ImagingStudy-open": "ImagingStudy-open", "ImagingStudy-close": "ImagingStudy-close", "Encounter-open": "Encounter-open", "Encounter-close": "Encounter-close", "DiagnosticReport-open": "DiagnosticReport-open", "DiagnosticReport-close": "DiagnosticReport-close", "DiagnosticReport-select": "DiagnosticReport-select", "DiagnosticReport-update": "DiagnosticReport-update", syncerror: "syncerror" }, zs = ["Patient", "Encounter", "ImagingStudy", "DiagnosticReport", "OperationOutcome", "Bundle"], Ur = ["DiagnosticReport-update"];
function vi(r3) {
  return Ur.includes(r3);
}
function Ti(r3) {
  if (Ur.includes(r3))
    throw new d(h(`'context.version' is required for '${r3}'.`));
}
var Js = { "Patient-open": { patient: { resourceType: "Patient" }, encounter: { resourceType: "Encounter", optional: true } }, "Patient-close": { patient: { resourceType: "Patient" }, encounter: { resourceType: "Encounter", optional: true } }, "ImagingStudy-open": { study: { resourceType: "ImagingStudy" }, encounter: { resourceType: "Encounter", optional: true }, patient: { resourceType: "Patient", optional: true } }, "ImagingStudy-close": { study: { resourceType: "ImagingStudy" }, encounter: { resourceType: "Encounter", optional: true }, patient: { resourceType: "Patient", optional: true } }, "Encounter-open": { encounter: { resourceType: "Encounter" }, patient: { resourceType: "Patient" } }, "Encounter-close": { encounter: { resourceType: "Encounter" }, patient: { resourceType: "Patient" } }, "DiagnosticReport-open": { report: { resourceType: "DiagnosticReport" }, encounter: { resourceType: "Encounter", optional: true }, study: { resourceType: "ImagingStudy", optional: true, manyAllowed: true }, patient: { resourceType: "Patient" } }, "DiagnosticReport-close": { report: { resourceType: "DiagnosticReport" }, encounter: { resourceType: "Encounter", optional: true }, study: { resourceType: "ImagingStudy", optional: true, manyAllowed: true }, patient: { resourceType: "Patient" } }, "DiagnosticReport-select": { report: { resourceType: "DiagnosticReport" }, select: { resourceType: "*", isArray: true } }, "DiagnosticReport-update": { report: { resourceType: "DiagnosticReport" }, patient: { resourceType: "Patient", optional: true }, study: { resourceType: "ImagingStudy", optional: true }, updates: { resourceType: "Bundle" } }, syncerror: { operationoutcome: { resourceType: "OperationOutcome" } } };
function Ys(r3) {
  return zs.includes(r3);
}
function Si(r3) {
  return !!r3.endpoint;
}
function Br(r3) {
  if (!kt(r3))
    throw new d(h("subscriptionRequest must be an object conforming to SubscriptionRequest type."));
  let { channelType: e, mode: t, topic: n, events: i } = r3, o = { "hub.channel.type": e, "hub.mode": t, "hub.topic": n, "hub.events": i.join(",") };
  return Si(r3) && (o.endpoint = r3.endpoint), new URLSearchParams(o).toString();
}
function kt(r3) {
  if (typeof r3 != "object")
    return false;
  let { channelType: e, mode: t, topic: n, events: i } = r3;
  if (!(e && t && n && i) || typeof n != "string" || typeof i != "object" || !Array.isArray(i) || i.length < 1 || e !== "websocket" || t !== "subscribe" && t !== "unsubscribe")
    return false;
  for (let o of i)
    if (!Fr[o])
      return false;
  return !(Si(r3) && !(typeof r3.endpoint == "string" && r3.endpoint.startsWith("ws")));
}
function xi(r3, e, t, n) {
  if (typeof e != "object")
    throw new d(h(`context[${t}] is invalid. Context must contain a single valid FHIR resource! Resource is not an object.`));
  if (!(e.id && typeof e.id == "string"))
    throw new d(h(`context[${t}] is invalid. Resource must contain a valid string ID.`));
  if (!e.resourceType)
    throw new d(h(`context[${t}] is invalid. Resource must contain a resource type. No resource type found.`));
  let i = n.resourceType;
  if (i !== "*") {
    if (!Ys(e.resourceType))
      throw new d(h(`context[${t}] is invalid. Resource must contain a valid FHIRcast resource type. Resource type is not a known resource type.`));
    if (i && e.resourceType !== i)
      throw new d(h(`context[${t}] is invalid. context[${t}] for the '${r3}' event should contain resource of type ${i}.`));
  }
}
function Zs(r3, e, t, n, i) {
  if (i.set(e.key, (i.get(e.key) ?? 0) + 1), !n.isArray)
    xi(r3, e.resource, t, n);
  else {
    let { resources: o } = e;
    if (!o)
      throw new d(h(`context[${t}] is invalid. context[${t}] for the '${r3}' with key '${String(e.key)}' should contain an array of resources on the key 'resources'.`));
    for (let s of o)
      xi(r3, s, t, n);
  }
}
function Xs(r3, e) {
  let t = /* @__PURE__ */ new Map(), n = Js[r3];
  for (let i = 0; i < e.length; i++) {
    let o = e[i].key;
    if (!n[o])
      throw new d(h(`Key '${o}' not found for event '${r3}'. Make sure to add only valid keys.`));
    Zs(r3, e[i], i, n[o], t);
  }
  for (let [i, o] of Object.entries(n)) {
    if (!(o.optional || t.has(i)))
      throw new d(h(`Missing required key '${i}' on context for '${r3}' event.`));
    if (!o.manyAllowed && (t.get(i) || 0) > 1)
      throw new d(h(`${t.get(i)} context entries with key '${i}' found for the '${r3}' event when schema only allows for 1.`));
  }
}
function qr(r3, e, t, n) {
  if (!(r3 && typeof r3 == "string"))
    throw new d(h("Must provide a topic."));
  if (!Fr[e])
    throw new d(h(`Must provide a valid FHIRcast event name. Supported events: ${Object.keys(Fr).join(", ")}`));
  if (typeof t != "object")
    throw new d(h("context must be a context object or array of context objects."));
  if (Ur.includes(e) && !n)
    throw new d(h(`The '${e}' event must contain a 'context.versionId'.`));
  let i = Array.isArray(t) ? t : [t];
  return Xs(e, i), { timestamp: (/* @__PURE__ */ new Date()).toISOString(), id: Te(), event: { "hub.topic": r3, "hub.event": e, context: i, ...n ? { "context.versionId": n } : {} } };
}
var It = class extends K {
  constructor(e) {
    if (super(), this.subRequest = e, !e.endpoint)
      throw new d(h("Subscription request should contain an endpoint."));
    if (!kt(e))
      throw new d(h("Subscription request failed validation."));
    let t = new WebSocket(e.endpoint);
    t.addEventListener("open", () => {
      this.dispatchEvent({ type: "connect" }), t.addEventListener("message", (n) => {
        let i = JSON.parse(n.data);
        if (i["hub.topic"])
          return;
        let o = i;
        o.event["hub.event"] !== "heartbeat" && (this.dispatchEvent({ type: "message", payload: o }), t.send(JSON.stringify({ id: i == null ? void 0 : i.id, timestamp: (/* @__PURE__ */ new Date()).toISOString() })));
      }), t.addEventListener("close", () => {
        this.dispatchEvent({ type: "disconnect" });
      });
    }), this.websocket = t;
  }
  disconnect() {
    this.websocket.close();
  }
};
function ea(r3) {
  let e = r3.replace(/-/g, "+").replace(/_/g, "/"), t = mi(e), n = Array.from(t).reduce((o, s) => {
    let a = ("00" + s.charCodeAt(0).toString(16)).slice(-2);
    return `${o}%${a}`;
  }, ""), i = decodeURIComponent(n);
  return JSON.parse(i);
}
function Ei(r3) {
  return r3.split(".").length === 3;
}
function Vt(r3) {
  let [e, t, n] = r3.split(".");
  return ea(t);
}
function bi(r3) {
  try {
    return typeof Vt(r3).login_id == "string";
  } catch {
    return false;
  }
}
function Ri(r3) {
  try {
    let t = Vt(r3).exp;
    return typeof t == "number" ? t * 1e3 : void 0;
  } catch {
    return;
  }
}
var Dt = class {
  constructor(e) {
    this.medplum = e;
  }
  async get(e) {
    return this.medplum.get(`keyvalue/v1/${e}`);
  }
  async set(e, t) {
    await this.medplum.put(`keyvalue/v1/${e}`, t, A.TEXT);
  }
  async delete(e) {
    await this.medplum.delete(`keyvalue/v1/${e}`);
  }
};
var Ci;
Ci = Symbol.toStringTag;
var M = class {
  constructor(e) {
    this[Ci] = "ReadablePromise";
    this.status = "pending";
    this.suspender = e.then((t) => (this.status = "success", this.response = t, t), (t) => {
      throw this.status = "error", this.error = t, t;
    });
  }
  isPending() {
    return this.status === "pending";
  }
  isOk() {
    return this.status === "success";
  }
  read() {
    switch (this.status) {
      case "pending":
        throw this.suspender;
      case "error":
        throw this.error;
      default:
        return this.response;
    }
  }
  then(e, t) {
    return this.suspender.then(e, t);
  }
  catch(e) {
    return this.suspender.catch(e);
  }
  finally(e) {
    return this.suspender.finally(e);
  }
};
var Ge = class {
  constructor(e) {
    this.storage = e ?? (typeof localStorage < "u" ? localStorage : new jr());
  }
  clear() {
    this.storage.clear();
  }
  getString(e) {
    return this.storage.getItem(e) ?? void 0;
  }
  setString(e, t) {
    t ? this.storage.setItem(e, t) : this.storage.removeItem(e);
  }
  getObject(e) {
    let t = this.getString(e);
    return t ? JSON.parse(t) : void 0;
  }
  setObject(e, t) {
    this.setString(e, t ? ut(t) : void 0);
  }
}, jr = class {
  constructor() {
    this.data = /* @__PURE__ */ new Map();
  }
  get length() {
    return this.data.size;
  }
  clear() {
    this.data.clear();
  }
  getItem(e) {
    return this.data.get(e) ?? null;
  }
  setItem(e, t) {
    t ? this.data.set(e, t) : this.data.delete(e);
  }
  removeItem(e) {
    this.data.delete(e);
  }
  key(e) {
    return Array.from(this.data.keys())[e];
  }
};
var Me = { Event: typeof globalThis.Event < "u" ? globalThis.Event : void 0, ErrorEvent: void 0, CloseEvent: void 0 }, wi = false;
function ta() {
  if (typeof globalThis.Event > "u")
    throw new Error("Unable to lazy init events for ReconnectingWebSocket. globalThis.Event is not defined yet");
  Me.Event = globalThis.Event, Me.ErrorEvent = class extends Event {
    constructor(e, t) {
      super("error", t), this.message = e.message, this.error = e;
    }
  }, Me.CloseEvent = class extends Event {
    constructor(t = 1e3, n = "", i) {
      super("close", i);
      this.wasClean = true;
      this.code = t, this.reason = n;
    }
  };
}
function ra(r3, e) {
  if (!r3)
    throw new Error(e);
}
function Mt(r3) {
  return new r3.constructor(r3.type, r3);
}
var Se = { maxReconnectionDelay: 1e4, minReconnectionDelay: 1e3 + Math.random() * 4e3, minUptime: 5e3, reconnectionDelayGrowFactor: 1.3, connectionTimeout: 4e3, maxRetries: 1 / 0, maxEnqueuedMessages: 1 / 0, startClosed: false, debug: false }, Ai = false, _t = class r extends K {
  constructor(t, n, i = {}) {
    wi || (ta(), wi = true);
    super();
    this._retryCount = -1;
    this._shouldReconnect = true;
    this._connectLock = false;
    this._closeCalled = false;
    this._messageQueue = [];
    this._debugLogger = console.log.bind(console);
    this.onclose = null;
    this.onerror = null;
    this.onmessage = null;
    this.onopen = null;
    this._handleOpen = (t2) => {
      this._debug("open event");
      let { minUptime: n2 = Se.minUptime } = this._options;
      clearTimeout(this._connectTimeout), this._uptimeTimeout = setTimeout(() => this._acceptOpen(), n2), ra(this._ws, "WebSocket is not defined"), this._ws.binaryType = this._binaryType, this._messageQueue.forEach((i2) => {
        var _a;
        return (_a = this._ws) == null ? void 0 : _a.send(i2);
      }), this._messageQueue = [], this.onopen && this.onopen(t2), this.dispatchEvent(Mt(t2));
    };
    this._handleMessage = (t2) => {
      this._debug("message event"), this.onmessage && this.onmessage(t2), this.dispatchEvent(Mt(t2));
    };
    this._handleError = (t2) => {
      this._debug("error event", t2.message), this._disconnect(void 0, t2.message === "TIMEOUT" ? "timeout" : void 0), this.onerror && this.onerror(t2), this._debug("exec error listeners"), this.dispatchEvent(Mt(t2)), this._connect();
    };
    this._handleClose = (t2) => {
      this._debug("close event"), this._clearTimeouts(), this._shouldReconnect && this._connect(), this.onclose && this.onclose(t2), this.dispatchEvent(Mt(t2));
    };
    this._url = t, this._protocols = n, this._options = i, this._options.startClosed && (this._shouldReconnect = false), this._options.binaryType ? this._binaryType = this._options.binaryType : this._binaryType = "blob", this._options.debugLogger && (this._debugLogger = this._options.debugLogger), this._connect();
  }
  static get CONNECTING() {
    return 0;
  }
  static get OPEN() {
    return 1;
  }
  static get CLOSING() {
    return 2;
  }
  static get CLOSED() {
    return 3;
  }
  get CONNECTING() {
    return r.CONNECTING;
  }
  get OPEN() {
    return r.OPEN;
  }
  get CLOSING() {
    return r.CLOSING;
  }
  get CLOSED() {
    return r.CLOSED;
  }
  get binaryType() {
    return this._ws ? this._ws.binaryType : this._binaryType;
  }
  set binaryType(t) {
    this._binaryType = t, this._ws && (this._ws.binaryType = t);
  }
  get retryCount() {
    return Math.max(this._retryCount, 0);
  }
  get bufferedAmount() {
    var _a;
    return this._messageQueue.reduce((n, i) => (typeof i == "string" ? n += i.length : i instanceof Blob ? n += i.size : n += i.byteLength, n), 0) + (((_a = this._ws) == null ? void 0 : _a.bufferedAmount) ?? 0);
  }
  get extensions() {
    var _a;
    return ((_a = this._ws) == null ? void 0 : _a.extensions) ?? "";
  }
  get protocol() {
    var _a;
    return ((_a = this._ws) == null ? void 0 : _a.protocol) ?? "";
  }
  get readyState() {
    return this._ws ? this._ws.readyState : this._options.startClosed ? r.CLOSED : r.CONNECTING;
  }
  get url() {
    return this._ws ? this._ws.url : "";
  }
  get shouldReconnect() {
    return this._shouldReconnect;
  }
  close(t = 1e3, n) {
    if (this._closeCalled = true, this._shouldReconnect = false, this._clearTimeouts(), !this._ws) {
      this._debug("close enqueued: no ws instance");
      return;
    }
    if (this._ws.readyState === this.CLOSED) {
      this._debug("close: already closed");
      return;
    }
    this._ws.close(t, n);
  }
  reconnect(t, n) {
    this._shouldReconnect = true, this._closeCalled = false, this._retryCount = -1, !this._ws || this._ws.readyState === this.CLOSED ? this._connect() : (this._disconnect(t, n), this._connect());
  }
  send(t) {
    if (this._ws && this._ws.readyState === this.OPEN)
      this._debug("send", t), this._ws.send(t);
    else {
      let { maxEnqueuedMessages: n = Se.maxEnqueuedMessages } = this._options;
      this._messageQueue.length < n && (this._debug("enqueue", t), this._messageQueue.push(t));
    }
  }
  _debug(...t) {
    this._options.debug && this._debugLogger("RWS>", ...t);
  }
  _getNextDelay() {
    let { reconnectionDelayGrowFactor: t = Se.reconnectionDelayGrowFactor, minReconnectionDelay: n = Se.minReconnectionDelay, maxReconnectionDelay: i = Se.maxReconnectionDelay } = this._options, o = 0;
    return this._retryCount > 0 && (o = n * Math.pow(t, this._retryCount - 1), o > i && (o = i)), this._debug("next delay", o), o;
  }
  _wait() {
    return new Promise((t) => {
      setTimeout(t, this._getNextDelay());
    });
  }
  _connect() {
    if (this._connectLock || !this._shouldReconnect)
      return;
    this._connectLock = true;
    let { maxRetries: t = Se.maxRetries, connectionTimeout: n = Se.connectionTimeout } = this._options;
    if (this._retryCount >= t) {
      this._debug("max retries reached", this._retryCount, ">=", t);
      return;
    }
    this._retryCount++, this._debug("connect", this._retryCount), this._removeListeners(), this._wait().then(() => {
      if (this._closeCalled) {
        this._connectLock = false;
        return;
      }
      !this._options.WebSocket && typeof WebSocket > "u" && !Ai && (console.error("‼️ No WebSocket implementation available. You should define options.WebSocket."), Ai = true);
      let i = this._options.WebSocket || WebSocket;
      this._debug("connect", { url: this._url, protocols: this._protocols }), this._ws = this._protocols ? new i(this._url, this._protocols) : new i(this._url), this._ws.binaryType = this._binaryType, this._connectLock = false, this._addListeners(), this._connectTimeout = setTimeout(() => this._handleTimeout(), n);
    }).catch((i) => {
      this._connectLock = false, this._handleError(new Me.ErrorEvent(Error(i.message), this));
    });
  }
  _handleTimeout() {
    this._debug("timeout event"), this._handleError(new Me.ErrorEvent(Error("TIMEOUT"), this));
  }
  _disconnect(t = 1e3, n) {
    if (this._clearTimeouts(), !!this._ws) {
      this._removeListeners();
      try {
        this._ws.close(t, n), this._handleClose(new Me.CloseEvent(t, n, this));
      } catch {
      }
    }
  }
  _acceptOpen() {
    this._debug("accept open"), this._retryCount = 0;
  }
  _removeListeners() {
    this._ws && (this._debug("removeListeners"), this._ws.removeEventListener("open", this._handleOpen), this._ws.removeEventListener("close", this._handleClose), this._ws.removeEventListener("message", this._handleMessage), this._ws.removeEventListener("error", this._handleError));
  }
  _addListeners() {
    this._ws && (this._debug("addListeners"), this._ws.addEventListener("open", this._handleOpen), this._ws.addEventListener("close", this._handleClose), this._ws.addEventListener("message", this._handleMessage), this._ws.addEventListener("error", this._handleError));
  }
  _clearTimeouts() {
    clearTimeout(this._connectTimeout), clearTimeout(this._uptimeTimeout);
  }
};
var na = 5e3, He = class extends K {
  constructor(...e) {
    super(), this.criteria = new Set(e);
  }
  getCriteria() {
    return this.criteria;
  }
  _addCriteria(e) {
    this.criteria.add(e);
  }
  _removeCriteria(e) {
    this.criteria.delete(e);
  }
}, Wr = class {
  constructor(e, t) {
    this.connecting = false;
    this.criteria = e, this.emitter = new He(e), this.refCount = 1, this.subscriptionProps = t ? { ...t } : void 0;
  }
  clearAttachedSubscription() {
    this.subscriptionId = void 0, this.token = void 0;
  }
}, Nt = class {
  constructor(e, t, n) {
    this.pingTimer = void 0;
    this.waitingForPong = false;
    if (!(e instanceof Lt))
      throw new d(h("First arg of constructor should be a `MedplumClient`"));
    let i;
    try {
      i = new URL(t).toString();
    } catch {
      throw new d(h("Not a valid URL"));
    }
    let o = (n == null ? void 0 : n.ReconnectingWebSocket) ? new n.ReconnectingWebSocket(i, void 0, { debug: n == null ? void 0 : n.debug, debugLogger: n == null ? void 0 : n.debugLogger }) : new _t(i, void 0, { debug: n == null ? void 0 : n.debug, debugLogger: n == null ? void 0 : n.debugLogger });
    this.medplum = e, this.ws = o, this.masterSubEmitter = new He(), this.criteriaEntries = /* @__PURE__ */ new Map(), this.criteriaEntriesBySubscriptionId = /* @__PURE__ */ new Map(), this.wsClosed = false, this.pingIntervalMs = (n == null ? void 0 : n.pingIntervalMs) ?? na, this.currentProfile = e.getProfile(), this.setupListeners();
  }
  setupListeners() {
    let e = this.ws;
    e.addEventListener("message", (t) => {
      var _a, _b, _c, _d, _e, _f;
      try {
        let n = JSON.parse(t.data);
        if (n.type === "pong") {
          this.waitingForPong = false;
          return;
        }
        let i = n, o = (_b = (_a = i == null ? void 0 : i.entry) == null ? void 0 : _a[0]) == null ? void 0 : _b.resource;
        if (o.type === "heartbeat") {
          (_c = this.masterSubEmitter) == null ? void 0 : _c.dispatchEvent({ type: "heartbeat", payload: i });
          return;
        }
        if (o.type === "handshake") {
          let a = fe$1(o.subscription), c = { type: "connect", payload: { subscriptionId: a } };
          (_d = this.masterSubEmitter) == null ? void 0 : _d.dispatchEvent(c);
          let u = this.criteriaEntriesBySubscriptionId.get(a);
          if (!u) {
            console.warn("Received handshake for criteria the SubscriptionManager is not listening for yet");
            return;
          }
          u.connecting = false, u.emitter.dispatchEvent({ ...c });
          return;
        }
        (_e = this.masterSubEmitter) == null ? void 0 : _e.dispatchEvent({ type: "message", payload: i });
        let s = this.criteriaEntriesBySubscriptionId.get(fe$1(o.subscription));
        if (!s) {
          console.warn("Received notification for criteria the SubscriptionManager is not listening for");
          return;
        }
        s.emitter.dispatchEvent({ type: "message", payload: i });
      } catch (n) {
        console.error(n);
        let i = { type: "error", payload: n };
        (_f = this.masterSubEmitter) == null ? void 0 : _f.dispatchEvent(i);
        for (let o of this.getAllCriteriaEmitters())
          o.dispatchEvent({ ...i });
      }
    }), e.addEventListener("error", () => {
      var _a;
      let t = { type: "error", payload: new d(ln(new Error("WebSocket error"))) };
      (_a = this.masterSubEmitter) == null ? void 0 : _a.dispatchEvent(t);
      for (let n of this.getAllCriteriaEmitters())
        n.dispatchEvent({ ...t });
    }), e.addEventListener("close", () => {
      var _a, _b;
      let t = { type: "close" };
      (_a = this.masterSubEmitter) == null ? void 0 : _a.dispatchEvent(t);
      for (let n of this.getAllCriteriaEmitters())
        n.dispatchEvent({ ...t });
      this.pingTimer && (clearInterval(this.pingTimer), this.pingTimer = void 0, this.waitingForPong = false), this.wsClosed && (this.criteriaEntries.clear(), this.criteriaEntriesBySubscriptionId.clear(), (_b = this.masterSubEmitter) == null ? void 0 : _b.removeAllListeners());
    }), e.addEventListener("open", () => {
      var _a;
      let t = { type: "open" };
      (_a = this.masterSubEmitter) == null ? void 0 : _a.dispatchEvent(t);
      for (let n of this.getAllCriteriaEmitters())
        n.dispatchEvent({ ...t });
      this.refreshAllSubscriptions().catch(console.error), this.pingTimer || (this.pingTimer = setInterval(() => {
        if (this.waitingForPong) {
          this.waitingForPong = false, e.reconnect();
          return;
        }
        e.send(JSON.stringify({ type: "ping" })), this.waitingForPong = true;
      }, this.pingIntervalMs));
    }), this.medplum.addEventListener("change", () => {
      var _a;
      let t = this.medplum.getProfile();
      this.currentProfile && t === void 0 ? this.ws.close() : t && ((_a = this.currentProfile) == null ? void 0 : _a.id) !== t.id && this.ws.reconnect(), this.currentProfile = t;
    });
  }
  emitError(e, t) {
    var _a;
    let n = { type: "error", payload: t };
    (_a = this.masterSubEmitter) == null ? void 0 : _a.dispatchEvent(n), e.emitter.dispatchEvent({ ...n });
  }
  maybeEmitDisconnect(e) {
    var _a;
    let { subscriptionId: t } = e;
    if (t) {
      let n = { type: "disconnect", payload: { subscriptionId: t } };
      (_a = this.masterSubEmitter) == null ? void 0 : _a.dispatchEvent(n), e.emitter.dispatchEvent({ ...n });
    } else
      console.warn("Called disconnect for `CriteriaEntry` before `subscriptionId` was present.");
  }
  async getTokenForCriteria(e) {
    var _a, _b;
    let t = e == null ? void 0 : e.subscriptionId;
    t || (t = (await this.medplum.createResource({ ...e.subscriptionProps, resourceType: "Subscription", status: "active", reason: `WebSocket subscription for ${de(this.medplum.getProfile())}`, channel: { type: "websocket" }, criteria: e.criteria })).id);
    let { parameter: n } = await this.medplum.get(`fhir/R4/Subscription/${t}/$get-ws-binding-token`), i = (_a = n == null ? void 0 : n.find((s) => s.name === "token")) == null ? void 0 : _a.valueString, o = (_b = n == null ? void 0 : n.find((s) => s.name === "websocket-url")) == null ? void 0 : _b.valueUrl;
    if (!i)
      throw new d(h("Failed to get token"));
    if (!o)
      throw new d(h("Failed to get URL from $get-ws-binding-token"));
    return [t, i];
  }
  maybeGetCriteriaEntry(e, t) {
    let n = this.criteriaEntries.get(e);
    if (n) {
      if (!t)
        return n.bareCriteria;
      for (let i of n.criteriaWithProps)
        if (te(t, i.subscriptionProps))
          return i;
    }
  }
  getAllCriteriaEmitters() {
    let e = [];
    for (let t of this.criteriaEntries.values()) {
      t.bareCriteria && e.push(t.bareCriteria.emitter);
      for (let n of t.criteriaWithProps)
        e.push(n.emitter);
    }
    return e;
  }
  addCriteriaEntry(e) {
    let { criteria: t, subscriptionProps: n } = e, i;
    this.criteriaEntries.has(t) ? i = this.criteriaEntries.get(t) : (i = { criteriaWithProps: [] }, this.criteriaEntries.set(t, i)), n ? i.criteriaWithProps.push(e) : i.bareCriteria = e;
  }
  removeCriteriaEntry(e) {
    var _a;
    let { criteria: t, subscriptionProps: n, subscriptionId: i, token: o } = e;
    if (!this.criteriaEntries.has(t))
      return;
    let s = this.criteriaEntries.get(t);
    n ? s.criteriaWithProps = s.criteriaWithProps.filter((a) => {
      let c = a.subscriptionProps;
      return !te(n, c);
    }) : s.bareCriteria = void 0, !s.bareCriteria && s.criteriaWithProps.length === 0 && (this.criteriaEntries.delete(t), (_a = this.masterSubEmitter) == null ? void 0 : _a._removeCriteria(t)), i && this.criteriaEntriesBySubscriptionId.delete(i), o && this.ws.readyState === WebSocket.OPEN && this.ws.send(JSON.stringify({ type: "unbind-from-token", payload: { token: o } }));
  }
  async subscribeToCriteria(e) {
    if (!(this.ws.readyState !== WebSocket.OPEN || e.connecting)) {
      e.connecting = true;
      try {
        let [t, n] = await this.getTokenForCriteria(e);
        e.subscriptionId = t, e.token = n, this.criteriaEntriesBySubscriptionId.set(t, e), this.ws.send(JSON.stringify({ type: "bind-with-token", payload: { token: n } }));
      } catch (t) {
        console.error(Ce(t)), this.emitError(e, t), this.removeCriteriaEntry(e);
      }
    }
  }
  async refreshAllSubscriptions() {
    this.criteriaEntriesBySubscriptionId.clear();
    for (let e of this.criteriaEntries.values())
      for (let t of [...e.bareCriteria ? [e.bareCriteria] : [], ...e.criteriaWithProps])
        t.clearAttachedSubscription(), await this.subscribeToCriteria(t);
  }
  addCriteria(e, t) {
    this.masterSubEmitter && this.masterSubEmitter._addCriteria(e);
    let n = this.maybeGetCriteriaEntry(e, t);
    if (n)
      return n.refCount += 1, n.emitter;
    let i = new Wr(e, t);
    return this.addCriteriaEntry(i), this.subscribeToCriteria(i).catch(console.error), i.emitter;
  }
  removeCriteria(e, t) {
    let n = this.maybeGetCriteriaEntry(e, t);
    if (!n) {
      console.warn("Criteria not known to `SubscriptionManager`. Possibly called remove too many times.");
      return;
    }
    n.refCount -= 1, !(n.refCount > 0) && (this.maybeEmitDisconnect(n), this.removeCriteriaEntry(n));
  }
  getWebSocket() {
    return this.ws;
  }
  closeWebSocket() {
    this.wsClosed || (this.wsClosed = true, this.ws.close());
  }
  reconnectWebSocket() {
    this.ws.reconnect(), this.wsClosed = false;
  }
  getCriteriaCount() {
    return this.getAllCriteriaEmitters().length;
  }
  getMasterEmitter() {
    return this.masterSubEmitter || (this.masterSubEmitter = new He(...Array.from(this.criteriaEntries.keys()))), this.masterSubEmitter;
  }
};
var sa = A.FHIR_JSON + ", */*; q=0.1", aa = "https://api.medplum.com/", ca = 1e3, ua = 6e4, la = 0, pa = 3e5, da = "Binary/", Oi = { resourceType: "Device", id: "system", deviceName: [{ type: "model-name", name: "System" }] }, fa = ((o) => (o.ClientCredentials = "client_credentials", o.AuthorizationCode = "authorization_code", o.RefreshToken = "refresh_token", o.JwtBearer = "urn:ietf:params:oauth:grant-type:jwt-bearer", o.TokenExchange = "urn:ietf:params:oauth:grant-type:token-exchange", o))(fa || {}), ma = ((o) => (o.AccessToken = "urn:ietf:params:oauth:token-type:access_token", o.RefreshToken = "urn:ietf:params:oauth:token-type:refresh_token", o.IdToken = "urn:ietf:params:oauth:token-type:id_token", o.Saml1Token = "urn:ietf:params:oauth:token-type:saml1", o.Saml2Token = "urn:ietf:params:oauth:token-type:saml2", o))(ma || {}), ha = ((o) => (o.ClientSecretBasic = "client_secret_basic", o.ClientSecretPost = "client_secret_post", o.ClientSecretJwt = "client_secret_jwt", o.PrivateKeyJwt = "private_key_jwt", o.None = "none", o))(ha || {}), ya = ((e) => (e.JwtBearer = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer", e))(ya || {}), Lt = class extends K {
  constructor(t) {
    super();
    this.initComplete = true;
    if ((t == null ? void 0 : t.baseUrl) && !t.baseUrl.startsWith("http"))
      throw new Error("Base URL must start with http or https");
    this.options = t ?? {}, this.fetch = (t == null ? void 0 : t.fetch) ?? ga(), this.storage = (t == null ? void 0 : t.storage) ?? new Ge(), this.createPdfImpl = t == null ? void 0 : t.createPdf, this.baseUrl = Pr((t == null ? void 0 : t.baseUrl) ?? aa), this.fhirBaseUrl = q$1(this.baseUrl, (t == null ? void 0 : t.fhirUrlPath) ?? "fhir/R4"), this.authorizeUrl = q$1(this.baseUrl, (t == null ? void 0 : t.authorizeUrl) ?? "oauth2/authorize"), this.tokenUrl = q$1(this.baseUrl, (t == null ? void 0 : t.tokenUrl) ?? "oauth2/token"), this.logoutUrl = q$1(this.baseUrl, (t == null ? void 0 : t.logoutUrl) ?? "oauth2/logout"), this.fhircastHubUrl = q$1(this.baseUrl, (t == null ? void 0 : t.fhircastHubUrl) ?? "fhircast/STU3"), this.clientId = (t == null ? void 0 : t.clientId) ?? "", this.clientSecret = (t == null ? void 0 : t.clientSecret) ?? "", this.defaultHeaders = (t == null ? void 0 : t.defaultHeaders) ?? {}, this.onUnauthenticated = t == null ? void 0 : t.onUnauthenticated, this.refreshGracePeriod = (t == null ? void 0 : t.refreshGracePeriod) ?? pa, this.cacheTime = (t == null ? void 0 : t.cacheTime) ?? (typeof window > "u" ? la : ua), this.cacheTime > 0 ? this.requestCache = new Ot((t == null ? void 0 : t.resourceCacheSize) ?? ca) : this.requestCache = void 0, (t == null ? void 0 : t.autoBatchTime) ? (this.autoBatchTime = t.autoBatchTime, this.autoBatchQueue = []) : (this.autoBatchTime = 0, this.autoBatchQueue = void 0), (t == null ? void 0 : t.accessToken) && this.setAccessToken(t.accessToken), this.storage.getInitPromise === void 0 ? ((t == null ? void 0 : t.accessToken) || this.attemptResumeActiveLogin().catch(console.error), this.initPromise = Promise.resolve(), this.dispatchEvent({ type: "storageInitialized" })) : (this.initComplete = false, this.initPromise = this.storage.getInitPromise(), this.initPromise.then(() => {
      (t == null ? void 0 : t.accessToken) || this.attemptResumeActiveLogin().catch(console.error), this.initComplete = true, this.dispatchEvent({ type: "storageInitialized" });
    }).catch((n) => {
      console.error(n), this.initComplete = true, this.dispatchEvent({ type: "storageInitFailed", payload: { error: n } });
    })), this.setupStorageListener();
  }
  get isInitialized() {
    return this.initComplete;
  }
  getInitPromise() {
    return this.initPromise;
  }
  async attemptResumeActiveLogin() {
    let t = this.getActiveLogin();
    t && (this.setAccessToken(t.accessToken, t.refreshToken), await this.refreshProfile());
  }
  getBaseUrl() {
    return this.baseUrl;
  }
  getAuthorizeUrl() {
    return this.authorizeUrl;
  }
  getTokenUrl() {
    return this.tokenUrl;
  }
  getLogoutUrl() {
    return this.logoutUrl;
  }
  getFhircastHubUrl() {
    return this.fhircastHubUrl;
  }
  getDefaultHeaders() {
    return this.defaultHeaders;
  }
  clear() {
    this.storage.clear(), typeof window < "u" && sessionStorage.clear(), this.clearActiveLogin();
  }
  clearActiveLogin() {
    var _a;
    this.storage.setString("activeLogin", void 0), (_a = this.requestCache) == null ? void 0 : _a.clear(), this.accessToken = void 0, this.refreshToken = void 0, this.refreshPromise = void 0, this.accessTokenExpires = void 0, this.sessionDetails = void 0, this.medplumServer = void 0, this.dispatchEvent({ type: "change" });
  }
  invalidateUrl(t) {
    var _a;
    t = t.toString(), (_a = this.requestCache) == null ? void 0 : _a.delete(t);
  }
  invalidateAll() {
    var _a;
    (_a = this.requestCache) == null ? void 0 : _a.clear();
  }
  invalidateSearches(t) {
    let n = q$1(this.fhirBaseUrl, t);
    if (this.requestCache)
      for (let i of this.requestCache.keys())
        (i.endsWith(n) || i.includes(n + "?")) && this.requestCache.delete(i);
  }
  get(t, n = {}) {
    t = t.toString();
    let i = this.getCacheEntry(t, n);
    if (i)
      return i.value;
    let o;
    t.startsWith(this.fhirBaseUrl) && this.autoBatchQueue && !n.disableAutoBatch ? o = new Promise((a, c) => {
      this.autoBatchQueue.push({ method: "GET", url: t.replace(this.fhirBaseUrl, ""), options: n, resolve: a, reject: c }), this.autoBatchTimerId || (this.autoBatchTimerId = setTimeout(() => this.executeAutoBatch(), this.autoBatchTime));
    }) : o = this.request("GET", t, n);
    let s = new M(o);
    return this.setCacheEntry(t, s), s;
  }
  post(t, n, i, o = {}) {
    return t = t.toString(), this.setRequestBody(o, n), i && this.setRequestContentType(o, i), this.invalidateUrl(t), this.request("POST", t, o);
  }
  put(t, n, i, o = {}) {
    return t = t.toString(), this.setRequestBody(o, n), i && this.setRequestContentType(o, i), this.invalidateUrl(t), this.request("PUT", t, o);
  }
  patch(t, n, i = {}) {
    return t = t.toString(), this.setRequestBody(i, n), this.setRequestContentType(i, A.JSON_PATCH), this.invalidateUrl(t), this.request("PATCH", t, i);
  }
  delete(t, n) {
    return t = t.toString(), this.invalidateUrl(t), this.request("DELETE", t, n);
  }
  async startNewUser(t, n) {
    let { codeChallengeMethod: i, codeChallenge: o } = await this.startPkce();
    return this.post("auth/newuser", { ...t, clientId: t.clientId ?? this.clientId, codeChallengeMethod: i, codeChallenge: o }, void 0, n);
  }
  async startNewProject(t, n) {
    return this.post("auth/newproject", t, void 0, n);
  }
  async startNewPatient(t, n) {
    return this.post("auth/newpatient", t, void 0, n);
  }
  async startLogin(t, n) {
    return this.post("auth/login", { ...await this.ensureCodeChallenge(t), clientId: t.clientId ?? this.clientId, scope: t.scope }, void 0, n);
  }
  async startGoogleLogin(t, n) {
    return this.post("auth/google", { ...await this.ensureCodeChallenge(t), clientId: t.clientId ?? this.clientId, scope: t.scope }, void 0, n);
  }
  async ensureCodeChallenge(t) {
    return t.codeChallenge ? t : { ...t, ...await this.startPkce() };
  }
  async signOut() {
    await this.post(this.logoutUrl, {}), this.clear();
  }
  async signInWithRedirect(t) {
    let i = new URLSearchParams(window.location.search).get("code");
    if (!i) {
      await this.requestAuthorization(t);
      return;
    }
    return this.processCode(i);
  }
  signOutWithRedirect() {
    window.location.assign(this.logoutUrl);
  }
  async signInWithExternalAuth(t, n, i, o, s = true) {
    let a = o;
    s && (a = await this.ensureCodeChallenge(o)), window.location.assign(this.getExternalAuthRedirectUri(t, n, i, a, s));
  }
  async exchangeExternalAccessToken(t, n) {
    if (n = n ?? this.clientId, !n)
      throw new Error("MedplumClient is missing clientId");
    let i = new URLSearchParams();
    return i.set("grant_type", "urn:ietf:params:oauth:grant-type:token-exchange"), i.set("subject_token_type", "urn:ietf:params:oauth:token-type:access_token"), i.set("client_id", n), i.set("subject_token", t), this.fetchTokens(i);
  }
  getExternalAuthRedirectUri(t, n, i, o, s = true) {
    let a = new URL(t);
    if (a.searchParams.set("response_type", "code"), a.searchParams.set("client_id", n), a.searchParams.set("redirect_uri", i), a.searchParams.set("scope", o.scope ?? "openid profile email"), a.searchParams.set("state", JSON.stringify(o)), s) {
      let { codeChallenge: c, codeChallengeMethod: u } = o;
      if (!u)
        throw new Error("`LoginRequest` for external auth must include a `codeChallengeMethod`.");
      if (!c)
        throw new Error("`LoginRequest` for external auth must include a `codeChallenge`.");
      a.searchParams.set("code_challenge_method", u), a.searchParams.set("code_challenge", c);
    }
    return a.toString();
  }
  fhirUrl(...t) {
    return new URL(q$1(this.fhirBaseUrl, t.join("/")));
  }
  fhirSearchUrl(t, n) {
    let i = this.fhirUrl(t);
    return n && (i.search = Yn(n)), i;
  }
  search(t, n, i) {
    let o = this.fhirSearchUrl(t, n), s = "search-" + o.toString(), a = this.getCacheEntry(s, i);
    if (a)
      return a.value;
    let c = new M((async () => {
      let u = await this.get(o, i);
      if (u.entry)
        for (let l of u.entry)
          this.cacheResource(l.resource);
      return u;
    })());
    return this.setCacheEntry(s, c), c;
  }
  searchOne(t, n, i) {
    let o = this.fhirSearchUrl(t, n);
    o.searchParams.set("_count", "1"), o.searchParams.sort();
    let s = "searchOne-" + o.toString(), a = this.getCacheEntry(s, i);
    if (a)
      return a.value;
    let c = new M(this.search(t, o.searchParams, i).then((u) => {
      var _a, _b;
      return (_b = (_a = u.entry) == null ? void 0 : _a[0]) == null ? void 0 : _b.resource;
    }));
    return this.setCacheEntry(s, c), c;
  }
  searchResources(t, n, i) {
    let s = "searchResources-" + this.fhirSearchUrl(t, n).toString(), a = this.getCacheEntry(s, i);
    if (a)
      return a.value;
    let c = new M(this.search(t, n, i).then(Vi));
    return this.setCacheEntry(s, c), c;
  }
  async *searchResourcePages(t, n, i) {
    var _a, _b;
    let o = this.fhirSearchUrl(t, n);
    for (; o; ) {
      let s = new URL(o).searchParams, a = await this.search(t, s, i), c = (_a = a.link) == null ? void 0 : _a.find((u) => u.relation === "next");
      if (!((_b = a.entry) == null ? void 0 : _b.length) && !c)
        break;
      yield Vi(a), o = (c == null ? void 0 : c.url) ? new URL(c.url) : void 0;
    }
  }
  searchValueSet(t, n, i) {
    return this.valueSetExpand({ url: t, filter: n }, i);
  }
  valueSetExpand(t, n) {
    let i = this.fhirUrl("ValueSet", "$expand");
    return i.search = new URLSearchParams(t).toString(), this.get(i.toString(), n);
  }
  getCached(t, n) {
    var _a, _b;
    let i = (_b = (_a = this.requestCache) == null ? void 0 : _a.get(this.fhirUrl(t, n).toString())) == null ? void 0 : _b.value;
    return (i == null ? void 0 : i.isOk()) ? i.read() : void 0;
  }
  getCachedReference(t) {
    let n = t.reference;
    if (!n)
      return;
    if (n === "system")
      return Oi;
    let [i, o] = n.split("/");
    if (!(!i || !o))
      return this.getCached(i, o);
  }
  readResource(t, n, i) {
    if (!n)
      throw new Error('The "id" parameter cannot be null, undefined, or an empty string.');
    return this.get(this.fhirUrl(t, n), i);
  }
  readReference(t, n) {
    let i = t.reference;
    if (!i)
      return new M(Promise.reject(new Error("Missing reference")));
    if (i === "system")
      return new M(Promise.resolve(Oi));
    let [o, s] = i.split("/");
    return !o || !s ? new M(Promise.reject(new Error("Invalid reference"))) : this.readResource(o, s, n);
  }
  requestSchema(t) {
    if (En(t))
      return Promise.resolve();
    let n = t + "-requestSchema", i = this.getCacheEntry(n, void 0);
    if (i)
      return i.value;
    let o = new M((async () => {
      let s = `{
      StructureDefinitionList(name: "${t}") {
        resourceType,
        name,
        kind,
        description,
        type,
        url,
        snapshot {
          element {
            id,
            path,
            definition,
            min,
            max,
            base {
              path,
              min,
              max
            },
            contentReference,
            type {
              code,
              profile,
              targetProfile
            },
            binding {
              strength,
              valueSet
            }
          }
        }
      }
      SearchParameterList(base: "${t}", _count: 100) {
        base,
        code,
        type,
        expression,
        target
      }
    }`.replace(/\s+/g, " "), a = await this.graphql(s);
      ur(a.data.StructureDefinitionList.filter((c) => c.name === t));
      for (let c of a.data.SearchParameterList)
        Or(c);
    })());
    return this.setCacheEntry(n, o), o;
  }
  requestProfileSchema(t, n) {
    if (!(n == null ? void 0 : n.expandProfile) && Rn(t))
      return Promise.resolve();
    let i = t + "-requestSchema" + ((n == null ? void 0 : n.expandProfile) ? "-nested" : ""), o = this.getCacheEntry(i, void 0);
    if (o)
      return o.value;
    let s = new M((async () => {
      if (n == null ? void 0 : n.expandProfile) {
        let a = this.fhirUrl("StructureDefinition", "$expand-profile");
        a.search = new URLSearchParams({ url: t }).toString();
        let c = await this.post(a.toString(), {});
        ur(c);
      } else {
        let a = await this.searchOne("StructureDefinition", { url: t, _sort: "-_lastUpdated" });
        if (!a) {
          console.warn(`No StructureDefinition found for ${t}!`);
          return;
        }
        lr(a);
      }
    })());
    return this.setCacheEntry(i, s), s;
  }
  readHistory(t, n, i) {
    return this.get(this.fhirUrl(t, n, "_history"), i);
  }
  readVersion(t, n, i, o) {
    return this.get(this.fhirUrl(t, n, "_history", i), o);
  }
  readPatientEverything(t, n) {
    return this.get(this.fhirUrl("Patient", t, "$everything"), n);
  }
  createResource(t, n) {
    if (!t.resourceType)
      throw new Error("Missing resourceType");
    return this.invalidateSearches(t.resourceType), this.post(this.fhirUrl(t.resourceType), t, void 0, n);
  }
  async createResourceIfNoneExist(t, n, i) {
    let o = this.fhirUrl(t.resourceType);
    i ? i.headers ? Array.isArray(i.headers) ? i.headers.push(["If-None-Exist", n]) : i.headers instanceof Headers ? i.headers.set("If-None-Exist", n) : i.headers["If-None-Exist"] = n : i.headers = { "If-None-Exist": n } : i = { headers: { "If-None-Exist": n } };
    let s = await this.post(o, t, void 0, i);
    return this.cacheResource(s), this.invalidateUrl(this.fhirUrl(t.resourceType, t.id, "_history")), this.invalidateSearches(t.resourceType), s;
  }
  async upsertResource(t, n, i) {
    let o = this.fhirSearchUrl(t.resourceType, n), s = await this.put(o, t, void 0, i);
    return s || (s = t), this.cacheResource(s), this.invalidateUrl(this.fhirUrl(t.resourceType, t.id, "_history")), this.invalidateSearches(t.resourceType), s;
  }
  async createAttachment(t, n, i, o, s) {
    let a = Di(t, n, i, o);
    if (a.contentType === A.XML) {
      let l = a.data, m2;
      l instanceof Blob ? m2 = await new Promise((x, B) => {
        let W = new FileReader();
        W.onload = () => {
          if (!W.result) {
            B(new Error("Failed to load file"));
            return;
          }
          x(W.result);
        }, W.readAsText(l, "utf-8");
      }) : ArrayBuffer.isView(l) ? m2 = new TextDecoder().decode(l) : m2 = l, m2.includes("<ClinicalDocument") && m2.includes("urn:hl7-org:v3") && (a = { ...a, contentType: A.CDA_XML });
    }
    let c = s ?? (typeof n == "object" ? n : {}), u = await this.createBinary(a, c);
    return { contentType: a.contentType, url: u.url, title: a.filename };
  }
  createBinary(t, n, i, o, s) {
    let a = Di(t, n, i, o), c = s ?? (typeof n == "object" ? n : {}), { data: u, contentType: l, filename: m2, securityContext: x, onProgress: B } = a, W = this.fhirUrl("Binary");
    return m2 && W.searchParams.set("_filename", m2), (x == null ? void 0 : x.reference) && this.setRequestHeader(c, "X-Security-Context", x.reference), B ? this.uploadwithProgress(W, u, l, B, c) : this.post(W, u, l, c);
  }
  uploadwithProgress(t, n, i, o, s) {
    return new Promise((a, c) => {
      var _a;
      let u = new XMLHttpRequest(), l = () => u.abort();
      (_a = s == null ? void 0 : s.signal) == null ? void 0 : _a.addEventListener("abort", l);
      let m2 = (x) => {
        var _a2;
        (_a2 = s == null ? void 0 : s.signal) == null ? void 0 : _a2.removeEventListener("abort", l), x instanceof Error ? c(x) : a(x);
      };
      if (u.responseType = "json", u.onabort = () => m2(new DOMException("Request aborted", "AbortError")), u.onerror = () => m2(new Error("Request error")), o && (u.upload.onprogress = (x) => o(x), u.upload.onload = (x) => o(x)), u.onload = () => {
        u.status >= 200 && u.status < 300 ? m2(u.response) : m2(new d(et(u.response || u.statusText)));
      }, u.open("POST", t), u.withCredentials = true, u.setRequestHeader("Authorization", "Bearer " + this.accessToken), u.setRequestHeader("Cache-Control", "no-cache, no-store, max-age=0"), u.setRequestHeader("Content-Type", i), this.options.extendedMode !== false && u.setRequestHeader("X-Medplum", "extended"), s == null ? void 0 : s.headers) {
        let x = s.headers;
        for (let [B, W] of Object.entries(x))
          u.setRequestHeader(B, W);
      }
      u.send(n);
    });
  }
  async createPdf(t, n, i, o) {
    if (!this.createPdfImpl)
      throw new Error("PDF creation not enabled");
    let s = Ta(t, n, i, o), a = typeof n == "object" ? n : {}, { docDefinition: c, tableLayouts: u, fonts: l, ...m2 } = s, x = await this.createPdfImpl(c, u, l), B = { ...m2, data: x, contentType: "application/pdf" };
    return this.createBinary(B, a);
  }
  createComment(t, n, i) {
    let o = this.getProfile(), s, a;
    return t.resourceType === "Encounter" && (s = re(t), a = t.subject), t.resourceType === "ServiceRequest" && (s = t.encounter, a = t.subject), t.resourceType === "Patient" && (a = re(t)), this.createResource({ resourceType: "Communication", status: "completed", basedOn: [re(t)], encounter: s, subject: a, sender: o ? re(o) : void 0, sent: (/* @__PURE__ */ new Date()).toISOString(), payload: [{ contentString: n }] }, i);
  }
  async updateResource(t, n) {
    if (!t.resourceType)
      throw new Error("Missing resourceType");
    if (!t.id)
      throw new Error("Missing id");
    let i = await this.put(this.fhirUrl(t.resourceType, t.id), t, void 0, n);
    return i || (i = t), this.cacheResource(i), this.invalidateUrl(this.fhirUrl(t.resourceType, t.id, "_history")), this.invalidateSearches(t.resourceType), i;
  }
  async patchResource(t, n, i, o) {
    let s = await this.patch(this.fhirUrl(t, n), i, o);
    return this.cacheResource(s), this.invalidateUrl(this.fhirUrl(t, n, "_history")), this.invalidateSearches(t), s;
  }
  deleteResource(t, n, i) {
    return this.deleteCacheEntry(this.fhirUrl(t, n).toString()), this.invalidateSearches(t), this.delete(this.fhirUrl(t, n), i);
  }
  validateResource(t, n) {
    return this.post(this.fhirUrl(t.resourceType, "$validate"), t, void 0, n);
  }
  executeBot(t, n, i, o) {
    let s;
    if (typeof t == "string") {
      let a = t;
      s = this.fhirUrl("Bot", a, "$execute");
    } else {
      let a = t;
      s = this.fhirUrl("Bot", "$execute"), s.searchParams.set("identifier", a.system + "|" + a.value);
    }
    return this.post(s, n, i, o);
  }
  executeBatch(t, n) {
    return this.post(this.fhirBaseUrl, t, void 0, n);
  }
  sendEmail(t, n) {
    return this.post("email/v1/send", t, A.JSON, n);
  }
  graphql(t, n, i, o) {
    return this.post(this.fhirUrl("$graphql"), { query: t, operationName: n, variables: i }, A.JSON, o);
  }
  readResourceGraph(t, n, i, o) {
    return this.get(`${this.fhirUrl(t, n)}/$graph?graph=${i}`, o);
  }
  pushToAgent(t, n, i, o, s, a) {
    return this.post(this.fhirUrl("Agent", fe$1(t), "$push"), { destination: typeof n == "string" ? n : de(n), body: i, contentType: o, waitForResponse: s }, A.FHIR_JSON, a);
  }
  getActiveLogin() {
    return this.storage.getObject("activeLogin");
  }
  async setActiveLogin(t) {
    var _a, _b;
    (!((_a = this.sessionDetails) == null ? void 0 : _a.profile) || de(this.sessionDetails.profile) !== ((_b = t.profile) == null ? void 0 : _b.reference)) && this.clearActiveLogin(), this.setAccessToken(t.accessToken, t.refreshToken), this.storage.setObject("activeLogin", t), this.addLogin(t), this.refreshPromise = void 0, await this.refreshProfile();
  }
  getAccessToken() {
    return this.accessToken;
  }
  isAuthenticated(t) {
    return this.accessTokenExpires !== void 0 && Date.now() < this.accessTokenExpires - (t ?? this.refreshGracePeriod);
  }
  setAccessToken(t, n) {
    this.accessToken = t, this.refreshToken = n, this.accessTokenExpires = Ri(t), this.medplumServer = bi(t);
  }
  getLogins() {
    return this.storage.getObject("logins") ?? [];
  }
  addLogin(t) {
    let n = this.getLogins().filter((i) => {
      var _a, _b;
      return ((_a = i.profile) == null ? void 0 : _a.reference) !== ((_b = t.profile) == null ? void 0 : _b.reference);
    });
    n.push(t), this.storage.setObject("logins", n);
  }
  async refreshProfile() {
    return this.medplumServer ? (this.profilePromise = new Promise((t, n) => {
      this.get("auth/me", { cache: "no-cache" }).then((i) => {
        var _a, _b;
        this.profilePromise = void 0;
        let o = ((_b = (_a = this.sessionDetails) == null ? void 0 : _a.profile) == null ? void 0 : _b.id) !== i.profile.id;
        this.sessionDetails = i, o && this.dispatchEvent({ type: "change" }), t(i.profile), this.dispatchEvent({ type: "profileRefreshed" });
      }).catch(n);
    }), this.dispatchEvent({ type: "profileRefreshing" }), this.profilePromise) : Promise.resolve(void 0);
  }
  isLoading() {
    var _a;
    return !this.isInitialized || !!this.profilePromise && !((_a = this.sessionDetails) == null ? void 0 : _a.profile);
  }
  isSuperAdmin() {
    var _a;
    return !!((_a = this.sessionDetails) == null ? void 0 : _a.project.superAdmin);
  }
  isProjectAdmin() {
    var _a;
    return !!((_a = this.sessionDetails) == null ? void 0 : _a.membership.admin);
  }
  getProject() {
    var _a;
    return (_a = this.sessionDetails) == null ? void 0 : _a.project;
  }
  getProjectMembership() {
    var _a;
    return (_a = this.sessionDetails) == null ? void 0 : _a.membership;
  }
  getProfile() {
    var _a;
    return (_a = this.sessionDetails) == null ? void 0 : _a.profile;
  }
  async getProfileAsync() {
    return this.profilePromise ? this.profilePromise : this.sessionDetails ? this.sessionDetails.profile : this.refreshProfile();
  }
  getUserConfiguration() {
    var _a;
    return (_a = this.sessionDetails) == null ? void 0 : _a.config;
  }
  getAccessPolicy() {
    var _a;
    return (_a = this.sessionDetails) == null ? void 0 : _a.accessPolicy;
  }
  async download(t, n = {}) {
    this.refreshPromise && await this.refreshPromise;
    let i = t.toString();
    i.startsWith(da) && (t = this.fhirUrl(i));
    let o = n.headers;
    return o || (o = {}, n.headers = o), o.Accept || (o.Accept = "*/*"), this.addFetchOptionsDefaults(n), (await this.fetchWithRetry(t.toString(), n)).blob();
  }
  async createMedia(t, n) {
    let { additionalFields: i, ...o } = t, s = await this.createResource({ resourceType: "Media", status: "preparation", content: { contentType: t.contentType }, ...i });
    o.securityContext || (o.securityContext = re(s));
    let a = await this.createAttachment(o, n);
    return this.updateResource({ ...s, status: "completed", content: a });
  }
  async uploadMedia(t, n, i, o, s) {
    return this.createMedia({ data: t, contentType: n, filename: i, additionalFields: o }, s);
  }
  async bulkExport(t = "", n, i, o) {
    let s = t && `${t}/`, a = this.fhirUrl(`${s}$export`);
    return n && a.searchParams.set("_type", n), i && a.searchParams.set("_since", i), this.startAsyncRequest(a.toString(), o);
  }
  async startAsyncRequest(t, n = {}) {
    this.addFetchOptionsDefaults(n);
    let i = n.headers;
    return i.Prefer = "respond-async", this.request("POST", t, n);
  }
  get keyValue() {
    return this.keyValueClient || (this.keyValueClient = new Dt(this)), this.keyValueClient;
  }
  getCacheEntry(t, n) {
    if (!this.requestCache || (n == null ? void 0 : n.cache) === "no-cache" || (n == null ? void 0 : n.cache) === "reload")
      return;
    let i = this.requestCache.get(t);
    if (!(!i || i.requestTime + this.cacheTime < Date.now()))
      return i;
  }
  setCacheEntry(t, n) {
    this.requestCache && this.requestCache.set(t, { requestTime: Date.now(), value: n });
  }
  cacheResource(t) {
    var _a, _b;
    (t == null ? void 0 : t.id) && !((_b = (_a = t.meta) == null ? void 0 : _a.tag) == null ? void 0 : _b.some((n) => n.code === "SUBSETTED")) && this.setCacheEntry(this.fhirUrl(t.resourceType, t.id).toString(), new M(Promise.resolve(t)));
  }
  deleteCacheEntry(t) {
    this.requestCache && this.requestCache.delete(t);
  }
  async request(t, n, i = {}, o = {}) {
    var _a;
    await this.refreshIfExpired(), i.method = t, this.addFetchOptionsDefaults(i);
    let s = await this.fetchWithRetry(n, i);
    if (s.status === 401)
      return this.handleUnauthenticated(t, n, i);
    if (s.status === 204 || s.status === 304)
      return;
    let c = (_a = s.headers.get("content-type")) == null ? void 0 : _a.includes("json");
    if (s.status === 404 && !c)
      throw new d(cn);
    let u = await this.parseBody(s, c);
    if (s.status === 200 && i.followRedirectOnOk || s.status === 201 && i.followRedirectOnCreated) {
      let l = await ki(s, u);
      if (l)
        return this.request("GET", l, { ...i, body: void 0 });
    }
    if (s.status === 202 && i.pollStatusOnAccepted) {
      let m2 = await ki(s, u) ?? o.statusUrl;
      if (m2)
        return this.pollStatus(m2, i, o);
    }
    if (s.status >= 400)
      throw new d(et(u));
    return u;
  }
  async parseBody(t, n) {
    let i;
    if (t.headers.get("content-length") !== "0") {
      if (n)
        try {
          i = await t.json();
        } catch (o) {
          throw console.error("Error parsing response", t.status, o), o;
        }
      else
        i = await t.text();
      return i;
    }
  }
  async fetchWithRetry(t, n) {
    t.startsWith("http") || (t = q$1(this.baseUrl, t));
    let i = (n == null ? void 0 : n.maxRetries) ?? 2, o = 200;
    for (let s = 0; s <= i; s++) {
      try {
        this.options.verbose && this.logRequest(t, n);
        let a = await this.fetch(t, n);
        if (this.options.verbose && this.logResponse(a), a.status < 500 || s === i)
          return a;
      } catch (a) {
        if (a.message === "Failed to fetch" && s === 0 && this.dispatchEvent({ type: "offline" }), a.name === "AbortError" || s === i)
          throw a;
      }
      await Rr(o);
    }
    throw new Error("Unreachable");
  }
  logRequest(t, n) {
    if (console.log(`> ${n.method} ${t}`), n.headers) {
      let i = n.headers;
      for (let o of lt(Object.keys(i)))
        console.log(`> ${o}: ${i[o]}`);
    }
  }
  logResponse(t) {
    console.log(`< ${t.status} ${t.statusText}`), t.headers && t.headers.forEach((n, i) => console.log(`< ${i}: ${n}`));
  }
  async pollStatus(t, n, i) {
    let o = { ...n, method: "GET", body: void 0, redirect: "follow" };
    if (i.pollCount === void 0)
      n.headers && typeof n.headers == "object" && "Prefer" in n.headers && (o.headers = { ...n.headers }, delete o.headers.Prefer), i.statusUrl = t, i.pollCount = 1;
    else {
      let s = n.pollStatusPeriod ?? 1e3;
      await Rr(s), i.pollCount++;
    }
    return this.request("GET", t, o, i);
  }
  async executeAutoBatch() {
    var _a, _b;
    if (this.autoBatchQueue === void 0)
      return;
    let t = [...this.autoBatchQueue];
    if (this.autoBatchQueue.length = 0, this.autoBatchTimerId = void 0, t.length === 1) {
      let o = t[0];
      try {
        o.resolve(await this.request(o.method, q$1(this.fhirBaseUrl, o.url), o.options));
      } catch (s) {
        o.reject(new d(et(s)));
      }
      return;
    }
    let n = { resourceType: "Bundle", type: "batch", entry: t.map((o) => ({ request: { method: o.method, url: o.url }, resource: o.options.body ? JSON.parse(o.options.body) : void 0 })) }, i = await this.post(this.fhirBaseUrl, n);
    for (let o = 0; o < t.length; o++) {
      let s = t[o], a = (_a = i.entry) == null ? void 0 : _a[o];
      ((_b = a == null ? void 0 : a.response) == null ? void 0 : _b.outcome) && !nr(a.response.outcome) ? s.reject(new d(a.response.outcome)) : s.resolve(a == null ? void 0 : a.resource);
    }
  }
  addFetchOptionsDefaults(t) {
    Object.entries(this.defaultHeaders).forEach(([n, i]) => {
      this.setRequestHeader(t, n, i);
    }), this.setRequestHeader(t, "Accept", sa, true), this.options.extendedMode !== false && this.setRequestHeader(t, "X-Medplum", "extended"), t.body && this.setRequestHeader(t, "Content-Type", A.FHIR_JSON, true), this.accessToken ? this.setRequestHeader(t, "Authorization", "Bearer " + this.accessToken) : this.basicAuth && this.setRequestHeader(t, "Authorization", "Basic " + this.basicAuth), t.cache || (t.cache = "no-cache"), t.credentials || (t.credentials = "include");
  }
  setRequestContentType(t, n) {
    this.setRequestHeader(t, "Content-Type", n);
  }
  setRequestHeader(t, n, i, o = false) {
    t.headers || (t.headers = {});
    let s = t.headers;
    o && s[n] || (s[n] = i);
  }
  setRequestBody(t, n) {
    typeof n == "string" || typeof Blob < "u" && (n instanceof Blob || (n == null ? void 0 : n.constructor.name) === "Blob") || typeof File < "u" && (n instanceof File || (n == null ? void 0 : n.constructor.name) === "File") || typeof Uint8Array < "u" && (n instanceof Uint8Array || (n == null ? void 0 : n.constructor.name) === "Uint8Array") ? t.body = n : n && (t.body = JSON.stringify(n));
  }
  handleUnauthenticated(t, n, i) {
    return this.refresh() ? this.request(t, n, i) : (this.clear(), this.onUnauthenticated && this.onUnauthenticated(), Promise.reject(new d(be)));
  }
  async startPkce() {
    let t = Nr();
    sessionStorage.setItem("pkceState", t);
    let n = Nr().slice(0, 128);
    sessionStorage.setItem("codeVerifier", n);
    let i = await yi(n), o = Gn(i).replaceAll("+", "-").replaceAll("/", "_").replaceAll("=", "");
    return sessionStorage.setItem("codeChallenge", o), { codeChallengeMethod: "S256", codeChallenge: o };
  }
  async requestAuthorization(t) {
    let n = await this.ensureCodeChallenge(t ?? {}), i = new URL(this.authorizeUrl);
    i.searchParams.set("response_type", "code"), i.searchParams.set("state", sessionStorage.getItem("pkceState")), i.searchParams.set("client_id", n.clientId ?? this.clientId), i.searchParams.set("redirect_uri", n.redirectUri ?? Ii()), i.searchParams.set("code_challenge_method", n.codeChallengeMethod), i.searchParams.set("code_challenge", n.codeChallenge), i.searchParams.set("scope", n.scope ?? "openid profile"), window.location.assign(i.toString());
  }
  processCode(t, n) {
    let i = new URLSearchParams();
    if (i.set("grant_type", "authorization_code"), i.set("code", t), i.set("client_id", (n == null ? void 0 : n.clientId) ?? this.clientId), i.set("redirect_uri", (n == null ? void 0 : n.redirectUri) ?? Ii()), typeof sessionStorage < "u") {
      let o = sessionStorage.getItem("codeVerifier");
      o && i.set("code_verifier", o);
    }
    return this.fetchTokens(i);
  }
  refreshIfExpired(t) {
    return !this.refreshPromise && this.accessTokenExpires !== void 0 && !this.isAuthenticated(t) && this.refresh(), this.refreshPromise ?? Promise.resolve();
  }
  refresh() {
    if (this.refreshPromise)
      return this.refreshPromise;
    if (this.refreshToken) {
      let t = new URLSearchParams();
      return t.set("grant_type", "refresh_token"), t.set("client_id", this.clientId), t.set("refresh_token", this.refreshToken), this.refreshPromise = this.fetchTokens(t), this.refreshPromise;
    }
    if (this.clientId && this.clientSecret)
      return this.refreshPromise = this.startClientLogin(this.clientId, this.clientSecret), this.refreshPromise;
  }
  async startClientLogin(t, n) {
    this.clientId = t, this.clientSecret = n;
    let i = new URLSearchParams();
    return i.set("grant_type", "client_credentials"), i.set("client_id", t), i.set("client_secret", n), this.fetchTokens(i);
  }
  async startJwtBearerLogin(t, n, i) {
    this.clientId = t;
    let o = new URLSearchParams();
    return o.set("grant_type", "urn:ietf:params:oauth:grant-type:jwt-bearer"), o.set("client_id", t), o.set("assertion", n), o.set("scope", i), this.fetchTokens(o);
  }
  async startJwtAssertionLogin(t) {
    let n = new URLSearchParams();
    return n.append("grant_type", "client_credentials"), n.append("client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer"), n.append("client_assertion", t), this.fetchTokens(n);
  }
  setBasicAuth(t, n) {
    this.clientId = t, this.clientSecret = n, this.basicAuth = hi(t + ":" + n);
  }
  async fhircastSubscribe(t, n) {
    if (!(typeof t == "string" && t !== ""))
      throw new d(h("Invalid topic provided. Topic must be a valid string."));
    if (!(typeof n == "object" && Array.isArray(n) && n.length > 0))
      throw new d(h("Invalid events provided. Events must be an array of event names containing at least one event."));
    let i = { channelType: "websocket", mode: "subscribe", topic: t, events: n }, s = (await this.post(this.fhircastHubUrl, Br(i), A.FORM_URL_ENCODED))["hub.channel.endpoint"];
    if (!s)
      throw new Error("Invalid response!");
    return i.endpoint = s, i;
  }
  async fhircastUnsubscribe(t) {
    if (!kt(t))
      throw new d(h("Invalid topic or subscriptionRequest. SubscriptionRequest must be an object."));
    if (!(t.endpoint && typeof t.endpoint == "string" && t.endpoint.startsWith("ws")))
      throw new d(h("Provided subscription request must have an endpoint in order to unsubscribe."));
    t.mode = "unsubscribe", await this.post(this.fhircastHubUrl, Br(t), A.FORM_URL_ENCODED);
  }
  fhircastConnect(t) {
    return new It(t);
  }
  async fhircastPublish(t, n, i, o) {
    return vi(n) ? this.post(this.fhircastHubUrl, qr(t, n, i, o), A.JSON) : (Ti(n), this.post(this.fhircastHubUrl, qr(t, n, i), A.JSON));
  }
  async fhircastGetContext(t) {
    return this.get(`${this.fhircastHubUrl}/${t}`);
  }
  async invite(t, n) {
    return this.post("admin/projects/" + t + "/invite", n);
  }
  async fetchTokens(t) {
    let n = { method: "POST", headers: { "Content-Type": A.FORM_URL_ENCODED }, body: t.toString(), credentials: "include" }, i = n.headers;
    Object.assign(i, this.defaultHeaders), this.basicAuth && (i.Authorization = `Basic ${this.basicAuth}`);
    let o;
    try {
      o = await this.fetchWithRetry(this.tokenUrl, n);
    } catch (a) {
      throw this.refreshPromise = void 0, a;
    }
    if (!o.ok) {
      this.clearActiveLogin();
      try {
        let a = await o.json();
        throw new d(E(a.error_description));
      } catch (a) {
        throw new d(E("Failed to fetch tokens"), a);
      }
    }
    let s = await o.json();
    return await this.verifyTokens(s), this.getProfile();
  }
  async verifyTokens(t) {
    let n = t.access_token;
    if (Ei(n)) {
      let i = Vt(n);
      if (Date.now() >= i.exp * 1e3)
        throw this.clearActiveLogin(), new d(un);
      if (i.cid) {
        if (i.cid !== this.clientId)
          throw this.clearActiveLogin(), new d(rr);
      } else if (this.clientId && i.client_id !== this.clientId)
        throw this.clearActiveLogin(), new d(rr);
    }
    return this.setActiveLogin({ accessToken: n, refreshToken: t.refresh_token, project: t.project, profile: t.profile });
  }
  checkSessionDetailsMatchLogin(t) {
    var _a, _b;
    return this.sessionDetails && t ? ((_b = (_a = t.profile) == null ? void 0 : _a.reference) == null ? void 0 : _b.endsWith(this.sessionDetails.profile.id)) ?? false : true;
  }
  setupStorageListener() {
    try {
      window.addEventListener("storage", (t) => {
        if (t.key === null)
          window.location.reload();
        else if (t.key === "activeLogin") {
          let n = t.oldValue ? JSON.parse(t.oldValue) : void 0, i = t.newValue ? JSON.parse(t.newValue) : void 0;
          (n == null ? void 0 : n.profile.reference) !== (i == null ? void 0 : i.profile.reference) || !this.checkSessionDetailsMatchLogin(i) ? window.location.reload() : i ? this.setAccessToken(i.accessToken, i.refreshToken) : this.clear();
        }
      });
    } catch {
    }
  }
  getSubscriptionManager() {
    return this.subscriptionManager || (this.subscriptionManager = new Nt(this, Jn(this.baseUrl, "/ws/subscriptions-r4"))), this.subscriptionManager;
  }
  subscribeToCriteria(t, n) {
    return this.getSubscriptionManager().addCriteria(t, n);
  }
  unsubscribeFromCriteria(t, n) {
    this.subscriptionManager && (this.subscriptionManager.removeCriteria(t, n), this.subscriptionManager.getCriteriaCount() === 0 && this.subscriptionManager.closeWebSocket());
  }
  getMasterSubscriptionEmitter() {
    return this.getSubscriptionManager().getMasterEmitter();
  }
};
function ga() {
  if (!globalThis.fetch)
    throw new Error("Fetch not available in this environment");
  return globalThis.fetch.bind(globalThis);
}
function Ii() {
  return typeof window > "u" ? "" : window.location.protocol + "//" + window.location.host + "/";
}
async function ki(r3, e) {
  var _a, _b;
  let t = r3.headers.get("content-location");
  if (t)
    return t;
  let n = r3.headers.get("location");
  if (n)
    return n;
  if (Re(e) && ((_b = (_a = e.issue) == null ? void 0 : _a[0]) == null ? void 0 : _b.diagnostics))
    return e.issue[0].diagnostics;
}
function Vi(r3) {
  var _a;
  let e = ((_a = r3.entry) == null ? void 0 : _a.map((t) => t.resource)) ?? [];
  return Object.assign(e, { bundle: r3 });
}
function xa(r3) {
  return R(r3) && "data" in r3 && "contentType" in r3;
}
function Di(r3, e, t, n) {
  return xa(r3) ? r3 : { data: r3, filename: e, contentType: t, onProgress: n };
}
function va(r3) {
  return R(r3) && "docDefinition" in r3;
}
function Ta(r3, e, t, n) {
  return va(r3) ? r3 : { docDefinition: r3, filename: e, tableLayouts: t, fonts: n };
}
function Gr({ parentContext: r3, path: e, elements: t, profileUrl: n, debugMode: i, accessPolicyResource: o }) {
  if (e === (r3 == null ? void 0 : r3.path))
    return;
  i ?? (i = (r3 == null ? void 0 : r3.debugMode) ?? false), o ?? (o = r3 == null ? void 0 : r3.accessPolicyResource);
  let s = Sa(e, t, r3, !!i), a = Cr(e, ".", 2)[1];
  s = Ea(s, o, a), s = ba(s, o, a);
  let c = /* @__PURE__ */ Object.create(null);
  for (let [l, m2] of Object.entries(s))
    c[e + "." + l] = m2;
  let u;
  if (r3 && !r3.isDefaultContext)
    u = r3.getExtendedProps;
  else {
    let l = /* @__PURE__ */ Object.create(null);
    u = (m2) => {
      let x = Cr(m2, ".", 2)[1];
      if (x) {
        if (!l[x]) {
          let B = Ft(x, o == null ? void 0 : o.hiddenFields);
          l[x] = { hidden: B, readonly: B || Ft(x, o == null ? void 0 : o.readonlyFields) };
        }
        return l[x];
      }
    };
  }
  return { path: e, elements: s, elementsByPath: c, profileUrl: n ?? (r3 == null ? void 0 : r3.profileUrl), debugMode: i, getExtendedProps: u, accessPolicyResource: o };
}
function Sa(r3, e, t, n) {
  let i = /* @__PURE__ */ Object.create(null);
  if (t)
    for (let [s, a] of Object.entries(t.elementsByPath)) {
      let c = Oe$1(r3, s);
      c !== void 0 && (i[c] = a);
    }
  let o = false;
  if (e)
    for (let [s, a] of Object.entries(e))
      s in i || (i[s] = a, o = true);
  return n && console.assert(o, "Unnecessary ElementsContext; not using any newly provided elements"), i;
}
function Ea(r3, e, t) {
  var _a;
  if (!((_a = e == null ? void 0 : e.hiddenFields) == null ? void 0 : _a.length))
    return r3;
  let n = t ? t + "." : "";
  return Object.fromEntries(Object.entries(r3).filter(([i]) => !Ft(n + i, e.hiddenFields)));
}
function ba(r3, e, t) {
  var _a;
  if (!((_a = e == null ? void 0 : e.readonlyFields) == null ? void 0 : _a.length))
    return r3;
  let n = /* @__PURE__ */ Object.create(null), i = t ? t + "." : "";
  for (let [o, s] of Object.entries(r3))
    Ft(i + o, e.readonlyFields) ? n[o] = { ...s, readonly: true } : n[o] = s;
  return n;
}
function Ft(r3, e) {
  if (!(e == null ? void 0 : e.length))
    return false;
  let t = r3.split(".");
  for (let n = 1; n <= t.length; n++) {
    let i = t.slice(0, n).join(".");
    if (e.includes(i))
      return true;
  }
  return false;
}
function Mi(r3) {
  return r3.type !== void 0 && r3.type.length > 0;
}
function Ra(r3, e, t, n) {
  var _a;
  let i = we(r3, e.path, { profileUrl: n });
  if (i) {
    let o = ((_a = t.typeSchema) == null ? void 0 : _a.elements) ?? t.elements;
    return i.some((s) => yr(s, e, t, o)) ?? false;
  }
  return console.assert(false, "getNestedProperty[%s] in isDiscriminatorComponentMatch missed", e.path), false;
}
function _i(r3, e, t, n) {
  var _a, _b;
  if (r3)
    for (let i of e) {
      let o = { value: r3, type: ((_a = i.typeSchema) == null ? void 0 : _a.type) ?? ((_b = i.type) == null ? void 0 : _b[0].code) };
      if (t.every((s) => {
        var _a2;
        return Ra(o, s, i, ((_a2 = i.typeSchema) == null ? void 0 : _a2.url) ?? n);
      }))
        return i.name;
    }
}
[...We, "->", "<<", ">>", "=="];
$e().registerInfix("->", { precedence: y$1.Arrow }).registerInfix(";", { precedence: y$1.Semicolon });
[...We, "eq", "ne", "co"];
$e();
var Yr = ((o) => (o[o.NONE = 0] = "NONE", o[o.ERROR = 1] = "ERROR", o[o.WARN = 2] = "WARN", o[o.INFO = 3] = "INFO", o[o.DEBUG = 4] = "DEBUG", o))(Yr || {});
/*!
* Reconnecting WebSocket
* by Pedro Ladaria <pedro.ladaria@gmail.com>
* https://github.com/pladaria/reconnecting-websocket
* License MIT
*
* Copy of "partysocket" from Partykit team, a fork of the original "Reconnecting WebSocket"
* https://github.com/partykit/partykit/blob/main/packages/partysocket
*/
var y = reactExports.createContext(void 0);
function P() {
  return reactExports.useContext(y);
}
function b() {
  return P().medplum;
}
function fe() {
  return P().navigate;
}
function me() {
  return P().profile;
}
var I = ["change", "storageInitialized", "storageInitFailed", "profileRefreshing", "profileRefreshed"];
function ge2(e) {
  let n = e.medplum, t = e.navigate ?? q, [s, r3] = reactExports.useState({ profile: n.getProfile(), loading: n.isLoading() });
  reactExports.useEffect(() => {
    function o() {
      r3((u) => ({ ...u, profile: n.getProfile(), loading: n.isLoading() }));
    }
    for (let u of I)
      n.addEventListener(u, o);
    return () => {
      for (let u of I)
        n.removeEventListener(u, o);
    };
  }, [n]);
  let i = reactExports.useMemo(() => ({ ...s, medplum: n, navigate: t }), [s, n, t]);
  return jsxRuntimeExports.jsx(y.Provider, { value: i, children: e.children });
}
function q(e) {
  window.location.assign(e);
}
var N = /* @__PURE__ */ new Map(), Oe = (e) => reactExports.useMemo(() => {
  if (!e)
    return;
  let n = e.split("?")[0];
  if (!n)
    return e;
  let t;
  try {
    t = new URLSearchParams(new URL(e).search);
  } catch {
    return e;
  }
  if (!t.has("Key-Pair-Id") || !t.has("Signature"))
    return e;
  let s = t.get("Expires");
  if (!s || s.length > 13)
    return e;
  let r3 = N.get(n);
  if (r3) {
    let o = new URLSearchParams(new URL(r3).search).get("Expires");
    if (o && parseInt(o, 10) * 1e3 - 5e3 > Date.now())
      return r3;
  }
  return N.set(n, e), e;
}, [e]);
function Ue(e, n) {
  let t = b(), [s, r3] = reactExports.useState(() => w(t, e)), i = reactExports.useCallback((o) => {
    te(o, s) || r3(o);
  }, [s]);
  return reactExports.useEffect(() => {
    let o = true, u = w(t, e);
    return !u && pe(e) ? t.readReference(e).then((c) => {
      o && i(c);
    }).catch((c) => {
      o && (i(void 0), n && n(et(c)));
    }) : i(u), () => o = false;
  }, [t, e, i, n]), s;
}
function w(e, n) {
  if (n) {
    if (k(n))
      return n;
    if (pe(n))
      return e.getCachedReference(n);
  }
}
function createStore(initialState) {
  let state = initialState;
  let initialized = false;
  const listeners = /* @__PURE__ */ new Set();
  return {
    getState() {
      return state;
    },
    updateState(value) {
      state = typeof value === "function" ? value(state) : value;
    },
    setState(value) {
      this.updateState(value);
      listeners.forEach((listener) => listener(state));
    },
    initialize(value) {
      if (!initialized) {
        state = value;
        initialized = true;
      }
    },
    subscribe(callback) {
      listeners.add(callback);
      return () => listeners.delete(callback);
    }
  };
}
function getDistributedNotifications(data, defaultPosition, limit) {
  const queue = [];
  const notifications2 = [];
  const count2 = {};
  for (const item of data) {
    const position2 = item.position || defaultPosition;
    count2[position2] = count2[position2] || 0;
    count2[position2] += 1;
    if (count2[position2] <= limit) {
      notifications2.push(item);
    } else {
      queue.push(item);
    }
  }
  return { notifications: notifications2, queue };
}
const createNotificationsStore = () => createStore({
  notifications: [],
  queue: [],
  defaultPosition: "bottom-right",
  limit: 5
});
const notificationsStore = createNotificationsStore();
function updateNotificationsState(store2, update) {
  const state = store2.getState();
  const notifications2 = update([...state.notifications, ...state.queue]);
  const updated = getDistributedNotifications(notifications2, state.defaultPosition, state.limit);
  store2.setState({
    notifications: updated.notifications,
    queue: updated.queue,
    limit: state.limit,
    defaultPosition: state.defaultPosition
  });
}
function showNotification(notification, store2 = notificationsStore) {
  const id = notification.id || randomId();
  updateNotificationsState(store2, (notifications2) => {
    if (notification.id && notifications2.some((n) => n.id === notification.id)) {
      return notifications2;
    }
    return [...notifications2, { ...notification, id }];
  });
  return id;
}
function hideNotification(id, store2 = notificationsStore) {
  updateNotificationsState(
    store2,
    (notifications2) => notifications2.filter((notification) => {
      var _a;
      if (notification.id === id) {
        (_a = notification.onClose) == null ? void 0 : _a.call(notification, notification);
        return false;
      }
      return true;
    })
  );
  return id;
}
function updateNotification(notification, store2 = notificationsStore) {
  updateNotificationsState(
    store2,
    (notifications2) => notifications2.map((item) => {
      if (item.id === notification.id) {
        return { ...item, ...notification };
      }
      return item;
    })
  );
  return notification.id;
}
function cleanNotifications(store2 = notificationsStore) {
  updateNotificationsState(store2, () => []);
}
function cleanNotificationsQueue(store2 = notificationsStore) {
  updateNotificationsState(
    store2,
    (notifications2) => notifications2.slice(0, store2.getState().limit)
  );
}
const notifications = {
  show: showNotification,
  hide: hideNotification,
  update: updateNotification,
  clean: cleanNotifications,
  cleanQueue: cleanNotificationsQueue,
  updateState: updateNotificationsState
};
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 == "object" || typeof from2 == "function")
    for (let key of __getOwnPropNames(from2))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_pointer = __commonJS({ "../../node_modules/rfc6902/pointer.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Pointer = exports.escapeToken = exports.unescapeToken = void 0;
  function unescapeToken(token2) {
    return token2.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  exports.unescapeToken = unescapeToken;
  function escapeToken(token2) {
    return token2.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  exports.escapeToken = escapeToken;
  var Pointer = function() {
    function Pointer2(tokens) {
      tokens === void 0 && (tokens = [""]), this.tokens = tokens;
    }
    return Pointer2.fromJSON = function(path) {
      var tokens = path.split("/").map(unescapeToken);
      if (tokens[0] !== "")
        throw new Error("Invalid JSON Pointer: ".concat(path));
      return new Pointer2(tokens);
    }, Pointer2.prototype.toString = function() {
      return this.tokens.map(escapeToken).join("/");
    }, Pointer2.prototype.evaluate = function(object) {
      for (var parent = null, key = "", value = object, i = 1, l = this.tokens.length; i < l; i++)
        parent = value, key = this.tokens[i], !(key == "__proto__" || key == "constructor" || key == "prototype") && (value = (parent || {})[key]);
      return { parent, key, value };
    }, Pointer2.prototype.get = function(object) {
      return this.evaluate(object).value;
    }, Pointer2.prototype.set = function(object, value) {
      var endpoint = this.evaluate(object);
      endpoint.parent && (endpoint.parent[endpoint.key] = value);
    }, Pointer2.prototype.push = function(token2) {
      this.tokens.push(token2);
    }, Pointer2.prototype.add = function(token2) {
      var tokens = this.tokens.concat(String(token2));
      return new Pointer2(tokens);
    }, Pointer2;
  }();
  exports.Pointer = Pointer;
} });
var require_util = __commonJS({ "../../node_modules/rfc6902/util.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.clone = exports.objectType = exports.hasOwnProperty = void 0;
  exports.hasOwnProperty = Object.prototype.hasOwnProperty;
  function objectType(object) {
    return object === void 0 ? "undefined" : object === null ? "null" : Array.isArray(object) ? "array" : typeof object;
  }
  exports.objectType = objectType;
  function isNonPrimitive(value) {
    return value != null && typeof value == "object";
  }
  function clone(source) {
    if (!isNonPrimitive(source))
      return source;
    if (source.constructor == Array) {
      for (var length_1 = source.length, arrayTarget = new Array(length_1), i = 0; i < length_1; i++)
        arrayTarget[i] = clone(source[i]);
      return arrayTarget;
    }
    if (source.constructor == Date) {
      var dateTarget = /* @__PURE__ */ new Date(+source);
      return dateTarget;
    }
    var objectTarget = {};
    for (var key in source)
      exports.hasOwnProperty.call(source, key) && (objectTarget[key] = clone(source[key]));
    return objectTarget;
  }
  exports.clone = clone;
} });
var require_diff = __commonJS({ "../../node_modules/rfc6902/diff.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.diffAny = exports.diffObjects = exports.diffArrays = exports.intersection = exports.subtract = exports.isDestructive = void 0;
  var util_1 = require_util();
  function isDestructive(_a) {
    var op = _a.op;
    return op === "remove" || op === "replace" || op === "copy" || op === "move";
  }
  exports.isDestructive = isDestructive;
  function subtract(minuend, subtrahend) {
    var obj = {};
    for (var add_key in minuend)
      util_1.hasOwnProperty.call(minuend, add_key) && minuend[add_key] !== void 0 && (obj[add_key] = 1);
    for (var del_key in subtrahend)
      util_1.hasOwnProperty.call(subtrahend, del_key) && subtrahend[del_key] !== void 0 && delete obj[del_key];
    return Object.keys(obj);
  }
  exports.subtract = subtract;
  function intersection(objects) {
    for (var length2 = objects.length, counter = {}, i = 0; i < length2; i++) {
      var object = objects[i];
      for (var key in object)
        util_1.hasOwnProperty.call(object, key) && object[key] !== void 0 && (counter[key] = (counter[key] || 0) + 1);
    }
    for (var key in counter)
      counter[key] < length2 && delete counter[key];
    return Object.keys(counter);
  }
  exports.intersection = intersection;
  function isArrayAdd(array_operation) {
    return array_operation.op === "add";
  }
  function isArrayRemove(array_operation) {
    return array_operation.op === "remove";
  }
  function appendArrayOperation(base, operation) {
    return { operations: base.operations.concat(operation), cost: base.cost + 1 };
  }
  function diffArrays(input, output, ptr, diff2) {
    diff2 === void 0 && (diff2 = diffAny);
    var memo2 = { "0,0": { operations: [], cost: 0 } };
    function dist(i, j2) {
      var memo_key = "".concat(i, ",").concat(j2), memoized = memo2[memo_key];
      if (memoized === void 0) {
        if (i > 0 && j2 > 0 && !diff2(input[i - 1], output[j2 - 1], ptr.add(String(i - 1))).length)
          memoized = dist(i - 1, j2 - 1);
        else {
          var alternatives = [];
          if (i > 0) {
            var remove_base = dist(i - 1, j2), remove_operation = { op: "remove", index: i - 1 };
            alternatives.push(appendArrayOperation(remove_base, remove_operation));
          }
          if (j2 > 0) {
            var add_base = dist(i, j2 - 1), add_operation = { op: "add", index: i - 1, value: output[j2 - 1] };
            alternatives.push(appendArrayOperation(add_base, add_operation));
          }
          if (i > 0 && j2 > 0) {
            var replace_base = dist(i - 1, j2 - 1), replace_operation = { op: "replace", index: i - 1, original: input[i - 1], value: output[j2 - 1] };
            alternatives.push(appendArrayOperation(replace_base, replace_operation));
          }
          var best = alternatives.sort(function(a, b2) {
            return a.cost - b2.cost;
          })[0];
          memoized = best;
        }
        memo2[memo_key] = memoized;
      }
      return memoized;
    }
    var input_length = isNaN(input.length) || input.length <= 0 ? 0 : input.length, output_length = isNaN(output.length) || output.length <= 0 ? 0 : output.length, array_operations = dist(input_length, output_length).operations, padded_operations = array_operations.reduce(function(_a, array_operation) {
      var operations = _a[0], padding = _a[1];
      if (isArrayAdd(array_operation)) {
        var padded_index = array_operation.index + 1 + padding, index_token = padded_index < input_length + padding ? String(padded_index) : "-", operation = { op: array_operation.op, path: ptr.add(index_token).toString(), value: array_operation.value };
        return [operations.concat(operation), padding + 1];
      } else if (isArrayRemove(array_operation)) {
        var operation = { op: array_operation.op, path: ptr.add(String(array_operation.index + padding)).toString() };
        return [operations.concat(operation), padding - 1];
      } else {
        var replace_ptr = ptr.add(String(array_operation.index + padding)), replace_operations = diff2(array_operation.original, array_operation.value, replace_ptr);
        return [operations.concat.apply(operations, replace_operations), padding];
      }
    }, [[], 0])[0];
    return padded_operations;
  }
  exports.diffArrays = diffArrays;
  function diffObjects(input, output, ptr, diff2) {
    diff2 === void 0 && (diff2 = diffAny);
    var operations = [];
    return subtract(input, output).forEach(function(key) {
      operations.push({ op: "remove", path: ptr.add(key).toString() });
    }), subtract(output, input).forEach(function(key) {
      operations.push({ op: "add", path: ptr.add(key).toString(), value: output[key] });
    }), intersection([input, output]).forEach(function(key) {
      operations.push.apply(operations, diff2(input[key], output[key], ptr.add(key)));
    }), operations;
  }
  exports.diffObjects = diffObjects;
  function diffAny(input, output, ptr, diff2) {
    if (diff2 === void 0 && (diff2 = diffAny), input === output)
      return [];
    var input_type = (0, util_1.objectType)(input), output_type = (0, util_1.objectType)(output);
    return input_type == "array" && output_type == "array" ? diffArrays(input, output, ptr, diff2) : input_type == "object" && output_type == "object" ? diffObjects(input, output, ptr, diff2) : [{ op: "replace", path: ptr.toString(), value: output }];
  }
  exports.diffAny = diffAny;
} });
var require_patch = __commonJS({ "../../node_modules/rfc6902/patch.js"(exports) {
  var __extends2 = exports && exports.__extends || function() {
    var extendStatics2 = function(d2, b2) {
      return extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d22, b22) {
        d22.__proto__ = b22;
      } || function(d22, b22) {
        for (var p2 in b22)
          Object.prototype.hasOwnProperty.call(b22, p2) && (d22[p2] = b22[p2]);
      }, extendStatics2(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 != "function" && b2 !== null)
        throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics2(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.apply = exports.InvalidOperationError = exports.test = exports.copy = exports.move = exports.replace = exports.remove = exports.add = exports.TestError = exports.MissingError = void 0;
  var pointer_1 = require_pointer(), util_1 = require_util(), diff_1 = require_diff(), MissingError = function(_super) {
    __extends2(MissingError2, _super);
    function MissingError2(path) {
      var _this = _super.call(this, "Value required at path: ".concat(path)) || this;
      return _this.path = path, _this.name = "MissingError", _this;
    }
    return MissingError2;
  }(Error);
  exports.MissingError = MissingError;
  var TestError = function(_super) {
    __extends2(TestError2, _super);
    function TestError2(actual, expected) {
      var _this = _super.call(this, "Test failed: ".concat(actual, " != ").concat(expected)) || this;
      return _this.actual = actual, _this.expected = expected, _this.name = "TestError", _this;
    }
    return TestError2;
  }(Error);
  exports.TestError = TestError;
  function _add(object, key, value) {
    if (Array.isArray(object))
      if (key == "-")
        object.push(value);
      else {
        var index2 = parseInt(key, 10);
        object.splice(index2, 0, value);
      }
    else
      object[key] = value;
  }
  function _remove(object, key) {
    if (Array.isArray(object)) {
      var index2 = parseInt(key, 10);
      object.splice(index2, 1);
    } else
      delete object[key];
  }
  function add(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_add(endpoint.parent, endpoint.key, (0, util_1.clone)(operation.value)), null);
  }
  exports.add = add;
  function remove(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.value === void 0 ? new MissingError(operation.path) : (_remove(endpoint.parent, endpoint.key), null);
  }
  exports.remove = remove;
  function replace2(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    if (endpoint.parent === null)
      return new MissingError(operation.path);
    if (Array.isArray(endpoint.parent)) {
      if (parseInt(endpoint.key, 10) >= endpoint.parent.length)
        return new MissingError(operation.path);
    } else if (endpoint.value === void 0)
      return new MissingError(operation.path);
    return endpoint.parent[endpoint.key] = (0, util_1.clone)(operation.value), null;
  }
  exports.replace = replace2;
  function move(object, operation) {
    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);
    if (from_endpoint.value === void 0)
      return new MissingError(operation.from);
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_remove(from_endpoint.parent, from_endpoint.key), _add(endpoint.parent, endpoint.key, from_endpoint.value), null);
  }
  exports.move = move;
  function copy2(object, operation) {
    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);
    if (from_endpoint.value === void 0)
      return new MissingError(operation.from);
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_add(endpoint.parent, endpoint.key, (0, util_1.clone)(from_endpoint.value)), null);
  }
  exports.copy = copy2;
  function test(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return (0, diff_1.diffAny)(endpoint.value, operation.value, new pointer_1.Pointer()).length ? new TestError(endpoint.value, operation.value) : null;
  }
  exports.test = test;
  var InvalidOperationError = function(_super) {
    __extends2(InvalidOperationError2, _super);
    function InvalidOperationError2(operation) {
      var _this = _super.call(this, "Invalid operation: ".concat(operation.op)) || this;
      return _this.operation = operation, _this.name = "InvalidOperationError", _this;
    }
    return InvalidOperationError2;
  }(Error);
  exports.InvalidOperationError = InvalidOperationError;
  function apply(object, operation) {
    switch (operation.op) {
      case "add":
        return add(object, operation);
      case "remove":
        return remove(object, operation);
      case "replace":
        return replace2(object, operation);
      case "move":
        return move(object, operation);
      case "copy":
        return copy2(object, operation);
      case "test":
        return test(object, operation);
    }
    return new InvalidOperationError(operation);
  }
  exports.apply = apply;
} });
var require_rfc6902 = __commonJS({ "../../node_modules/rfc6902/index.js"(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createTests = exports.createPatch = exports.applyPatch = exports.Pointer = void 0;
  var pointer_1 = require_pointer();
  Object.defineProperty(exports, "Pointer", { enumerable: true, get: function() {
    return pointer_1.Pointer;
  } });
  var patch_1 = require_patch(), diff_1 = require_diff();
  function applyPatch(object, patch) {
    return patch.map(function(operation) {
      return (0, patch_1.apply)(object, operation);
    });
  }
  exports.applyPatch = applyPatch;
  function wrapVoidableDiff(diff2) {
    function wrappedDiff(input, output, ptr) {
      var custom_patch = diff2(input, output, ptr);
      return Array.isArray(custom_patch) ? custom_patch : (0, diff_1.diffAny)(input, output, ptr, wrappedDiff);
    }
    return wrappedDiff;
  }
  function createPatch2(input, output, diff2) {
    var ptr = new pointer_1.Pointer();
    return (diff2 ? wrapVoidableDiff(diff2) : diff_1.diffAny)(input, output, ptr);
  }
  exports.createPatch = createPatch2;
  function createTest(input, path) {
    var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);
    if (endpoint !== void 0)
      return { op: "test", path, value: endpoint.value };
  }
  function createTests(input, patch) {
    var tests = new Array();
    return patch.filter(diff_1.isDestructive).forEach(function(operation) {
      var pathTest = createTest(input, operation.path);
      if (pathTest && tests.push(pathTest), "from" in operation) {
        var fromTest = createTest(input, operation.from);
        fromTest && tests.push(fromTest);
      }
    }), tests;
  }
  exports.createTests = createTests;
} });
function AddressDisplay(props) {
  let address = props.value;
  return address ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Go(address) }) : null;
}
var DEFAULT_IGNORED_PROPERTIES = ["meta", "implicitRules", "contained", "extension", "modifierExtension"], DEFAULT_IGNORED_NON_NESTED_PROPERTIES = ["language", "text"];
var ElementsContext = reactExports.createContext({ path: "", profileUrl: void 0, elements: /* @__PURE__ */ Object.create(null), elementsByPath: /* @__PURE__ */ Object.create(null), getExtendedProps: () => ({ readonly: false, hidden: false }), accessPolicyResource: void 0, debugMode: false, isDefaultContext: true });
ElementsContext.displayName = "ElementsContext";
var defaultAttributes$1 = { outline: { xmlns: "http://www.w3.org/2000/svg", width: 24, height: 24, viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round" }, filled: { xmlns: "http://www.w3.org/2000/svg", width: 24, height: 24, viewBox: "0 0 24 24", fill: "currentColor", stroke: "none" } };
var createReactComponent$1 = (type, iconName, iconNamePascal, iconNode) => {
  let Component2 = reactExports.forwardRef(({ color = "currentColor", size: size2 = 24, stroke = 2, title, className, children, ...rest }, ref) => reactExports.createElement("svg", { ref, ...defaultAttributes$1[type], width: size2, height: size2, className: ["tabler-icon", `tabler-icon-${iconName}`, className].join(" "), ...type === "filled" ? { fill: color } : { strokeWidth: stroke, stroke: color }, ...rest }, [title && reactExports.createElement("title", { key: "svg-title" }, title), ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)), ...Array.isArray(children) ? children : [children]]));
  return Component2.displayName = `${iconNamePascal}`, Component2;
};
createReactComponent$1("outline", "adjustments-horizontal", "IconAdjustmentsHorizontal", [["path", { d: "M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-0" }], ["path", { d: "M4 6l8 0", key: "svg-1" }], ["path", { d: "M16 6l4 0", key: "svg-2" }], ["path", { d: "M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-3" }], ["path", { d: "M4 12l2 0", key: "svg-4" }], ["path", { d: "M10 12l10 0", key: "svg-5" }], ["path", { d: "M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-6" }], ["path", { d: "M4 18l11 0", key: "svg-7" }], ["path", { d: "M19 18l1 0", key: "svg-8" }]]);
var IconAlertCircle = createReactComponent$1("outline", "alert-circle", "IconAlertCircle", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M12 8v4", key: "svg-1" }], ["path", { d: "M12 16h.01", key: "svg-2" }]]);
createReactComponent$1("outline", "arrow-down", "IconArrowDown", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M18 13l-6 6", key: "svg-1" }], ["path", { d: "M6 13l6 6", key: "svg-2" }]]);
createReactComponent$1("outline", "arrow-right", "IconArrowRight", [["path", { d: "M5 12l14 0", key: "svg-0" }], ["path", { d: "M13 18l6 -6", key: "svg-1" }], ["path", { d: "M13 6l6 6", key: "svg-2" }]]);
createReactComponent$1("outline", "arrow-up", "IconArrowUp", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M18 11l-6 -6", key: "svg-1" }], ["path", { d: "M6 11l6 -6", key: "svg-2" }]]);
createReactComponent$1("outline", "bleach-off", "IconBleachOff", [["path", { d: "M5 19h14m1.986 -1.977a2 2 0 0 0 -.146 -.773l-7.1 -12.25a2 2 0 0 0 -3.5 0l-.815 1.405m-1.488 2.568l-4.797 8.277a2 2 0 0 0 1.75 2.75", key: "svg-0" }], ["path", { d: "M3 3l18 18", key: "svg-1" }]]);
createReactComponent$1("outline", "bleach", "IconBleach", [["path", { d: "M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75", key: "svg-0" }]]);
createReactComponent$1("outline", "box-multiple", "IconBoxMultiple", [["path", { d: "M7 3m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z", key: "svg-0" }], ["path", { d: "M17 17v2a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2", key: "svg-1" }]]);
createReactComponent$1("outline", "brackets-contain", "IconBracketsContain", [["path", { d: "M7 4h-4v16h4", key: "svg-0" }], ["path", { d: "M17 4h4v16h-4", key: "svg-1" }], ["path", { d: "M8 16h.01", key: "svg-2" }], ["path", { d: "M12 16h.01", key: "svg-3" }], ["path", { d: "M16 16h.01", key: "svg-4" }]]);
createReactComponent$1("outline", "bucket-off", "IconBucketOff", [["path", { d: "M5.029 5.036c-.655 .58 -1.029 1.25 -1.029 1.964c0 2.033 3.033 3.712 6.96 3.967m3.788 -.21c3.064 -.559 5.252 -2.029 5.252 -3.757c0 -2.21 -3.582 -4 -8 -4c-1.605 0 -3.1 .236 -4.352 .643", key: "svg-0" }], ["path", { d: "M4 7c0 .664 .088 1.324 .263 1.965l2.737 10.035c.5 1.5 2.239 2 5 2s4.5 -.5 5 -2c.1 -.3 .252 -.812 .457 -1.535m.862 -3.146c.262 -.975 .735 -2.76 1.418 -5.354a7.45 7.45 0 0 0 .263 -1.965", key: "svg-1" }], ["path", { d: "M3 3l18 18", key: "svg-2" }]]);
createReactComponent$1("outline", "bucket", "IconBucket", [["path", { d: "M12 7m-8 0a8 4 0 1 0 16 0a8 4 0 1 0 -16 0", key: "svg-0" }], ["path", { d: "M4 7c0 .664 .088 1.324 .263 1.965l2.737 10.035c.5 1.5 2.239 2 5 2s4.5 -.5 5 -2c.333 -1 1.246 -4.345 2.737 -10.035a7.45 7.45 0 0 0 .263 -1.965", key: "svg-1" }]]);
createReactComponent$1("outline", "calendar", "IconCalendar", [["path", { d: "M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z", key: "svg-0" }], ["path", { d: "M16 3v4", key: "svg-1" }], ["path", { d: "M8 3v4", key: "svg-2" }], ["path", { d: "M4 11h16", key: "svg-3" }], ["path", { d: "M11 15h1", key: "svg-4" }], ["path", { d: "M12 15v3", key: "svg-5" }]]);
var IconCheck$1 = createReactComponent$1("outline", "check", "IconCheck", [["path", { d: "M5 12l5 5l10 -10", key: "svg-0" }]]);
createReactComponent$1("outline", "checkbox", "IconCheckbox", [["path", { d: "M9 11l3 3l8 -8", key: "svg-0" }], ["path", { d: "M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9", key: "svg-1" }]]);
createReactComponent$1("outline", "chevron-down", "IconChevronDown", [["path", { d: "M6 9l6 6l6 -6", key: "svg-0" }]]);
createReactComponent$1("outline", "chevron-up", "IconChevronUp", [["path", { d: "M6 15l6 -6l6 6", key: "svg-0" }]]);
createReactComponent$1("outline", "circle-minus", "IconCircleMinus", [["path", { d: "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0", key: "svg-0" }], ["path", { d: "M9 12l6 0", key: "svg-1" }]]);
createReactComponent$1("outline", "circle-plus", "IconCirclePlus", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M9 12h6", key: "svg-1" }], ["path", { d: "M12 9v6", key: "svg-2" }]]);
createReactComponent$1("outline", "cloud-upload", "IconCloudUpload", [["path", { d: "M7 18a4.6 4.4 0 0 1 0 -9a5 4.5 0 0 1 11 2h1a3.5 3.5 0 0 1 0 7h-1", key: "svg-0" }], ["path", { d: "M9 15l3 -3l3 3", key: "svg-1" }], ["path", { d: "M12 12l0 9", key: "svg-2" }]]);
createReactComponent$1("outline", "columns", "IconColumns", [["path", { d: "M4 6l5.5 0", key: "svg-0" }], ["path", { d: "M4 10l5.5 0", key: "svg-1" }], ["path", { d: "M4 14l5.5 0", key: "svg-2" }], ["path", { d: "M4 18l5.5 0", key: "svg-3" }], ["path", { d: "M14.5 6l5.5 0", key: "svg-4" }], ["path", { d: "M14.5 10l5.5 0", key: "svg-5" }], ["path", { d: "M14.5 14l5.5 0", key: "svg-6" }], ["path", { d: "M14.5 18l5.5 0", key: "svg-7" }]]);
var IconCopy = createReactComponent$1("outline", "copy", "IconCopy", [["path", { d: "M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z", key: "svg-0" }], ["path", { d: "M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1", key: "svg-1" }]]);
createReactComponent$1("outline", "currency-dollar", "IconCurrencyDollar", [["path", { d: "M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2", key: "svg-0" }], ["path", { d: "M12 3v3m0 12v3", key: "svg-1" }]]);
createReactComponent$1("outline", "dots", "IconDots", [["path", { d: "M5 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-0" }], ["path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-1" }], ["path", { d: "M19 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-2" }]]);
createReactComponent$1("outline", "edit", "IconEdit", [["path", { d: "M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1", key: "svg-0" }], ["path", { d: "M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z", key: "svg-1" }], ["path", { d: "M16 5l3 3", key: "svg-2" }]]);
createReactComponent$1("outline", "equal-not", "IconEqualNot", [["path", { d: "M5 10h14", key: "svg-0" }], ["path", { d: "M5 14h14", key: "svg-1" }], ["path", { d: "M5 19l14 -14", key: "svg-2" }]]);
createReactComponent$1("outline", "equal", "IconEqual", [["path", { d: "M5 10h14", key: "svg-0" }], ["path", { d: "M5 14h14", key: "svg-1" }]]);
createReactComponent$1("outline", "file-alert", "IconFileAlert", [["path", { d: "M14 3v4a1 1 0 0 0 1 1h4", key: "svg-0" }], ["path", { d: "M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z", key: "svg-1" }], ["path", { d: "M12 17l.01 0", key: "svg-2" }], ["path", { d: "M12 11l0 3", key: "svg-3" }]]);
createReactComponent$1("outline", "file-plus", "IconFilePlus", [["path", { d: "M14 3v4a1 1 0 0 0 1 1h4", key: "svg-0" }], ["path", { d: "M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z", key: "svg-1" }], ["path", { d: "M12 11l0 6", key: "svg-2" }], ["path", { d: "M9 14l6 0", key: "svg-3" }]]);
createReactComponent$1("outline", "filter", "IconFilter", [["path", { d: "M4 4h16v2.172a2 2 0 0 1 -.586 1.414l-4.414 4.414v7l-6 2v-8.5l-4.48 -4.928a2 2 0 0 1 -.52 -1.345v-2.227z", key: "svg-0" }]]);
createReactComponent$1("outline", "gender-female", "IconGenderFemale", [["path", { d: "M12 9m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0", key: "svg-0" }], ["path", { d: "M12 14v7", key: "svg-1" }], ["path", { d: "M9 18h6", key: "svg-2" }]]);
createReactComponent$1("outline", "gender-male", "IconGenderMale", [["path", { d: "M10 14m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0", key: "svg-0" }], ["path", { d: "M19 5l-5.4 5.4", key: "svg-1" }], ["path", { d: "M19 5h-5", key: "svg-2" }], ["path", { d: "M19 5v5", key: "svg-3" }]]);
createReactComponent$1("outline", "logout", "IconLogout", [["path", { d: "M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2", key: "svg-0" }], ["path", { d: "M9 12h12l-3 -3", key: "svg-1" }], ["path", { d: "M18 15l3 -3", key: "svg-2" }]]);
createReactComponent$1("outline", "math-greater", "IconMathGreater", [["path", { d: "M5 18l14 -6l-14 -6", key: "svg-0" }]]);
createReactComponent$1("outline", "math-lower", "IconMathLower", [["path", { d: "M19 18l-14 -6l14 -6", key: "svg-0" }]]);
createReactComponent$1("outline", "message", "IconMessage", [["path", { d: "M8 9h8", key: "svg-0" }], ["path", { d: "M8 13h6", key: "svg-1" }], ["path", { d: "M18 4a3 3 0 0 1 3 3v8a3 3 0 0 1 -3 3h-5l-5 3v-3h-2a3 3 0 0 1 -3 -3v-8a3 3 0 0 1 3 -3h12z", key: "svg-2" }]]);
createReactComponent$1("outline", "plus", "IconPlus", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M5 12l14 0", key: "svg-1" }]]);
createReactComponent$1("outline", "refresh", "IconRefresh", [["path", { d: "M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4", key: "svg-0" }], ["path", { d: "M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4", key: "svg-1" }]]);
createReactComponent$1("outline", "search", "IconSearch", [["path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0", key: "svg-0" }], ["path", { d: "M21 21l-6 -6", key: "svg-1" }]]);
createReactComponent$1("outline", "settings", "IconSettings", [["path", { d: "M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z", key: "svg-0" }], ["path", { d: "M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", key: "svg-1" }]]);
createReactComponent$1("outline", "sort-ascending", "IconSortAscending", [["path", { d: "M4 6l7 0", key: "svg-0" }], ["path", { d: "M4 12l7 0", key: "svg-1" }], ["path", { d: "M4 18l9 0", key: "svg-2" }], ["path", { d: "M15 9l3 -3l3 3", key: "svg-3" }], ["path", { d: "M18 6l0 12", key: "svg-4" }]]);
createReactComponent$1("outline", "sort-descending", "IconSortDescending", [["path", { d: "M4 6l9 0", key: "svg-0" }], ["path", { d: "M4 12l7 0", key: "svg-1" }], ["path", { d: "M4 18l7 0", key: "svg-2" }], ["path", { d: "M15 15l3 3l3 -3", key: "svg-3" }], ["path", { d: "M18 6l0 12", key: "svg-4" }]]);
createReactComponent$1("outline", "square", "IconSquare", [["path", { d: "M3 3m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z", key: "svg-0" }]]);
createReactComponent$1("outline", "stethoscope", "IconStethoscope", [["path", { d: "M6 4h-1a2 2 0 0 0 -2 2v3.5h0a5.5 5.5 0 0 0 11 0v-3.5a2 2 0 0 0 -2 -2h-1", key: "svg-0" }], ["path", { d: "M8 15a6 6 0 1 0 12 0v-3", key: "svg-1" }], ["path", { d: "M11 3v2", key: "svg-2" }], ["path", { d: "M6 3v2", key: "svg-3" }], ["path", { d: "M20 10m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-4" }]]);
createReactComponent$1("outline", "switch-horizontal", "IconSwitchHorizontal", [["path", { d: "M16 3l4 4l-4 4", key: "svg-0" }], ["path", { d: "M10 7l10 0", key: "svg-1" }], ["path", { d: "M8 13l-4 4l4 4", key: "svg-2" }], ["path", { d: "M4 17l9 0", key: "svg-3" }]]);
createReactComponent$1("outline", "table-export", "IconTableExport", [["path", { d: "M12.5 21h-7.5a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v7.5", key: "svg-0" }], ["path", { d: "M3 10h18", key: "svg-1" }], ["path", { d: "M10 3v18", key: "svg-2" }], ["path", { d: "M16 19h6", key: "svg-3" }], ["path", { d: "M19 16l3 3l-3 3", key: "svg-4" }]]);
createReactComponent$1("outline", "trash", "IconTrash", [["path", { d: "M4 7l16 0", key: "svg-0" }], ["path", { d: "M10 11l0 6", key: "svg-1" }], ["path", { d: "M14 11l0 6", key: "svg-2" }], ["path", { d: "M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12", key: "svg-3" }], ["path", { d: "M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3", key: "svg-4" }]]);
createReactComponent$1("outline", "user-square", "IconUserSquare", [["path", { d: "M9 10a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", key: "svg-0" }], ["path", { d: "M6 21v-1a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v1", key: "svg-1" }], ["path", { d: "M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z", key: "svg-2" }]]);
createReactComponent$1("outline", "x", "IconX", [["path", { d: "M18 6l-12 12", key: "svg-0" }], ["path", { d: "M6 6l12 12", key: "svg-1" }]]);
var ErrorBoundary2 = class extends reactExports.Component {
  constructor(props) {
    super(props), this.state = { lastLocation: window.location.toString() };
  }
  static getDerivedStateFromError(error2) {
    return { error: error2, lastLocation: window.location.toString() };
  }
  componentDidUpdate(_prevProps, _prevState) {
    window.location.toString() !== this.state.lastLocation && this.setState({ lastLocation: window.location.toString(), error: void 0 });
  }
  shouldComponentUpdate(nextProps, nextState) {
    return !!(this.props.children !== nextProps.children || nextState.error && !this.state.error || this.state.lastLocation !== window.location.toString());
  }
  componentDidCatch(error2, errorInfo) {
    console.error("Uncaught error:", error2, errorInfo);
  }
  render() {
    return this.state.error ? jsxRuntimeExports.jsx(Alert, { icon: jsxRuntimeExports.jsx(IconAlertCircle, { size: 16 }), title: "Something went wrong", color: "red", children: Ce(this.state.error) }) : this.props.children;
  }
};
function Loading() {
  return jsxRuntimeExports.jsx(Center, { style: { width: "100%", height: "100vh" }, children: jsxRuntimeExports.jsx(Loader, {}) });
}
function r2(e) {
  var t, f2, n = "";
  if (typeof e == "string" || typeof e == "number")
    n += e;
  else if (typeof e == "object")
    if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++)
        e[t] && (f2 = r2(e[t])) && (n && (n += " "), n += f2);
    } else
      for (f2 in e)
        e[f2] && (n && (n += " "), n += f2);
  return n;
}
function clsx() {
  for (var e, t, f2 = 0, n = "", o = arguments.length; f2 < o; f2++)
    (e = arguments[f2]) && (t = r2(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;
function killEvent(e) {
  e.preventDefault(), e.stopPropagation();
}
function isCheckboxCell(el) {
  if (isCheckboxElement(el))
    return true;
  if (el instanceof HTMLTableCellElement) {
    let children = el.children;
    if (children.length === 1 && isCheckboxElement(children[0]))
      return true;
  }
  return false;
}
function isCheckboxElement(el) {
  return el instanceof HTMLInputElement && el.type === "checkbox";
}
async function sendCommand(frame, command) {
  return new Promise((resolve, reject) => {
    var _a;
    let channel = new MessageChannel();
    channel.port1.onmessage = ({ data: data2 }) => {
      channel.port1.close(), data2.error ? reject(data2.error) : resolve(data2.result);
    }, (_a = frame.contentWindow) == null ? void 0 : _a.postMessage(command, new URL(frame.src).origin, [channel.port2]);
  });
}
function MedplumLink(props) {
  let navigate = fe(), { to, suffix, label, onClick, children, ...rest } = props, href = getHref(to);
  return suffix && (href += "/" + suffix), jsxRuntimeExports.jsx(Anchor, { href, "aria-label": label, onClick: (e) => {
    killEvent(e), onClick ? onClick(e) : to && navigate(href);
  }, ...rest, children });
}
function getHref(to) {
  if (to) {
    if (typeof to == "string")
      return getStringHref(to);
    if (k(to))
      return getResourceHref(to);
    if (pe(to))
      return getReferenceHref(to);
  }
  return "#";
}
function getStringHref(to) {
  return to.startsWith("http://") || to.startsWith("https://") || to.startsWith("/") ? to : "/" + to;
}
function getResourceHref(to) {
  return `/${to.resourceType}/${to.id}`;
}
function getReferenceHref(to) {
  return `/${to.reference}`;
}
function getInitials(input) {
  let words = input.split(" ").filter(Boolean);
  return words.length > 1 ? words[0][0] + words[words.length - 1][0] : words.length === 1 ? words[0][0] : "";
}
function ResourceAvatar(props) {
  let resource = Ue(props.value), text = resource ? Co(resource) : props.alt ?? "", initials = getInitials(text), uncachedImageUrl = (resource && Hu(resource)) ?? props.src, imageUrl = Oe(uncachedImageUrl ?? void 0), radius = props.radius ?? "xl", avatarProps = { ...props, value: void 0, link: void 0 };
  return props.link ? jsxRuntimeExports.jsx(MedplumLink, { to: resource, children: jsxRuntimeExports.jsx(Avatar, { src: imageUrl, alt: text, radius, ...avatarProps, children: initials }) }) : jsxRuntimeExports.jsx(Avatar, { src: imageUrl, alt: text, radius, ...avatarProps, children: initials });
}
function HumanNameDisplay(props) {
  let name = props.value;
  return name ? jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: qe(name, props.options) }) : null;
}
var AsyncAutocompleteTestIds = { selectedItems: "selected-items", options: "options" };
function AsyncAutocomplete(props) {
  let combobox = useCombobox({ onDropdownClose: () => combobox.resetSelectedOption(), onDropdownOpen: () => combobox.updateSelectedOptionIndex("active") }), { name, label, description, error: error2, defaultValue: defaultValue2, toOption: toOption4, loadOptions, itemComponent, pillComponent, emptyComponent, onChange, onCreate, creatable, clearable, required, placeholder, leftSection, maxValues, optionsDropdownMaxHeight = 320, minInputLength = 0, ...rest } = props, disabled = rest.disabled, defaultItems = toDefaultItems(defaultValue2), [search, setSearch] = reactExports.useState(""), [timer, setTimer] = reactExports.useState(), [abortController, setAbortController] = reactExports.useState(), [autoSubmit, setAutoSubmit] = reactExports.useState(), [selected, setSelected] = reactExports.useState(defaultItems.map(toOption4)), [options, setOptions] = reactExports.useState([]), ItemComponent3 = itemComponent ?? DefaultItemComponent, PillComponent = pillComponent ?? DefaultPillComponent, EmptyComponent = emptyComponent ?? DefaultEmptyComponent, searchRef = reactExports.useRef();
  searchRef.current = search;
  let lastLoadOptionsRef = reactExports.useRef(), lastValueRef = reactExports.useRef(), timerRef = reactExports.useRef();
  timerRef.current = timer;
  let abortControllerRef = reactExports.useRef();
  abortControllerRef.current = abortController;
  let autoSubmitRef = reactExports.useRef();
  autoSubmitRef.current = autoSubmit;
  let optionsRef = reactExports.useRef();
  optionsRef.current = options;
  let handleTimer = reactExports.useCallback(() => {
    var _a;
    if (setTimer(void 0), searchRef.current === lastValueRef.current && loadOptions === lastLoadOptionsRef.current || (((_a = searchRef.current) == null ? void 0 : _a.length) ?? 0) < minInputLength)
      return;
    lastValueRef.current = searchRef.current, lastLoadOptionsRef.current = loadOptions;
    let newAbortController = new AbortController();
    setAbortController(newAbortController), loadOptions(searchRef.current ?? "", newAbortController.signal).then((newValues) => {
      newAbortController.signal.aborted || (setOptions(newValues.map(toOption4)), autoSubmitRef.current ? (newValues.length > 0 && onChange(newValues.slice(0, 1)), setAutoSubmit(false)) : newValues.length > 0 && combobox.openDropdown());
    }).catch((err) => {
      newAbortController.signal.aborted || err.message.includes("aborted") || showNotification({ color: "red", message: Ce(err) });
    }).finally(() => {
      newAbortController.signal.aborted || setAbortController(void 0);
    });
  }, [combobox, loadOptions, onChange, toOption4, minInputLength]), handleSearchChange = reactExports.useCallback((e) => {
    (options && options.length > 0 || creatable) && combobox.openDropdown(), combobox.updateSelectedOptionIndex(), setSearch(e.currentTarget.value), abortControllerRef.current && (abortControllerRef.current.abort(), setAbortController(void 0)), timerRef.current !== void 0 && window.clearTimeout(timerRef.current);
    let newTimer = window.setTimeout(() => handleTimer(), 100);
    setTimer(newTimer);
  }, [combobox, options, creatable, handleTimer]), addSelected = reactExports.useCallback((newValue) => {
    let alreadySelected = selected.some((v) => v.value === newValue), newSelected = alreadySelected ? selected.filter((v) => v.value !== newValue) : [...selected], option = options == null ? void 0 : options.find((option2) => option2.value === newValue);
    if (!option && creatable !== false && onCreate) {
      let createdResource = onCreate(newValue);
      option = toOption4(createdResource);
    }
    if (option) {
      if (maxValues === 0) {
        onChange([option.resource]), selected.length > 0 && setSelected([]);
        return;
      }
      alreadySelected || newSelected.push(option);
    }
    if (maxValues !== void 0)
      for (; newSelected.length > maxValues; )
        newSelected.shift();
    onChange(newSelected.map((v) => v.resource)), setSelected(newSelected);
  }, [creatable, options, selected, maxValues, onChange, onCreate, toOption4]), handleValueSelect = reactExports.useMemo(() => {
    if (!disabled)
      return (val) => {
        disabled || (maxValues === 1 && (setSearch(""), setOptions([]), combobox.closeDropdown()), lastValueRef.current = void 0, val === "$create" ? (setSearch(""), addSelected(search)) : addSelected(val));
      };
  }, [addSelected, combobox, disabled, maxValues, search]), handleValueRemove = reactExports.useCallback((item) => {
    let newSelected = selected.filter((v) => v.value !== item.value);
    onChange(newSelected.map((v) => v.resource)), setSelected(newSelected);
  }, [selected, onChange]), handleKeyDown = reactExports.useCallback((e) => {
    e.key === "Enter" ? (timer || abortController) && setAutoSubmit(true) : e.key === "Backspace" && search.length === 0 && (killEvent(e), handleValueRemove(selected[selected.length - 1]));
  }, [abortController, handleValueRemove, search.length, selected, timer]);
  reactExports.useEffect(() => () => {
    abortControllerRef.current && abortControllerRef.current.abort();
  }, []);
  let clearButton = !disabled && clearable && selected.length > 0 && jsxRuntimeExports.jsx(Combobox.ClearButton, { title: "Clear all", size: "sm", onClear: () => {
    setSearch(""), setSelected([]), onChange([]), combobox.closeDropdown();
  } }), createVisible = creatable && search.trim().length > 0, comboboxVisible = options.length > 0 || createVisible;
  return jsxRuntimeExports.jsxs(Combobox, { store: combobox, onOptionSubmit: handleValueSelect, withinPortal: true, shadow: "xl", ...rest, children: [jsxRuntimeExports.jsx(Combobox.DropdownTarget, { children: jsxRuntimeExports.jsx(PillsInput, { label, description, error: error2, className: props.className, leftSection, rightSection: abortController ? jsxRuntimeExports.jsx(Loader, { size: 16 }) : clearButton, required, disabled, children: jsxRuntimeExports.jsxs(Pill.Group, { "data-testid": AsyncAutocompleteTestIds.selectedItems, children: [selected.map((item) => jsxRuntimeExports.jsx(PillComponent, { item, disabled, onRemove: () => handleValueRemove(item) }, item.value)), !disabled && (maxValues === void 0 || maxValues === 0 || selected.length < maxValues) && jsxRuntimeExports.jsx(Combobox.EventsTarget, { children: jsxRuntimeExports.jsx(PillsInput.Field, { role: "searchbox", name, value: search, placeholder, onFocus: handleSearchChange, onBlur: () => {
    combobox.closeDropdown(), setSearch("");
  }, onKeyDown: handleKeyDown, onChange: handleSearchChange }) })] }) }) }), jsxRuntimeExports.jsx(Combobox.Dropdown, { hidden: !comboboxVisible, "data-testid": AsyncAutocompleteTestIds.options, children: jsxRuntimeExports.jsx(Combobox.Options, { children: jsxRuntimeExports.jsxs(ScrollAreaAutosize, { type: "scroll", mah: optionsDropdownMaxHeight, children: [options.map((item) => {
    let active = selected.some((v) => v.value === item.value);
    return jsxRuntimeExports.jsx(Combobox.Option, { value: item.value, active, children: jsxRuntimeExports.jsx(ItemComponent3, { ...item, active }) }, item.value);
  }), createVisible && jsxRuntimeExports.jsxs(Combobox.Option, { value: "$create", children: ["+ Create ", search] }), !creatable && search.trim().length > 0 && options.length === 0 && jsxRuntimeExports.jsx(EmptyComponent, { search })] }) }) })] });
}
function toDefaultItems(defaultValue2) {
  return defaultValue2 ? Array.isArray(defaultValue2) ? defaultValue2 : [defaultValue2] : [];
}
function DefaultItemComponent(props) {
  return jsxRuntimeExports.jsxs(Group, { gap: "xs", children: [props.active && jsxRuntimeExports.jsx(IconCheck$1, { size: 12 }), jsxRuntimeExports.jsx("span", { children: props.label })] });
}
function DefaultPillComponent({ item, disabled, onRemove }) {
  return jsxRuntimeExports.jsx(Pill, { withRemoveButton: !disabled, onRemove, children: item.label });
}
function DefaultEmptyComponent() {
  return jsxRuntimeExports.jsx(Combobox.Empty, { children: "Nothing found" });
}
reactExports.forwardRef(({ resource, active: _active, ...others }, ref) => {
  var _a;
  let helpText;
  return resource.resourceType === "Patient" ? helpText = resource.birthDate : resource.resourceType === "ServiceRequest" && (helpText = (_a = resource.subject) == null ? void 0 : _a.display), jsxRuntimeExports.jsx("div", { ref, ...others, children: jsxRuntimeExports.jsxs(Group, { wrap: "nowrap", children: [jsxRuntimeExports.jsx(ResourceAvatar, { value: resource }), jsxRuntimeExports.jsxs("div", { children: [jsxRuntimeExports.jsx(Text$1, { children: Co(resource) }), jsxRuntimeExports.jsx(Text$1, { size: "xs", c: "dimmed", children: helpText })] })] }) });
});
function parseForm(form) {
  let result = {};
  for (let element of Array.from(form.elements))
    element instanceof HTMLInputElement ? parseInputElement(result, element) : element instanceof HTMLTextAreaElement ? result[element.name] = element.value : element instanceof HTMLSelectElement && parseSelectElement(result, element);
  return result;
}
function parseInputElement(result, el) {
  el.disabled || (el.type === "checkbox" || el.type === "radio") && !el.checked || (result[el.name] = el.value);
}
function parseSelectElement(result, el) {
  result[el.name] = el.value;
}
function Form(props) {
  return jsxRuntimeExports.jsx("form", { style: props.style, "data-testid": props.testid, onSubmit: (e) => {
    e.preventDefault();
    let formData = parseForm(e.target);
    props.onSubmit && props.onSubmit(formData);
  }, children: props.children });
}
function toKey(element) {
  return typeof element.code == "string" ? element.code : JSON.stringify(element);
}
function getDisplay(item) {
  return typeof item.display == "string" ? item.display : toKey(item);
}
function toOption2(element) {
  return { value: toKey(element), label: getDisplay(element), resource: element };
}
function createValue(input) {
  return { code: input, display: input };
}
function ValueSetAutocomplete(props) {
  let medplum2 = b(), { binding, creatable, clearable, expandParams, withHelpText, ...rest } = props, loadValues = reactExports.useCallback(async (input, signal) => {
    var _a;
    if (!binding)
      return [];
    let valueSetElements = ((_a = (await medplum2.valueSetExpand({ ...expandParams, url: binding, filter: input }, { signal })).expansion) == null ? void 0 : _a.contains) ?? [], newData = [];
    for (let valueSetElement of valueSetElements)
      valueSetElement.code && !newData.some((item) => item.code === valueSetElement.code) && newData.push(valueSetElement);
    return newData;
  }, [medplum2, expandParams, binding]);
  return jsxRuntimeExports.jsx(AsyncAutocomplete, { ...rest, creatable: creatable ?? true, clearable: clearable ?? true, toOption: toOption2, loadOptions: loadValues, onCreate: createValue, itemComponent: withHelpText ? ItemComponent2 : void 0 });
}
var ItemComponent2 = reactExports.forwardRef(({ label, resource, active, ...others }, ref) => jsxRuntimeExports.jsx("div", { ref, ...others, children: jsxRuntimeExports.jsxs(Group, { wrap: "nowrap", gap: "xs", children: [active && jsxRuntimeExports.jsx(IconCheck$1, { size: 12 }), jsxRuntimeExports.jsxs("div", { children: [jsxRuntimeExports.jsx(Text$1, { children: label }), jsxRuntimeExports.jsx(Text$1, { size: "xs", c: "dimmed", children: `${resource.system}#${resource.code}` })] })] }) }));
function CodeInput(props) {
  let { defaultValue: defaultValue2, onChange, withHelpText, ...rest } = props, [value, setValue] = reactExports.useState(defaultValue2);
  function handleChange(newValues) {
    let newValue = newValues[0], newCode = valueSetElementToCode(newValue);
    setValue(newCode), onChange && onChange(newCode);
  }
  return jsxRuntimeExports.jsx(ValueSetAutocomplete, { defaultValue: codeToValueSetElement(value), onChange: handleChange, withHelpText: withHelpText ?? true, ...rest });
}
function codeToValueSetElement(code) {
  return code ? { code } : void 0;
}
function valueSetElementToCode(element) {
  return element == null ? void 0 : element.code;
}
var CCDA_VIEWER_URL = "https://ccda.medplum.com";
function CcdaDisplay(props) {
  let { url } = props, [shouldSend, setShouldSend] = reactExports.useState(false), iframeRef = reactExports.useRef(null);
  return reactExports.useEffect(() => {
    url && shouldSend && iframeRef.current && (sendCommand(iframeRef.current, { command: "loadCcdaXml", value: url }).catch(console.error), setShouldSend(false));
  }, [url, shouldSend]), url ? jsxRuntimeExports.jsx("div", { "data-testid": "ccda-iframe", style: { maxWidth: props.maxWidth, minHeight: 400 }, children: jsxRuntimeExports.jsx("iframe", { title: "C-CDA Viewer", width: "100%", height: "400", ref: iframeRef, src: CCDA_VIEWER_URL, allowFullScreen: true, frameBorder: 0, seamless: true, onLoad: () => setShouldSend(true) }) }) : null;
}
function AttachmentDisplay(props) {
  let { contentType, url: uncachedUrl, title } = props.value ?? {}, url = Oe(uncachedUrl);
  return url ? jsxRuntimeExports.jsxs("div", { "data-testid": "attachment-display", children: [(contentType == null ? void 0 : contentType.startsWith("image/")) && jsxRuntimeExports.jsx("img", { "data-testid": "attachment-image", style: { maxWidth: props.maxWidth }, src: url, alt: title }), (contentType == null ? void 0 : contentType.startsWith("video/")) && jsxRuntimeExports.jsx("video", { "data-testid": "attachment-video", style: { maxWidth: props.maxWidth }, controls: true, children: jsxRuntimeExports.jsx("source", { type: contentType, src: url }) }), ((contentType == null ? void 0 : contentType.startsWith("text/")) || contentType === "application/json" || contentType === "application/pdf") && jsxRuntimeExports.jsx("div", { "data-testid": "attachment-iframe", style: { maxWidth: props.maxWidth, minHeight: 400 }, children: jsxRuntimeExports.jsx("iframe", { width: "100%", height: "400", src: url + "#navpanes=0", allowFullScreen: true, frameBorder: 0, seamless: true }) }), contentType === A.CDA_XML && jsxRuntimeExports.jsx(CcdaDisplay, { url }), jsxRuntimeExports.jsx("div", { "data-testid": "download-link", style: { padding: "2px 16px 16px 16px" }, children: jsxRuntimeExports.jsx(Anchor, { href: uncachedUrl, "data-testid": "attachment-details", target: "_blank", rel: "noopener noreferrer", download: getDownloadName(title), children: title || "Download" }) })] }) : null;
}
function getDownloadName(title) {
  return (title == null ? void 0 : title.includes(".")) ? title : void 0;
}
var DescriptionList_default = { root: "DescriptionList_root", compact: "DescriptionList_compact" };
function DescriptionList(props) {
  let { children, compact } = props;
  return jsxRuntimeExports.jsx("dl", { className: clsx_default(DescriptionList_default.root, { [DescriptionList_default.compact]: compact }), children });
}
function DescriptionListEntry(props) {
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("dt", { children: props.term }), jsxRuntimeExports.jsx("dd", { children: props.children })] });
}
function AttachmentArrayDisplay(props) {
  var _a;
  let attachmentElements = (_a = props.values) == null ? void 0 : _a.map((v, index2) => jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsx(AttachmentDisplay, { value: v, maxWidth: props.maxWidth }) }, "attatchment-" + index2)), content;
  if (props.includeDescriptionListEntry) {
    if (props.property === void 0)
      throw new Error("props.property is required when includeDescriptionListEntry is true");
    if (!z(props.path))
      throw new Error("props.path is required when includeDescriptionListEntry is true");
    let key = props.path.split(".").pop();
    content = jsxRuntimeExports.jsx(DescriptionListEntry, { term: _l(key), children: attachmentElements });
  } else
    content = jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: attachmentElements });
  return content;
}
var Container_default = { root: "Container_root" };
function Container(props) {
  let { children, ...others } = props;
  return jsxRuntimeExports.jsx(Container$1, { className: Container_default.root, ...others, children });
}
var Panel_default = { paper: "Panel_paper", fill: "Panel_fill" };
function Panel(props) {
  let { width, fill, className, children, ...rest } = props, style = width ? { maxWidth: width } : void 0;
  return jsxRuntimeExports.jsx(Paper, { className: clsx_default(Panel_default.paper, fill && Panel_default.fill, className), style, shadow: "sm", radius: "sm", withBorder: true, ...rest, children });
}
function Document(props) {
  let { children, ...others } = props;
  return jsxRuntimeExports.jsx(Container, { children: jsxRuntimeExports.jsx(Panel, { ...others, children }) });
}
function Logo(props) {
  return jsxRuntimeExports.jsxs("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 491 491", style: { width: props.size, height: props.size }, children: [jsxRuntimeExports.jsx("title", { children: "Medplum Logo" }), jsxRuntimeExports.jsx("path", { fill: props.fill ?? "#ad7136", d: "M282 67c6-16 16-29 29-40L289 0c-22 17-37 41-43 68l17 23 19-24z" }), jsxRuntimeExports.jsx("path", { fill: props.fill ?? "#946af9", d: "M311 63c-17 0-33 4-48 11-16-7-32-11-49-11-87 0-158 96-158 214s71 214 158 214c17 0 33-4 49-11 15 7 31 11 48 11 87 0 158-96 158-214S398 63 311 63z" }), jsxRuntimeExports.jsx("path", { fill: props.fill ?? "#7857c5", d: "M231 489l-17 2c-87 0-158-96-158-214S127 63 214 63l17 1c-39 12-70 102-70 213s31 201 70 212z" }), jsxRuntimeExports.jsx("path", { fill: props.fill ?? "#40bc26", d: "M207 220a176 176 0 01-177 43A176 176 0 01251 43l1 5c17 59 2 125-45 172z" }), jsxRuntimeExports.jsx("path", { fill: props.fill ?? "#33961e", d: "M252 48A421 421 0 0057 270l-27-7A176 176 0 01251 43l1 5z" })] });
}
function getErrorsForInput(outcome, expression) {
  var _a, _b, _c;
  return (_c = (_b = (_a = outcome == null ? void 0 : outcome.issue) == null ? void 0 : _a.filter((issue) => {
    var _a2;
    return isExpressionMatch((_a2 = issue.expression) == null ? void 0 : _a2[0], expression);
  })) == null ? void 0 : _b.map((issue) => {
    var _a2;
    return (_a2 = issue.details) == null ? void 0 : _a2.text;
  })) == null ? void 0 : _c.join(`
`);
}
function getIssuesForExpression(outcome, expression) {
  var _a;
  return (_a = outcome == null ? void 0 : outcome.issue) == null ? void 0 : _a.filter((issue) => {
    var _a2;
    return isExpressionMatch((_a2 = issue.expression) == null ? void 0 : _a2[0], expression);
  });
}
var ARRAY_INDEX_REGEX = /\[\d+\]/;
function isExpressionMatch(expr1, expr2) {
  let isExpr1Indexed = typeof expr1 == "string" && ARRAY_INDEX_REGEX.test(expr1), isExpr2Indexed = typeof expr2 == "string" && ARRAY_INDEX_REGEX.test(expr2);
  if (isExpr1Indexed !== isExpr2Indexed && (expr1 = expr1 == null ? void 0 : expr1.replace(ARRAY_INDEX_REGEX, ""), expr2 = expr2 == null ? void 0 : expr2.replace(ARRAY_INDEX_REGEX, "")), expr1 === expr2)
    return true;
  if (!expr1 || !expr2)
    return false;
  let dot1 = expr1.indexOf(".");
  if (dot1 >= 0 && expr1.substring(dot1 + 1) === expr2)
    return true;
  let dot2 = expr2.indexOf(".");
  return dot2 >= 0 && expr2.substring(dot2 + 1) === expr1;
}
function NewProjectForm(props) {
  let medplum2 = b(), [outcome, setOutcome] = reactExports.useState();
  return jsxRuntimeExports.jsxs(Form, { onSubmit: async (formData) => {
    try {
      props.handleAuthResponse(await medplum2.startNewProject({ login: props.login, projectName: formData.projectName }));
    } catch (err) {
      setOutcome(et(err));
    }
  }, children: [jsxRuntimeExports.jsxs(Center, { style: { flexDirection: "column" }, children: [jsxRuntimeExports.jsx(Logo, { size: 32 }), jsxRuntimeExports.jsx(Title, { children: "Create project" })] }), jsxRuntimeExports.jsxs(Stack, { gap: "xl", children: [jsxRuntimeExports.jsx(TextInput, { name: "projectName", label: "Project Name", placeholder: "My Project", required: true, autoFocus: true, error: getErrorsForInput(outcome, "projectName") }), jsxRuntimeExports.jsxs(Text$1, { c: "dimmed", size: "xs", children: ["By clicking submit you agree to the Medplum", " ", jsxRuntimeExports.jsx(Anchor, { href: "https://www.medplum.com/privacy", children: "Privacy Policy" }), " and ", jsxRuntimeExports.jsx(Anchor, { href: "https://www.medplum.com/terms", children: "Terms of Service" }), "."] })] }), jsxRuntimeExports.jsx(Group, { justify: "flex-end", mt: "xl", wrap: "nowrap", children: jsxRuntimeExports.jsx(Button, { type: "submit", children: "Create project" }) })] });
}
function createScriptTag(src, onload) {
  let head = document.getElementsByTagName("head")[0], script = document.createElement("script");
  script.async = true, script.src = src, script.onload = onload ?? null, head.appendChild(script);
}
function GoogleButton(props) {
  let medplum2 = b(), { googleClientId, handleGoogleCredential } = props, parentRef = reactExports.useRef(null), [scriptLoaded, setScriptLoaded] = reactExports.useState(typeof google < "u"), [initialized, setInitialized] = reactExports.useState(false), [buttonRendered, setButtonRendered] = reactExports.useState(false);
  return reactExports.useEffect(() => {
    if (typeof google > "u") {
      createScriptTag("https://accounts.google.com/gsi/client", () => setScriptLoaded(true));
      return;
    }
    initialized || (google.accounts.id.initialize({ client_id: googleClientId, callback: handleGoogleCredential }), setInitialized(true)), parentRef.current && !buttonRendered && (google.accounts.id.renderButton(parentRef.current, {}), setButtonRendered(true));
  }, [medplum2, googleClientId, initialized, scriptLoaded, parentRef, buttonRendered, handleGoogleCredential]), googleClientId ? jsxRuntimeExports.jsx("div", { ref: parentRef }) : null;
}
function getGoogleClientId(clientId) {
  if (clientId)
    return clientId;
  if (typeof window < "u") {
    let origin = window.location.protocol + "//" + window.location.host;
    if ((("undefined" == null ? void 0 : "undefined".split(",")) ?? []).includes(origin))
      return "__GOOGLE_CLIENT_ID__";
  }
}
function OperationOutcomeAlert(props) {
  var _a;
  let issues = ((_a = props.outcome) == null ? void 0 : _a.issue) || props.issues;
  return !issues || issues.length === 0 ? null : jsxRuntimeExports.jsx(Alert, { icon: jsxRuntimeExports.jsx(IconAlertCircle, { size: 16 }), color: "red", children: issues.map((issue) => {
    var _a2;
    return jsxRuntimeExports.jsx("div", { "data-testid": "text-field-error", children: eo(issue) }, (_a2 = issue.details) == null ? void 0 : _a2.text);
  }) });
}
function AuthenticationForm(props) {
  let [email, setEmail] = reactExports.useState();
  return email ? jsxRuntimeExports.jsx(PasswordForm, { email, ...props }) : jsxRuntimeExports.jsx(EmailForm, { setEmail, ...props });
}
function EmailForm(props) {
  let { setEmail, onRegister, handleAuthResponse, children, disableEmailAuth, ...baseLoginRequest } = props, medplum2 = b(), googleClientId = !props.disableGoogleAuth && getGoogleClientId(props.googleClientId), [outcome, setOutcome] = reactExports.useState(), issues = getIssuesForExpression(outcome, void 0), isExternalAuth = reactExports.useCallback(async (authMethod) => {
    if (!authMethod.authorizeUrl)
      return false;
    let state = JSON.stringify({ ...await medplum2.ensureCodeChallenge(baseLoginRequest), domain: authMethod.domain }), url = new URL(authMethod.authorizeUrl);
    return url.searchParams.set("state", state), window.location.assign(url.toString()), true;
  }, [medplum2, baseLoginRequest]), handleSubmit = reactExports.useCallback(async (formData) => {
    let authMethod = await medplum2.post("auth/method", { email: formData.email });
    await isExternalAuth(authMethod) || setEmail(formData.email);
  }, [medplum2, isExternalAuth, setEmail]), handleGoogleCredential = reactExports.useCallback(async (response) => {
    try {
      let authResponse = await medplum2.startGoogleLogin({ ...baseLoginRequest, googleCredential: response.credential });
      await isExternalAuth(authResponse) || handleAuthResponse(authResponse);
    } catch (err) {
      setOutcome(et(err));
    }
  }, [medplum2, baseLoginRequest, isExternalAuth, handleAuthResponse]);
  return jsxRuntimeExports.jsxs(Form, { onSubmit: handleSubmit, children: [jsxRuntimeExports.jsx(Center, { style: { flexDirection: "column" }, children }), jsxRuntimeExports.jsx(OperationOutcomeAlert, { issues }), googleClientId && jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Group, { justify: "center", p: "xl", style: { height: 70 }, children: jsxRuntimeExports.jsx(GoogleButton, { googleClientId, handleGoogleCredential }) }), !disableEmailAuth && jsxRuntimeExports.jsx(Divider, { label: "or", labelPosition: "center", my: "lg" })] }), !disableEmailAuth && jsxRuntimeExports.jsx(TextInput, { name: "email", type: "email", label: "Email", placeholder: "name@domain.com", required: true, autoFocus: true, error: getErrorsForInput(outcome, "email") }), jsxRuntimeExports.jsxs(Group, { justify: "space-between", mt: "xl", gap: 0, wrap: "nowrap", children: [jsxRuntimeExports.jsx("div", { children: onRegister && jsxRuntimeExports.jsx(Anchor, { component: "button", type: "button", color: "dimmed", onClick: onRegister, size: "xs", children: "Register" }) }), !disableEmailAuth && jsxRuntimeExports.jsx(Button, { type: "submit", children: "Next" })] })] });
}
function PasswordForm(props) {
  let { onForgotPassword, handleAuthResponse, children, ...baseLoginRequest } = props, medplum2 = b(), [outcome, setOutcome] = reactExports.useState(), issues = getIssuesForExpression(outcome, void 0), handleSubmit = reactExports.useCallback((formData) => {
    medplum2.startLogin({ ...baseLoginRequest, password: formData.password, remember: formData.remember === "on" }).then(handleAuthResponse).catch((err) => setOutcome(et(err)));
  }, [medplum2, baseLoginRequest, handleAuthResponse]);
  return jsxRuntimeExports.jsxs(Form, { onSubmit: handleSubmit, children: [jsxRuntimeExports.jsx(Center, { style: { flexDirection: "column" }, children }), jsxRuntimeExports.jsx(OperationOutcomeAlert, { issues }), jsxRuntimeExports.jsx(Stack, { gap: "xl", children: jsxRuntimeExports.jsx(PasswordInput, { name: "password", label: "Password", autoComplete: "off", required: true, autoFocus: true, error: getErrorsForInput(outcome, "password") }) }), jsxRuntimeExports.jsxs(Group, { justify: "space-between", mt: "xl", gap: 0, wrap: "nowrap", children: [onForgotPassword && jsxRuntimeExports.jsx(Anchor, { component: "button", type: "button", c: "dimmed", onClick: onForgotPassword, size: "xs", children: "Forgot password" }), jsxRuntimeExports.jsx(Checkbox, { id: "remember", name: "remember", label: "Remember me", size: "xs", style: { lineHeight: 1 } }), jsxRuntimeExports.jsx(Button, { type: "submit", children: "Sign in" })] })] });
}
function ChooseProfileForm(props) {
  let medplum2 = b(), combobox = useCombobox(), [search, setSearch] = reactExports.useState(""), [outcome, setOutcome] = reactExports.useState();
  function filterDisplay(display) {
    var _a;
    return !!((_a = display == null ? void 0 : display.toLowerCase()) == null ? void 0 : _a.includes(search.toLowerCase()));
  }
  function filterMembership(membership) {
    var _a, _b;
    return filterDisplay((_a = membership.profile) == null ? void 0 : _a.display) || filterDisplay((_b = membership.project) == null ? void 0 : _b.display);
  }
  function handleValueSelect(membershipId) {
    medplum2.post("auth/profile", { login: props.login, profile: membershipId }).then(props.handleAuthResponse).catch((err) => setOutcome(et(err)));
  }
  let options = props.memberships.filter(filterMembership).slice(0, 10).map((item) => jsxRuntimeExports.jsx(Combobox.Option, { value: item.id, children: jsxRuntimeExports.jsx(SelectOption, { ...item }) }, item.id));
  return jsxRuntimeExports.jsxs(Stack, { children: [jsxRuntimeExports.jsxs(Flex, { gap: "md", mb: "md", justify: "center", align: "center", direction: "column", wrap: "nowrap", children: [jsxRuntimeExports.jsx(Logo, { size: 32 }), jsxRuntimeExports.jsx(Title, { order: 3, children: "Choose profile" })] }), jsxRuntimeExports.jsx(OperationOutcomeAlert, { outcome }), jsxRuntimeExports.jsxs(Combobox, { store: combobox, onOptionSubmit: handleValueSelect, children: [jsxRuntimeExports.jsx(Combobox.EventsTarget, { children: jsxRuntimeExports.jsx(TextInput, { placeholder: "Search", value: search, onChange: (event) => {
    setSearch(event.currentTarget.value), combobox.updateSelectedOptionIndex();
  } }) }), jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsx(Combobox.Options, { children: options.length > 0 ? options : jsxRuntimeExports.jsx(Combobox.Empty, { children: "Nothing found..." }) }) })] })] });
}
function SelectOption(membership) {
  var _a, _b;
  return jsxRuntimeExports.jsxs(Group, { children: [jsxRuntimeExports.jsx(Avatar, { radius: "xl" }), jsxRuntimeExports.jsxs("div", { children: [jsxRuntimeExports.jsx(Text$1, { fz: "sm", fw: 500, children: (_a = membership.profile) == null ? void 0 : _a.display }), jsxRuntimeExports.jsx(Text$1, { fz: "xs", opacity: 0.6, children: (_b = membership.project) == null ? void 0 : _b.display })] })] });
}
function ChooseScopeForm(props) {
  let medplum2 = b();
  return jsxRuntimeExports.jsx(Form, { onSubmit: (formData) => {
    medplum2.post("auth/scope", { login: props.login, scope: Object.keys(formData).join(" ") }).then(props.handleAuthResponse).catch(console.log);
  }, children: jsxRuntimeExports.jsxs(Stack, { children: [jsxRuntimeExports.jsxs(Center, { style: { flexDirection: "column" }, children: [jsxRuntimeExports.jsx(Logo, { size: 32 }), jsxRuntimeExports.jsx(Title, { children: "Choose scope" })] }), jsxRuntimeExports.jsx(Stack, { children: (props.scope ?? "openid").split(" ").map((scopeName) => jsxRuntimeExports.jsx(Checkbox, { id: scopeName, name: scopeName, label: scopeName, defaultChecked: true }, scopeName)) }), jsxRuntimeExports.jsx(Group, { justify: "flex-end", mt: "xl", children: jsxRuntimeExports.jsx(Button, { type: "submit", children: "Set scope" }) })] }) });
}
function MfaForm(props) {
  let [errorMessage, setErrorMessage] = reactExports.useState();
  return jsxRuntimeExports.jsx(Form, { onSubmit: (formData) => {
    setErrorMessage(void 0), props.onSubmit(formData).catch((err) => setErrorMessage(Ce(err)));
  }, children: jsxRuntimeExports.jsxs(Stack, { children: [jsxRuntimeExports.jsxs(Center, { style: { flexDirection: "column" }, children: [jsxRuntimeExports.jsx(Logo, { size: 32 }), jsxRuntimeExports.jsx(Title, { children: "Enter MFA code" })] }), errorMessage && jsxRuntimeExports.jsx(Alert, { icon: jsxRuntimeExports.jsx(IconAlertCircle, { size: 16 }), title: "Error", color: "red", children: errorMessage }), jsxRuntimeExports.jsx(Stack, { children: jsxRuntimeExports.jsx(TextInput, { name: "token", label: "MFA code", required: true, autoFocus: true }) }), jsxRuntimeExports.jsx(Group, { justify: "flex-end", mt: "xl", children: jsxRuntimeExports.jsx(Button, { type: "submit", children: "Submit code" }) })] }) });
}
function SignInForm(props) {
  let { login: loginCode, chooseScopes, onSuccess, onForgotPassword, onRegister, onCode, ...baseLoginRequest } = props, medplum2 = b(), [login, setLogin] = reactExports.useState(), loginRequested = reactExports.useRef(false), [mfaRequired, setAuthenticatorRequired] = reactExports.useState(false), [memberships, setMemberships] = reactExports.useState(), handleCode = reactExports.useCallback((code) => {
    onCode ? onCode(code) : medplum2.processCode(code).then(() => {
      onSuccess && onSuccess();
    }).catch((err) => showNotification({ color: "red", message: Ce(err) }));
  }, [medplum2, onCode, onSuccess]), handleAuthResponse = reactExports.useCallback((response) => {
    setAuthenticatorRequired(!!response.mfaRequired), response.login && setLogin(response.login), response.memberships && setMemberships(response.memberships), response.code && (chooseScopes ? setMemberships(void 0) : handleCode(response.code));
  }, [chooseScopes, handleCode]), handleScopeResponse = reactExports.useCallback((response) => {
    handleCode(response.code);
  }, [handleCode]);
  return reactExports.useEffect(() => {
    loginCode && !loginRequested.current && !login && (loginRequested.current = true, medplum2.get("auth/login/" + loginCode).then(handleAuthResponse).catch((err) => showNotification({ color: "red", message: Ce(err) })));
  }, [medplum2, loginCode, loginRequested, login, handleAuthResponse]), jsxRuntimeExports.jsx(Document, { width: 450, px: "sm", py: "md", children: login ? mfaRequired ? jsxRuntimeExports.jsx(MfaForm, { onSubmit: async (fields) => {
    let res = await medplum2.post("auth/mfa/verify", { login, token: fields.token });
    handleAuthResponse(res);
  } }) : memberships ? jsxRuntimeExports.jsx(ChooseProfileForm, { login, memberships, handleAuthResponse }) : props.projectId === "new" ? jsxRuntimeExports.jsx(NewProjectForm, { login, handleAuthResponse }) : props.chooseScopes ? jsxRuntimeExports.jsx(ChooseScopeForm, { login, scope: props.scope, handleAuthResponse: handleScopeResponse }) : jsxRuntimeExports.jsx("div", { children: "Success" }) : jsxRuntimeExports.jsx(AuthenticationForm, { onForgotPassword, onRegister, handleAuthResponse, disableGoogleAuth: props.disableGoogleAuth, disableEmailAuth: props.disableEmailAuth, ...baseLoginRequest, children: props.children }) });
}
function CodeableConceptDisplay(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Be(props.value) });
}
function CodingDisplay(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Zn(props.value) });
}
function ContactPointDisplay(props) {
  let contactPoint = props.value;
  if (!contactPoint)
    return null;
  let builder = [];
  return contactPoint.value && builder.push(contactPoint.value), (contactPoint.use || contactPoint.system) && (builder.push(" ["), contactPoint.use && builder.push(contactPoint.use), contactPoint.use && contactPoint.system && builder.push(" "), contactPoint.system && builder.push(contactPoint.system), builder.push("]")), jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: builder.join("").trim() });
}
function ContactDetailDisplay(props) {
  var _a;
  let contactDetail = props.value;
  return contactDetail ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [contactDetail.name, contactDetail.name && ": ", (_a = contactDetail.telecom) == null ? void 0 : _a.map((telecom) => jsxRuntimeExports.jsx(ContactPointDisplay, { value: telecom }, `telecom-${contactDetail.name}-${telecom.value}`))] }) : null;
}
function IdentifierDisplay(props) {
  var _a, _b;
  return jsxRuntimeExports.jsxs("div", { children: [(_a = props.value) == null ? void 0 : _a.system, ": ", (_b = props.value) == null ? void 0 : _b.value] });
}
function MoneyDisplay(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Rl(props.value) });
}
function QuantityDisplay(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: ne(props.value) });
}
function RangeDisplay(props) {
  return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: bl(props.value) });
}
function RatioDisplay(props) {
  let value = props.value;
  return value ? jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(QuantityDisplay, { value: value.numerator }), " / ", jsxRuntimeExports.jsx(QuantityDisplay, { value: value.denominator })] }) : null;
}
function ReferenceDisplay(props) {
  if (!props.value)
    return null;
  let displayString = props.value.display || props.value.reference || ut(props.value);
  return props.link !== false && props.value.reference ? jsxRuntimeExports.jsx(MedplumLink, { to: props.value, children: displayString }) : jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: displayString });
}
function assignValuesIntoSlices(values2, slices, slicing, profileUrl) {
  if (!z(slicing == null ? void 0 : slicing.slices))
    return [values2];
  let slicedValues = new Array(slices.length + 1);
  for (let i = 0; i < slicedValues.length; i++)
    slicedValues[i] = [];
  for (let value of values2) {
    let sliceName = _i(value, slices, slicing.discriminator, profileUrl), sliceIndex = sliceName ? slices.findIndex((slice2) => slice2.name === sliceName) : -1;
    sliceIndex === -1 && (sliceIndex = slices.length), slicedValues[sliceIndex].push(value);
  }
  return slicedValues;
}
async function prepareSlices({ medplum: medplum2, property }) {
  return new Promise((resolve, reject) => {
    var _a, _b;
    if (!property.slicing) {
      resolve([]);
      return;
    }
    let supportedSlices = [], profileUrls = [], promises = [];
    for (let slice2 of property.slicing.slices) {
      if (!Mi(slice2)) {
        console.debug("Unsupported slice definition", slice2);
        continue;
      }
      let profileUrl;
      z(slice2.elements) || (profileUrl = (_b = (_a = slice2.type[0]) == null ? void 0 : _a.profile) == null ? void 0 : _b[0]), supportedSlices.push(slice2), profileUrls.push(profileUrl), profileUrl && promises.push(medplum2.requestProfileSchema(profileUrl));
    }
    Promise.all(promises).then(() => {
      for (let i = 0; i < supportedSlices.length; i++) {
        let slice2 = supportedSlices[i], profileUrl = profileUrls[i];
        if (profileUrl) {
          let typeSchema = Cn(profileUrl);
          slice2.typeSchema = typeSchema;
        }
      }
      resolve(supportedSlices);
    }).catch(reject);
  });
}
function maybeWrapWithContext(ContextProvider, contextValue, contents) {
  return contextValue !== void 0 ? jsxRuntimeExports.jsx(ContextProvider, { value: contextValue, children: contents }) : contents;
}
function SliceDisplay(props) {
  var _a, _b;
  let { slice: slice2, property } = props, sliceElements = ((_a = slice2.typeSchema) == null ? void 0 : _a.elements) ?? slice2.elements, parentContext = reactExports.useContext(ElementsContext), contextValue = reactExports.useMemo(() => {
    var _a2;
    if (z(sliceElements))
      return Gr({ parentContext, elements: sliceElements, path: props.path, profileUrl: (_a2 = slice2.typeSchema) == null ? void 0 : _a2.url });
  }, [parentContext, props.path, (_b = slice2.typeSchema) == null ? void 0 : _b.url, sliceElements]);
  return maybeWrapWithContext(ElementsContext.Provider, contextValue, jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: props.value.map((value, valueIndex) => jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsx(ResourcePropertyDisplay, { property, path: props.path, arrayElement: true, elementDefinitionType: slice2.type[0], propertyType: slice2.type[0].code, value, ignoreMissingValues: props.ignoreMissingValues, link: props.link }) }, `${valueIndex}-${props.value.length}`)) }));
}
function ResourceArrayDisplay(props) {
  var _a;
  let { property, propertyType } = props, medplum2 = b(), values2 = reactExports.useMemo(() => Array.isArray(props.values) ? props.values : [], [props.values]), [loading, setLoading] = reactExports.useState(true), [slices, setSlices] = reactExports.useState([]), [slicedValues, setSlicedValues] = reactExports.useState(() => [values2]), ctx = reactExports.useContext(ElementsContext);
  if (reactExports.useEffect(() => {
    prepareSlices({ medplum: medplum2, property }).then((slices2) => {
      setSlices(slices2);
      let slicedValues2 = assignValuesIntoSlices(values2, slices2, property.slicing, ctx.profileUrl);
      setSlicedValues(slicedValues2), setLoading(false);
    }).catch((reason) => {
      console.error(reason), setLoading(false);
    });
  }, [medplum2, property, ctx.profileUrl, setSlicedValues, values2]), loading)
    return jsxRuntimeExports.jsx("div", { children: "Loading..." });
  let nonSliceContent;
  if (((_a = property.type[0]) == null ? void 0 : _a.code) !== "Extension") {
    let nonSliceValues = slicedValues[slices.length], nonSliceElements = nonSliceValues.map((value, valueIndex) => jsxRuntimeExports.jsx("div", { children: jsxRuntimeExports.jsx(ResourcePropertyDisplay, { path: props.path, arrayElement: true, property, propertyType, value, ignoreMissingValues: props.ignoreMissingValues, link: props.link }) }, `${valueIndex}-${nonSliceValues.length}`));
    if (props.includeDescriptionListEntry) {
      if (!z(props.path))
        throw new Error("props.path is required when includeDescriptionListEntry is true");
      let key = props.path.split(".").pop();
      nonSliceContent = jsxRuntimeExports.jsx(DescriptionListEntry, { term: _l(key), children: nonSliceElements });
    } else
      nonSliceContent = jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: nonSliceElements });
  }
  return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [slices.map((slice2, sliceIndex) => {
    if (!props.path)
      throw Error(`Displaying a resource property with slices of type ${props.propertyType} requires path`);
    let sliceDisplay = jsxRuntimeExports.jsx(SliceDisplay, { path: props.path, slice: slice2, property, value: slicedValues[sliceIndex], ignoreMissingValues: props.ignoreMissingValues, link: props.link }, slice2.name);
    return props.includeDescriptionListEntry && (sliceDisplay = jsxRuntimeExports.jsx(DescriptionListEntry, { term: _l(slice2.name), children: sliceDisplay }, slice2.name)), sliceDisplay;
  }), nonSliceContent] });
}
function getValueAndType(context, path, profileUrl) {
  let typedResult = P$1(context, path, { profileUrl });
  return typedResult ? Array.isArray(typedResult) ? [typedResult.map((e) => e.value), typedResult[0].type] : [typedResult.value, typedResult.type] : [void 0, "undefined"];
}
function ExtensionDisplay(props) {
  var _a;
  let { elementDefinitionType } = props, medplum2 = b(), ctx = reactExports.useContext(ElementsContext), [typeSchema, setTypeSchema] = reactExports.useState(X("Extension")), profileUrl = reactExports.useMemo(() => {
    if (z(elementDefinitionType == null ? void 0 : elementDefinitionType.profile))
      return elementDefinitionType.profile[0];
  }, [elementDefinitionType]), [loadingProfile, setLoadingProfile] = reactExports.useState(profileUrl !== void 0);
  if (reactExports.useEffect(() => {
    profileUrl && (setLoadingProfile(true), medplum2.requestProfileSchema(profileUrl).then(() => {
      let profile = Cn(profileUrl);
      setLoadingProfile(false), profile && setTypeSchema(profile);
    }).catch((reason) => {
      setLoadingProfile(false), console.warn(reason);
    }));
  }, [medplum2, profileUrl]), profileUrl && (loadingProfile || !Rn(profileUrl)))
    return jsxRuntimeExports.jsx("div", { children: "Loading..." });
  if (((_a = typeSchema.elements["value[x]"]) == null ? void 0 : _a.max) !== 0) {
    let [propertyValue, propertyType] = getValueAndType({ type: "Extension", value: props.value }, "value[x]", profileUrl ?? ctx.profileUrl);
    return jsxRuntimeExports.jsx(ResourcePropertyDisplay, { propertyType, value: propertyValue });
  }
  return jsxRuntimeExports.jsx(BackboneElementDisplay, { path: props.path, value: { type: typeSchema.type, value: props.value }, compact: props.compact, ignoreMissingValues: props.ignoreMissingValues, link: props.link, profileUrl });
}
function ResourcePropertyDisplay(props) {
  var _a;
  let { property, propertyType, value } = props;
  if ((_a = property == null ? void 0 : property.path) == null ? void 0 : _a.endsWith(".id"))
    return jsxRuntimeExports.jsxs(Box, { component: "div", style: { display: "flex", gap: 3, alignItems: "center" }, children: [value, !S(value) && jsxRuntimeExports.jsx(CopyButton, { value, timeout: 2e3, children: ({ copied, copy: copy2 }) => jsxRuntimeExports.jsx(Tooltip, { label: copied ? "Copied" : "Copy", withArrow: true, position: "right", children: jsxRuntimeExports.jsx(ActionIcon, { variant: "subtle", color: copied ? "teal" : "gray", onClick: copy2, children: copied ? jsxRuntimeExports.jsx(IconCheck$1, { size: "1rem" }) : jsxRuntimeExports.jsx(IconCopy, { size: "1rem" }) }) }) })] });
  if (property && (property.isArray || property.max > 1) && !props.arrayElement)
    return propertyType === p.Attachment ? jsxRuntimeExports.jsx(AttachmentArrayDisplay, { values: value, maxWidth: props.maxWidth, includeDescriptionListEntry: props.includeArrayDescriptionListEntry, property, path: props.path }) : jsxRuntimeExports.jsx(ResourceArrayDisplay, { path: props.path, property, propertyType, values: value, includeDescriptionListEntry: props.includeArrayDescriptionListEntry, ignoreMissingValues: props.ignoreMissingValues, link: props.link });
  switch (propertyType) {
    case p.boolean:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: value === void 0 ? "" : (!!value).toString() });
    case p.SystemString:
    case p.string:
      return jsxRuntimeExports.jsx("div", { style: { whiteSpace: "pre-wrap" }, children: value });
    case p.code:
    case p.date:
    case p.decimal:
    case p.id:
    case p.integer:
    case p.positiveInt:
    case p.unsignedInt:
    case p.uri:
    case p.url:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: value });
    case p.canonical:
      return jsxRuntimeExports.jsx(ReferenceDisplay, { value: { reference: value }, link: props.link });
    case p.dateTime:
    case p.instant:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: wr(value) });
    case p.markdown:
      return jsxRuntimeExports.jsx("pre", { children: value });
    case p.Address:
      return jsxRuntimeExports.jsx(AddressDisplay, { value });
    case p.Annotation:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: value == null ? void 0 : value.text });
    case p.Attachment:
      return jsxRuntimeExports.jsx(AttachmentDisplay, { value, maxWidth: props.maxWidth });
    case p.CodeableConcept:
      return jsxRuntimeExports.jsx(CodeableConceptDisplay, { value });
    case p.Coding:
      return jsxRuntimeExports.jsx(CodingDisplay, { value });
    case p.ContactDetail:
      return jsxRuntimeExports.jsx(ContactDetailDisplay, { value });
    case p.ContactPoint:
      return jsxRuntimeExports.jsx(ContactPointDisplay, { value });
    case p.HumanName:
      return jsxRuntimeExports.jsx(HumanNameDisplay, { value });
    case p.Identifier:
      return jsxRuntimeExports.jsx(IdentifierDisplay, { value });
    case p.Money:
      return jsxRuntimeExports.jsx(MoneyDisplay, { value });
    case p.Period:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: Sl(value) });
    case p.Quantity:
    case p.Duration:
      return jsxRuntimeExports.jsx(QuantityDisplay, { value });
    case p.Range:
      return jsxRuntimeExports.jsx(RangeDisplay, { value });
    case p.Ratio:
      return jsxRuntimeExports.jsx(RatioDisplay, { value });
    case p.Reference:
      return jsxRuntimeExports.jsx(ReferenceDisplay, { value, link: props.link });
    case p.Timing:
      return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: El(value) });
    case p.Dosage:
    case p.UsageContext:
      if (!props.path)
        throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return jsxRuntimeExports.jsx(BackboneElementDisplay, { path: props.path, value: { type: propertyType, value }, compact: true, ignoreMissingValues: props.ignoreMissingValues });
    case p.Extension:
      if (!props.path)
        throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return jsxRuntimeExports.jsx(ExtensionDisplay, { path: props.path, value, compact: true, ignoreMissingValues: props.ignoreMissingValues, elementDefinitionType: props.elementDefinitionType });
    default:
      if (!property)
        throw Error(`Displaying property of type ${props.propertyType} requires element schema`);
      if (!props.path)
        throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return jsxRuntimeExports.jsx(BackboneElementDisplay, { path: props.path, value: { type: property.type[0].code, value }, compact: true, ignoreMissingValues: props.ignoreMissingValues });
  }
}
var EXTENSION_KEYS2 = ["extension", "modifierExtension"], IGNORED_PROPERTIES2 = DEFAULT_IGNORED_PROPERTIES.filter((prop) => !EXTENSION_KEYS2.includes(prop));
function BackboneElementDisplay(props) {
  let typedValue = props.value, { value, type: typeName } = typedValue, parentElementsContext = reactExports.useContext(ElementsContext), profileUrl = props.profileUrl ?? (parentElementsContext == null ? void 0 : parentElementsContext.profileUrl), typeSchema = reactExports.useMemo(() => Le(typeName, profileUrl), [profileUrl, typeName]), newElementsContext = reactExports.useMemo(() => {
    if (typeSchema)
      return Gr({ parentContext: parentElementsContext, elements: typeSchema.elements, path: props.path, profileUrl: typeSchema.url, accessPolicyResource: props.accessPolicyResource });
  }, [typeSchema, parentElementsContext, props.path, props.accessPolicyResource]);
  if (S(value))
    return null;
  if (!typeSchema)
    return jsxRuntimeExports.jsxs("div", { children: [typeName, " not implemented"] });
  if (typeof value == "object" && "name" in value && Object.keys(value).length === 1 && typeof value.name == "string")
    return jsxRuntimeExports.jsx("div", { children: value.name });
  let elementsContext = newElementsContext ?? parentElementsContext;
  return maybeWrapWithContext(ElementsContext.Provider, newElementsContext, jsxRuntimeExports.jsx(DescriptionList, { compact: props.compact, children: Object.entries(elementsContext.elements).map(([key, property]) => {
    var _a;
    if (EXTENSION_KEYS2.includes(key) && S((_a = property.slicing) == null ? void 0 : _a.slices))
      return null;
    if (IGNORED_PROPERTIES2.includes(key))
      return null;
    if (DEFAULT_IGNORED_NON_NESTED_PROPERTIES.includes(key) && property.path.split(".").length === 2 || key.includes("."))
      return null;
    let [propertyValue, propertyType] = getValueAndType(typedValue, key, elementsContext.profileUrl);
    if ((props.ignoreMissingValues || property.max === 0) && S(propertyValue) || props.path.endsWith(".extension") && (key === "url" || key === "id"))
      return null;
    let isArrayProperty = property.max > 1 || property.isArray, resourcePropertyDisplay = jsxRuntimeExports.jsx(ResourcePropertyDisplay, { property, propertyType, path: props.path + "." + key, value: propertyValue, ignoreMissingValues: props.ignoreMissingValues, includeArrayDescriptionListEntry: isArrayProperty, link: props.link }, key);
    return isArrayProperty ? resourcePropertyDisplay : jsxRuntimeExports.jsx(DescriptionListEntry, { term: _l(key), children: resourcePropertyDisplay }, key);
  }) }));
}
reactExports.forwardRef(({ label, resource, active: _active, ...others }, ref) => jsxRuntimeExports.jsx("div", { ref, ...others, children: jsxRuntimeExports.jsxs(Group, { wrap: "nowrap", children: [jsxRuntimeExports.jsx(ResourceAvatar, { value: resource }), jsxRuntimeExports.jsxs("div", { children: [jsxRuntimeExports.jsx(Text$1, { children: label }), jsxRuntimeExports.jsx(Text$1, { size: "xs", c: "dimmed", children: resource.birthDate || resource.id })] })] }) }));
__toESM(require_rfc6902(), 1);
function FhirPathDisplay(props) {
  let value;
  try {
    value = De(props.path, props.resource);
  } catch (err) {
    return console.warn("FhirPathDisplay:", err), null;
  }
  if (value.length > 1)
    throw new Error(`Component "path" for "FhirPathDisplay" must resolve to a single element.        Received ${value.length} elements        [${JSON.stringify(value, null, 2)}]`);
  return jsxRuntimeExports.jsx(ResourcePropertyDisplay, { value: value[0] || "", propertyType: props.propertyType });
}
({ string: [li.EQUALS, li.NOT, li.CONTAINS, li.EXACT], fulltext: [li.EQUALS, li.NOT, li.CONTAINS, li.EXACT], token: [li.EQUALS, li.NOT], reference: [li.EQUALS, li.NOT], numeric: [li.EQUALS, li.NOT_EQUALS, li.GREATER_THAN, li.LESS_THAN, li.GREATER_THAN_OR_EQUALS, li.LESS_THAN_OR_EQUALS], quantity: [li.EQUALS, li.NOT_EQUALS, li.GREATER_THAN, li.LESS_THAN, li.GREATER_THAN_OR_EQUALS, li.LESS_THAN_OR_EQUALS], date: [li.EQUALS, li.NOT_EQUALS, li.GREATER_THAN, li.LESS_THAN, li.GREATER_THAN_OR_EQUALS, li.LESS_THAN_OR_EQUALS, li.STARTS_AFTER, li.ENDS_BEFORE, li.APPROXIMATELY], datetime: [li.EQUALS, li.NOT_EQUALS, li.GREATER_THAN, li.LESS_THAN, li.GREATER_THAN_OR_EQUALS, li.LESS_THAN_OR_EQUALS, li.STARTS_AFTER, li.ENDS_BEFORE, li.APPROXIMATELY], uri: [li.EQUALS, li.NOT, li.ABOVE, li.BELOW] });
var SearchClickEvent = class extends Event {
  constructor(resource, browserEvent) {
    super("click"), this.resource = resource, this.browserEvent = browserEvent;
  }
};
function FhirPathTable(props) {
  let medplum2 = b(), [schemaLoaded, setSchemaLoaded] = reactExports.useState(false), [outcome, setOutcome] = reactExports.useState(), { query, fields } = props, [response, setResponse] = reactExports.useState(), [selected, setSelected] = reactExports.useState({}), responseRef = reactExports.useRef();
  responseRef.current = response;
  let selectedRef = reactExports.useRef({});
  selectedRef.current = selected, reactExports.useEffect(() => {
    setOutcome(void 0), medplum2.graphql(query).then(setResponse).catch((err) => setOutcome(et(err)));
  }, [medplum2, query]);
  function handleSingleCheckboxClick(e, id) {
    e.stopPropagation();
    let checked = e.target.checked, newSelected = { ...selectedRef.current };
    checked ? newSelected[id] = true : delete newSelected[id], setSelected(newSelected);
  }
  function handleAllCheckboxClick(e) {
    var _a;
    e.stopPropagation();
    let checked = e.target.checked, newSelected = {}, resources = (_a = responseRef.current) == null ? void 0 : _a.data.ResourceList;
    checked && resources && resources.forEach((resource) => {
      resource.id && (newSelected[resource.id] = true);
    }), setSelected(newSelected);
  }
  function isAllSelected() {
    var _a;
    let resources = (_a = responseRef.current) == null ? void 0 : _a.data.ResourceList;
    if (!resources || resources.length === 0)
      return false;
    for (let resource of resources)
      if (resource.id && !selectedRef.current[resource.id])
        return false;
    return true;
  }
  function handleRowClick(e, resource) {
    isCheckboxCell(e.target) || (killEvent(e), e.button !== 1 && props.onClick && props.onClick(new SearchClickEvent(resource, e)), e.button === 1 && props.onAuxClick && props.onAuxClick(new SearchClickEvent(resource, e)));
  }
  if (reactExports.useEffect(() => {
    medplum2.requestSchema(props.resourceType).then(() => setSchemaLoaded(true)).catch(console.log);
  }, [medplum2, props.resourceType]), !schemaLoaded)
    return jsxRuntimeExports.jsx(Loader, {});
  let checkboxColumn = props.checkboxesEnabled;
  return jsxRuntimeExports.jsxs("div", { onContextMenu: (e) => killEvent(e), "data-testid": "search-control", children: [jsxRuntimeExports.jsxs(Table, { children: [jsxRuntimeExports.jsx(Table.Thead, { children: jsxRuntimeExports.jsxs(Table.Tr, { children: [checkboxColumn && jsxRuntimeExports.jsx(Table.Th, { children: jsxRuntimeExports.jsx("input", { type: "checkbox", value: "checked", "aria-label": "all-checkbox", "data-testid": "all-checkbox", checked: isAllSelected(), onChange: (e) => handleAllCheckboxClick(e) }) }), fields.map((field) => jsxRuntimeExports.jsx(Table.Th, { children: field.name }, field.name))] }) }), jsxRuntimeExports.jsx(Table.Tbody, { children: response == null ? void 0 : response.data.ResourceList.map((resource) => resource && jsxRuntimeExports.jsxs(Table.Tr, { "data-testid": "search-control-row", onClick: (e) => handleRowClick(e, resource), onAuxClick: (e) => handleRowClick(e, resource), children: [checkboxColumn && jsxRuntimeExports.jsx(Table.Td, { children: jsxRuntimeExports.jsx("input", { type: "checkbox", value: "checked", "data-testid": "row-checkbox", "aria-label": `Checkbox for ${resource.id}`, checked: !!selected[resource.id], onChange: (e) => handleSingleCheckboxClick(e, resource.id) }) }), fields.map((field) => jsxRuntimeExports.jsx(Table.Td, { children: jsxRuntimeExports.jsx(FhirPathDisplay, { propertyType: field.propertyType, path: field.fhirPath, resource }) }, field.name))] }, resource.id)) })] }), (response == null ? void 0 : response.data.ResourceList.length) === 0 && jsxRuntimeExports.jsx("div", { "data-testid": "empty-search", children: "No results" }), outcome && jsxRuntimeExports.jsx("div", { "data-testid": "search-error", children: jsxRuntimeExports.jsx("pre", { style: { textAlign: "left" }, children: JSON.stringify(outcome, void 0, 2) }) }), props.onBulk && jsxRuntimeExports.jsx(Button, { onClick: () => props.onBulk(Object.keys(selectedRef.current)), children: "Bulk..." })] });
}
reactExports.memo(FhirPathTable);
var QuestionnaireItemType = ((QuestionnaireItemType2) => (QuestionnaireItemType2.group = "group", QuestionnaireItemType2.display = "display", QuestionnaireItemType2.question = "question", QuestionnaireItemType2.boolean = "boolean", QuestionnaireItemType2.decimal = "decimal", QuestionnaireItemType2.integer = "integer", QuestionnaireItemType2.date = "date", QuestionnaireItemType2.dateTime = "dateTime", QuestionnaireItemType2.time = "time", QuestionnaireItemType2.string = "string", QuestionnaireItemType2.text = "text", QuestionnaireItemType2.url = "url", QuestionnaireItemType2.choice = "choice", QuestionnaireItemType2.openChoice = "open-choice", QuestionnaireItemType2.attachment = "attachment", QuestionnaireItemType2.reference = "reference", QuestionnaireItemType2.quantity = "quantity", QuestionnaireItemType2))(QuestionnaireItemType || {});
reactExports.createContext({});
/*! Bundled license information:

@tabler/icons-react/dist/esm/defaultAttributes.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/createReactComponent.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconAdjustmentsHorizontal.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconAlertCircle.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconArrowDown.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconArrowRight.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconArrowUp.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBleachOff.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBleach.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBoxMultiple.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBracketsContain.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBucketOff.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconBucket.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCalendar.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCheck.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCheckbox.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconChevronDown.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconChevronUp.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCircleMinus.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCirclePlus.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCloudUpload.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconColumns.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCopy.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconCurrencyDollar.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconDots.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconEdit.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconEqualNot.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconEqual.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconFileAlert.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconFilePlus.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconFilter.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconGenderFemale.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconGenderMale.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconLogout.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconMathGreater.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconMathLower.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconMessage.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconPlus.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconRefresh.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSearch.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSettings.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSortAscending.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSortDescending.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSquare.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconStethoscope.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconSwitchHorizontal.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconTableExport.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconTrash.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconUserSquare.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/icons/IconX.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)

@tabler/icons-react/dist/esm/tabler-icons-react.mjs:
  (**
   * @license @tabler/icons-react v3.17.0 - MIT
   *
   * This source code is licensed under the MIT license.
   * See the LICENSE file in the root directory of this source tree.
   *)
*/
const index = "";
const styles$3 = "";
const styles$2 = "";
const styles$1 = "";
const styles = "";
const App$1 = "";
const logoL = "/Logo-L.9fdf6555.svg";
const logoL2 = "/Actimi-L2.638a330c.png";
function DaikoLogo({ width, full }) {
  return full ? /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Image, { src: logoL, w: width }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/DaikoLogo.tsx",
    lineNumber: 12,
    columnNumber: 9
  }, this) : /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Image, { src: logoL2, w: width }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/DaikoLogo.tsx",
    lineNumber: 14,
    columnNumber: 9
  }, this);
}
function useReadyToFetch() {
  const { medplum: medplum2, profile } = P();
  return !!(medplum2 && profile);
}
function getName(person) {
  var _a, _b, _c, _d, _e;
  const firstName = ((_c = (_b = (_a = person.name) == null ? void 0 : _a[0]) == null ? void 0 : _b.given) == null ? void 0 : _c.join(" ")) || "";
  const lastName = ((_e = (_d = person.name) == null ? void 0 : _d[0]) == null ? void 0 : _e.family) || "";
  return (firstName + " " + lastName).trim();
}
function getPatientFromAppointment(appointment, patients) {
  var _a, _b, _c;
  const participant = (_a = appointment == null ? void 0 : appointment.participant) == null ? void 0 : _a.find(
    (p2) => {
      var _a2, _b2;
      return ((_b2 = (_a2 = p2.actor) == null ? void 0 : _a2.reference) == null ? void 0 : _b2.split("/")[0]) === "Patient";
    }
  );
  if (!participant)
    return;
  const patientId = ((_c = (_b = participant.actor) == null ? void 0 : _b.reference) == null ? void 0 : _c.split("/")[1]) || "";
  const patient = patients.find((p2) => p2.id === patientId);
  return patient;
}
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var defaultAttributes = {
  outline: {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  },
  filled: {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "currentColor",
    stroke: "none"
  }
};
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
const createReactComponent = (type, iconName, iconNamePascal, iconNode) => {
  const Component = reactExports.forwardRef(
    ({ color = "currentColor", size: size2 = 24, stroke = 2, title, className, children, ...rest }, ref) => reactExports.createElement(
      "svg",
      {
        ref,
        ...defaultAttributes[type],
        width: size2,
        height: size2,
        className: [`tabler-icon`, `tabler-icon-${iconName}`, className].join(" "),
        ...type === "filled" ? {
          fill: color
        } : {
          strokeWidth: stroke,
          stroke: color
        },
        ...rest
      },
      [
        title && reactExports.createElement("title", { key: "svg-title" }, title),
        ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
        ...Array.isArray(children) ? children : [children]
      ]
    )
  );
  Component.displayName = `${iconNamePascal}`;
  return Component;
};
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconArrowDown = createReactComponent("outline", "arrow-down", "IconArrowDown", [["path", { "d": "M12 5l0 14", "key": "svg-0" }], ["path", { "d": "M18 13l-6 6", "key": "svg-1" }], ["path", { "d": "M6 13l6 6", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconArrowLeft = createReactComponent("outline", "arrow-left", "IconArrowLeft", [["path", { "d": "M5 12l14 0", "key": "svg-0" }], ["path", { "d": "M5 12l6 6", "key": "svg-1" }], ["path", { "d": "M5 12l6 -6", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconArrowRight = createReactComponent("outline", "arrow-right", "IconArrowRight", [["path", { "d": "M5 12l14 0", "key": "svg-0" }], ["path", { "d": "M13 18l6 -6", "key": "svg-1" }], ["path", { "d": "M13 6l6 6", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconArrowUp = createReactComponent("outline", "arrow-up", "IconArrowUp", [["path", { "d": "M12 5l0 14", "key": "svg-0" }], ["path", { "d": "M18 11l-6 -6", "key": "svg-1" }], ["path", { "d": "M6 11l6 -6", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconCheck = createReactComponent("outline", "check", "IconCheck", [["path", { "d": "M5 12l5 5l10 -10", "key": "svg-0" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconChevronDown = createReactComponent("outline", "chevron-down", "IconChevronDown", [["path", { "d": "M6 9l6 6l6 -6", "key": "svg-0" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconChevronUp = createReactComponent("outline", "chevron-up", "IconChevronUp", [["path", { "d": "M6 15l6 -6l6 6", "key": "svg-0" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconDotsVertical = createReactComponent("outline", "dots-vertical", "IconDotsVertical", [["path", { "d": "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", "key": "svg-0" }], ["path", { "d": "M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", "key": "svg-1" }], ["path", { "d": "M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconHome = createReactComponent("outline", "home", "IconHome", [["path", { "d": "M5 12l-2 0l9 -9l9 9l-2 0", "key": "svg-0" }], ["path", { "d": "M5 12v7a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-7", "key": "svg-1" }], ["path", { "d": "M9 21v-6a2 2 0 0 1 2 -2h2a2 2 0 0 1 2 2v6", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconLogout = createReactComponent("outline", "logout", "IconLogout", [["path", { "d": "M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2", "key": "svg-0" }], ["path", { "d": "M9 12h12l-3 -3", "key": "svg-1" }], ["path", { "d": "M18 15l3 -3", "key": "svg-2" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconSearch = createReactComponent("outline", "search", "IconSearch", [["path", { "d": "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0", "key": "svg-0" }], ["path", { "d": "M21 21l-6 -6", "key": "svg-1" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconSettings = createReactComponent("outline", "settings", "IconSettings", [["path", { "d": "M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z", "key": "svg-0" }], ["path", { "d": "M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", "key": "svg-1" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconSwitchHorizontal = createReactComponent("outline", "switch-horizontal", "IconSwitchHorizontal", [["path", { "d": "M16 3l4 4l-4 4", "key": "svg-0" }], ["path", { "d": "M10 7l10 0", "key": "svg-1" }], ["path", { "d": "M8 13l-4 4l4 4", "key": "svg-2" }], ["path", { "d": "M4 17l9 0", "key": "svg-3" }]]);
/**
 * @license @tabler/icons-react v3.29.0 - MIT
 *
 * This source code is licensed under the MIT license.
 * See the LICENSE file in the root directory of this source tree.
 */
var IconExclamationCircleFilled = createReactComponent("filled", "exclamation-circle-filled", "IconExclamationCircleFilled", [["path", { "d": "M17 3.34a10 10 0 1 1 -15 8.66l.005 -.324a10 10 0 0 1 14.995 -8.336m-5 11.66a1 1 0 0 0 -1 1v.01a1 1 0 0 0 2 0v-.01a1 1 0 0 0 -1 -1m0 -7a1 1 0 0 0 -1 1v4a1 1 0 0 0 2 0v-4a1 1 0 0 0 -1 -1", "key": "svg-0" }]]);
const NUM_ITEMS_ON_PAGE = 10;
function getIdFromReference(reference) {
  return reference.split("/")[1];
}
function getPersonItems(persons) {
  return persons.map((p2) => ({ label: getName(p2), value: p2.id }));
}
function checkContainsSearchTerm(value, searchTerm) {
  return value.toLowerCase().includes(searchTerm.toLowerCase());
}
function getPaginationSlice(arr, page) {
  return arr.slice((page - 1) * NUM_ITEMS_ON_PAGE, page * NUM_ITEMS_ON_PAGE);
}
const ModalsContext = reactExports.createContext(null);
ModalsContext.displayName = "@mantine/modals/ModalsContext";
function useModals() {
  const ctx = reactExports.useContext(ModalsContext);
  if (!ctx) {
    throw new Error(
      "[@mantine/modals] useModals hook was called outside of context, wrap your app with ModalsProvider component"
    );
  }
  return ctx;
}
function ConfirmModal({
  id,
  cancelProps,
  confirmProps,
  labels = { cancel: "", confirm: "" },
  closeOnConfirm = true,
  closeOnCancel = true,
  groupProps,
  onCancel,
  onConfirm,
  children
}) {
  const { cancel: cancelLabel, confirm: confirmLabel } = labels;
  const ctx = useModals();
  const handleCancel = (event) => {
    typeof (cancelProps == null ? void 0 : cancelProps.onClick) === "function" && (cancelProps == null ? void 0 : cancelProps.onClick(event));
    typeof onCancel === "function" && onCancel();
    closeOnCancel && ctx.closeModal(id);
  };
  const handleConfirm = (event) => {
    typeof (confirmProps == null ? void 0 : confirmProps.onClick) === "function" && (confirmProps == null ? void 0 : confirmProps.onClick(event));
    typeof onConfirm === "function" && onConfirm();
    closeOnConfirm && ctx.closeModal(id);
  };
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [
    children && /* @__PURE__ */ jsxRuntimeExports.jsx(Box, { mb: "md", children }),
    /* @__PURE__ */ jsxRuntimeExports.jsxs(Group, { mt: children ? 0 : "md", justify: "flex-end", ...groupProps, children: [
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { variant: "default", ...cancelProps, onClick: handleCancel, children: (cancelProps == null ? void 0 : cancelProps.children) || cancelLabel }),
      /* @__PURE__ */ jsxRuntimeExports.jsx(Button, { ...confirmProps, onClick: handleConfirm, children: (confirmProps == null ? void 0 : confirmProps.children) || confirmLabel })
    ] })
  ] });
}
const [useModalsEvents, createEvent] = createUseExternalEvents("mantine-modals");
const openModal = (payload) => {
  const id = payload.modalId || randomId();
  createEvent("openModal")({ ...payload, modalId: id });
  return id;
};
const openConfirmModal$1 = (payload) => {
  const id = payload.modalId || randomId();
  createEvent("openConfirmModal")({ ...payload, modalId: id });
  return id;
};
const openContextModal = (payload) => {
  const id = payload.modalId || randomId();
  createEvent("openContextModal")({ ...payload, modalId: id });
  return id;
};
const closeModal = createEvent("closeModal");
const closeAllModals = createEvent("closeAllModals");
const updateModal = (payload) => createEvent("updateModal")(payload);
const updateContextModal = (payload) => createEvent("updateContextModal")(payload);
const modals = {
  open: openModal,
  close: closeModal,
  closeAll: closeAllModals,
  openConfirmModal: openConfirmModal$1,
  openContextModal,
  updateModal,
  updateContextModal
};
function handleCloseModal(modal, canceled) {
  var _a, _b, _c, _d;
  if (canceled && modal.type === "confirm") {
    (_b = (_a = modal.props).onCancel) == null ? void 0 : _b.call(_a);
  }
  (_d = (_c = modal.props).onClose) == null ? void 0 : _d.call(_c);
}
function modalsReducer(state, action) {
  var _a;
  switch (action.type) {
    case "OPEN": {
      return {
        current: action.modal,
        modals: [...state.modals, action.modal]
      };
    }
    case "CLOSE": {
      const modal = state.modals.find((m2) => m2.id === action.modalId);
      if (!modal) {
        return state;
      }
      handleCloseModal(modal, action.canceled);
      const remainingModals = state.modals.filter((m2) => m2.id !== action.modalId);
      return {
        current: remainingModals[remainingModals.length - 1] || state.current,
        modals: remainingModals
      };
    }
    case "CLOSE_ALL": {
      if (!state.modals.length) {
        return state;
      }
      state.modals.concat().reverse().forEach((modal) => {
        handleCloseModal(modal, action.canceled);
      });
      return {
        current: state.current,
        modals: []
      };
    }
    case "UPDATE": {
      const { modalId, newProps } = action;
      const updatedModals = state.modals.map((modal) => {
        if (modal.id !== modalId) {
          return modal;
        }
        if (modal.type === "content" || modal.type === "confirm") {
          return {
            ...modal,
            props: {
              ...modal.props,
              ...newProps
            }
          };
        }
        if (modal.type === "context") {
          return {
            ...modal,
            props: {
              ...modal.props,
              ...newProps,
              innerProps: {
                ...modal.props.innerProps,
                ...newProps.innerProps
              }
            }
          };
        }
        return modal;
      });
      const currentModal = ((_a = state.current) == null ? void 0 : _a.id) === modalId ? updatedModals.find((modal) => modal.id === modalId) || state.current : state.current;
      return {
        ...state,
        modals: updatedModals,
        current: currentModal
      };
    }
    default: {
      return state;
    }
  }
}
function separateConfirmModalProps(props) {
  if (!props) {
    return { confirmProps: {}, modalProps: {} };
  }
  const {
    id,
    children,
    onCancel,
    onConfirm,
    closeOnConfirm,
    closeOnCancel,
    cancelProps,
    confirmProps,
    groupProps,
    labels,
    ...others
  } = props;
  return {
    confirmProps: {
      id,
      children,
      onCancel,
      onConfirm,
      closeOnConfirm,
      closeOnCancel,
      cancelProps,
      confirmProps,
      groupProps,
      labels
    },
    modalProps: {
      id,
      ...others
    }
  };
}
function ModalsProvider({ children, modalProps, labels, modals: modals2 }) {
  const [state, dispatch2] = reactExports.useReducer(modalsReducer, { modals: [], current: null });
  const stateRef = reactExports.useRef(state);
  stateRef.current = state;
  const closeAll2 = reactExports.useCallback(
    (canceled) => {
      dispatch2({ type: "CLOSE_ALL", canceled });
    },
    [stateRef, dispatch2]
  );
  const openModal2 = reactExports.useCallback(
    ({ modalId, ...props }) => {
      const id = modalId || randomId();
      dispatch2({
        type: "OPEN",
        modal: {
          id,
          type: "content",
          props
        }
      });
      return id;
    },
    [dispatch2]
  );
  const openConfirmModal2 = reactExports.useCallback(
    ({ modalId, ...props }) => {
      const id = modalId || randomId();
      dispatch2({
        type: "OPEN",
        modal: {
          id,
          type: "confirm",
          props
        }
      });
      return id;
    },
    [dispatch2]
  );
  const openContextModal2 = reactExports.useCallback(
    (modal, { modalId, ...props }) => {
      const id = modalId || randomId();
      dispatch2({
        type: "OPEN",
        modal: {
          id,
          type: "context",
          props,
          ctx: modal
        }
      });
      return id;
    },
    [dispatch2]
  );
  const closeModal2 = reactExports.useCallback(
    (id, canceled) => {
      dispatch2({ type: "CLOSE", modalId: id, canceled });
    },
    [stateRef, dispatch2]
  );
  const updateModal2 = reactExports.useCallback(
    ({ modalId, ...newProps }) => {
      dispatch2({
        type: "UPDATE",
        modalId,
        newProps
      });
    },
    [dispatch2]
  );
  const updateContextModal2 = reactExports.useCallback(
    ({ modalId, ...newProps }) => {
      dispatch2({ type: "UPDATE", modalId, newProps });
    },
    [dispatch2]
  );
  useModalsEvents({
    openModal: openModal2,
    openConfirmModal: openConfirmModal2,
    openContextModal: ({ modal, ...payload }) => openContextModal2(modal, payload),
    closeModal: closeModal2,
    closeContextModal: closeModal2,
    closeAllModals: closeAll2,
    updateModal: updateModal2,
    updateContextModal: updateContextModal2
  });
  const ctx = {
    modalProps: modalProps || {},
    modals: state.modals,
    openModal: openModal2,
    openConfirmModal: openConfirmModal2,
    openContextModal: openContextModal2,
    closeModal: closeModal2,
    closeContextModal: closeModal2,
    closeAll: closeAll2,
    updateModal: updateModal2,
    updateContextModal: updateContextModal2
  };
  const getCurrentModal = () => {
    const currentModal = stateRef.current.current;
    switch (currentModal == null ? void 0 : currentModal.type) {
      case "context": {
        const { innerProps, ...rest } = currentModal.props;
        const ContextModal = modals2[currentModal.ctx];
        return {
          modalProps: rest,
          content: /* @__PURE__ */ jsxRuntimeExports.jsx(ContextModal, { innerProps, context: ctx, id: currentModal.id })
        };
      }
      case "confirm": {
        const { modalProps: separatedModalProps, confirmProps: separatedConfirmProps } = separateConfirmModalProps(currentModal.props);
        return {
          modalProps: separatedModalProps,
          content: /* @__PURE__ */ jsxRuntimeExports.jsx(
            ConfirmModal,
            {
              ...separatedConfirmProps,
              id: currentModal.id,
              labels: currentModal.props.labels || labels
            }
          )
        };
      }
      case "content": {
        const { children: currentModalChildren, ...rest } = currentModal.props;
        return {
          modalProps: rest,
          content: currentModalChildren
        };
      }
      default: {
        return {
          modalProps: {},
          content: null
        };
      }
    }
  };
  const { modalProps: currentModalProps, content } = getCurrentModal();
  return /* @__PURE__ */ jsxRuntimeExports.jsxs(ModalsContext.Provider, { value: ctx, children: [
    /* @__PURE__ */ jsxRuntimeExports.jsx(
      Modal,
      {
        zIndex: getDefaultZIndex("modal") + 1,
        ...modalProps,
        ...currentModalProps,
        opened: state.modals.length > 0,
        onClose: () => {
          var _a;
          return closeModal2((_a = state.current) == null ? void 0 : _a.id);
        },
        children: content
      }
    ),
    children
  ] });
}
function openConfirmModal({
  modalText,
  confirmButtonText,
  cancelButtonText,
  onConfirm,
  onCancel,
  modalTitle,
  withCloseButton = false
}) {
  modals.openConfirmModal({
    title: modalTitle,
    children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { size: "sm", children: modalText }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/utils/openConfirmModal.tsx",
      lineNumber: 26,
      columnNumber: 19
    }, this),
    withCloseButton,
    labels: { confirm: confirmButtonText, cancel: cancelButtonText },
    onConfirm,
    onCancel
  });
}
function validateFormName(name) {
  if (!/^[0-9a-zA-Z-]+$/.test(name)) {
    throw new Error(
      `[@mantine/use-form] Form name "${name}" is invalid, it should contain only letters, numbers and dashes`
    );
  }
}
const useIsomorphicEffect = typeof window !== "undefined" ? reactExports.useLayoutEffect : reactExports.useEffect;
function useFormEvent(eventKey, handler) {
  useIsomorphicEffect(() => {
    if (eventKey) {
      window.addEventListener(eventKey, handler);
      return () => window.removeEventListener(eventKey, handler);
    }
    return void 0;
  }, [eventKey]);
}
function useFormActions(name, form) {
  if (name) {
    validateFormName(name);
  }
  useFormEvent(
    `mantine-form:${name}:set-field-value`,
    (event) => form.setFieldValue(event.detail.path, event.detail.value)
  );
  useFormEvent(
    `mantine-form:${name}:set-values`,
    (event) => form.setValues(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:set-initial-values`,
    (event) => form.setInitialValues(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:set-errors`,
    (event) => form.setErrors(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:set-field-error`,
    (event) => form.setFieldError(event.detail.path, event.detail.error)
  );
  useFormEvent(
    `mantine-form:${name}:clear-field-error`,
    (event) => form.clearFieldError(event.detail)
  );
  useFormEvent(`mantine-form:${name}:clear-errors`, form.clearErrors);
  useFormEvent(`mantine-form:${name}:reset`, form.reset);
  useFormEvent(`mantine-form:${name}:validate`, form.validate);
  useFormEvent(
    `mantine-form:${name}:validate-field`,
    (event) => form.validateField(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:reorder-list-item`,
    (event) => form.reorderListItem(event.detail.path, event.detail.payload)
  );
  useFormEvent(
    `mantine-form:${name}:remove-list-item`,
    (event) => form.removeListItem(event.detail.path, event.detail.index)
  );
  useFormEvent(
    `mantine-form:${name}:insert-list-item`,
    (event) => form.insertListItem(event.detail.path, event.detail.item, event.detail.index)
  );
  useFormEvent(
    `mantine-form:${name}:set-dirty`,
    (event) => form.setDirty(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:set-touched`,
    (event) => form.setTouched(event.detail)
  );
  useFormEvent(
    `mantine-form:${name}:reset-dirty`,
    (event) => form.resetDirty(event.detail)
  );
  useFormEvent(`mantine-form:${name}:reset-touched`, form.resetTouched);
}
function getInputOnChange(setValue) {
  return (val) => {
    if (!val) {
      setValue(val);
    } else if (typeof val === "function") {
      setValue(val);
    } else if (typeof val === "object" && "nativeEvent" in val) {
      const { currentTarget } = val;
      if (currentTarget instanceof HTMLInputElement) {
        if (currentTarget.type === "checkbox") {
          setValue(currentTarget.checked);
        } else {
          setValue(currentTarget.value);
        }
      } else if (currentTarget instanceof HTMLTextAreaElement || currentTarget instanceof HTMLSelectElement) {
        setValue(currentTarget.value);
      }
    } else {
      setValue(val);
    }
  };
}
function filterErrors(errors2) {
  if (errors2 === null || typeof errors2 !== "object") {
    return {};
  }
  return Object.keys(errors2).reduce((acc, key) => {
    const errorValue = errors2[key];
    if (errorValue !== void 0 && errorValue !== null && errorValue !== false) {
      acc[key] = errorValue;
    }
    return acc;
  }, {});
}
function useFormErrors(initialErrors) {
  const [errorsState, setErrorsState] = reactExports.useState(filterErrors(initialErrors));
  const errorsRef = reactExports.useRef(errorsState);
  const setErrors = reactExports.useCallback((errors2) => {
    setErrorsState((current) => {
      const newErrors = filterErrors(typeof errors2 === "function" ? errors2(current) : errors2);
      errorsRef.current = newErrors;
      return newErrors;
    });
  }, []);
  const clearErrors = reactExports.useCallback(() => setErrors({}), []);
  const clearFieldError = reactExports.useCallback(
    (path) => {
      if (errorsRef.current[path] === void 0) {
        return;
      }
      setErrors((current) => {
        const errors2 = { ...current };
        delete errors2[path];
        return errors2;
      });
    },
    [errorsState]
  );
  const setFieldError = reactExports.useCallback(
    (path, error2) => {
      if (error2 == null || error2 === false) {
        clearFieldError(path);
      } else if (errorsRef.current[path] !== error2) {
        setErrors((current) => ({ ...current, [path]: error2 }));
      }
    },
    [errorsState]
  );
  return {
    errorsState,
    setErrors,
    clearErrors,
    setFieldError,
    clearFieldError
  };
}
function clearListState(field, state) {
  if (state === null || typeof state !== "object") {
    return {};
  }
  const clone = { ...state };
  Object.keys(state).forEach((errorKey) => {
    if (errorKey.includes(`${String(field)}.`)) {
      delete clone[errorKey];
    }
  });
  return clone;
}
function getIndexFromKeyAfterPath(key, path) {
  const split = key.substring(path.length + 1).split(".")[0];
  return parseInt(split, 10);
}
function changeErrorIndices(path, index2, errors2, change) {
  if (index2 === void 0) {
    return errors2;
  }
  const pathString = `${String(path)}`;
  let clearedErrors = errors2;
  if (change === -1) {
    clearedErrors = clearListState(`${pathString}.${index2}`, clearedErrors);
  }
  const cloned = { ...clearedErrors };
  const changedKeys = /* @__PURE__ */ new Set();
  Object.entries(clearedErrors).filter(([key]) => {
    if (!key.startsWith(`${pathString}.`)) {
      return false;
    }
    const currIndex = getIndexFromKeyAfterPath(key, pathString);
    if (Number.isNaN(currIndex)) {
      return false;
    }
    return currIndex >= index2;
  }).forEach(([key, value]) => {
    const currIndex = getIndexFromKeyAfterPath(key, pathString);
    const newKey = key.replace(
      `${pathString}.${currIndex}`,
      `${pathString}.${currIndex + change}`
    );
    cloned[newKey] = value;
    changedKeys.add(newKey);
    if (!changedKeys.has(key)) {
      delete cloned[key];
    }
  });
  return cloned;
}
function reorderErrors(path, { from: from2, to }, errors2) {
  const oldKeyStart = `${path}.${from2}`;
  const newKeyStart = `${path}.${to}`;
  const clone = { ...errors2 };
  Object.keys(errors2).every((key) => {
    let oldKey;
    let newKey;
    if (key.startsWith(oldKeyStart)) {
      oldKey = key;
      newKey = key.replace(oldKeyStart, newKeyStart);
    }
    if (key.startsWith(newKeyStart)) {
      oldKey = key.replace(newKeyStart, oldKeyStart);
      newKey = key;
    }
    if (oldKey && newKey) {
      const value1 = clone[oldKey];
      const value2 = clone[newKey];
      value2 === void 0 ? delete clone[oldKey] : clone[oldKey] = value2;
      value1 === void 0 ? delete clone[newKey] : clone[newKey] = value1;
      return false;
    }
    return true;
  });
  return clone;
}
function set(obj, key, val) {
  if (typeof val.value === "object")
    val.value = klona(val.value);
  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === "__proto__") {
    Object.defineProperty(obj, key, val);
  } else
    obj[key] = val.value;
}
function klona(x) {
  if (typeof x !== "object")
    return x;
  var i = 0, k2, list, tmp, str = Object.prototype.toString.call(x);
  if (str === "[object Object]") {
    tmp = Object.create(x.__proto__ || null);
  } else if (str === "[object Array]") {
    tmp = Array(x.length);
  } else if (str === "[object Set]") {
    tmp = /* @__PURE__ */ new Set();
    x.forEach(function(val) {
      tmp.add(klona(val));
    });
  } else if (str === "[object Map]") {
    tmp = /* @__PURE__ */ new Map();
    x.forEach(function(val, key) {
      tmp.set(klona(key), klona(val));
    });
  } else if (str === "[object Date]") {
    tmp = /* @__PURE__ */ new Date(+x);
  } else if (str === "[object RegExp]") {
    tmp = new RegExp(x.source, x.flags);
  } else if (str === "[object DataView]") {
    tmp = new x.constructor(klona(x.buffer));
  } else if (str === "[object ArrayBuffer]") {
    tmp = x.slice(0);
  } else if (str.slice(-6) === "Array]") {
    tmp = new x.constructor(x);
  }
  if (tmp) {
    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {
      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));
    }
    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {
      if (Object.hasOwnProperty.call(tmp, k2 = list[i]) && tmp[k2] === x[k2])
        continue;
      set(tmp, k2, Object.getOwnPropertyDescriptor(x, k2));
    }
  }
  return tmp || x;
}
function getSplittedPath(path) {
  if (typeof path !== "string") {
    return [];
  }
  return path.split(".");
}
function getPath(path, values2) {
  const splittedPath = getSplittedPath(path);
  if (splittedPath.length === 0 || typeof values2 !== "object" || values2 === null) {
    return void 0;
  }
  let value = values2[splittedPath[0]];
  for (let i = 1; i < splittedPath.length; i += 1) {
    if (value == null) {
      break;
    }
    value = value[splittedPath[i]];
  }
  return value;
}
function setPath(path, value, values2) {
  const splittedPath = getSplittedPath(path);
  if (splittedPath.length === 0) {
    return values2;
  }
  const cloned = klona(values2);
  if (splittedPath.length === 1) {
    cloned[splittedPath[0]] = value;
    return cloned;
  }
  let val = cloned[splittedPath[0]];
  for (let i = 1; i < splittedPath.length - 1; i += 1) {
    if (val === void 0) {
      return cloned;
    }
    val = val[splittedPath[i]];
  }
  val[splittedPath[splittedPath.length - 1]] = value;
  return cloned;
}
function reorderPath(path, { from: from2, to }, values2) {
  const currentValue = getPath(path, values2);
  if (!Array.isArray(currentValue)) {
    return values2;
  }
  const cloned = [...currentValue];
  const item = currentValue[from2];
  cloned.splice(from2, 1);
  cloned.splice(to, 0, item);
  return setPath(path, cloned, values2);
}
function insertPath(path, value, index2, values2) {
  const currentValue = getPath(path, values2);
  if (!Array.isArray(currentValue)) {
    return values2;
  }
  const cloned = [...currentValue];
  cloned.splice(typeof index2 === "number" ? index2 : cloned.length, 0, value);
  return setPath(path, cloned, values2);
}
function removePath(path, index2, values2) {
  const currentValue = getPath(path, values2);
  if (!Array.isArray(currentValue)) {
    return values2;
  }
  return setPath(
    path,
    currentValue.filter((_, itemIndex) => itemIndex !== index2),
    values2
  );
}
function replacePath(path, item, index2, values2) {
  const currentValue = getPath(path, values2);
  if (!Array.isArray(currentValue)) {
    return values2;
  }
  if (currentValue.length <= index2) {
    return values2;
  }
  const cloned = [...currentValue];
  cloned[index2] = item;
  return setPath(path, cloned, values2);
}
function useFormList({
  $values,
  $errors,
  $status
}) {
  const reorderListItem = reactExports.useCallback((path, payload) => {
    $status.clearFieldDirty(path);
    $errors.setErrors((errs) => reorderErrors(path, payload, errs));
    $values.setValues({
      values: reorderPath(path, payload, $values.refValues.current),
      updateState: true
    });
  }, []);
  const removeListItem = reactExports.useCallback((path, index2) => {
    $status.clearFieldDirty(path);
    $errors.setErrors((errs) => changeErrorIndices(path, index2, errs, -1));
    $values.setValues({
      values: removePath(path, index2, $values.refValues.current),
      updateState: true
    });
  }, []);
  const insertListItem = reactExports.useCallback((path, item, index2) => {
    $status.clearFieldDirty(path);
    $errors.setErrors((errs) => changeErrorIndices(path, index2, errs, 1));
    $values.setValues({
      values: insertPath(path, item, index2, $values.refValues.current),
      updateState: true
    });
  }, []);
  const replaceListItem = reactExports.useCallback((path, index2, item) => {
    $status.clearFieldDirty(path);
    $values.setValues({
      values: replacePath(path, item, index2, $values.refValues.current),
      updateState: true
    });
  }, []);
  return { reorderListItem, removeListItem, insertListItem, replaceListItem };
}
var fastDeepEqual = function equal(a, b2) {
  if (a === b2)
    return true;
  if (a && b2 && typeof a == "object" && typeof b2 == "object") {
    if (a.constructor !== b2.constructor)
      return false;
    var length2, i, keys2;
    if (Array.isArray(a)) {
      length2 = a.length;
      if (length2 != b2.length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!equal(a[i], b2[i]))
          return false;
      return true;
    }
    if (a.constructor === RegExp)
      return a.source === b2.source && a.flags === b2.flags;
    if (a.valueOf !== Object.prototype.valueOf)
      return a.valueOf() === b2.valueOf();
    if (a.toString !== Object.prototype.toString)
      return a.toString() === b2.toString();
    keys2 = Object.keys(a);
    length2 = keys2.length;
    if (length2 !== Object.keys(b2).length)
      return false;
    for (i = length2; i-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(b2, keys2[i]))
        return false;
    for (i = length2; i-- !== 0; ) {
      var key = keys2[i];
      if (!equal(a[key], b2[key]))
        return false;
    }
    return true;
  }
  return a !== a && b2 !== b2;
};
const isEqual = /* @__PURE__ */ getDefaultExportFromCjs(fastDeepEqual);
function getStatus(status, path) {
  const paths = Object.keys(status);
  if (typeof path === "string") {
    const nestedPaths = paths.filter((statusPath) => statusPath.startsWith(`${path}.`));
    return status[path] || nestedPaths.some((statusPath) => status[statusPath]) || false;
  }
  return paths.some((statusPath) => status[statusPath]);
}
function useFormStatus({
  initialDirty,
  initialTouched,
  mode,
  $values
}) {
  const [touchedState, setTouchedState] = reactExports.useState(initialTouched);
  const [dirtyState, setDirtyState] = reactExports.useState(initialDirty);
  const touchedRef = reactExports.useRef(initialTouched);
  const dirtyRef = reactExports.useRef(initialDirty);
  const setTouched = reactExports.useCallback((values2) => {
    const resolvedValues = typeof values2 === "function" ? values2(touchedRef.current) : values2;
    touchedRef.current = resolvedValues;
    if (mode === "controlled") {
      setTouchedState(resolvedValues);
    }
  }, []);
  const setDirty = reactExports.useCallback(
    (values2, forceUpdate = false) => {
      const resolvedValues = typeof values2 === "function" ? values2(dirtyRef.current) : values2;
      dirtyRef.current = resolvedValues;
      if (mode === "controlled" || forceUpdate) {
        setDirtyState(resolvedValues);
      }
    },
    []
  );
  const resetTouched = reactExports.useCallback(() => setTouched({}), []);
  const resetDirty = reactExports.useCallback((values2) => {
    const newSnapshot = values2 ? { ...$values.refValues.current, ...values2 } : $values.refValues.current;
    $values.setValuesSnapshot(newSnapshot);
    setDirty({});
  }, []);
  const setFieldTouched = reactExports.useCallback((path, touched) => {
    setTouched((currentTouched) => {
      if (getStatus(currentTouched, path) === touched) {
        return currentTouched;
      }
      return { ...currentTouched, [path]: touched };
    });
  }, []);
  const setFieldDirty = reactExports.useCallback((path, dirty, forceUpdate) => {
    setDirty((currentDirty) => {
      if (getStatus(currentDirty, path) === dirty) {
        return currentDirty;
      }
      return { ...currentDirty, [path]: dirty };
    }, forceUpdate);
  }, []);
  const setCalculatedFieldDirty = reactExports.useCallback((path, value) => {
    const currentDirty = getStatus(dirtyRef.current, path);
    const dirty = !isEqual(getPath(path, $values.getValuesSnapshot()), value);
    const clearedState = clearListState(path, dirtyRef.current);
    clearedState[path] = dirty;
    setDirty(clearedState, currentDirty !== dirty);
  }, []);
  const isTouched = reactExports.useCallback(
    (path) => getStatus(touchedRef.current, path),
    []
  );
  const clearFieldDirty = reactExports.useCallback(
    (path) => setDirty((current) => {
      if (typeof path !== "string") {
        return current;
      }
      const result = clearListState(path, current);
      delete result[path];
      if (isEqual(result, current)) {
        return current;
      }
      return result;
    }),
    []
  );
  const isDirty = reactExports.useCallback((path) => {
    if (path) {
      const overriddenValue = getPath(path, dirtyRef.current);
      if (typeof overriddenValue === "boolean") {
        return overriddenValue;
      }
      const sliceOfValues = getPath(path, $values.refValues.current);
      const sliceOfInitialValues = getPath(path, $values.valuesSnapshot.current);
      return !isEqual(sliceOfValues, sliceOfInitialValues);
    }
    const isOverridden = Object.keys(dirtyRef.current).length > 0;
    if (isOverridden) {
      return getStatus(dirtyRef.current);
    }
    return !isEqual($values.refValues.current, $values.valuesSnapshot.current);
  }, []);
  const getDirty = reactExports.useCallback(() => dirtyRef.current, []);
  const getTouched = reactExports.useCallback(() => touchedRef.current, []);
  return {
    touchedState,
    dirtyState,
    touchedRef,
    dirtyRef,
    setTouched,
    setDirty,
    resetDirty,
    resetTouched,
    isTouched,
    setFieldTouched,
    setFieldDirty,
    setTouchedState,
    setDirtyState,
    clearFieldDirty,
    isDirty,
    getDirty,
    getTouched,
    setCalculatedFieldDirty
  };
}
function useFormValues({
  initialValues,
  onValuesChange,
  mode
}) {
  const initialized = reactExports.useRef(false);
  const [stateValues, setStateValues] = reactExports.useState(initialValues || {});
  const refValues = reactExports.useRef(stateValues);
  const valuesSnapshot = reactExports.useRef(stateValues);
  const setValues = reactExports.useCallback(
    ({
      values: values2,
      subscribers,
      updateState = true,
      mergeWithPreviousValues = true
    }) => {
      const previousValues = refValues.current;
      const resolvedValues = values2 instanceof Function ? values2(refValues.current) : values2;
      const updatedValues = mergeWithPreviousValues ? { ...previousValues, ...resolvedValues } : resolvedValues;
      refValues.current = updatedValues;
      updateState && setStateValues(updatedValues);
      onValuesChange == null ? void 0 : onValuesChange(updatedValues, previousValues);
      subscribers == null ? void 0 : subscribers.filter(Boolean).forEach((subscriber) => subscriber({ updatedValues, previousValues }));
    },
    [onValuesChange]
  );
  const setFieldValue = reactExports.useCallback(
    (payload) => {
      var _a;
      const currentValue = getPath(payload.path, refValues.current);
      const updatedValue = payload.value instanceof Function ? payload.value(currentValue) : payload.value;
      if (currentValue !== updatedValue) {
        const previousValues = refValues.current;
        const updatedValues = setPath(payload.path, updatedValue, refValues.current);
        setValues({ values: updatedValues, updateState: payload.updateState });
        (_a = payload.subscribers) == null ? void 0 : _a.filter(Boolean).forEach(
          (subscriber) => subscriber({ path: payload.path, updatedValues, previousValues })
        );
      }
    },
    [setValues]
  );
  const setValuesSnapshot = reactExports.useCallback((payload) => {
    valuesSnapshot.current = payload;
  }, []);
  const initialize2 = reactExports.useCallback(
    (values2, onInitialize) => {
      if (!initialized.current) {
        initialized.current = true;
        setValues({ values: values2, updateState: mode === "controlled" });
        setValuesSnapshot(values2);
        onInitialize();
      }
    },
    [setValues]
  );
  const resetValues = reactExports.useCallback(() => {
    setValues({
      values: valuesSnapshot.current,
      updateState: true,
      mergeWithPreviousValues: false
    });
  }, [setValues]);
  const getValues = reactExports.useCallback(() => refValues.current, []);
  const getValuesSnapshot = reactExports.useCallback(() => valuesSnapshot.current, []);
  return {
    initialized,
    stateValues,
    refValues,
    valuesSnapshot,
    setValues,
    setFieldValue,
    resetValues,
    setValuesSnapshot,
    initialize: initialize2,
    getValues,
    getValuesSnapshot
  };
}
function useFormWatch({
  $status
}) {
  const subscribers = reactExports.useRef(
    {}
  );
  const watch = reactExports.useCallback((path, callback) => {
    reactExports.useEffect(() => {
      subscribers.current[path] = subscribers.current[path] || [];
      subscribers.current[path].push(callback);
      return () => {
        subscribers.current[path] = subscribers.current[path].filter((cb) => cb !== callback);
      };
    }, [callback]);
  }, []);
  const getFieldSubscribers = reactExports.useCallback((path) => {
    if (!subscribers.current[path]) {
      return [];
    }
    return subscribers.current[path].map(
      (callback) => (input) => callback({
        previousValue: getPath(path, input.previousValues),
        value: getPath(path, input.updatedValues),
        touched: $status.isTouched(path),
        dirty: $status.isDirty(path)
      })
    );
  }, []);
  return {
    subscribers,
    watch,
    getFieldSubscribers
  };
}
function getDataPath(formName, fieldPath) {
  return formName ? `${formName}-${fieldPath.toString()}` : fieldPath.toString();
}
function getValidationResults(errors2) {
  const filteredErrors = filterErrors(errors2);
  return { hasErrors: Object.keys(filteredErrors).length > 0, errors: filteredErrors };
}
function validateRulesRecord(rules, values2, path = "", errors2 = {}) {
  if (typeof rules !== "object" || rules === null) {
    return errors2;
  }
  return Object.keys(rules).reduce((acc, ruleKey) => {
    const rule = rules[ruleKey];
    const rulePath = `${path === "" ? "" : `${path}.`}${ruleKey}`;
    const value = getPath(rulePath, values2);
    let arrayValidation = false;
    if (typeof rule === "function") {
      acc[rulePath] = rule(value, values2, rulePath);
    }
    if (typeof rule === "object" && Array.isArray(value)) {
      arrayValidation = true;
      value.forEach(
        (_item, index2) => validateRulesRecord(rule, values2, `${rulePath}.${index2}`, acc)
      );
    }
    if (typeof rule === "object" && typeof value === "object" && value !== null) {
      if (!arrayValidation) {
        validateRulesRecord(rule, values2, rulePath, acc);
      }
    }
    return acc;
  }, errors2);
}
function validateValues(validate2, values2) {
  if (typeof validate2 === "function") {
    return getValidationResults(validate2(values2));
  }
  return getValidationResults(validateRulesRecord(validate2, values2));
}
function validateFieldValue(path, rules, values2) {
  if (typeof path !== "string") {
    return { hasError: false, error: null };
  }
  const results = validateValues(rules, values2);
  const pathInError = Object.keys(results.errors).find(
    (errorKey) => path.split(".").every((pathPart, i) => pathPart === errorKey.split(".")[i])
  );
  return { hasError: !!pathInError, error: pathInError ? results.errors[pathInError] : null };
}
const FORM_INDEX = "__MANTINE_FORM_INDEX__";
function shouldValidateOnChange(path, validateInputOnChange) {
  if (!validateInputOnChange) {
    return false;
  }
  if (typeof validateInputOnChange === "boolean") {
    return validateInputOnChange;
  }
  if (Array.isArray(validateInputOnChange)) {
    return validateInputOnChange.includes(path.replace(/[.][0-9]+/g, `.${FORM_INDEX}`));
  }
  return false;
}
function useForm({
  name,
  mode = "controlled",
  initialValues,
  initialErrors = {},
  initialDirty = {},
  initialTouched = {},
  clearInputErrorOnChange = true,
  validateInputOnChange = false,
  validateInputOnBlur = false,
  onValuesChange,
  transformValues = (values2) => values2,
  enhanceGetInputProps,
  validate: rules,
  onSubmitPreventDefault = "always",
  touchTrigger = "change"
} = {}) {
  const $errors = useFormErrors(initialErrors);
  const $values = useFormValues({ initialValues, onValuesChange, mode });
  const $status = useFormStatus({ initialDirty, initialTouched, $values, mode });
  const $list = useFormList({ $values, $errors, $status });
  const $watch = useFormWatch({ $status });
  const [formKey, setFormKey] = reactExports.useState(0);
  const [fieldKeys, setFieldKeys] = reactExports.useState({});
  const [submitting, setSubmitting] = reactExports.useState(false);
  const reset = reactExports.useCallback(() => {
    $values.resetValues();
    $errors.clearErrors();
    $status.resetDirty();
    $status.resetTouched();
    mode === "uncontrolled" && setFormKey((key2) => key2 + 1);
  }, []);
  const handleValuesChanges = reactExports.useCallback(
    (previousValues) => {
      clearInputErrorOnChange && $errors.clearErrors();
      mode === "uncontrolled" && setFormKey((key2) => key2 + 1);
      Object.keys($watch.subscribers.current).forEach((path) => {
        const value = getPath(path, $values.refValues.current);
        const previousValue = getPath(path, previousValues);
        if (value !== previousValue) {
          $watch.getFieldSubscribers(path).forEach((cb) => cb({ previousValues, updatedValues: $values.refValues.current }));
        }
      });
    },
    [clearInputErrorOnChange]
  );
  const initialize2 = reactExports.useCallback(
    (values2) => {
      const previousValues = $values.refValues.current;
      $values.initialize(values2, () => mode === "uncontrolled" && setFormKey((key2) => key2 + 1));
      handleValuesChanges(previousValues);
    },
    [handleValuesChanges]
  );
  const setFieldValue = reactExports.useCallback(
    (path, value, options) => {
      const shouldValidate = shouldValidateOnChange(path, validateInputOnChange);
      const resolvedValue = value instanceof Function ? value(getPath(path, $values.refValues.current)) : value;
      $status.setCalculatedFieldDirty(path, resolvedValue);
      touchTrigger === "change" && $status.setFieldTouched(path, true);
      !shouldValidate && clearInputErrorOnChange && $errors.clearFieldError(path);
      $values.setFieldValue({
        path,
        value,
        updateState: mode === "controlled",
        subscribers: [
          ...$watch.getFieldSubscribers(path),
          shouldValidate ? (payload) => {
            const validationResults = validateFieldValue(path, rules, payload.updatedValues);
            validationResults.hasError ? $errors.setFieldError(path, validationResults.error) : $errors.clearFieldError(path);
          } : null,
          (options == null ? void 0 : options.forceUpdate) !== false && mode !== "controlled" ? () => setFieldKeys((keys2) => ({
            ...keys2,
            [path]: (keys2[path] || 0) + 1
          })) : null
        ]
      });
    },
    [onValuesChange, rules]
  );
  const setValues = reactExports.useCallback(
    (values2) => {
      const previousValues = $values.refValues.current;
      $values.setValues({ values: values2, updateState: mode === "controlled" });
      handleValuesChanges(previousValues);
    },
    [onValuesChange, handleValuesChanges]
  );
  const validate2 = reactExports.useCallback(() => {
    const results = validateValues(rules, $values.refValues.current);
    $errors.setErrors(results.errors);
    return results;
  }, [rules]);
  const validateField = reactExports.useCallback(
    (path) => {
      const results = validateFieldValue(path, rules, $values.refValues.current);
      results.hasError ? $errors.setFieldError(path, results.error) : $errors.clearFieldError(path);
      return results;
    },
    [rules]
  );
  const getInputProps = (path, { type = "input", withError = true, withFocus = true, ...otherOptions } = {}) => {
    const onChange = getInputOnChange(
      (value) => setFieldValue(path, value, { forceUpdate: false })
    );
    const payload = { onChange, "data-path": getDataPath(name, path) };
    if (withError) {
      payload.error = $errors.errorsState[path];
    }
    if (type === "checkbox") {
      payload[mode === "controlled" ? "checked" : "defaultChecked"] = getPath(
        path,
        $values.refValues.current
      );
    } else {
      payload[mode === "controlled" ? "value" : "defaultValue"] = getPath(
        path,
        $values.refValues.current
      );
    }
    if (withFocus) {
      payload.onFocus = () => $status.setFieldTouched(path, true);
      payload.onBlur = () => {
        if (shouldValidateOnChange(path, validateInputOnBlur)) {
          const validationResults = validateFieldValue(path, rules, $values.refValues.current);
          validationResults.hasError ? $errors.setFieldError(path, validationResults.error) : $errors.clearFieldError(path);
        }
      };
    }
    return Object.assign(
      payload,
      enhanceGetInputProps == null ? void 0 : enhanceGetInputProps({
        inputProps: payload,
        field: path,
        options: { type, withError, withFocus, ...otherOptions },
        form
      })
    );
  };
  const onSubmit = (handleSubmit, handleValidationFailure) => (event) => {
    if (onSubmitPreventDefault === "always") {
      event == null ? void 0 : event.preventDefault();
    }
    const results = validate2();
    if (results.hasErrors) {
      if (onSubmitPreventDefault === "validation-failed") {
        event == null ? void 0 : event.preventDefault();
      }
      handleValidationFailure == null ? void 0 : handleValidationFailure(results.errors, $values.refValues.current, event);
    } else {
      const submitResult = handleSubmit == null ? void 0 : handleSubmit(
        transformValues($values.refValues.current),
        event
      );
      if (submitResult instanceof Promise) {
        setSubmitting(true);
        submitResult.finally(() => setSubmitting(false));
      }
    }
  };
  const getTransformedValues = (input) => transformValues(input || $values.refValues.current);
  const onReset = reactExports.useCallback((event) => {
    event.preventDefault();
    reset();
  }, []);
  const isValid = reactExports.useCallback(
    (path) => path ? !validateFieldValue(path, rules, $values.refValues.current).hasError : !validateValues(rules, $values.refValues.current).hasErrors,
    [rules]
  );
  const key = (path) => `${formKey}-${path}-${fieldKeys[path] || 0}`;
  const getInputNode = reactExports.useCallback(
    (path) => document.querySelector(`[data-path="${getDataPath(name, path)}"]`),
    []
  );
  const form = {
    watch: $watch.watch,
    initialized: $values.initialized.current,
    values: $values.stateValues,
    getValues: $values.getValues,
    setInitialValues: $values.setValuesSnapshot,
    initialize: initialize2,
    setValues,
    setFieldValue,
    submitting,
    setSubmitting,
    errors: $errors.errorsState,
    setErrors: $errors.setErrors,
    setFieldError: $errors.setFieldError,
    clearFieldError: $errors.clearFieldError,
    clearErrors: $errors.clearErrors,
    resetDirty: $status.resetDirty,
    setTouched: $status.setTouched,
    setDirty: $status.setDirty,
    isTouched: $status.isTouched,
    resetTouched: $status.resetTouched,
    isDirty: $status.isDirty,
    getTouched: $status.getTouched,
    getDirty: $status.getDirty,
    reorderListItem: $list.reorderListItem,
    insertListItem: $list.insertListItem,
    removeListItem: $list.removeListItem,
    replaceListItem: $list.replaceListItem,
    reset,
    validate: validate2,
    validateField,
    getInputProps,
    onSubmit,
    onReset,
    isValid,
    getTransformedValues,
    key,
    getInputNode
  };
  useFormActions(name, form);
  return form;
}
function showSuccessMessage(message, title) {
  notifications.show({
    title,
    message,
    color: "#7958D2",
    icon: React.createElement(IconCheck),
    position: "top-right",
    autoClose: 2e3
  });
}
function showErrorMessage(message) {
  notifications.show({
    message,
    color: "red",
    icon: React.createElement(IconExclamationCircleFilled),
    position: "top-right",
    autoClose: 2e3
  });
}
function SearchableDropdown({
  resourceType,
  patients,
  practitioners,
  selectedPatient,
  selectedPractitioner,
  setSelectedPatient,
  setSelectedPractitioner,
  allowAll = true,
  required = false,
  hideLabel = false
}) {
  const [value, setValue] = reactExports.useState(null);
  const handleSelect = (id) => {
    if (resourceType === "Patient" && patients) {
      setSelectedPatient && setSelectedPatient(patients.find((p2) => p2.id === id));
    } else if (resourceType === "Practitioner" && practitioners) {
      setSelectedPractitioner && setSelectedPractitioner(practitioners.find((p2) => p2.id === id));
    }
    setValue(id);
  };
  const getOptions = () => {
    if (resourceType === "Practitioner" && practitioners) {
      if (allowAll) {
        return [
          {
            group: "All Practitioners",
            items: [{ label: "All", value: "" }]
          },
          {
            group: "Select Practitioner",
            items: getPersonItems(practitioners)
          }
        ];
      } else {
        return getPersonItems(practitioners);
      }
    } else if (resourceType === "Patient" && patients) {
      if (allowAll) {
        return [
          {
            group: "All Patients",
            items: [{ label: "All", value: "" }]
          },
          {
            group: "Select Patients",
            items: getPersonItems(patients)
          }
        ];
      } else {
        return getPersonItems(patients);
      }
    }
  };
  reactExports.useEffect(() => {
    if (value)
      return;
    function getInitialValue2() {
      const val = resourceType === "Patient" ? selectedPatient == null ? void 0 : selectedPatient.id : selectedPractitioner == null ? void 0 : selectedPractitioner.id;
      return val || null;
    }
    setValue(getInitialValue2());
  }, [resourceType, selectedPatient == null ? void 0 : selectedPatient.id, selectedPractitioner == null ? void 0 : selectedPractitioner.id, value]);
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    Select,
    {
      label: hideLabel ? "" : `Select ${resourceType.toLowerCase()}`,
      placeholder: "Select",
      searchable: true,
      data: getOptions(),
      value,
      onChange: handleSelect,
      required,
      w: "100%"
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/SearchableDropdown.tsx",
      lineNumber: 92,
      columnNumber: 9
    },
    this
  );
}
(/* @__PURE__ */ new Date()).valueOf();
const TASK_STATUS_DATALIST = [
  { label: "Accepted", value: "accepted" },
  { label: "Cancelled", value: "cancelled" },
  { label: "Completed", value: "completed" },
  { label: "Draft", value: "draft" },
  { label: "Entered in error", value: "entered-in-error" },
  { label: "Failed", value: "failed" },
  { label: "In progress", value: "in-progress" },
  { label: "On hold", value: "on-hold" },
  { label: "Ready", value: "ready" },
  { label: "Received", value: "received" },
  { label: "Rejected", value: "rejected" },
  { label: "Requested", value: "requested" }
];
function TaskForm({
  close,
  taskId,
  preSelectedPractitioner,
  preSelectedPatient
}) {
  const medplum2 = b();
  const readyToFetch = useReadyToFetch();
  const [patients, setPatients] = reactExports.useState([]);
  const [practitioners, setPractitioners] = reactExports.useState([]);
  const [tasks, setTasks] = reactExports.useState([]);
  const [code, setCode] = reactExports.useState("");
  const [status, setStatus] = reactExports.useState("accepted");
  const [practitioner, setPractitioner] = reactExports.useState(
    preSelectedPractitioner
  );
  const [patient, setPatient] = reactExports.useState(
    preSelectedPatient
  );
  const [notes, setNotes] = reactExports.useState("");
  const currentTask = tasks.find(
    (task) => task.id === taskId
  );
  const fetchData = reactExports.useCallback(
    (resourceType) => {
      if (!readyToFetch)
        return;
      switch (resourceType) {
        case "Patient":
          medplum2.searchResources("Patient", { _count: 200 }).then((data) => setPatients(data)).catch(
            (err) => console.error(
              "Error while fetching data of all patients: ",
              err
            )
          );
          break;
        case "Practitioner":
          medplum2.searchResources("Practitioner", { _count: 200 }).then((data) => setPractitioners(data)).catch(
            (err) => console.error(
              "Error while fetching data of all practitioners: ",
              err
            )
          );
          break;
        case "Task":
          medplum2.searchResources("Task", { _count: 200 }).then((data) => setTasks(data)).catch(
            (err) => console.error("Error while fetching tasks: ", err)
          );
          break;
      }
    },
    [medplum2, readyToFetch]
  );
  reactExports.useEffect(() => {
    fetchData("Patient");
    fetchData("Practitioner");
    fetchData("Task");
  }, [fetchData]);
  const form = useForm({
    mode: "uncontrolled"
  });
  const handleSubmit = async () => {
    if (!practitioner) {
      showErrorMessage("Please select a practitioner.");
    } else if (!patient) {
      showErrorMessage("Please select a patient.");
    } else if (!code) {
      showErrorMessage("Please select a code.");
    } else if (!notes) {
      showErrorMessage("Please enter a note.");
    } else {
      try {
        if (!currentTask) {
          const newTask = await medplum2.createResource({
            resourceType: "Task",
            status,
            intent: "proposal",
            for: {
              reference: `Patient/${patient == null ? void 0 : patient.id}`,
              display: getName(patient)
            },
            owner: {
              reference: `Practitioner/${practitioner == null ? void 0 : practitioner.id}`,
              display: getName(practitioner)
            },
            code: {
              text: code
            },
            note: [{ text: notes }]
          });
        } else {
          const updatedTask = await medplum2.updateResource({
            ...currentTask,
            status,
            for: {
              reference: `Patient/${patient == null ? void 0 : patient.id}`,
              display: getName(patient)
            },
            owner: {
              reference: `Practitioner/${practitioner == null ? void 0 : practitioner.id}`,
              display: getName(practitioner)
            },
            code: {
              text: code
            },
            note: [{ text: notes }]
          });
        }
        fetchData("Task");
        showSuccessMessage(
          `Task ${currentTask ? "updated" : "created"}.`
        );
        close();
      } catch (err) {
        console.error(err);
        showErrorMessage(
          `Error while ${currentTask ? "updating" : "creating"} task.`
        );
      }
    }
  };
  const deleteTask = () => {
    taskId && medplum2.deleteResource("Task", taskId).then(() => {
      fetchData("Task");
      showSuccessMessage("Task deleted.");
      close();
    }).catch((err) => {
      console.error(
        `Error while deleting task with id ${taskId}: `,
        err
      );
      showErrorMessage("Failed to delete task.");
    });
  };
  reactExports.useEffect(() => {
    var _a, _b, _c;
    if (!currentTask || practitioners.length === 0 || patients.length === 0)
      return;
    const foundPractitioner = practitioners.find(
      (pr) => {
        var _a2;
        return pr.id === getIdFromReference(((_a2 = currentTask.owner) == null ? void 0 : _a2.reference) || "");
      }
    );
    setPractitioner(foundPractitioner);
    const foundPatient = patients.find(
      (p2) => {
        var _a2;
        return p2.id === getIdFromReference(((_a2 = currentTask.for) == null ? void 0 : _a2.reference) || "");
      }
    );
    setPatient(foundPatient);
    setCode(((_a = currentTask.code) == null ? void 0 : _a.text) || "");
    setNotes(((_c = (_b = currentTask.note) == null ? void 0 : _b[0]) == null ? void 0 : _c.text) || "");
    setStatus(currentTask.status);
  }, [currentTask, patients, practitioners]);
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("form", { onSubmit: form.onSubmit(handleSubmit), children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Tooltip, { label: "Set a task.", children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { size: "xl", children: "Task" }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
      lineNumber: 206,
      columnNumber: 25
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
      lineNumber: 205,
      columnNumber: 21
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
      lineNumber: 204,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        TextInput,
        {
          label: "Title",
          placeholder: "What is the task?",
          value: code,
          onChange: (e) => setCode(e.target.value),
          w: "100%"
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 210,
          columnNumber: 21
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        SearchableDropdown,
        {
          resourceType: "Practitioner",
          selectedPractitioner: practitioner,
          setSelectedPractitioner: setPractitioner,
          allowAll: false,
          required: true
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 217,
          columnNumber: 21
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        SearchableDropdown,
        {
          resourceType: "Patient",
          selectedPatient: patient,
          setSelectedPatient: setPatient,
          allowAll: false,
          required: true
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 224,
          columnNumber: 21
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Select,
        {
          label: "Status",
          placeholder: "Status of the task",
          searchable: true,
          allowDeselect: false,
          data: TASK_STATUS_DATALIST,
          value: status,
          onChange: (value) => setStatus(value),
          w: "100%",
          required: true
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 231,
          columnNumber: 21
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        TextInput,
        {
          label: "Notes",
          placeholder: "Some notes to add...",
          value: notes,
          onChange: (e) => setNotes(e.target.value),
          w: "100%",
          required: true
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 242,
          columnNumber: 21
        },
        this
      )
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
      lineNumber: 209,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Button, { type: "submit", disabled: !practitioner, children: taskId ? "Update" : "Add" }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
        lineNumber: 252,
        columnNumber: 21
      }, this),
      taskId && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Button,
        {
          type: "button",
          color: "red",
          onClick: () => {
            openConfirmModal({
              modalText: "Do you really want to delete this task?",
              confirmButtonText: "Yes",
              cancelButtonText: "No",
              onConfirm: deleteTask
            });
          },
          children: "Delete"
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
          lineNumber: 256,
          columnNumber: 25
        },
        this
      )
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
      lineNumber: 251,
      columnNumber: 17
    }, this)
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
    lineNumber: 203,
    columnNumber: 13
  }, this) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/forms/TaskForm.tsx",
    lineNumber: 202,
    columnNumber: 9
  }, this);
}
function TableMoreButton({
  resourceType,
  id,
  onUpdate,
  extraItems
}) {
  const { medplum: medplum2 } = P();
  const navigate = fe();
  const theme2 = useMantineTheme();
  const [opened, { open, close }] = useDisclosure();
  const [menuOpened, setMenuOpened] = reactExports.useState(false);
  const ref = useClickOutside(() => setMenuOpened(false));
  const renderExtraItems = () => {
    return extraItems == null ? void 0 : extraItems.map((item) => {
      return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Menu.Item,
        {
          onClick: (e) => {
            setMenuOpened(false);
            item.handleClick(e);
          },
          children: item.buttonText
        },
        item.buttonText,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
          lineNumber: 35,
          columnNumber: 17
        },
        this
      );
    });
  };
  const deleteResource = () => {
    medplum2.deleteResource(resourceType, id).then(() => {
      showSuccessMessage(
        `${resourceType === "DocumentReference" ? "Document" : resourceType} deleted.`
      );
      navigate(`/${resourceType}`);
    }).catch((err) => {
      console.error(
        `Error while deleting ${resourceType.toLowerCase()}: `,
        err
      );
      showErrorMessage(
        `Failed to delete ${resourceType === "DocumentReference" ? "document" : resourceType.toLowerCase()}.`
      );
    });
  };
  const deletePractitioner = () => {
    medplum2.deleteResource("Practitioner", id).then(() => {
      showSuccessMessage("Practitioner deleted.");
      navigate("Practitioner");
    }).catch((err) => {
      console.error("Error while deleting practitioners: ", err);
      showErrorMessage("Failed to delete practitioner.");
    });
  };
  const handleIconClick = (e) => {
    e.stopPropagation();
    setMenuOpened(true);
  };
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu, { withArrow: true, opened: menuOpened, children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Target, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ActionIcon, { onClick: handleIconClick, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconDotsVertical, { color: theme2.colors.gray[9], size: 18 }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
      lineNumber: 95,
      columnNumber: 21
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
      lineNumber: 94,
      columnNumber: 17
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
      lineNumber: 93,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Dropdown, { ref, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { children: [
      extraItems && renderExtraItems(),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Menu.Item,
        {
          onClick: (e) => {
            e.stopPropagation();
            setMenuOpened(false);
            onUpdate ? onUpdate(id) : navigate(`/${resourceType}/${id}/edit`);
          },
          children: [
            "Update",
            " ",
            resourceType === "DocumentReference" ? "Document" : resourceType
          ]
        },
        void 0,
        true,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
          lineNumber: 101,
          columnNumber: 21
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Menu.Item,
        {
          onClick: (e) => {
            e.stopPropagation();
            setMenuOpened(false);
            openConfirmModal({
              modalText: `Do you really want to delete the ${resourceType === "DocumentReference" ? "document" : resourceType.toLowerCase()}? This action cannot be undone.`,
              confirmButtonText: "Yes",
              cancelButtonText: "No",
              onConfirm: resourceType === "Practitioner" ? deletePractitioner : deleteResource
            });
          },
          children: [
            "Delete",
            " ",
            resourceType === "DocumentReference" ? "Document" : resourceType
          ]
        },
        void 0,
        true,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
          lineNumber: 115,
          columnNumber: 21
        },
        this
      )
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
      lineNumber: 99,
      columnNumber: 17
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
      lineNumber: 98,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Modal,
      {
        opened,
        onClose: close,
        centered: true,
        withCloseButton: false,
        children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(TaskForm, { close, taskId: id }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
          lineNumber: 143,
          columnNumber: 17
        }, this)
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
        lineNumber: 137,
        columnNumber: 13
      },
      this
    )
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TableMoreButton.tsx",
    lineNumber: 92,
    columnNumber: 9
  }, this);
}
const body$1 = "_body_aehz2_1";
const table$1 = "_table_aehz2_5";
const select$1 = "_select_aehz2_59";
const pagination$1 = "_pagination_aehz2_67";
const consentdocument$1 = "_consentdocument_aehz2_77";
const consent$1 = "_consent_aehz2_77";
const classes$4 = {
  body: body$1,
  table: table$1,
  select: select$1,
  pagination: pagination$1,
  consentdocument: consentdocument$1,
  consent: consent$1,
  "mantine-FileInput-input": "_mantine-FileInput-input_aehz2_81",
  "mantine-InputPlaceholder-placeholder": "_mantine-InputPlaceholder-placeholder_aehz2_88"
};
const TablePagination = ({ total, page, setPage }) => {
  const theme2 = useMantineTheme();
  const isMobile = useMediaQuery("(max-width: 768px)");
  const maxPageNumber = Math.ceil(total / NUM_ITEMS_ON_PAGE);
  const leftButtonDisabled = page === 1;
  const rightButtonDisabled = page === maxPageNumber;
  const getButtonStyle = (buttonType) => {
    const disabled = buttonType === "previous" && leftButtonDisabled || buttonType === "next" && rightButtonDisabled;
    return {
      border: "1px solid #D0D5DD",
      opacity: disabled ? 0.55 : "inherit",
      cursor: disabled ? "not-allowed" : "pointer"
    };
  };
  const goToNextPage = () => {
    setPage((prev2) => {
      if (prev2 < maxPageNumber) {
        return prev2 + 1;
      }
      return prev2;
    });
  };
  const goToPreviousPage = () => {
    setPage((prev2) => {
      if (prev2 > 1) {
        return prev2 - 1;
      }
      return prev2;
    });
  };
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    Pagination.Root,
    {
      value: page,
      onChange: (pageNumber) => setPage(pageNumber),
      total: maxPageNumber,
      className: classes$4.pagination,
      color: "#F9FAFB",
      size: isMobile ? "xs" : "md",
      siblings: 2,
      boundaries: 3,
      children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Group,
        {
          gap: 5,
          mt: "xl",
          w: "100%",
          style: {
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between"
          },
          children: [
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Button,
              {
                variant: "outline",
                size: isMobile ? "xs" : "sm",
                style: getButtonStyle("previous"),
                disabled: leftButtonDisabled,
                onClick: goToPreviousPage,
                children: [
                  /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconArrowLeft, { size: 20 }, void 0, false, {
                    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                    lineNumber: 79,
                    columnNumber: 21
                  }, globalThis),
                  !isMobile && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                    Text$1,
                    {
                      size: "14",
                      fw: 600,
                      c: theme2.colors.fontColors[6],
                      ml: "xs",
                      children: "Previous"
                    },
                    void 0,
                    false,
                    {
                      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                      lineNumber: 81,
                      columnNumber: 25
                    },
                    globalThis
                  )
                ]
              },
              void 0,
              true,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                lineNumber: 72,
                columnNumber: 17
              },
              globalThis
            ),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Pagination.Items, {}, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
              lineNumber: 92,
              columnNumber: 21
            }, globalThis) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
              lineNumber: 91,
              columnNumber: 17
            }, globalThis),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Button,
              {
                variant: "outline",
                size: isMobile ? "xs" : "sm",
                style: getButtonStyle("next"),
                disabled: rightButtonDisabled,
                onClick: goToNextPage,
                children: [
                  !isMobile && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                    Text$1,
                    {
                      size: "14",
                      fw: 600,
                      c: theme2.colors.fontColors[6],
                      mr: "xs",
                      children: "Next"
                    },
                    void 0,
                    false,
                    {
                      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                      lineNumber: 102,
                      columnNumber: 25
                    },
                    globalThis
                  ),
                  /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconArrowRight, { size: 20 }, void 0, false, {
                    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                    lineNumber: 111,
                    columnNumber: 21
                  }, globalThis)
                ]
              },
              void 0,
              true,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
                lineNumber: 94,
                columnNumber: 17
              },
              globalThis
            )
          ]
        },
        void 0,
        true,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
          lineNumber: 62,
          columnNumber: 13
        },
        globalThis
      )
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/ui/TablePagination.tsx",
      lineNumber: 52,
      columnNumber: 9
    },
    globalThis
  );
};
const body = "_body_v3j3u_1";
const table = "_table_v3j3u_5";
const select = "_select_v3j3u_61";
const pagination = "_pagination_v3j3u_69";
const consentdocument = "_consentdocument_v3j3u_79";
const consent = "_consent_v3j3u_79";
const classes$3 = {
  body,
  table,
  select,
  pagination,
  consentdocument,
  consent,
  "mantine-FileInput-input": "_mantine-FileInput-input_v3j3u_83",
  "mantine-InputPlaceholder-placeholder": "_mantine-InputPlaceholder-placeholder_v3j3u_90"
};
function TableWithControlsDashBoard({
  tableData,
  title,
  resourceType,
  modals: modals2,
  onAdd,
  onUpdate,
  onRowClick,
  renderCustomMenu,
  extraItems,
  withCheckboxes = true,
  showTop = true,
  numTableUpdates,
  titleLabel
}) {
  useMantineTheme();
  const navigate = fe();
  const [rows, setRows] = reactExports.useState([]);
  const [checkedRows, setCheckedRows] = reactExports.useState([]);
  const [page, setPage] = reactExports.useState(1);
  const [searchTerm, setSearchTerm] = reactExports.useState("");
  const [allChecked, setAllChecked] = reactExports.useState(false);
  reactExports.useEffect(() => {
    const rowsData = [];
    for (let i = 0; i < tableData[0].columnValues.length; i++) {
      const newRow = {
        id: tableData[0].columnValues[i].id,
        values: []
      };
      tableData.forEach((entry) => {
        newRow.values.push({
          columnName: entry.columnName,
          value: entry.columnValues[i].value,
          searchValue: entry.columnValues[i].searchValue ?? null,
          sortValue: entry.columnValues[i].sortValue ?? null
        });
      });
      rowsData.push(newRow);
    }
    setRows(rowsData);
  }, [tableData, numTableUpdates]);
  const selectedRows = reactExports.useMemo(() => {
    return rows.filter((r3) => {
      var _a;
      if (!searchTerm) {
        return true;
      }
      const searchValue = ((_a = r3.values.find((v) => v.searchValue)) == null ? void 0 : _a.searchValue) ?? "";
      return checkContainsSearchTerm(searchValue, searchTerm);
    });
  }, [rows, searchTerm]);
  const displayedRows = reactExports.useMemo(() => {
    return getPaginationSlice(selectedRows, page);
  }, [selectedRows, page]);
  const sortRows = (sortDirection, col) => {
    const sortedRows = [...rows];
    sortedRows.sort((a, b2) => {
      var _a, _b;
      const sortValueA = ((_a = a.values.find((v) => v.columnName === col.columnName)) == null ? void 0 : _a.sortValue) || "";
      const sortValueB = ((_b = b2.values.find((v) => v.columnName === col.columnName)) == null ? void 0 : _b.sortValue) || "";
      if (sortDirection === "up") {
        return sortValueA > sortValueB ? 1 : -1;
      } else {
        return sortValueB > sortValueA ? 1 : -1;
      }
    });
    setRows(sortedRows);
  };
  const renderTableHeader = () => {
    return tableData.map((col) => {
      return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Th, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { justify: "flex-start", wrap: "nowrap", gap: 30, children: [
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { fz: 12, fw: 500, children: col.columnName }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
          lineNumber: 122,
          columnNumber: 25
        }, this),
        col.sortable && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { gap: 0, children: [
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
            ActionIcon,
            {
              size: "xs",
              onClick: () => sortRows("up", col),
              children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconChevronUp, { size: 16 }, void 0, false, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 131,
                columnNumber: 37
              }, this)
            },
            void 0,
            false,
            {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 127,
              columnNumber: 33
            },
            this
          ),
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
            ActionIcon,
            {
              size: "xs",
              onClick: () => sortRows("down", col),
              children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconChevronDown, { size: 16 }, void 0, false, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 137,
                columnNumber: 37
              }, this)
            },
            void 0,
            false,
            {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 133,
              columnNumber: 33
            },
            this
          )
        ] }, void 0, true, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
          lineNumber: 126,
          columnNumber: 29
        }, this)
      ] }, void 0, true, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
        lineNumber: 121,
        columnNumber: 21
      }, this) }, col.columnName, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
        lineNumber: 120,
        columnNumber: 17
      }, this);
    });
  };
  const renderTableBody = () => {
    return displayedRows.map((row) => {
      return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Table.Tr,
        {
          onClick: () => onRowClick ? onRowClick(row.id) : navigate(`/${resourceType}/${row.id}`),
          style: {
            cursor: resourceType && "pointer"
          },
          children: [
            withCheckboxes && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Td, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Checkbox,
              {
                checked: allChecked || checkedRows.includes(row.id),
                onClick: (e) => e.stopPropagation(),
                onChange: () => {
                  setCheckedRows(
                    (prev2) => prev2.includes(row.id) ? prev2.filter((id) => id !== row.id) : [...prev2, row.id]
                  );
                }
              },
              void 0,
              false,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 163,
                columnNumber: 29
              },
              this
            ) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 162,
              columnNumber: 25
            }, this),
            row.values.map((entry) => {
              return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Td, { children: entry.value }, entry.columnName, false, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 180,
                columnNumber: 29
              }, this);
            }),
            resourceType && showTop && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Td, { children: renderCustomMenu ? renderCustomMenu(row.id) : /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              TableMoreButton,
              {
                resourceType,
                id: row.id,
                onUpdate,
                extraItems
              },
              void 0,
              false,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 190,
                columnNumber: 33
              },
              this
            ) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 186,
              columnNumber: 25
            }, this)
          ]
        },
        row.id,
        true,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
          lineNumber: 150,
          columnNumber: 17
        },
        this
      );
    });
  };
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { p: 0, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ScrollArea, { style: { overflow: "unset" }, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Box,
      {
        style: {
          width: "100%",
          height: "75px",
          padding: "12px 24px",
          gap: "24px",
          borderTop: "1px solid #EAECF0",
          borderLeft: "1px solid #EAECF0",
          borderRight: "1px solid #EAECF0",
          borderRadius: "8px 8px 0px 0px",
          marginBottom: "0px",
          opacity: 1,
          display: "flex",
          alignItems: "center",
          borderColor: "#EAECF0",
          backgroundColor: "white"
        },
        children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { c: "#9552E8", fz: 16, fw: 550, children: [
          rows.length,
          " ",
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("span", { style: { color: "black" }, children: titleLabel }, void 0, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
            lineNumber: 228,
            columnNumber: 29
          }, this)
        ] }, void 0, true, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
          lineNumber: 226,
          columnNumber: 25
        }, this)
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
        lineNumber: 208,
        columnNumber: 21
      },
      this
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Table,
      {
        highlightOnHover: true,
        horizontalSpacing: "md",
        verticalSpacing: "md",
        className: classes$3.table,
        m: 0,
        mt: -10,
        children: [
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Thead, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Tr, { children: [
            withCheckboxes && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Th, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Checkbox,
              {
                checked: allChecked,
                onClick: (e) => e.stopPropagation(),
                onChange: () => {
                  if (allChecked) {
                    setAllChecked(false);
                    setCheckedRows([]);
                  } else {
                    setAllChecked(true);
                    const allIds = rows.map((r3) => r3.id);
                    setCheckedRows(allIds);
                  }
                }
              },
              void 0,
              false,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
                lineNumber: 244,
                columnNumber: 41
              },
              this
            ) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 243,
              columnNumber: 37
            }, this),
            renderTableHeader(),
            showTop && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Th, { children: "Actions" }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
              lineNumber: 262,
              columnNumber: 45
            }, this)
          ] }, void 0, true, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
            lineNumber: 241,
            columnNumber: 29
          }, this) }, void 0, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
            lineNumber: 240,
            columnNumber: 25
          }, this),
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Table.Tbody, { children: renderTableBody() }, void 0, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
            lineNumber: 265,
            columnNumber: 25
          }, this)
        ]
      },
      void 0,
      true,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
        lineNumber: 232,
        columnNumber: 21
      },
      this
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      TablePagination,
      {
        page,
        setPage,
        total: selectedRows.length
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
        lineNumber: 268,
        columnNumber: 21
      },
      this
    ),
    modals2
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
    lineNumber: 207,
    columnNumber: 17
  }, this) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
    lineNumber: 206,
    columnNumber: 13
  }, this) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/tables/TableWithControlsDashBoard.tsx",
    lineNumber: 205,
    columnNumber: 9
  }, this);
}
var isDevelopment$2 = true;
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
  return void 0;
}
function createStyleElement(options) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options.key);
  if (options.nonce !== void 0) {
    tag.setAttribute("nonce", options.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = /* @__PURE__ */ function() {
  function StyleSheet2(options) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options.speedy === void 0 ? !isDevelopment$2 : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce;
    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.insertionPoint = options.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      var _tag$parentNode;
      return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash(value, length2) {
  return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search) {
  return value.indexOf(search);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root2, parent, type, props, children, length2) {
  return { value, root: root2, parent, type, props, children, line, column, length: length2, return: "" };
}
function copy(root2, props) {
  return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count2) {
  while (--count2 && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count2 < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek()))
    next();
  return slice(index2, position);
}
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root2, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset2 = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root2, parent), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset2:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root2, parent, index2, offset2, rules, points, type, props = [], children = [], length2), rulesets);
            if (character2 === 123)
              if (offset2 === 0)
                parse(characters2, root2, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters2 += delimit(next());
            atrule = peek(), offset2 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root2, parent, index2, offset2, rules, points, type, props, children, length2) {
  var post = offset2 - 1;
  var rule = offset2 === 0 ? rules : [""];
  var size2 = sizeof(rule);
  for (var i = 0, j2 = 0, k2 = 0; i < index2; ++i)
    for (var x = 0, y2 = substr(value, post + 1, post = abs(j2 = points[i])), z2 = value; x < size2; ++x)
      if (z2 = trim(j2 > 0 ? rule[x] + " " + y2 : replace(y2, /&\f/g, rule[x])))
        props[k2++] = z2;
  return node(value, root2, parent, offset2 === 0 ? RULESET : type, props, children, length2);
}
function comment(value, root2, parent) {
  return node(value, root2, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root2, parent, length2) {
  return node(value, root2, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
}
function serialize(children, callback) {
  var output = "";
  var length2 = sizeof(children);
  for (var i = 0; i < length2; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index2, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      element.value = element.props.join(",");
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback) {
    var output = "";
    for (var i = 0; i < length2; i++)
      output += collection[i](element, index2, children, callback) || "";
    return output;
  };
}
function memoize(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn(arg);
    return cache[arg];
  };
}
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
  var previous = 0;
  var character2 = 0;
  while (true) {
    previous = character2;
    character2 = peek();
    if (previous === 38 && character2 === 12) {
      points[index2] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index2 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index2] = 1;
        }
        parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
        break;
      case 2:
        parsed[index2] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index2] = peek() === 58 ? "&\f" : "";
          points[index2] = parsed[index2].length;
          break;
        }
      default:
        parsed[index2] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element) {
  if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element.length < 1) {
    return;
  }
  var value = element.value;
  var parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k2 = 0; i < rules.length; i++) {
    for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
      element.props[k2] = points[i] ? rules[i].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element) {
  if (element.type === "decl") {
    var value = element.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element["return"] = "";
      element.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element) {
  return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
  return function(element, index2, children) {
    if (element.type !== "rule" || cache.compat)
      return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses) {
      var isNested = !!element.parent;
      var commentContainer = isNested ? element.parent.children : (
        // global rule at the root level
        children
      );
      for (var i = commentContainer.length - 1; i >= 0; i--) {
        var node2 = commentContainer[i];
        if (node2.line < element.line) {
          break;
        }
        if (node2.column < element.column) {
          if (isIgnoringComment(node2)) {
            return;
          }
          break;
        }
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
  for (var i = index2 - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element) {
  element.type = "";
  element.value = "";
  element["return"] = "";
  element.children = "";
  element.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
  if (!isImportRule(element)) {
    return;
  }
  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index2, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};
function prefix(value, length2) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length2 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element, index2, children, callback) {
  if (element.length > -1) {
    if (!element["return"])
      switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize([copy(element, {
            value: replace(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length)
            return combine(element.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy(element, {
                    props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy(element, {
                    props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var getSourceMap;
{
  var sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  getSourceMap = function getSourceMap2(styles2) {
    var matches = styles2.match(sourceMapPattern);
    if (!matches)
      return;
    return matches[matches.length - 1];
  };
}
var createCache = function createCache2(options) {
  var key = options.key;
  if (!key) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node2) {
      var dataEmotionAttribute = node2.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node2);
      node2.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
  {
    if (/[^a-z-]/.test(key)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
    }
  }
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
      function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, function(element) {
      if (!element.root) {
        if (element["return"]) {
          currentSheet.insert(element["return"]);
        } else if (element.value && element.type !== COMMENT) {
          currentSheet.insert(element.value + "{}");
        }
      }
    }];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (getSourceMap) {
        var sourceMap = getSourceMap(serialized.styles);
        if (sourceMap) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet.insert(rule + sourceMap);
            }
          };
        }
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key,
    sheet: new StyleSheet({
      key,
      container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend,
      insertionPoint: options.insertionPoint
    }),
    nonce: options.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};
var isBrowser = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else if (className) {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};
function murmur2(str) {
  var h2 = 0;
  var k2, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k2 = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k2 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
    k2 ^= /* k >>> r: */
    k2 >>> 24;
    h2 = /* Math.imul(k, m): */
    (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h2 ^= str.charCodeAt(i) & 255;
      h2 = /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  h2 ^= h2 >>> 13;
  h2 = /* Math.imul(h, m): */
  (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
}
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var isDevelopment$1 = true;
var ILLEGAL_ESCAPE_SEQUENCE_ERROR$1 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key, value) {
  switch (key) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p2) {
          cursor = {
            name: p1,
            styles: p2,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
{
  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  var contentValues = ["normal", "none", "initial", "inherit", "unset"];
  var oldProcessStyleValue = processStyleValue;
  var msPattern = /^-ms-/;
  var hyphenPattern = /-(.)/g;
  var hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key, value) {
    if (key === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key, value);
    if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
      hyphenatedCache[key] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  var componentSelector = interpolation;
  if (componentSelector.__emotion_styles !== void 0) {
    if (String(componentSelector) === "NO_COMPONENT_SELECTOR") {
      throw new Error(noComponentSelectorMessage);
    }
    return componentSelector;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      var keyframes = interpolation;
      if (keyframes.anim === 1) {
        cursor = {
          name: keyframes.name,
          styles: keyframes.styles,
          next: cursor
        };
        return keyframes.name;
      }
      var serializedStyles = interpolation;
      if (serializedStyles.styles !== void 0) {
        var next2 = serializedStyles.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = serializedStyles.styles + ";";
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(_match, _p1, p2) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\ncss`" + replaced + "`");
        }
      }
      break;
  }
  var asString = interpolation;
  if (registered == null) {
    return asString;
  }
  var cached = registered[asString];
  return cached !== void 0 ? cached : asString;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var key in obj) {
      var value = obj[key];
      if (typeof value !== "object") {
        var asString = value;
        if (registered != null && registered[asString] !== void 0) {
          string += key + "{" + registered[asString] + "}";
        } else if (isProcessableValue(asString)) {
          string += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
        }
      } else {
        if (key === "NO_COMPONENT_SELECTOR" && isDevelopment$1) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i2 = 0; _i2 < value.length; _i2++) {
            if (isProcessableValue(value[_i2])) {
              string += processStyleName(key) + ":" + processStyleValue(key, value[_i2]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (key) {
            case "animation":
            case "animationName": {
              string += processStyleName(key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string += key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string;
}
var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
var cursor;
function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
    return args[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    var asTemplateStringsArr = strings;
    if (asTemplateStringsArr[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
    }
    styles2 += asTemplateStringsArr[0];
  }
  for (var i = 1; i < args.length; i++) {
    styles2 += handleInterpolation(mergedProps, registered, args[i]);
    if (stringMode) {
      var templateStringsArr = strings;
      if (templateStringsArr[i] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR$1);
      }
      styles2 += templateStringsArr[i];
    }
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + match2[1];
  }
  var name = murmur2(styles2) + identifierName;
  {
    var devStyles = {
      name,
      styles: styles2,
      next: cursor,
      toString: function toString() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
    return devStyles;
  }
}
var syncFallback = function syncFallback2(create2) {
  return create2();
};
var useInsertionEffect = React$1["useInsertionEffect"] ? React$1["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect || syncFallback;
var EmotionCacheContext$1 = /* @__PURE__ */ reactExports.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
    key: "css"
  }) : null
);
{
  EmotionCacheContext$1.displayName = "EmotionCacheContext";
}
EmotionCacheContext$1.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return /* @__PURE__ */ reactExports.forwardRef(function(props, ref) {
    var cache = reactExports.useContext(EmotionCacheContext$1);
    return func(props, cache, ref);
  });
};
var ThemeContext = /* @__PURE__ */ reactExports.createContext({});
{
  ThemeContext.displayName = "EmotionThemeContext";
}
var hasOwn = {}.hasOwnProperty;
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var Insertion$1 = function Insertion(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, reactExports.useContext(ThemeContext));
  if (serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var _key2 in props) {
    if (hasOwn.call(props, _key2) && _key2 !== "css" && _key2 !== typePropName && _key2 !== labelPropName) {
      newProps[_key2] = props[_key2];
    }
  }
  newProps.className = className;
  if (ref) {
    newProps.ref = ref;
  }
  return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion$1, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), /* @__PURE__ */ reactExports.createElement(WrappedComponent, newProps));
});
{
  Emotion.displayName = "EmotionCssPropInternal";
}
var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var isPropValid = /* @__PURE__ */ memoize(
  function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
var isDevelopment = true;
var testOmitPropsOnStringTag = isPropValid;
var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
  return key !== "theme";
};
var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
  return typeof tag === "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
};
var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
  var shouldForwardProp;
  if (options) {
    var optionsShouldForwardProp = options.shouldForwardProp;
    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
    } : optionsShouldForwardProp;
  }
  if (typeof shouldForwardProp !== "function" && isReal) {
    shouldForwardProp = tag.__emotion_forwardProp;
  }
  return shouldForwardProp;
};
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var Insertion2 = function Insertion3(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var createStyled = function createStyled2(tag, options) {
  {
    if (tag === void 0) {
      throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
    }
  }
  var isReal = tag.__emotion_real === tag;
  var baseTag = isReal && tag.__emotion_base || tag;
  var identifierName;
  var targetClassName;
  if (options !== void 0) {
    identifierName = options.label;
    targetClassName = options.target;
  }
  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
  var shouldUseAs = !defaultShouldForwardProp("as");
  return function() {
    var args = arguments;
    var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
    if (identifierName !== void 0) {
      styles2.push("label:" + identifierName + ";");
    }
    if (args[0] == null || args[0].raw === void 0) {
      styles2.push.apply(styles2, args);
    } else {
      var templateStringsArr = args[0];
      if (templateStringsArr[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2.push(templateStringsArr[0]);
      var len = args.length;
      var i = 1;
      for (; i < len; i++) {
        if (templateStringsArr[i] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles2.push(args[i], templateStringsArr[i]);
      }
    }
    var Styled = withEmotionCache(function(props, cache, ref) {
      var FinalTag = shouldUseAs && props.as || baseTag;
      var className = "";
      var classInterpolations = [];
      var mergedProps = props;
      if (props.theme == null) {
        mergedProps = {};
        for (var key in props) {
          mergedProps[key] = props[key];
        }
        mergedProps.theme = reactExports.useContext(ThemeContext);
      }
      if (typeof props.className === "string") {
        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
      } else if (props.className != null) {
        className = props.className + " ";
      }
      var serialized = serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
      className += cache.key + "-" + serialized.name;
      if (targetClassName !== void 0) {
        className += " " + targetClassName;
      }
      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
      var newProps = {};
      for (var _key in props) {
        if (shouldUseAs && _key === "as")
          continue;
        if (finalShouldForwardProp(_key)) {
          newProps[_key] = props[_key];
        }
      }
      newProps.className = className;
      if (ref) {
        newProps.ref = ref;
      }
      return /* @__PURE__ */ reactExports.createElement(reactExports.Fragment, null, /* @__PURE__ */ reactExports.createElement(Insertion2, {
        cache,
        serialized,
        isStringTag: typeof FinalTag === "string"
      }), /* @__PURE__ */ reactExports.createElement(FinalTag, newProps));
    });
    Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
    Styled.defaultProps = tag.defaultProps;
    Styled.__emotion_real = Styled;
    Styled.__emotion_base = baseTag;
    Styled.__emotion_styles = styles2;
    Styled.__emotion_forwardProp = shouldForwardProp;
    Object.defineProperty(Styled, "toString", {
      value: function value() {
        if (targetClassName === void 0 && isDevelopment) {
          return "NO_COMPONENT_SELECTOR";
        }
        return "." + targetClassName;
      }
    });
    Styled.withComponent = function(nextTag, nextOptions) {
      var newStyled2 = createStyled2(nextTag, _extends({}, options, nextOptions, {
        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
      }));
      return newStyled2.apply(void 0, styles2);
    };
    return Styled;
  };
};
var tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var newStyled = createStyled.bind(null);
tags.forEach(function(tagName) {
  newStyled[tagName] = newStyled(tagName);
});
const FeaturedCards = ({ cardsData }) => {
  const navigate = fe();
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { px: "xs", py: "lg", children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: cardsData.map((card, index2) => (
    // <Grid.Col key={index} span={{ base: 12, lg: 3, sm: 6 }}>
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Card,
      {
        radius: "xl",
        bg: card.bg,
        w: 242,
        withBorder: true,
        style: {
          boxShadow: "0px 2.5px 0px 0px rgba(128,128,128,0.2)",
          cursor: "pointer"
        },
        onClick: () => navigate(card.routeTo),
        children: [
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
            Card.Section,
            {
              display: "flex",
              pt: 20,
              p: "xs",
              sx: {
                justifyContent: "space-between",
                borderBottom: "1px solid #e2e2e2",
                alignItems: "center"
              },
              children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                IconAndText,
                {
                  ImageSrc: card.ImageSrc,
                  text: card.text
                },
                void 0,
                false,
                {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                  lineNumber: 41,
                  columnNumber: 29
                },
                globalThis
              )
            },
            void 0,
            false,
            {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
              lineNumber: 31,
              columnNumber: 25
            },
            globalThis
          ),
          /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
            Card.Section,
            {
              display: "flex",
              p: "xs",
              sx: {
                justifyContent: "space-between",
                alignItems: "center"
              },
              children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { justify: "flex-end", children: [
                /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                  HeadingAndDesc,
                  {
                    text: card.counts,
                    subText: card.subText,
                    comparisonPercentage: card.comparisonPercentage
                  },
                  void 0,
                  false,
                  {
                    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                    lineNumber: 60,
                    columnNumber: 33
                  },
                  globalThis
                ),
                /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { gap: 1, py: 20, children: card.featuredValues.map((el, i) => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { fz: 10, children: el }, i, false, {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                  lineNumber: 75,
                  columnNumber: 41
                }, globalThis)) }, void 0, false, {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                  lineNumber: 73,
                  columnNumber: 33
                }, globalThis)
              ] }, void 0, true, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                lineNumber: 59,
                columnNumber: 29
              }, globalThis)
            },
            void 0,
            false,
            {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
              lineNumber: 51,
              columnNumber: 25
            },
            globalThis
          )
        ]
      },
      index2,
      true,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
        lineNumber: 18,
        columnNumber: 21
      },
      globalThis
    )
  )) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
    lineNumber: 15,
    columnNumber: 13
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
    lineNumber: 14,
    columnNumber: 9
  }, globalThis);
};
const StyledTypographyDetail = newStyled(Title)({
  fontSize: "14px",
  fw: "500"
});
const IconAndText = ({ ImageSrc, text }) => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
  "div",
  {
    style: {
      display: "flex",
      alignItems: "center"
    },
    children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("img", { src: ImageSrc }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
        lineNumber: 105,
        columnNumber: 9
      }, globalThis),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        StyledTypographyDetail,
        {
          sx: {
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            overflow: "hidden"
          },
          ml: "xs",
          fw: "600",
          fz: 16,
          variant: "lg",
          children: text
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
          lineNumber: 106,
          columnNumber: 9
        },
        globalThis
      )
    ]
  },
  void 0,
  true,
  {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
    lineNumber: 99,
    columnNumber: 5
  },
  globalThis
);
const StyledTypographyMain = newStyled(Title)({
  fontSize: "28px",
  lineHeight: "32px",
  letterSpacing: "0.5px",
  color: "#0A1E28"
});
const StyledTypographyText = newStyled(Title)({
  fontSize: "12px",
  lineHeight: "18px",
  letterSpacing: "0.5px",
  color: "#0A1E28"
});
const HeadingAndDesc = ({ text, subText, comparisonPercentage }) => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
  "div",
  {
    style: {
      display: "block"
    },
    children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { gap: 5, children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        StyledTypographyMain,
        {
          sx: {
            textOverflow: "ellipsis",
            whiteSpace: "nowrap",
            overflow: "hidden"
          },
          fw: "bold",
          variant: "lg",
          fz: 30,
          mb: 6,
          children: text
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
          lineNumber: 147,
          columnNumber: 13
        },
        globalThis
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        StyledTypographyText,
        {
          c: comparisonPercentage && comparisonPercentage >= 0 ? "green" : "red",
          children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { gap: 5, mt: 4, children: [
            comparisonPercentage && comparisonPercentage >= 0 ? /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconArrowUp, { color: "green", size: 14 }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
              lineNumber: 170,
              columnNumber: 25
            }, globalThis) : /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconArrowDown, { color: "red", size: 14 }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
              lineNumber: 172,
              columnNumber: 25
            }, globalThis),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Text$1,
              {
                fz: 12,
                c: comparisonPercentage && comparisonPercentage >= 0 ? "green" : "red",
                children: [
                  comparisonPercentage,
                  "%"
                ]
              },
              void 0,
              true,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                lineNumber: 174,
                columnNumber: 21
              },
              globalThis
            ),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              Text$1,
              {
                fz: 12,
                c: comparisonPercentage && comparisonPercentage >= 0 ? "green" : "red",
                children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { fz: 11, c: "#868686", children: "vs. last month" }, void 0, false, {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                  lineNumber: 192,
                  columnNumber: 25
                }, globalThis)
              },
              void 0,
              false,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
                lineNumber: 184,
                columnNumber: 21
              },
              globalThis
            )
          ] }, void 0, true, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
            lineNumber: 168,
            columnNumber: 17
          }, globalThis)
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
          lineNumber: 161,
          columnNumber: 13
        },
        globalThis
      )
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
      lineNumber: 146,
      columnNumber: 9
    }, globalThis)
  },
  void 0,
  false,
  {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/FeaturedCards.tsx",
    lineNumber: 141,
    columnNumber: 5
  },
  globalThis
);
const practitionerImage = "/dashboard-practitioners.0cdb3ba0.svg";
const patientImage = "/dashboard-patients.7e3a1ffc.svg";
const consentImage = "/dashboard-consents.364b5782.svg";
const appointmentImage = "/dashboard-appointments.71a7ffb6.svg";
function Dashboard() {
  const medplum2 = b();
  const readyToFetch = useReadyToFetch();
  const [patients, setPatients] = reactExports.useState([]);
  const [tasks, setTasks] = reactExports.useState([]);
  const [practitioners, setPractitioners] = reactExports.useState([]);
  const [groups, setGroups] = reactExports.useState([]);
  const [consents, setConsents] = reactExports.useState([]);
  const [appointments, setAppointments] = reactExports.useState([]);
  const [cardiology, setCardiologist] = reactExports.useState(0);
  const [dermatology, setDermatology] = reactExports.useState(0);
  const navigate = fe();
  const cardsData = [
    {
      ImageSrc: practitionerImage,
      text: "Practitioners",
      subText: "Practitioners",
      counts: practitioners.length,
      routeTo: "/Practitioner",
      bg: "",
      //"rgba(128,0,128,0.1)",
      progressHighlight: "#9581D4",
      progressBg: "#E2DAFD",
      isCheckCard: true,
      comparisonPercentage: (() => {
        const now = /* @__PURE__ */ new Date();
        const startOfWeek = new Date(
          now.setDate(now.getDate() - now.getDay())
        );
        const startOfLastWeek = new Date(startOfWeek);
        startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);
        const practitionersThisWeek = practitioners.filter(
          (p2) => {
            var _a;
            return new Date(((_a = p2.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfWeek;
          }
        ).length;
        const practitionersLastWeek = practitioners.filter(
          (p2) => {
            var _a, _b;
            return new Date(((_a = p2.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfLastWeek && new Date(((_b = p2.meta) == null ? void 0 : _b.lastUpdated) || "") < startOfWeek;
          }
        ).length;
        if (practitionersLastWeek === 0)
          return 79;
        return Math.round(
          (practitionersThisWeek - practitionersLastWeek) / practitionersLastWeek * 100
        );
      })(),
      featuredValues: [
        `${cardiology} Cardiologist`,
        `${dermatology} Oncology`
        // practitioners.filter((c) => c.gender === "male").length + " Male",
        // practitioners.filter((c) => c.gender === "female").length + " Female",
      ]
    },
    {
      ImageSrc: patientImage,
      text: "Patients",
      subText: "Patients",
      counts: patients.length,
      routeTo: "/Patient",
      bg: "",
      //"rgba(0,0,255,0.1)",
      progressHighlight: "#82A4D4",
      progressBg: "#D7E6FB",
      isCheckCard: true,
      comparisonPercentage: (() => {
        const now = /* @__PURE__ */ new Date();
        const startOfWeek = new Date(
          now.setDate(now.getDate() - now.getDay())
        );
        const startOfLastWeek = new Date(startOfWeek);
        startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);
        const patientsThisWeek = patients.filter(
          (p2) => {
            var _a;
            return new Date(((_a = p2.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfWeek;
          }
        ).length;
        const patientsLastWeek = patients.filter(
          (p2) => {
            var _a, _b;
            return new Date(((_a = p2.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfLastWeek && new Date(((_b = p2.meta) == null ? void 0 : _b.lastUpdated) || "") < startOfWeek;
          }
        ).length;
        if (patientsLastWeek === 0)
          return 84;
        if (patientsThisWeek === 0)
          return -24;
        return Math.round(
          (patientsThisWeek - patientsLastWeek) / patientsLastWeek * 100
        );
      })(),
      featuredValues: [
        patients.filter((c) => c.gender === "male").length + " Male",
        patients.filter((c) => c.gender === "female").length + " Female"
        // patients.filter((c) => c.gender === "other").length + " Child",
      ]
    },
    {
      ImageSrc: consentImage,
      text: "Consents",
      subText: "Consents",
      counts: consents.length,
      routeTo: "/Consent",
      bg: "",
      //"rgba(0,128,0,0.1)",
      progressHighlight: "#8AD8C7",
      progressBg: "#D3FAF2",
      isCheckCard: true,
      comparisonPercentage: (() => {
        const now = /* @__PURE__ */ new Date();
        const startOfWeek = new Date(
          now.setDate(now.getDate() - now.getDay())
        );
        const startOfLastWeek = new Date(startOfWeek);
        startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);
        const consentsThisWeek = consents.filter(
          (c) => {
            var _a;
            return new Date(((_a = c.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfWeek;
          }
        ).length;
        const consentsLastWeek = consents.filter(
          (c) => {
            var _a, _b;
            return new Date(((_a = c.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfLastWeek && new Date(((_b = c.meta) == null ? void 0 : _b.lastUpdated) || "") < startOfWeek;
          }
        ).length;
        if (consentsLastWeek === 0)
          return 90;
        if (consentsThisWeek === 0)
          return -30;
        return Math.round(
          (consentsThisWeek - consentsLastWeek) / consentsLastWeek * 100
        );
      })(),
      featuredValues: [
        consents.filter((c) => c.status === "active").length + " Approved",
        consents.filter((c) => c.status === "draft").length + " Pending"
        // consents.filter((c) => c.status === "rejected").length + " Rejected",
      ]
    },
    {
      ImageSrc: appointmentImage,
      text: "Appointments",
      subText: "Appointments",
      counts: appointments.length,
      routeTo: "/Calendar",
      bg: "",
      //"rgba(0,128,0,0.1)",
      progressHighlight: "#8AD8C7",
      progressBg: "#D3FAF2",
      isCheckCard: true,
      comparisonPercentage: (() => {
        const now = /* @__PURE__ */ new Date();
        const startOfWeek = new Date(
          now.setDate(now.getDate() - now.getDay())
        );
        const startOfLastWeek = new Date(startOfWeek);
        startOfLastWeek.setDate(startOfLastWeek.getDate() - 7);
        const appointmentsThisWeek = appointments.filter(
          (a) => {
            var _a;
            return new Date(((_a = a.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfWeek;
          }
        ).length;
        const appointmentsLastWeek = appointments.filter(
          (a) => {
            var _a, _b;
            return new Date(((_a = a.meta) == null ? void 0 : _a.lastUpdated) || "") >= startOfLastWeek && new Date(((_b = a.meta) == null ? void 0 : _b.lastUpdated) || "") < startOfWeek;
          }
        ).length;
        if (appointmentsLastWeek === 0)
          return 90;
        if (appointmentsThisWeek === 0)
          return -14;
        return Math.round(
          (appointmentsThisWeek - appointmentsLastWeek) / appointmentsLastWeek * 100
        );
      })(),
      featuredValues: [
        appointments.filter(
          (a) => a.start && new Date(a.start).toDateString() === (/* @__PURE__ */ new Date()).toDateString()
        ).length + " today",
        appointments.filter(
          (a) => a.start && new Date(a.start) > /* @__PURE__ */ new Date() && new Date(a.start) <= new Date(
            (/* @__PURE__ */ new Date()).setDate((/* @__PURE__ */ new Date()).getDate() + 7)
          )
        ).length + " next week"
      ]
    }
    // {
    // 	ImageSrc: "/assets/images/dashboard-assets/square-plus.svg",
    // 	text: "Clinical Trials",
    // 	subText: "Clinical Trials",
    // 	counts: researchStudies.length,
    // 	routeTo: "/Trials",
    // 	bg: "rgba(255,255,0,0.1)",
    // 	progressHighlight: "#E1CEA8",
    // 	progressBg: "#F4E9D3",
    // 	isCheckCard: true,
    // },
    // {
    // 	ImageSrc: "/assets/images/dashboard-assets/procedures.svg",
    // 	text: "Procedures",
    // 	subText: "Procedures",
    // 	counts: procedures.length,
    // 	routeTo: "#",
    // 	bg: "rgba(128,128,128,0.1)",
    // 	progressHighlight: "#ADADAD",
    // 	progressBg: "#DBDBDB",
    // 	isCheckCard: false,
    // },
  ];
  const fetchData = reactExports.useCallback(
    (resourceType) => {
      if (!readyToFetch)
        return;
      switch (resourceType) {
        case "Patient":
          medplum2.searchResources("Patient", { _count: 30 }).then((data) => setPatients(data)).catch(
            (err) => console.error(
              "Error while fetching data of all patients: ",
              err
            )
          );
          break;
        case "Task":
          medplum2.searchResources("Task", { _count: 10 }).then((data) => setTasks(data)).catch(
            (err) => console.error(
              "Error while fetching data of all patients: ",
              err
            )
          );
          break;
        case "Practitioner":
          medplum2.searchResources("Practitioner", {
            _count: 30
          }).then((data) => setPractitioners(data)).catch(
            (err) => console.error(
              "Error while fetching data of all practitioners: ",
              err
            )
          );
          break;
        case "Appointment":
          medplum2.searchResources("Appointment", {
            _count: 10
          }).then((data) => setAppointments(data)).catch(
            (err) => console.error(
              "Error while fetching appointments: ",
              err
            )
          );
          break;
        case "Group":
          medplum2.searchResources("Group", {
            _count: 20,
            _fields: "_lastUpdated"
          }).then((data) => setGroups(data)).catch(
            (err) => console.error("Error while fetching groups: ", err)
          );
          break;
        case "Consent":
          medplum2.searchResources("Consent", {
            _count: 30,
            _fields: "_lastUpdated"
          }).then((data) => setConsents(data)).catch(
            (err) => console.error(
              "Error while fetching consents: ",
              err
            )
          );
          break;
        case "PractitionerRole":
          medplum2.searchResources("PractitionerRole", {
            _summary: "count",
            specialty: "Cardiology"
          }).then((data) => {
            setCardiologist(data.bundle.total ?? 0);
          }).catch(
            (err) => console.error(
              "Error while fetching consents: ",
              err
            )
          );
          medplum2.searchResources("PractitionerRole", {
            _summary: "count",
            specialty: "Dermatology"
          }).then((data) => {
            setDermatology(data.bundle.total ?? 0);
          }).catch(
            (err) => console.error(
              "Error while fetching consents: ",
              err
            )
          );
          break;
      }
    },
    [medplum2, readyToFetch]
  );
  reactExports.useEffect(() => {
    fetchData("Patient");
    fetchData("Practitioner");
    fetchData("Consent");
    fetchData("Appointment");
    fetchData("Task");
    fetchData("PractitionerRole");
  }, [fetchData]);
  const taskTableData = [
    {
      columnName: "Patient",
      columnValues: tasks.map((task) => {
        var _a, _b;
        const patient = patients.find(
          (p2) => {
            var _a2, _b2;
            return ((_b2 = (_a2 = task.for) == null ? void 0 : _a2.reference) == null ? void 0 : _b2.split("/")[1]) === p2.id;
          }
        );
        const fullName = patient ? getName(patient) : "-";
        const lastName = ((_b = (_a = patient == null ? void 0 : patient.name) == null ? void 0 : _a[0]) == null ? void 0 : _b.family) || "-";
        return {
          id: task.id,
          value: fullName,
          sortValue: lastName,
          searchValue: fullName
        };
      }),
      sortable: true
    },
    {
      columnName: "Description",
      columnValues: tasks.map((task) => {
        const description = (task == null ? void 0 : task.description) || "-";
        return {
          id: task.id,
          value: description
        };
      }),
      sortable: false
    },
    {
      columnName: "Created At",
      columnValues: tasks.map((task) => {
        const date = (task == null ? void 0 : task.authoredOn) || "-";
        return {
          id: task.id,
          value: Tl(date),
          sortValue: date
        };
      }),
      sortable: true
    },
    {
      columnName: "Created By",
      columnValues: tasks.map((task) => {
        var _a, _b;
        const practitioner = practitioners.find(
          (pr) => {
            var _a2, _b2;
            return ((_b2 = (_a2 = task.owner) == null ? void 0 : _a2.reference) == null ? void 0 : _b2.split("/")[1]) === pr.id;
          }
        );
        const fullName = practitioner ? getName(practitioner) : "-";
        const lastName = ((_b = (_a = practitioner == null ? void 0 : practitioner.name) == null ? void 0 : _a[0]) == null ? void 0 : _b.family) || "-";
        return {
          id: task.id,
          value: fullName,
          sortValue: lastName,
          searchValue: fullName
        };
      }),
      sortable: true
    }
  ];
  const appointmentTableData = [
    {
      columnName: "Patient Name",
      columnValues: appointments.map((a) => ({
        id: a.id,
        value: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { fw: 500, children: getName(
          getPatientFromAppointment(a, patients) || {}
        ) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
          lineNumber: 443,
          columnNumber: 21
        }, this),
        sortValue: getName(
          getPatientFromAppointment(a, patients) || {}
        )
      })),
      sortable: true
    },
    {
      columnName: "Date",
      columnValues: appointments.map((a) => ({
        id: a.id,
        value: wr(a.start, void 0, {
          dateStyle: "short",
          timeStyle: "short"
        }),
        sortValue: a.start
      })),
      sortable: true
    }
  ];
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Card, { mt: 10, mx: 10, children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { py: 20, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Grid, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(FeaturedCards, { cardsData }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
      lineNumber: 474,
      columnNumber: 21
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
      lineNumber: 473,
      columnNumber: 17
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
      lineNumber: 472,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { align: "flex-start", sx: { width: "100%" }, children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        TableWithControlsDashBoard,
        {
          tableData: appointmentTableData,
          onRowClick: () => {
            navigate("/Calendar");
          },
          titleLabel: "Upcoming Appointments",
          resourceType: "Appointment",
          title: "Appointments",
          withCheckboxes: false,
          showTop: false
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
          lineNumber: 479,
          columnNumber: 21
        },
        this
      ) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
        lineNumber: 478,
        columnNumber: 17
      }, this),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Box, { sx: { width: "61%" }, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        TableWithControlsDashBoard,
        {
          tableData: taskTableData,
          onRowClick: () => {
            navigate("/Task");
          },
          titleLabel: "Tasks",
          resourceType: "Task",
          title: "Task",
          withCheckboxes: false,
          showTop: false
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
          lineNumber: 492,
          columnNumber: 21
        },
        this
      ) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
        lineNumber: 491,
        columnNumber: 17
      }, this)
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
      lineNumber: 477,
      columnNumber: 13
    }, this)
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/dashboard/Dashboard.tsx",
    lineNumber: 471,
    columnNumber: 9
  }, this);
}
const main = "_main_y9khr_1";
const classes$2 = {
  main
};
const logoButton = "_logoButton_1wbyg_1";
const user = "_user_1wbyg_11";
const userName = "_userName_1wbyg_21";
const userActive = "_userActive_1wbyg_31";
const classes$1 = {
  logoButton,
  user,
  userName,
  userActive
};
function HeaderDropdown(props) {
  var _a, _b, _c;
  const context = P();
  const { medplum: medplum2, profile, navigate } = context;
  const logins = medplum2.getLogins();
  const { colorScheme, setColorScheme } = useMantineColorScheme();
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(jsxDevRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { align: "center", p: "xl", children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        ResourceAvatar,
        {
          size: "xl",
          radius: 100,
          value: context.profile
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 36,
          columnNumber: 17
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        HumanNameDisplay,
        {
          value: (_b = (_a = context.profile) == null ? void 0 : _a.name) == null ? void 0 : _b[0]
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 41,
          columnNumber: 17
        },
        this
      ),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { c: "dimmed", size: "xs", children: (_c = medplum2.getActiveLogin()) == null ? void 0 : _c.project.display }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
        lineNumber: 44,
        columnNumber: 17
      }, this)
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 35,
      columnNumber: 13
    }, this),
    logins.length > 1 && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Divider, {}, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 48,
      columnNumber: 35
    }, this),
    logins.map(
      (login) => login.profile.reference !== de(
        context.profile
      ) && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Menu.Item,
        {
          onClick: () => {
            medplum2.setActiveLogin(login).then(() => window.location.reload()).catch(console.log);
          },
          children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { children: [
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Avatar, { radius: "xl" }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
              lineNumber: 65,
              columnNumber: 33
            }, this),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("div", { style: { flex: 1 }, children: [
              /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { size: "sm", fw: 500, children: login.profile.display }, void 0, false, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
                lineNumber: 67,
                columnNumber: 37
              }, this),
              /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { c: "dimmed", size: "xs", children: login.project.display }, void 0, false, {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
                lineNumber: 70,
                columnNumber: 37
              }, this)
            ] }, void 0, true, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
              lineNumber: 66,
              columnNumber: 33
            }, this)
          ] }, void 0, true, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
            lineNumber: 64,
            columnNumber: 29
          }, this)
        },
        login.profile.reference,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 55,
          columnNumber: 25
        },
        this
      )
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Divider, {}, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 78,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { justify: "center", children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      SegmentedControl,
      {
        size: "xs",
        value: colorScheme,
        onChange: (newValue) => setColorScheme(newValue),
        data: [
          { label: "Light", value: "light" },
          { label: "Dark", value: "dark" },
          { label: "Auto", value: "auto" }
        ]
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
        lineNumber: 80,
        columnNumber: 17
      },
      this
    ) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 79,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Divider, {}, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 93,
      columnNumber: 13
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Menu.Item,
      {
        leftSection: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconSwitchHorizontal, { size: 14, stroke: 1.5 }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 95,
          columnNumber: 30
        }, this),
        onClick: () => navigate("/signin"),
        children: "Add another account"
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
        lineNumber: 94,
        columnNumber: 13
      },
      this
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Menu.Item,
      {
        leftSection: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconSettings, { size: 14, stroke: 1.5 }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 101,
          columnNumber: 30
        }, this),
        onClick: () => navigate(
          `/${de(profile)}`
        ),
        children: "Account settings"
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
        lineNumber: 100,
        columnNumber: 13
      },
      this
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      Menu.Item,
      {
        leftSection: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconLogout, { size: 14, stroke: 1.5 }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
          lineNumber: 111,
          columnNumber: 30
        }, this),
        onClick: async () => {
          await medplum2.signOut();
          navigate("/signin");
        },
        children: "Sign out"
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
        lineNumber: 110,
        columnNumber: 13
      },
      this
    ),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { size: "xs", c: "dimmed", ta: "center", children: props.version }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
      lineNumber: 119,
      columnNumber: 13
    }, this)
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderDropdown.tsx",
    lineNumber: 34,
    columnNumber: 9
  }, this);
}
const searchInput = "_searchInput_ygdnk_1";
const classes = {
  searchInput
};
function toOption(resource) {
  return {
    value: resource.id,
    label: Co(resource),
    resource
  };
}
function HeaderSearchInput(props) {
  const navigate = fe();
  const medplum2 = b();
  const loadData = reactExports.useCallback(
    async (input, signal) => {
      const query = buildGraphQLQuery(input);
      const options = { signal };
      const response = await medplum2.graphql(
        query,
        void 0,
        void 0,
        options
      );
      return getResourcesFromResponse(response, input);
    },
    [medplum2]
  );
  const handleSelect = reactExports.useCallback(
    (item) => {
      if (item.length > 0) {
        navigate(`/${de(item[0])}`);
      }
    },
    [navigate]
  );
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    AsyncAutocomplete,
    {
      size: "sm",
      radius: "md",
      className: classes.searchInput,
      leftSection: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconSearch, { size: 16 }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
        lineNumber: 79,
        columnNumber: 26
      }, this),
      placeholder: "Search",
      itemComponent: ItemComponent,
      toOption,
      onChange: handleSelect,
      loadOptions: loadData,
      maxValues: 0,
      clearable: false
    },
    `${props.pathname}?${props.searchParams}`,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
      lineNumber: 74,
      columnNumber: 9
    },
    this
  );
}
const ItemComponent = reactExports.forwardRef(
  ({
    resource,
    active: _active,
    ...others
  }, ref) => {
    var _a;
    let helpText = void 0;
    if (resource.resourceType === "Patient") {
      helpText = resource.birthDate;
    } else if (resource.resourceType === "ServiceRequest") {
      helpText = (_a = resource.subject) == null ? void 0 : _a.display;
    }
    return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("div", { ref, ...others, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { wrap: "nowrap", children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ResourceAvatar, { value: resource }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
        lineNumber: 114,
        columnNumber: 21
      }, globalThis),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("div", { children: [
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { children: Co(resource) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
          lineNumber: 116,
          columnNumber: 25
        }, globalThis),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Text$1, { size: "xs", c: "dimmed", children: helpText }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
          lineNumber: 117,
          columnNumber: 25
        }, globalThis)
      ] }, void 0, true, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
        lineNumber: 115,
        columnNumber: 21
      }, globalThis)
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
      lineNumber: 113,
      columnNumber: 17
    }, globalThis) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/HeaderSearchInput.tsx",
      lineNumber: 112,
      columnNumber: 13
    }, globalThis);
  }
);
function buildGraphQLQuery(input) {
  const escaped = JSON.stringify(input);
  if (Xu(input)) {
    return `{
      Patients1: PatientList(_id: ${escaped}, _count: 1) {
        resourceType
        id
        identifier {
          system
          value
        }
        name {
          given
          family
        }
        birthDate
      }
      ServiceRequestList(_id: ${escaped}, _count: 1) {
        resourceType
        id
        identifier {
          system
          value
        }
        subject {
          display
        }
      }
    }`.replace(/\s+/g, " ");
  }
  return `{
    Patients1: PatientList(name: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      name {
        given
        family
      }
      birthDate
    }
    Patients2: PatientList(identifier: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      name {
        given
        family
      }
      birthDate
    }
    ServiceRequestList(identifier: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      subject {
        display
      }
    }
  }`.replace(/\s+/g, " ");
}
function getResourcesFromResponse(response, query) {
  const resources = [];
  if (response.data.Patients1) {
    resources.push(...response.data.Patients1);
  }
  if (response.data.Patients2) {
    resources.push(...response.data.Patients2);
  }
  if (response.data.ServiceRequestList) {
    resources.push(...response.data.ServiceRequestList);
  }
  return sortByRelevance(dedupeResources(resources), query).slice(0, 5);
}
function dedupeResources(resources) {
  const ids = /* @__PURE__ */ new Set();
  const result = [];
  for (const resource of resources) {
    if (!ids.has(resource.id)) {
      ids.add(resource.id);
      result.push(resource);
    }
  }
  return result;
}
function sortByRelevance(resources, query) {
  return resources.sort((a, b2) => {
    return getResourceScore(b2, query) - getResourceScore(a, query);
  });
}
function getResourceScore(resource, query) {
  let bestScore = 0;
  if (resource.identifier) {
    for (const identifier2 of resource.identifier) {
      bestScore = Math.max(
        bestScore,
        getStringScore(identifier2.value, query)
      );
    }
  }
  if (resource.resourceType === "Patient" && resource.name) {
    for (const name of resource.name) {
      bestScore = Math.max(
        bestScore,
        getStringScore(qe(name), query)
      );
    }
  }
  return bestScore;
}
function getStringScore(str, query) {
  if (!str) {
    return 0;
  }
  const index2 = str.toLowerCase().indexOf(query.toLowerCase());
  if (index2 < 0) {
    return 0;
  }
  return 100 - index2;
}
function Header(props) {
  var _a;
  const profile = me();
  const [userMenuOpened, setUserMenuOpened] = reactExports.useState(false);
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(AppShell$1.Header, { p: 8, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { justify: "space-between", children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { gap: "xs", children: [
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        UnstyledButton,
        {
          className: classes$1.logoButton,
          onClick: props.navbarToggle,
          children: props.logo
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
          lineNumber: 38,
          columnNumber: 21
        },
        this
      ),
      !props.headerSearchDisabled && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { ml: 210, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        HeaderSearchInput,
        {
          pathname: props.pathname,
          searchParams: props.searchParams
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
          lineNumber: 46,
          columnNumber: 29
        },
        this
      ) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
        lineNumber: 45,
        columnNumber: 25
      }, this)
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
      lineNumber: 37,
      columnNumber: 17
    }, this),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { gap: "lg", pr: "sm", children: [
      props.notifications,
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        Menu,
        {
          width: 260,
          shadow: "xl",
          position: "bottom-end",
          transitionProps: { transition: "pop-top-right" },
          opened: userMenuOpened,
          onClose: () => setUserMenuOpened(false),
          children: [
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Target, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
              UnstyledButton,
              {
                className: clsx$1(classes$1.user, {
                  [classes$1.userActive]: userMenuOpened
                }),
                onClick: () => setUserMenuOpened((o) => !o),
                children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { gap: 7, children: [
                  /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                    ResourceAvatar,
                    {
                      value: profile,
                      radius: "xl",
                      size: 24
                    },
                    void 0,
                    false,
                    {
                      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
                      lineNumber: 71,
                      columnNumber: 37
                    },
                    this
                  ),
                  /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                    Text$1,
                    {
                      size: "sm",
                      className: classes$1.userName,
                      children: qe(
                        (_a = profile == null ? void 0 : profile.name) == null ? void 0 : _a[0]
                      )
                    },
                    void 0,
                    false,
                    {
                      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
                      lineNumber: 76,
                      columnNumber: 37
                    },
                    this
                  ),
                  /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconChevronDown, { size: 12, stroke: 1.5 }, void 0, false, {
                    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
                    lineNumber: 84,
                    columnNumber: 37
                  }, this)
                ] }, void 0, true, {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
                  lineNumber: 70,
                  columnNumber: 33
                }, this)
              },
              void 0,
              false,
              {
                fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
                lineNumber: 64,
                columnNumber: 29
              },
              this
            ) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
              lineNumber: 63,
              columnNumber: 25
            }, this),
            /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu.Dropdown, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(HeaderDropdown, { version: props.version }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
              lineNumber: 89,
              columnNumber: 29
            }, this) }, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
              lineNumber: 88,
              columnNumber: 25
            }, this)
          ]
        },
        void 0,
        true,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
          lineNumber: 55,
          columnNumber: 21
        },
        this
      )
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
      lineNumber: 53,
      columnNumber: 17
    }, this)
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
    lineNumber: 36,
    columnNumber: 13
  }, this) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Header.tsx",
    lineNumber: 35,
    columnNumber: 9
  }, this);
}
function BookmarkDialog(props) {
  const medplum2 = b();
  const config = medplum2.getUserConfiguration();
  function submitHandler(formData) {
    var _a, _b;
    const { menuname, bookmarkname: name } = formData;
    const target = `${props.pathname}?${props.searchParams.toString()}`;
    const newConfig = me$1(config);
    const menu = (_a = newConfig.menu) == null ? void 0 : _a.find(({ title }) => title === menuname);
    (_b = menu == null ? void 0 : menu.link) == null ? void 0 : _b.push({ name, target });
    medplum2.updateResource(newConfig).then((res) => {
      config.menu = res.menu;
      medplum2.dispatchEvent({ type: "change" });
      showNotification({ color: "green", message: "Success" });
      props.onOk();
    }).catch((err) => {
      showNotification({
        color: "red",
        message: Ce(err)
      });
    });
  }
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    Modal,
    {
      title: "Add Bookmark",
      closeButtonProps: { "aria-label": "Close" },
      opened: props.visible,
      onClose: props.onCancel,
      children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Form, { onSubmit: submitHandler, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Stack, { children: [
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(SelectMenu, { config }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
          lineNumber: 61,
          columnNumber: 21
        }, this),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
          TextInput,
          {
            label: "Bookmark Name",
            type: "text",
            name: "bookmarkname",
            placeholder: "Bookmark Name",
            withAsterisk: true
          },
          void 0,
          false,
          {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
            lineNumber: 62,
            columnNumber: 21
          },
          this
        ),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Group, { justify: "flex-end", children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Button, { mt: "sm", type: "submit", children: "OK" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
          lineNumber: 70,
          columnNumber: 25
        }, this) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
          lineNumber: 69,
          columnNumber: 21
        }, this)
      ] }, void 0, true, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
        lineNumber: 60,
        columnNumber: 17
      }, this) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
        lineNumber: 59,
        columnNumber: 13
      }, this)
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
      lineNumber: 53,
      columnNumber: 9
    },
    this
  );
}
function SelectMenu(props) {
  function userConfigToMenu(config) {
    var _a;
    return (_a = config == null ? void 0 : config.menu) == null ? void 0 : _a.map((menu) => menu.title);
  }
  const menus = userConfigToMenu(props.config);
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    NativeSelect,
    {
      name: "menuname",
      defaultValue: menus[0],
      label: "Select Menu Option",
      data: menus,
      withAsterisk: true
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/BookmarkDialog.tsx",
      lineNumber: 91,
      columnNumber: 9
    },
    this
  );
}
function ResourceTypeInput(props) {
  const [resourceType, setResourceType] = reactExports.useState(
    props.defaultValue
  );
  const onChange = props.onChange;
  const setResourceTypeWrapper = reactExports.useCallback(
    (newResourceType) => {
      setResourceType(newResourceType);
      if (onChange) {
        onChange(newResourceType);
      }
    },
    [onChange]
  );
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    CodeInput,
    {
      disabled: props.disabled,
      "data-autofocus": props.autoFocus,
      "data-testid": props.testId,
      defaultValue: resourceType,
      onChange: setResourceTypeWrapper,
      name: props.name,
      placeholder: props.placeholder,
      binding: "https://medplum.com/fhir/ValueSet/resource-types",
      creatable: false,
      maxValues: props.maxValues ?? 1,
      clearable: false,
      withHelpText: false
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/ResourceTypeInput.tsx",
      lineNumber: 34,
      columnNumber: 9
    },
    this
  );
}
function Navbar(props) {
  var _a;
  const navigate = fe();
  const activeLink = getActiveLink(
    props.pathname,
    props.searchParams,
    props.menus
  );
  const [bookmarkDialogVisible, setBookmarkDialogVisible] = reactExports.useState(false);
  function onLinkClick(e, to) {
    e.stopPropagation();
    e.preventDefault();
    navigate(to);
    if (window.innerWidth < 768) {
      props.closeNavbar();
    }
  }
  function navigateResourceType(resourceType) {
    if (resourceType) {
      navigate(`/${resourceType}`);
    }
  }
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(jsxDevRuntimeExports.Fragment, { children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(AppShell$1.Navbar, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ScrollArea, { p: "xs", children: [
      !props.resourceTypeSearchDisabled && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(AppShell$1.Section, { mb: "sm", children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        ResourceTypeInput,
        {
          name: "resourceType",
          placeholder: "Resource Type",
          maxValues: 0,
          onChange: (newValue) => navigateResourceType(newValue)
        },
        window.location.pathname,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
          lineNumber: 67,
          columnNumber: 29
        },
        this
      ) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
        lineNumber: 66,
        columnNumber: 25
      }, this),
      /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(AppShell$1.Section, { grow: true, children: [
        (_a = props.menus) == null ? void 0 : _a.map((menu) => {
          var _a2;
          return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(reactExports.Fragment, { children: (_a2 = menu.links) == null ? void 0 : _a2.map((link) => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
            NavbarLink,
            {
              to: link.href,
              active: link.href === (activeLink == null ? void 0 : activeLink.href),
              onClick: (e) => onLinkClick(e, link.href),
              children: [
                /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
                  NavLinkIcon,
                  {
                    to: link.href,
                    icon: link.icon
                  },
                  void 0,
                  false,
                  {
                    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
                    lineNumber: 90,
                    columnNumber: 41
                  },
                  this
                ),
                /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("span", { children: link.label }, void 0, false, {
                  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
                  lineNumber: 94,
                  columnNumber: 41
                }, this)
              ]
            },
            link.href,
            true,
            {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
              lineNumber: 82,
              columnNumber: 37
            },
            this
          )) }, `menu-${menu.title}`, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
            lineNumber: 80,
            columnNumber: 29
          }, this);
        }),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Menu$1, { type: "general" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
          lineNumber: 99,
          columnNumber: 25
        }, this)
      ] }, void 0, true, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
        lineNumber: 78,
        columnNumber: 21
      }, this)
    ] }, void 0, true, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
      lineNumber: 64,
      columnNumber: 17
    }, this) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
      lineNumber: 63,
      columnNumber: 13
    }, this),
    props.pathname && props.searchParams && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      BookmarkDialog,
      {
        pathname: props.pathname,
        searchParams: props.searchParams,
        visible: bookmarkDialogVisible,
        onOk: () => setBookmarkDialogVisible(false),
        onCancel: () => setBookmarkDialogVisible(false)
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
        lineNumber: 115,
        columnNumber: 17
      },
      this
    )
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
    lineNumber: 62,
    columnNumber: 9
  }, this);
}
function NavbarLink(props) {
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    MedplumLink,
    {
      onClick: props.onClick,
      to: props.to,
      sx: {
        display: "flex",
        alignItems: "center",
        textDecoration: "none",
        fontSize: "var(--mantine-font-size-sm)",
        color: "light-dark(var(--mantine-color-gray-7), var(--mantine-color-dark-1))",
        padding: "8px 12px",
        borderRadius: "var(--mantine-radius-sm)",
        fontWeight: 500,
        "&:hover": {
          backgroundColor: "light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-6))",
          color: "light-dark(var(--mantine-color-black), var(--mantine-color-white))",
          textDecoration: "none",
          "& svg": {
            color: "light-dark(var(--mantine-color-black), var(--mantine-color-white))"
          }
        },
        "& svg": {
          color: "light-dark(var(--mantine-color-gray-6), var(--mantine-color-dark-2))",
          marginRight: "var(--mantine-spacing-sm)",
          strokeWidth: 1.5,
          width: 18,
          height: 18
        },
        ...props.active && {
          color: "var(--mantine-primary-color-filled)",
          backgroundColor: "light-dark(var(--mantine-primary-color-light), var(--mantine-primary-color-dark))",
          "&:hover": {
            color: "var(--mantine-primary-color-filled-hover)",
            backgroundColor: "light-dark(var(--mantine-primary-color-light-hover), var(--mantine-primary-color-dark-hover))",
            "& svg": {
              color: "var(--mantine-color-blue-light-color)"
            }
          },
          "& svg": {
            color: "var(--mantine-color-blue-light-color)"
          }
        }
      },
      children: props.children
    },
    void 0,
    false,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
      lineNumber: 136,
      columnNumber: 9
    },
    this
  );
}
function NavLinkIcon(props) {
  if (props.icon) {
    return props.icon;
  }
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Space, { w: 30 }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/Navbar.tsx",
    lineNumber: 196,
    columnNumber: 12
  }, this);
}
function getActiveLink(currentPathname, currentSearchParams, menus) {
  if (!currentPathname || !currentSearchParams || !menus) {
    return void 0;
  }
  let bestLink = void 0;
  let bestScore = 0;
  for (const menu of menus) {
    if (menu.links) {
      for (const link of menu.links) {
        const score = getLinkScore(
          currentPathname,
          currentSearchParams,
          link.href
        );
        if (score > bestScore) {
          bestScore = score;
          bestLink = link;
        }
      }
    }
  }
  return bestLink;
}
function getLinkScore(currentPathname, currentSearchParams, linkHref) {
  const linkUrl = new URL(linkHref, "https://example.com");
  if (currentPathname !== linkUrl.pathname) {
    return 0;
  }
  const ignoredParams = ["_count", "_offset"];
  for (const [key, value] of linkUrl.searchParams.entries()) {
    if (ignoredParams.includes(key)) {
      continue;
    }
    if (currentSearchParams.get(key) !== value) {
      return 0;
    }
  }
  let count2 = 1;
  for (const [key, value] of currentSearchParams.entries()) {
    if (ignoredParams.includes(key)) {
      continue;
    }
    if (linkUrl.searchParams.get(key) === value) {
      count2++;
    }
  }
  return count2;
}
function AppShell(props) {
  const [navbarOpen, setNavbarOpen] = reactExports.useState(true);
  const medplum2 = b();
  const profile = me();
  reactExports.useEffect(() => {
    function eventListener() {
      showNotification({
        color: "red",
        message: "No connection to server",
        autoClose: false
      });
    }
    medplum2.addEventListener("offline", eventListener);
    return () => medplum2.removeEventListener("offline", eventListener);
  }, [medplum2]);
  function setNavbarOpenWrapper(open) {
    localStorage["navbarOpen"] = open.toString();
    setNavbarOpen(open);
  }
  function closeNavbar() {
    setNavbarOpenWrapper(false);
  }
  function toggleNavbar() {
    setNavbarOpenWrapper(!navbarOpen);
  }
  if (medplum2.isLoading()) {
    return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Loading, {}, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
      lineNumber: 56,
      columnNumber: 16
    }, this);
  }
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    AppShell$1,
    {
      header: { height: 60 },
      navbar: {
        width: 250,
        breakpoint: "sm",
        collapsed: {
          desktop: !profile || !navbarOpen,
          mobile: !profile || !navbarOpen
        }
      },
      padding: 0,
      children: [
        profile && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
          Header,
          {
            pathname: props.pathname,
            searchParams: props.searchParams,
            headerSearchDisabled: props.headerSearchDisabled,
            logo: props.logo,
            version: props.version,
            navbarToggle: toggleNavbar,
            notifications: props.notifications
          },
          void 0,
          false,
          {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
            lineNumber: 73,
            columnNumber: 17
          },
          this
        ),
        profile && navbarOpen ? /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
          Navbar,
          {
            pathname: props.pathname,
            searchParams: props.searchParams,
            menus: props.menus,
            closeNavbar,
            displayAddBookmark: props.displayAddBookmark,
            resourceTypeSearchDisabled: props.resourceTypeSearchDisabled
          },
          void 0,
          false,
          {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
            lineNumber: 84,
            columnNumber: 17
          },
          this
        ) : void 0,
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(AppShell$1.Main, { className: classes$2.main, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ErrorBoundary2, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(reactExports.Suspense, { fallback: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Loading, {}, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
          lineNumber: 97,
          columnNumber: 41
        }, this), children: props.children }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
          lineNumber: 97,
          columnNumber: 21
        }, this) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
          lineNumber: 96,
          columnNumber: 17
        }, this) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
          lineNumber: 95,
          columnNumber: 13
        }, this)
      ]
    },
    void 0,
    true,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/appshell/AppShell.tsx",
      lineNumber: 60,
      columnNumber: 9
    },
    this
  );
}
function App({ children }) {
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    AppShell,
    {
      logo: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(DaikoLogo, { width: 50 }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/App.tsx",
        lineNumber: 21,
        columnNumber: 19
      }, this),
      resourceTypeSearchDisabled: true,
      pathname: location.pathname,
      menus: [
        {
          links: [
            { icon: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(IconHome, {}, void 0, false, {
              fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/App.tsx",
              lineNumber: 27,
              columnNumber: 33
            }, this), label: "Dashboard", href: "/" }
          ]
        }
      ],
      children: [
        location.pathname === "/" && /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Dashboard, {}, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/App.tsx",
          lineNumber: 32,
          columnNumber: 43
        }, this),
        children
      ]
    },
    void 0,
    true,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/App.tsx",
      lineNumber: 20,
      columnNumber: 9
    },
    this
  );
}
const EmotionCacheContext = reactExports.createContext(null);
function useEmotionCache() {
  const cache = reactExports.useContext(EmotionCacheContext);
  if (cache === null) {
    throw new Error(
      "Emotion cache is not available in context, make sure that you have MantineEmotionProvider in the component tree"
    );
  }
  return cache;
}
const MantineEmotionProvider = withEmotionCache(
  ({ children, cache }, ctx) => /* @__PURE__ */ jsxRuntimeExports.jsx(EmotionCacheContext.Provider, { value: cache || ctx, children })
);
function useGuaranteedMemo(fn, deps) {
  const ref = reactExports.useRef(null);
  if (!ref.current || deps.length !== ref.current.prevDeps.length || ref.current.prevDeps.map((v, i) => v === deps[i]).indexOf(false) >= 0) {
    ref.current = {
      v: fn(),
      prevDeps: [...deps]
    };
  }
  return ref.current.v;
}
const refPropertyName = "ref";
function getRef(args) {
  let ref;
  if (args.length !== 1) {
    return { args, ref };
  }
  const [arg] = args;
  if (!(arg instanceof Object)) {
    return { args, ref };
  }
  if (!(refPropertyName in arg)) {
    return { args, ref };
  }
  ref = arg[refPropertyName];
  const argCopy = { ...arg };
  delete argCopy[refPropertyName];
  return { args: [argCopy], ref };
}
const { cssFactory } = /* @__PURE__ */ (() => {
  function merge(registered, css, className) {
    const registeredStyles = [];
    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css(registeredStyles);
  }
  function _cssFactory(params) {
    const { cache } = params;
    const css = (...styles2) => {
      const { ref, args } = getRef(styles2);
      const serialized = serializeStyles(args, cache.registered);
      insertStyles(cache, serialized, false);
      return `${cache.key}-${serialized.name}${ref === void 0 ? "" : ` ${ref}`}`;
    };
    const cx = (...args) => merge(cache.registered, css, clsx$1(args));
    return { css, cx };
  }
  return { cssFactory: _cssFactory };
})();
function useCss() {
  const cache = useEmotionCache();
  return useGuaranteedMemo(() => cssFactory({ cache }), [cache]);
}
function getStylesRef(refName) {
  return `___ref-${refName || ""}`;
}
function getBreakpointValue(theme2, breakpoint) {
  return breakpoint in theme2.breakpoints && typeof breakpoint !== "number" ? px(theme2.breakpoints[breakpoint]) : px(breakpoint);
}
const getHelpers = (theme2) => ({
  light: '[data-mantine-color-scheme="light"] &',
  dark: '[data-mantine-color-scheme="dark"] &',
  rtl: '[dir="rtl"] &',
  ltr: '[dir="ltr"] &',
  notRtl: '[dir="ltr"] &',
  notLtr: '[dir="rtl"] &',
  ref: getStylesRef,
  smallerThan: (breakpoint) => `@media (max-width: ${em(getBreakpointValue(theme2, breakpoint) - 0.1)})`,
  largerThan: (breakpoint) => `@media (min-width: ${em(getBreakpointValue(theme2, breakpoint))})`
});
function sxTransform() {
  const theme2 = useMantineTheme();
  const { css } = useCss();
  return (sx) => {
    const parsedSx = typeof sx === "function" ? sx(theme2, getHelpers(theme2)) : sx;
    return !parsedSx ? "" : css(parsedSx);
  };
}
function stylesTransform() {
  const theme2 = useMantineTheme();
  const { css } = useCss();
  return (styles2, payload) => {
    if (!styles2) {
      return {};
    }
    const stylesObject = typeof styles2 === "function" ? styles2(theme2, payload.props, getHelpers(theme2)) : styles2;
    return Object.keys(stylesObject).reduce((acc, key) => {
      const value = stylesObject[key];
      const parsedValue = typeof value === "function" ? value(theme2) : value;
      return { ...acc, [key]: css(parsedValue) };
    }, {});
  };
}
const emotionTransform = {
  sx: sxTransform,
  styles: stylesTransform
};
var Subscribable = /* @__PURE__ */ function() {
  function Subscribable2() {
    this.listeners = [];
  }
  var _proto = Subscribable2.prototype;
  _proto.subscribe = function subscribe(listener) {
    var _this = this;
    var callback = listener || function() {
      return void 0;
    };
    this.listeners.push(callback);
    this.onSubscribe();
    return function() {
      _this.listeners = _this.listeners.filter(function(x) {
        return x !== callback;
      });
      _this.onUnsubscribe();
    };
  };
  _proto.hasListeners = function hasListeners() {
    return this.listeners.length > 0;
  };
  _proto.onSubscribe = function onSubscribe() {
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
  };
  return Subscribable2;
}();
var isServer = typeof window === "undefined";
function noop() {
  return void 0;
}
function functionalUpdate(updater, input) {
  return typeof updater === "function" ? updater(input) : updater;
}
function isValidTimeout(value) {
  return typeof value === "number" && value >= 0 && value !== Infinity;
}
function ensureQueryKeyArray(value) {
  return Array.isArray(value) ? value : [value];
}
function timeUntilStale(updatedAt, staleTime) {
  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
}
function parseQueryArgs(arg1, arg2, arg3) {
  if (!isQueryKey(arg1)) {
    return arg1;
  }
  if (typeof arg2 === "function") {
    return _extends({}, arg3, {
      queryKey: arg1,
      queryFn: arg2
    });
  }
  return _extends({}, arg2, {
    queryKey: arg1
  });
}
function parseFilterArgs(arg1, arg2, arg3) {
  return isQueryKey(arg1) ? [_extends({}, arg2, {
    queryKey: arg1
  }), arg3] : [arg1 || {}, arg2];
}
function mapQueryStatusFilter(active, inactive) {
  if (active === true && inactive === true || active == null && inactive == null) {
    return "all";
  } else if (active === false && inactive === false) {
    return "none";
  } else {
    var isActive = active != null ? active : !inactive;
    return isActive ? "active" : "inactive";
  }
}
function matchQuery(filters, query) {
  var active = filters.active, exact = filters.exact, fetching = filters.fetching, inactive = filters.inactive, predicate = filters.predicate, queryKey = filters.queryKey, stale = filters.stale;
  if (isQueryKey(queryKey)) {
    if (exact) {
      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
        return false;
      }
    } else if (!partialMatchKey(query.queryKey, queryKey)) {
      return false;
    }
  }
  var queryStatusFilter = mapQueryStatusFilter(active, inactive);
  if (queryStatusFilter === "none") {
    return false;
  } else if (queryStatusFilter !== "all") {
    var isActive = query.isActive();
    if (queryStatusFilter === "active" && !isActive) {
      return false;
    }
    if (queryStatusFilter === "inactive" && isActive) {
      return false;
    }
  }
  if (typeof stale === "boolean" && query.isStale() !== stale) {
    return false;
  }
  if (typeof fetching === "boolean" && query.isFetching() !== fetching) {
    return false;
  }
  if (predicate && !predicate(query)) {
    return false;
  }
  return true;
}
function matchMutation(filters, mutation) {
  var exact = filters.exact, fetching = filters.fetching, predicate = filters.predicate, mutationKey = filters.mutationKey;
  if (isQueryKey(mutationKey)) {
    if (!mutation.options.mutationKey) {
      return false;
    }
    if (exact) {
      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {
        return false;
      }
    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
      return false;
    }
  }
  if (typeof fetching === "boolean" && mutation.state.status === "loading" !== fetching) {
    return false;
  }
  if (predicate && !predicate(mutation)) {
    return false;
  }
  return true;
}
function hashQueryKeyByOptions(queryKey, options) {
  var hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;
  return hashFn(queryKey);
}
function hashQueryKey(queryKey) {
  var asArray = ensureQueryKeyArray(queryKey);
  return stableValueHash(asArray);
}
function stableValueHash(value) {
  return JSON.stringify(value, function(_, val) {
    return isPlainObject(val) ? Object.keys(val).sort().reduce(function(result, key) {
      result[key] = val[key];
      return result;
    }, {}) : val;
  });
}
function partialMatchKey(a, b2) {
  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b2));
}
function partialDeepEqual(a, b2) {
  if (a === b2) {
    return true;
  }
  if (typeof a !== typeof b2) {
    return false;
  }
  if (a && b2 && typeof a === "object" && typeof b2 === "object") {
    return !Object.keys(b2).some(function(key) {
      return !partialDeepEqual(a[key], b2[key]);
    });
  }
  return false;
}
function replaceEqualDeep(a, b2) {
  if (a === b2) {
    return a;
  }
  var array = Array.isArray(a) && Array.isArray(b2);
  if (array || isPlainObject(a) && isPlainObject(b2)) {
    var aSize = array ? a.length : Object.keys(a).length;
    var bItems = array ? b2 : Object.keys(b2);
    var bSize = bItems.length;
    var copy2 = array ? [] : {};
    var equalItems = 0;
    for (var i = 0; i < bSize; i++) {
      var key = array ? i : bItems[i];
      copy2[key] = replaceEqualDeep(a[key], b2[key]);
      if (copy2[key] === a[key]) {
        equalItems++;
      }
    }
    return aSize === bSize && equalItems === aSize ? a : copy2;
  }
  return b2;
}
function isPlainObject(o) {
  if (!hasObjectPrototype(o)) {
    return false;
  }
  var ctor = o.constructor;
  if (typeof ctor === "undefined") {
    return true;
  }
  var prot = ctor.prototype;
  if (!hasObjectPrototype(prot)) {
    return false;
  }
  if (!prot.hasOwnProperty("isPrototypeOf")) {
    return false;
  }
  return true;
}
function hasObjectPrototype(o) {
  return Object.prototype.toString.call(o) === "[object Object]";
}
function isQueryKey(value) {
  return typeof value === "string" || Array.isArray(value);
}
function sleep(timeout) {
  return new Promise(function(resolve) {
    setTimeout(resolve, timeout);
  });
}
function scheduleMicrotask(callback) {
  Promise.resolve().then(callback).catch(function(error2) {
    return setTimeout(function() {
      throw error2;
    });
  });
}
function getAbortController() {
  if (typeof AbortController === "function") {
    return new AbortController();
  }
}
var FocusManager = /* @__PURE__ */ function(_Subscribable) {
  _inheritsLoose(FocusManager2, _Subscribable);
  function FocusManager2() {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.setup = function(onFocus) {
      var _window;
      if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
        var listener = function listener2() {
          return onFocus();
        };
        window.addEventListener("visibilitychange", listener, false);
        window.addEventListener("focus", listener, false);
        return function() {
          window.removeEventListener("visibilitychange", listener);
          window.removeEventListener("focus", listener);
        };
      }
    };
    return _this;
  }
  var _proto = FocusManager2.prototype;
  _proto.onSubscribe = function onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  };
  _proto.setEventListener = function setEventListener(setup) {
    var _this$cleanup2, _this2 = this;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup(function(focused) {
      if (typeof focused === "boolean") {
        _this2.setFocused(focused);
      } else {
        _this2.onFocus();
      }
    });
  };
  _proto.setFocused = function setFocused(focused) {
    this.focused = focused;
    if (focused) {
      this.onFocus();
    }
  };
  _proto.onFocus = function onFocus() {
    this.listeners.forEach(function(listener) {
      listener();
    });
  };
  _proto.isFocused = function isFocused() {
    if (typeof this.focused === "boolean") {
      return this.focused;
    }
    if (typeof document === "undefined") {
      return true;
    }
    return [void 0, "visible", "prerender"].includes(document.visibilityState);
  };
  return FocusManager2;
}(Subscribable);
var focusManager = new FocusManager();
var OnlineManager = /* @__PURE__ */ function(_Subscribable) {
  _inheritsLoose(OnlineManager2, _Subscribable);
  function OnlineManager2() {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.setup = function(onOnline) {
      var _window;
      if (!isServer && ((_window = window) == null ? void 0 : _window.addEventListener)) {
        var listener = function listener2() {
          return onOnline();
        };
        window.addEventListener("online", listener, false);
        window.addEventListener("offline", listener, false);
        return function() {
          window.removeEventListener("online", listener);
          window.removeEventListener("offline", listener);
        };
      }
    };
    return _this;
  }
  var _proto = OnlineManager2.prototype;
  _proto.onSubscribe = function onSubscribe() {
    if (!this.cleanup) {
      this.setEventListener(this.setup);
    }
  };
  _proto.onUnsubscribe = function onUnsubscribe() {
    if (!this.hasListeners()) {
      var _this$cleanup;
      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);
      this.cleanup = void 0;
    }
  };
  _proto.setEventListener = function setEventListener(setup) {
    var _this$cleanup2, _this2 = this;
    this.setup = setup;
    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);
    this.cleanup = setup(function(online) {
      if (typeof online === "boolean") {
        _this2.setOnline(online);
      } else {
        _this2.onOnline();
      }
    });
  };
  _proto.setOnline = function setOnline(online) {
    this.online = online;
    if (online) {
      this.onOnline();
    }
  };
  _proto.onOnline = function onOnline() {
    this.listeners.forEach(function(listener) {
      listener();
    });
  };
  _proto.isOnline = function isOnline() {
    if (typeof this.online === "boolean") {
      return this.online;
    }
    if (typeof navigator === "undefined" || typeof navigator.onLine === "undefined") {
      return true;
    }
    return navigator.onLine;
  };
  return OnlineManager2;
}(Subscribable);
var onlineManager = new OnlineManager();
function defaultRetryDelay(failureCount) {
  return Math.min(1e3 * Math.pow(2, failureCount), 3e4);
}
function isCancelable(value) {
  return typeof (value == null ? void 0 : value.cancel) === "function";
}
var CancelledError = function CancelledError2(options) {
  this.revert = options == null ? void 0 : options.revert;
  this.silent = options == null ? void 0 : options.silent;
};
function isCancelledError(value) {
  return value instanceof CancelledError;
}
var Retryer = function Retryer2(config) {
  var _this = this;
  var cancelRetry = false;
  var cancelFn;
  var continueFn;
  var promiseResolve;
  var promiseReject;
  this.abort = config.abort;
  this.cancel = function(cancelOptions) {
    return cancelFn == null ? void 0 : cancelFn(cancelOptions);
  };
  this.cancelRetry = function() {
    cancelRetry = true;
  };
  this.continueRetry = function() {
    cancelRetry = false;
  };
  this.continue = function() {
    return continueFn == null ? void 0 : continueFn();
  };
  this.failureCount = 0;
  this.isPaused = false;
  this.isResolved = false;
  this.isTransportCancelable = false;
  this.promise = new Promise(function(outerResolve, outerReject) {
    promiseResolve = outerResolve;
    promiseReject = outerReject;
  });
  var resolve = function resolve2(value) {
    if (!_this.isResolved) {
      _this.isResolved = true;
      config.onSuccess == null ? void 0 : config.onSuccess(value);
      continueFn == null ? void 0 : continueFn();
      promiseResolve(value);
    }
  };
  var reject = function reject2(value) {
    if (!_this.isResolved) {
      _this.isResolved = true;
      config.onError == null ? void 0 : config.onError(value);
      continueFn == null ? void 0 : continueFn();
      promiseReject(value);
    }
  };
  var pause = function pause2() {
    return new Promise(function(continueResolve) {
      continueFn = continueResolve;
      _this.isPaused = true;
      config.onPause == null ? void 0 : config.onPause();
    }).then(function() {
      continueFn = void 0;
      _this.isPaused = false;
      config.onContinue == null ? void 0 : config.onContinue();
    });
  };
  var run = function run2() {
    if (_this.isResolved) {
      return;
    }
    var promiseOrValue;
    try {
      promiseOrValue = config.fn();
    } catch (error2) {
      promiseOrValue = Promise.reject(error2);
    }
    cancelFn = function cancelFn2(cancelOptions) {
      if (!_this.isResolved) {
        reject(new CancelledError(cancelOptions));
        _this.abort == null ? void 0 : _this.abort();
        if (isCancelable(promiseOrValue)) {
          try {
            promiseOrValue.cancel();
          } catch (_unused) {
          }
        }
      }
    };
    _this.isTransportCancelable = isCancelable(promiseOrValue);
    Promise.resolve(promiseOrValue).then(resolve).catch(function(error2) {
      var _config$retry, _config$retryDelay;
      if (_this.isResolved) {
        return;
      }
      var retry = (_config$retry = config.retry) != null ? _config$retry : 3;
      var retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;
      var delay = typeof retryDelay === "function" ? retryDelay(_this.failureCount, error2) : retryDelay;
      var shouldRetry = retry === true || typeof retry === "number" && _this.failureCount < retry || typeof retry === "function" && retry(_this.failureCount, error2);
      if (cancelRetry || !shouldRetry) {
        reject(error2);
        return;
      }
      _this.failureCount++;
      config.onFail == null ? void 0 : config.onFail(_this.failureCount, error2);
      sleep(delay).then(function() {
        if (!focusManager.isFocused() || !onlineManager.isOnline()) {
          return pause();
        }
      }).then(function() {
        if (cancelRetry) {
          reject(error2);
        } else {
          run2();
        }
      });
    });
  };
  run();
};
var NotifyManager = /* @__PURE__ */ function() {
  function NotifyManager2() {
    this.queue = [];
    this.transactions = 0;
    this.notifyFn = function(callback) {
      callback();
    };
    this.batchNotifyFn = function(callback) {
      callback();
    };
  }
  var _proto = NotifyManager2.prototype;
  _proto.batch = function batch(callback) {
    var result;
    this.transactions++;
    try {
      result = callback();
    } finally {
      this.transactions--;
      if (!this.transactions) {
        this.flush();
      }
    }
    return result;
  };
  _proto.schedule = function schedule(callback) {
    var _this = this;
    if (this.transactions) {
      this.queue.push(callback);
    } else {
      scheduleMicrotask(function() {
        _this.notifyFn(callback);
      });
    }
  };
  _proto.batchCalls = function batchCalls(callback) {
    var _this2 = this;
    return function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this2.schedule(function() {
        callback.apply(void 0, args);
      });
    };
  };
  _proto.flush = function flush() {
    var _this3 = this;
    var queue = this.queue;
    this.queue = [];
    if (queue.length) {
      scheduleMicrotask(function() {
        _this3.batchNotifyFn(function() {
          queue.forEach(function(callback) {
            _this3.notifyFn(callback);
          });
        });
      });
    }
  };
  _proto.setNotifyFunction = function setNotifyFunction(fn) {
    this.notifyFn = fn;
  };
  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {
    this.batchNotifyFn = fn;
  };
  return NotifyManager2;
}();
var notifyManager = new NotifyManager();
var logger$1 = console;
function getLogger() {
  return logger$1;
}
function setLogger(newLogger) {
  logger$1 = newLogger;
}
var Query = /* @__PURE__ */ function() {
  function Query2(config) {
    this.abortSignalConsumed = false;
    this.hadObservers = false;
    this.defaultOptions = config.defaultOptions;
    this.setOptions(config.options);
    this.observers = [];
    this.cache = config.cache;
    this.queryKey = config.queryKey;
    this.queryHash = config.queryHash;
    this.initialState = config.state || this.getDefaultState(this.options);
    this.state = this.initialState;
    this.meta = config.meta;
    this.scheduleGc();
  }
  var _proto = Query2.prototype;
  _proto.setOptions = function setOptions(options) {
    var _this$options$cacheTi;
    this.options = _extends({}, this.defaultOptions, options);
    this.meta = options == null ? void 0 : options.meta;
    this.cacheTime = Math.max(this.cacheTime || 0, (_this$options$cacheTi = this.options.cacheTime) != null ? _this$options$cacheTi : 5 * 60 * 1e3);
  };
  _proto.setDefaultOptions = function setDefaultOptions(options) {
    this.defaultOptions = options;
  };
  _proto.scheduleGc = function scheduleGc() {
    var _this = this;
    this.clearGcTimeout();
    if (isValidTimeout(this.cacheTime)) {
      this.gcTimeout = setTimeout(function() {
        _this.optionalRemove();
      }, this.cacheTime);
    }
  };
  _proto.clearGcTimeout = function clearGcTimeout() {
    if (this.gcTimeout) {
      clearTimeout(this.gcTimeout);
      this.gcTimeout = void 0;
    }
  };
  _proto.optionalRemove = function optionalRemove() {
    if (!this.observers.length) {
      if (this.state.isFetching) {
        if (this.hadObservers) {
          this.scheduleGc();
        }
      } else {
        this.cache.remove(this);
      }
    }
  };
  _proto.setData = function setData(updater, options) {
    var _this$options$isDataE, _this$options;
    var prevData = this.state.data;
    var data = functionalUpdate(updater, prevData);
    if ((_this$options$isDataE = (_this$options = this.options).isDataEqual) == null ? void 0 : _this$options$isDataE.call(_this$options, prevData, data)) {
      data = prevData;
    } else if (this.options.structuralSharing !== false) {
      data = replaceEqualDeep(prevData, data);
    }
    this.dispatch({
      data,
      type: "success",
      dataUpdatedAt: options == null ? void 0 : options.updatedAt
    });
    return data;
  };
  _proto.setState = function setState(state, setStateOptions) {
    this.dispatch({
      type: "setState",
      state,
      setStateOptions
    });
  };
  _proto.cancel = function cancel(options) {
    var _this$retryer;
    var promise = this.promise;
    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);
    return promise ? promise.then(noop).catch(noop) : Promise.resolve();
  };
  _proto.destroy = function destroy() {
    this.clearGcTimeout();
    this.cancel({
      silent: true
    });
  };
  _proto.reset = function reset() {
    this.destroy();
    this.setState(this.initialState);
  };
  _proto.isActive = function isActive() {
    return this.observers.some(function(observer) {
      return observer.options.enabled !== false;
    });
  };
  _proto.isFetching = function isFetching() {
    return this.state.isFetching;
  };
  _proto.isStale = function isStale() {
    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(function(observer) {
      return observer.getCurrentResult().isStale;
    });
  };
  _proto.isStaleByTime = function isStaleByTime(staleTime) {
    if (staleTime === void 0) {
      staleTime = 0;
    }
    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
  };
  _proto.onFocus = function onFocus() {
    var _this$retryer2;
    var observer = this.observers.find(function(x) {
      return x.shouldFetchOnWindowFocus();
    });
    if (observer) {
      observer.refetch();
    }
    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();
  };
  _proto.onOnline = function onOnline() {
    var _this$retryer3;
    var observer = this.observers.find(function(x) {
      return x.shouldFetchOnReconnect();
    });
    if (observer) {
      observer.refetch();
    }
    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();
  };
  _proto.addObserver = function addObserver(observer) {
    if (this.observers.indexOf(observer) === -1) {
      this.observers.push(observer);
      this.hadObservers = true;
      this.clearGcTimeout();
      this.cache.notify({
        type: "observerAdded",
        query: this,
        observer
      });
    }
  };
  _proto.removeObserver = function removeObserver(observer) {
    if (this.observers.indexOf(observer) !== -1) {
      this.observers = this.observers.filter(function(x) {
        return x !== observer;
      });
      if (!this.observers.length) {
        if (this.retryer) {
          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {
            this.retryer.cancel({
              revert: true
            });
          } else {
            this.retryer.cancelRetry();
          }
        }
        if (this.cacheTime) {
          this.scheduleGc();
        } else {
          this.cache.remove(this);
        }
      }
      this.cache.notify({
        type: "observerRemoved",
        query: this,
        observer
      });
    }
  };
  _proto.getObserversCount = function getObserversCount() {
    return this.observers.length;
  };
  _proto.invalidate = function invalidate() {
    if (!this.state.isInvalidated) {
      this.dispatch({
        type: "invalidate"
      });
    }
  };
  _proto.fetch = function fetch2(options, fetchOptions) {
    var _this2 = this, _this$options$behavio, _context$fetchOptions, _abortController$abor;
    if (this.state.isFetching) {
      if (this.state.dataUpdatedAt && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
        this.cancel({
          silent: true
        });
      } else if (this.promise) {
        var _this$retryer4;
        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry();
        return this.promise;
      }
    }
    if (options) {
      this.setOptions(options);
    }
    if (!this.options.queryFn) {
      var observer = this.observers.find(function(x) {
        return x.options.queryFn;
      });
      if (observer) {
        this.setOptions(observer.options);
      }
    }
    var queryKey = ensureQueryKeyArray(this.queryKey);
    var abortController = getAbortController();
    var queryFnContext = {
      queryKey,
      pageParam: void 0,
      meta: this.meta
    };
    Object.defineProperty(queryFnContext, "signal", {
      enumerable: true,
      get: function get() {
        if (abortController) {
          _this2.abortSignalConsumed = true;
          return abortController.signal;
        }
        return void 0;
      }
    });
    var fetchFn = function fetchFn2() {
      if (!_this2.options.queryFn) {
        return Promise.reject("Missing queryFn");
      }
      _this2.abortSignalConsumed = false;
      return _this2.options.queryFn(queryFnContext);
    };
    var context = {
      fetchOptions,
      options: this.options,
      queryKey,
      state: this.state,
      fetchFn,
      meta: this.meta
    };
    if ((_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch) {
      var _this$options$behavio2;
      (_this$options$behavio2 = this.options.behavior) == null ? void 0 : _this$options$behavio2.onFetch(context);
    }
    this.revertState = this.state;
    if (!this.state.isFetching || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {
      var _context$fetchOptions2;
      this.dispatch({
        type: "fetch",
        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta
      });
    }
    this.retryer = new Retryer({
      fn: context.fetchFn,
      abort: abortController == null ? void 0 : (_abortController$abor = abortController.abort) == null ? void 0 : _abortController$abor.bind(abortController),
      onSuccess: function onSuccess(data) {
        _this2.setData(data);
        _this2.cache.config.onSuccess == null ? void 0 : _this2.cache.config.onSuccess(data, _this2);
        if (_this2.cacheTime === 0) {
          _this2.optionalRemove();
        }
      },
      onError: function onError(error2) {
        if (!(isCancelledError(error2) && error2.silent)) {
          _this2.dispatch({
            type: "error",
            error: error2
          });
        }
        if (!isCancelledError(error2)) {
          _this2.cache.config.onError == null ? void 0 : _this2.cache.config.onError(error2, _this2);
          getLogger().error(error2);
        }
        if (_this2.cacheTime === 0) {
          _this2.optionalRemove();
        }
      },
      onFail: function onFail() {
        _this2.dispatch({
          type: "failed"
        });
      },
      onPause: function onPause() {
        _this2.dispatch({
          type: "pause"
        });
      },
      onContinue: function onContinue() {
        _this2.dispatch({
          type: "continue"
        });
      },
      retry: context.options.retry,
      retryDelay: context.options.retryDelay
    });
    this.promise = this.retryer.promise;
    return this.promise;
  };
  _proto.dispatch = function dispatch2(action) {
    var _this3 = this;
    this.state = this.reducer(this.state, action);
    notifyManager.batch(function() {
      _this3.observers.forEach(function(observer) {
        observer.onQueryUpdate(action);
      });
      _this3.cache.notify({
        query: _this3,
        type: "queryUpdated",
        action
      });
    });
  };
  _proto.getDefaultState = function getDefaultState2(options) {
    var data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    var hasInitialData = typeof options.initialData !== "undefined";
    var initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    var hasData = typeof data !== "undefined";
    return {
      data,
      dataUpdateCount: 0,
      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
      error: null,
      errorUpdateCount: 0,
      errorUpdatedAt: 0,
      fetchFailureCount: 0,
      fetchMeta: null,
      isFetching: false,
      isInvalidated: false,
      isPaused: false,
      status: hasData ? "success" : "idle"
    };
  };
  _proto.reducer = function reducer2(state, action) {
    var _action$meta, _action$dataUpdatedAt;
    switch (action.type) {
      case "failed":
        return _extends({}, state, {
          fetchFailureCount: state.fetchFailureCount + 1
        });
      case "pause":
        return _extends({}, state, {
          isPaused: true
        });
      case "continue":
        return _extends({}, state, {
          isPaused: false
        });
      case "fetch":
        return _extends({}, state, {
          fetchFailureCount: 0,
          fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,
          isFetching: true,
          isPaused: false
        }, !state.dataUpdatedAt && {
          error: null,
          status: "loading"
        });
      case "success":
        return _extends({}, state, {
          data: action.data,
          dataUpdateCount: state.dataUpdateCount + 1,
          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),
          error: null,
          fetchFailureCount: 0,
          isFetching: false,
          isInvalidated: false,
          isPaused: false,
          status: "success"
        });
      case "error":
        var error2 = action.error;
        if (isCancelledError(error2) && error2.revert && this.revertState) {
          return _extends({}, this.revertState);
        }
        return _extends({}, state, {
          error: error2,
          errorUpdateCount: state.errorUpdateCount + 1,
          errorUpdatedAt: Date.now(),
          fetchFailureCount: state.fetchFailureCount + 1,
          isFetching: false,
          isPaused: false,
          status: "error"
        });
      case "invalidate":
        return _extends({}, state, {
          isInvalidated: true
        });
      case "setState":
        return _extends({}, state, action.state);
      default:
        return state;
    }
  };
  return Query2;
}();
var QueryCache = /* @__PURE__ */ function(_Subscribable) {
  _inheritsLoose(QueryCache2, _Subscribable);
  function QueryCache2(config) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.config = config || {};
    _this.queries = [];
    _this.queriesMap = {};
    return _this;
  }
  var _proto = QueryCache2.prototype;
  _proto.build = function build(client, options, state) {
    var _options$queryHash;
    var queryKey = options.queryKey;
    var queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);
    var query = this.get(queryHash);
    if (!query) {
      query = new Query({
        cache: this,
        queryKey,
        queryHash,
        options: client.defaultQueryOptions(options),
        state,
        defaultOptions: client.getQueryDefaults(queryKey),
        meta: options.meta
      });
      this.add(query);
    }
    return query;
  };
  _proto.add = function add(query) {
    if (!this.queriesMap[query.queryHash]) {
      this.queriesMap[query.queryHash] = query;
      this.queries.push(query);
      this.notify({
        type: "queryAdded",
        query
      });
    }
  };
  _proto.remove = function remove(query) {
    var queryInMap = this.queriesMap[query.queryHash];
    if (queryInMap) {
      query.destroy();
      this.queries = this.queries.filter(function(x) {
        return x !== query;
      });
      if (queryInMap === query) {
        delete this.queriesMap[query.queryHash];
      }
      this.notify({
        type: "queryRemoved",
        query
      });
    }
  };
  _proto.clear = function clear() {
    var _this2 = this;
    notifyManager.batch(function() {
      _this2.queries.forEach(function(query) {
        _this2.remove(query);
      });
    });
  };
  _proto.get = function get(queryHash) {
    return this.queriesMap[queryHash];
  };
  _proto.getAll = function getAll() {
    return this.queries;
  };
  _proto.find = function find(arg1, arg2) {
    var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.queries.find(function(query) {
      return matchQuery(filters, query);
    });
  };
  _proto.findAll = function findAll(arg1, arg2) {
    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
    return Object.keys(filters).length > 0 ? this.queries.filter(function(query) {
      return matchQuery(filters, query);
    }) : this.queries;
  };
  _proto.notify = function notify(event) {
    var _this3 = this;
    notifyManager.batch(function() {
      _this3.listeners.forEach(function(listener) {
        listener(event);
      });
    });
  };
  _proto.onFocus = function onFocus() {
    var _this4 = this;
    notifyManager.batch(function() {
      _this4.queries.forEach(function(query) {
        query.onFocus();
      });
    });
  };
  _proto.onOnline = function onOnline() {
    var _this5 = this;
    notifyManager.batch(function() {
      _this5.queries.forEach(function(query) {
        query.onOnline();
      });
    });
  };
  return QueryCache2;
}(Subscribable);
var Mutation = /* @__PURE__ */ function() {
  function Mutation2(config) {
    this.options = _extends({}, config.defaultOptions, config.options);
    this.mutationId = config.mutationId;
    this.mutationCache = config.mutationCache;
    this.observers = [];
    this.state = config.state || getDefaultState();
    this.meta = config.meta;
  }
  var _proto = Mutation2.prototype;
  _proto.setState = function setState(state) {
    this.dispatch({
      type: "setState",
      state
    });
  };
  _proto.addObserver = function addObserver(observer) {
    if (this.observers.indexOf(observer) === -1) {
      this.observers.push(observer);
    }
  };
  _proto.removeObserver = function removeObserver(observer) {
    this.observers = this.observers.filter(function(x) {
      return x !== observer;
    });
  };
  _proto.cancel = function cancel() {
    if (this.retryer) {
      this.retryer.cancel();
      return this.retryer.promise.then(noop).catch(noop);
    }
    return Promise.resolve();
  };
  _proto.continue = function _continue() {
    if (this.retryer) {
      this.retryer.continue();
      return this.retryer.promise;
    }
    return this.execute();
  };
  _proto.execute = function execute() {
    var _this = this;
    var data;
    var restored = this.state.status === "loading";
    var promise = Promise.resolve();
    if (!restored) {
      this.dispatch({
        type: "loading",
        variables: this.options.variables
      });
      promise = promise.then(function() {
        _this.mutationCache.config.onMutate == null ? void 0 : _this.mutationCache.config.onMutate(_this.state.variables, _this);
      }).then(function() {
        return _this.options.onMutate == null ? void 0 : _this.options.onMutate(_this.state.variables);
      }).then(function(context) {
        if (context !== _this.state.context) {
          _this.dispatch({
            type: "loading",
            context,
            variables: _this.state.variables
          });
        }
      });
    }
    return promise.then(function() {
      return _this.executeMutation();
    }).then(function(result) {
      data = result;
      _this.mutationCache.config.onSuccess == null ? void 0 : _this.mutationCache.config.onSuccess(data, _this.state.variables, _this.state.context, _this);
    }).then(function() {
      return _this.options.onSuccess == null ? void 0 : _this.options.onSuccess(data, _this.state.variables, _this.state.context);
    }).then(function() {
      return _this.options.onSettled == null ? void 0 : _this.options.onSettled(data, null, _this.state.variables, _this.state.context);
    }).then(function() {
      _this.dispatch({
        type: "success",
        data
      });
      return data;
    }).catch(function(error2) {
      _this.mutationCache.config.onError == null ? void 0 : _this.mutationCache.config.onError(error2, _this.state.variables, _this.state.context, _this);
      getLogger().error(error2);
      return Promise.resolve().then(function() {
        return _this.options.onError == null ? void 0 : _this.options.onError(error2, _this.state.variables, _this.state.context);
      }).then(function() {
        return _this.options.onSettled == null ? void 0 : _this.options.onSettled(void 0, error2, _this.state.variables, _this.state.context);
      }).then(function() {
        _this.dispatch({
          type: "error",
          error: error2
        });
        throw error2;
      });
    });
  };
  _proto.executeMutation = function executeMutation() {
    var _this2 = this, _this$options$retry;
    this.retryer = new Retryer({
      fn: function fn() {
        if (!_this2.options.mutationFn) {
          return Promise.reject("No mutationFn found");
        }
        return _this2.options.mutationFn(_this2.state.variables);
      },
      onFail: function onFail() {
        _this2.dispatch({
          type: "failed"
        });
      },
      onPause: function onPause() {
        _this2.dispatch({
          type: "pause"
        });
      },
      onContinue: function onContinue() {
        _this2.dispatch({
          type: "continue"
        });
      },
      retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,
      retryDelay: this.options.retryDelay
    });
    return this.retryer.promise;
  };
  _proto.dispatch = function dispatch2(action) {
    var _this3 = this;
    this.state = reducer(this.state, action);
    notifyManager.batch(function() {
      _this3.observers.forEach(function(observer) {
        observer.onMutationUpdate(action);
      });
      _this3.mutationCache.notify(_this3);
    });
  };
  return Mutation2;
}();
function getDefaultState() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    isPaused: false,
    status: "idle",
    variables: void 0
  };
}
function reducer(state, action) {
  switch (action.type) {
    case "failed":
      return _extends({}, state, {
        failureCount: state.failureCount + 1
      });
    case "pause":
      return _extends({}, state, {
        isPaused: true
      });
    case "continue":
      return _extends({}, state, {
        isPaused: false
      });
    case "loading":
      return _extends({}, state, {
        context: action.context,
        data: void 0,
        error: null,
        isPaused: false,
        status: "loading",
        variables: action.variables
      });
    case "success":
      return _extends({}, state, {
        data: action.data,
        error: null,
        status: "success",
        isPaused: false
      });
    case "error":
      return _extends({}, state, {
        data: void 0,
        error: action.error,
        failureCount: state.failureCount + 1,
        isPaused: false,
        status: "error"
      });
    case "setState":
      return _extends({}, state, action.state);
    default:
      return state;
  }
}
var MutationCache = /* @__PURE__ */ function(_Subscribable) {
  _inheritsLoose(MutationCache2, _Subscribable);
  function MutationCache2(config) {
    var _this;
    _this = _Subscribable.call(this) || this;
    _this.config = config || {};
    _this.mutations = [];
    _this.mutationId = 0;
    return _this;
  }
  var _proto = MutationCache2.prototype;
  _proto.build = function build(client, options, state) {
    var mutation = new Mutation({
      mutationCache: this,
      mutationId: ++this.mutationId,
      options: client.defaultMutationOptions(options),
      state,
      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : void 0,
      meta: options.meta
    });
    this.add(mutation);
    return mutation;
  };
  _proto.add = function add(mutation) {
    this.mutations.push(mutation);
    this.notify(mutation);
  };
  _proto.remove = function remove(mutation) {
    this.mutations = this.mutations.filter(function(x) {
      return x !== mutation;
    });
    mutation.cancel();
    this.notify(mutation);
  };
  _proto.clear = function clear() {
    var _this2 = this;
    notifyManager.batch(function() {
      _this2.mutations.forEach(function(mutation) {
        _this2.remove(mutation);
      });
    });
  };
  _proto.getAll = function getAll() {
    return this.mutations;
  };
  _proto.find = function find(filters) {
    if (typeof filters.exact === "undefined") {
      filters.exact = true;
    }
    return this.mutations.find(function(mutation) {
      return matchMutation(filters, mutation);
    });
  };
  _proto.findAll = function findAll(filters) {
    return this.mutations.filter(function(mutation) {
      return matchMutation(filters, mutation);
    });
  };
  _proto.notify = function notify(mutation) {
    var _this3 = this;
    notifyManager.batch(function() {
      _this3.listeners.forEach(function(listener) {
        listener(mutation);
      });
    });
  };
  _proto.onFocus = function onFocus() {
    this.resumePausedMutations();
  };
  _proto.onOnline = function onOnline() {
    this.resumePausedMutations();
  };
  _proto.resumePausedMutations = function resumePausedMutations() {
    var pausedMutations = this.mutations.filter(function(x) {
      return x.state.isPaused;
    });
    return notifyManager.batch(function() {
      return pausedMutations.reduce(function(promise, mutation) {
        return promise.then(function() {
          return mutation.continue().catch(noop);
        });
      }, Promise.resolve());
    });
  };
  return MutationCache2;
}(Subscribable);
function infiniteQueryBehavior() {
  return {
    onFetch: function onFetch(context) {
      context.fetchFn = function() {
        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;
        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;
        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;
        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;
        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === "forward";
        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === "backward";
        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];
        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];
        var abortController = getAbortController();
        var abortSignal = abortController == null ? void 0 : abortController.signal;
        var newPageParams = oldPageParams;
        var cancelled = false;
        var queryFn = context.options.queryFn || function() {
          return Promise.reject("Missing queryFn");
        };
        var buildNewPages = function buildNewPages2(pages, param2, page, previous) {
          newPageParams = previous ? [param2].concat(newPageParams) : [].concat(newPageParams, [param2]);
          return previous ? [page].concat(pages) : [].concat(pages, [page]);
        };
        var fetchPage = function fetchPage2(pages, manual2, param2, previous) {
          if (cancelled) {
            return Promise.reject("Cancelled");
          }
          if (typeof param2 === "undefined" && !manual2 && pages.length) {
            return Promise.resolve(pages);
          }
          var queryFnContext = {
            queryKey: context.queryKey,
            signal: abortSignal,
            pageParam: param2,
            meta: context.meta
          };
          var queryFnResult = queryFn(queryFnContext);
          var promise2 = Promise.resolve(queryFnResult).then(function(page) {
            return buildNewPages(pages, param2, page, previous);
          });
          if (isCancelable(queryFnResult)) {
            var promiseAsAny = promise2;
            promiseAsAny.cancel = queryFnResult.cancel;
          }
          return promise2;
        };
        var promise;
        if (!oldPages.length) {
          promise = fetchPage([]);
        } else if (isFetchingNextPage) {
          var manual = typeof pageParam !== "undefined";
          var param = manual ? pageParam : getNextPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, manual, param);
        } else if (isFetchingPreviousPage) {
          var _manual = typeof pageParam !== "undefined";
          var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);
          promise = fetchPage(oldPages, _manual, _param, true);
        } else {
          (function() {
            newPageParams = [];
            var manual2 = typeof context.options.getNextPageParam === "undefined";
            var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true;
            promise = shouldFetchFirstPage ? fetchPage([], manual2, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]));
            var _loop = function _loop2(i2) {
              promise = promise.then(function(pages) {
                var shouldFetchNextPage = refetchPage && oldPages[i2] ? refetchPage(oldPages[i2], i2, oldPages) : true;
                if (shouldFetchNextPage) {
                  var _param2 = manual2 ? oldPageParams[i2] : getNextPageParam(context.options, pages);
                  return fetchPage(pages, manual2, _param2);
                }
                return Promise.resolve(buildNewPages(pages, oldPageParams[i2], oldPages[i2]));
              });
            };
            for (var i = 1; i < oldPages.length; i++) {
              _loop(i);
            }
          })();
        }
        var finalPromise = promise.then(function(pages) {
          return {
            pages,
            pageParams: newPageParams
          };
        });
        var finalPromiseAsAny = finalPromise;
        finalPromiseAsAny.cancel = function() {
          cancelled = true;
          abortController == null ? void 0 : abortController.abort();
          if (isCancelable(promise)) {
            promise.cancel();
          }
        };
        return finalPromise;
      };
    }
  };
}
function getNextPageParam(options, pages) {
  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);
}
function getPreviousPageParam(options, pages) {
  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);
}
var QueryClient = /* @__PURE__ */ function() {
  function QueryClient2(config) {
    if (config === void 0) {
      config = {};
    }
    this.queryCache = config.queryCache || new QueryCache();
    this.mutationCache = config.mutationCache || new MutationCache();
    this.defaultOptions = config.defaultOptions || {};
    this.queryDefaults = [];
    this.mutationDefaults = [];
  }
  var _proto = QueryClient2.prototype;
  _proto.mount = function mount() {
    var _this = this;
    this.unsubscribeFocus = focusManager.subscribe(function() {
      if (focusManager.isFocused() && onlineManager.isOnline()) {
        _this.mutationCache.onFocus();
        _this.queryCache.onFocus();
      }
    });
    this.unsubscribeOnline = onlineManager.subscribe(function() {
      if (focusManager.isFocused() && onlineManager.isOnline()) {
        _this.mutationCache.onOnline();
        _this.queryCache.onOnline();
      }
    });
  };
  _proto.unmount = function unmount() {
    var _this$unsubscribeFocu, _this$unsubscribeOnli;
    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);
    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);
  };
  _proto.isFetching = function isFetching(arg1, arg2) {
    var _parseFilterArgs = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs[0];
    filters.fetching = true;
    return this.queryCache.findAll(filters).length;
  };
  _proto.isMutating = function isMutating(filters) {
    return this.mutationCache.findAll(_extends({}, filters, {
      fetching: true
    })).length;
  };
  _proto.getQueryData = function getQueryData(queryKey, filters) {
    var _this$queryCache$find;
    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;
  };
  _proto.getQueriesData = function getQueriesData(queryKeyOrFilters) {
    return this.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref) {
      var queryKey = _ref.queryKey, state = _ref.state;
      var data = state.data;
      return [queryKey, data];
    });
  };
  _proto.setQueryData = function setQueryData(queryKey, updater, options) {
    var parsedOptions = parseQueryArgs(queryKey);
    var defaultedOptions = this.defaultQueryOptions(parsedOptions);
    return this.queryCache.build(this, defaultedOptions).setData(updater, options);
  };
  _proto.setQueriesData = function setQueriesData(queryKeyOrFilters, updater, options) {
    var _this2 = this;
    return notifyManager.batch(function() {
      return _this2.getQueryCache().findAll(queryKeyOrFilters).map(function(_ref2) {
        var queryKey = _ref2.queryKey;
        return [queryKey, _this2.setQueryData(queryKey, updater, options)];
      });
    });
  };
  _proto.getQueryState = function getQueryState(queryKey, filters) {
    var _this$queryCache$find2;
    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;
  };
  _proto.removeQueries = function removeQueries(arg1, arg2) {
    var _parseFilterArgs2 = parseFilterArgs(arg1, arg2), filters = _parseFilterArgs2[0];
    var queryCache = this.queryCache;
    notifyManager.batch(function() {
      queryCache.findAll(filters).forEach(function(query) {
        queryCache.remove(query);
      });
    });
  };
  _proto.resetQueries = function resetQueries(arg1, arg2, arg3) {
    var _this3 = this;
    var _parseFilterArgs3 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs3[0], options = _parseFilterArgs3[1];
    var queryCache = this.queryCache;
    var refetchFilters = _extends({}, filters, {
      active: true
    });
    return notifyManager.batch(function() {
      queryCache.findAll(filters).forEach(function(query) {
        query.reset();
      });
      return _this3.refetchQueries(refetchFilters, options);
    });
  };
  _proto.cancelQueries = function cancelQueries(arg1, arg2, arg3) {
    var _this4 = this;
    var _parseFilterArgs4 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs4[0], _parseFilterArgs4$ = _parseFilterArgs4[1], cancelOptions = _parseFilterArgs4$ === void 0 ? {} : _parseFilterArgs4$;
    if (typeof cancelOptions.revert === "undefined") {
      cancelOptions.revert = true;
    }
    var promises = notifyManager.batch(function() {
      return _this4.queryCache.findAll(filters).map(function(query) {
        return query.cancel(cancelOptions);
      });
    });
    return Promise.all(promises).then(noop).catch(noop);
  };
  _proto.invalidateQueries = function invalidateQueries(arg1, arg2, arg3) {
    var _ref3, _filters$refetchActiv, _filters$refetchInact, _this5 = this;
    var _parseFilterArgs5 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs5[0], options = _parseFilterArgs5[1];
    var refetchFilters = _extends({}, filters, {
      // if filters.refetchActive is not provided and filters.active is explicitly false,
      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries
      active: (_ref3 = (_filters$refetchActiv = filters.refetchActive) != null ? _filters$refetchActiv : filters.active) != null ? _ref3 : true,
      inactive: (_filters$refetchInact = filters.refetchInactive) != null ? _filters$refetchInact : false
    });
    return notifyManager.batch(function() {
      _this5.queryCache.findAll(filters).forEach(function(query) {
        query.invalidate();
      });
      return _this5.refetchQueries(refetchFilters, options);
    });
  };
  _proto.refetchQueries = function refetchQueries(arg1, arg2, arg3) {
    var _this6 = this;
    var _parseFilterArgs6 = parseFilterArgs(arg1, arg2, arg3), filters = _parseFilterArgs6[0], options = _parseFilterArgs6[1];
    var promises = notifyManager.batch(function() {
      return _this6.queryCache.findAll(filters).map(function(query) {
        return query.fetch(void 0, _extends({}, options, {
          meta: {
            refetchPage: filters == null ? void 0 : filters.refetchPage
          }
        }));
      });
    });
    var promise = Promise.all(promises).then(noop);
    if (!(options == null ? void 0 : options.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  };
  _proto.fetchQuery = function fetchQuery(arg1, arg2, arg3) {
    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    var defaultedOptions = this.defaultQueryOptions(parsedOptions);
    if (typeof defaultedOptions.retry === "undefined") {
      defaultedOptions.retry = false;
    }
    var query = this.queryCache.build(this, defaultedOptions);
    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
  };
  _proto.prefetchQuery = function prefetchQuery(arg1, arg2, arg3) {
    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);
  };
  _proto.fetchInfiniteQuery = function fetchInfiniteQuery(arg1, arg2, arg3) {
    var parsedOptions = parseQueryArgs(arg1, arg2, arg3);
    parsedOptions.behavior = infiniteQueryBehavior();
    return this.fetchQuery(parsedOptions);
  };
  _proto.prefetchInfiniteQuery = function prefetchInfiniteQuery(arg1, arg2, arg3) {
    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);
  };
  _proto.cancelMutations = function cancelMutations() {
    var _this7 = this;
    var promises = notifyManager.batch(function() {
      return _this7.mutationCache.getAll().map(function(mutation) {
        return mutation.cancel();
      });
    });
    return Promise.all(promises).then(noop).catch(noop);
  };
  _proto.resumePausedMutations = function resumePausedMutations() {
    return this.getMutationCache().resumePausedMutations();
  };
  _proto.executeMutation = function executeMutation(options) {
    return this.mutationCache.build(this, options).execute();
  };
  _proto.getQueryCache = function getQueryCache() {
    return this.queryCache;
  };
  _proto.getMutationCache = function getMutationCache() {
    return this.mutationCache;
  };
  _proto.getDefaultOptions = function getDefaultOptions() {
    return this.defaultOptions;
  };
  _proto.setDefaultOptions = function setDefaultOptions(options) {
    this.defaultOptions = options;
  };
  _proto.setQueryDefaults = function setQueryDefaults(queryKey, options) {
    var result = this.queryDefaults.find(function(x) {
      return hashQueryKey(queryKey) === hashQueryKey(x.queryKey);
    });
    if (result) {
      result.defaultOptions = options;
    } else {
      this.queryDefaults.push({
        queryKey,
        defaultOptions: options
      });
    }
  };
  _proto.getQueryDefaults = function getQueryDefaults(queryKey) {
    var _this$queryDefaults$f;
    return queryKey ? (_this$queryDefaults$f = this.queryDefaults.find(function(x) {
      return partialMatchKey(queryKey, x.queryKey);
    })) == null ? void 0 : _this$queryDefaults$f.defaultOptions : void 0;
  };
  _proto.setMutationDefaults = function setMutationDefaults(mutationKey, options) {
    var result = this.mutationDefaults.find(function(x) {
      return hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey);
    });
    if (result) {
      result.defaultOptions = options;
    } else {
      this.mutationDefaults.push({
        mutationKey,
        defaultOptions: options
      });
    }
  };
  _proto.getMutationDefaults = function getMutationDefaults(mutationKey) {
    var _this$mutationDefault;
    return mutationKey ? (_this$mutationDefault = this.mutationDefaults.find(function(x) {
      return partialMatchKey(mutationKey, x.mutationKey);
    })) == null ? void 0 : _this$mutationDefault.defaultOptions : void 0;
  };
  _proto.defaultQueryOptions = function defaultQueryOptions(options) {
    if (options == null ? void 0 : options._defaulted) {
      return options;
    }
    var defaultedOptions = _extends({}, this.defaultOptions.queries, this.getQueryDefaults(options == null ? void 0 : options.queryKey), options, {
      _defaulted: true
    });
    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {
      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);
    }
    return defaultedOptions;
  };
  _proto.defaultQueryObserverOptions = function defaultQueryObserverOptions(options) {
    return this.defaultQueryOptions(options);
  };
  _proto.defaultMutationOptions = function defaultMutationOptions(options) {
    if (options == null ? void 0 : options._defaulted) {
      return options;
    }
    return _extends({}, this.defaultOptions.mutations, this.getMutationDefaults(options == null ? void 0 : options.mutationKey), options, {
      _defaulted: true
    });
  };
  _proto.clear = function clear() {
    this.queryCache.clear();
    this.mutationCache.clear();
  };
  return QueryClient2;
}();
var unstable_batchedUpdates = ReactDOM.unstable_batchedUpdates;
notifyManager.setBatchNotifyFunction(unstable_batchedUpdates);
var logger = console;
setLogger(logger);
var defaultContext = /* @__PURE__ */ React.createContext(void 0);
var QueryClientSharingContext = /* @__PURE__ */ React.createContext(false);
function getQueryClientContext(contextSharing) {
  if (contextSharing && typeof window !== "undefined") {
    if (!window.ReactQueryClientContext) {
      window.ReactQueryClientContext = defaultContext;
    }
    return window.ReactQueryClientContext;
  }
  return defaultContext;
}
var QueryClientProvider = function QueryClientProvider2(_ref) {
  var client = _ref.client, _ref$contextSharing = _ref.contextSharing, contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing, children = _ref.children;
  React.useEffect(function() {
    client.mount();
    return function() {
      client.unmount();
    };
  }, [client]);
  var Context = getQueryClientContext(contextSharing);
  return /* @__PURE__ */ React.createElement(QueryClientSharingContext.Provider, {
    value: contextSharing
  }, /* @__PURE__ */ React.createElement(Context.Provider, {
    value: client
  }, children));
};
const theme = createTheme({
  headings: {
    sizes: {
      h1: {
        fontSize: "2rem",
        lineHeight: "2.0",
        fontWeight: "bolder"
      },
      h2: {
        fontSize: "1.8rem",
        fontWeight: "900"
      },
      h3: {
        fontWeight: "900"
      }
    }
  },
  fontSizes: {
    xs: "0.6875rem",
    sm: "0.875rem",
    md: "0.950rem",
    lg: "1.0rem",
    xl: "1.125rem"
  },
  fontFamily: "Inter, sans-serif",
  colors: {
    brand: [
      "#7F56D9",
      "#97B7CC",
      "#6CA1BD",
      "#428BAE",
      "#2F738E",
      "#00658B",
      "#7F56D9",
      "#004161",
      "#00304C",
      "#001F37",
      "#FFFFFF",
      "#F9FAFB",
      "#F4EBFF",
      "#DCDCDC"
    ],
    fontColors: [
      "#FFFFFF",
      "#F8F9FA",
      "#D0D5DD",
      "#CFD4DC",
      "#475467",
      "#667085",
      "#344054",
      "#344054",
      "#344054",
      "#101828"
    ]
  },
  primaryColor: "brand",
  components: {
    Badge: Badge.extend({
      styles: {
        label: { textTransform: "capitalize", fontWeight: "normal" }
      }
    }),
    ActionIcon: ActionIcon.extend({
      defaultProps: {
        variant: "subtle",
        color: "#475467"
      }
    }),
    TextInput: TextInput.extend({
      styles: {
        label: {
          fontWeight: "normal"
        }
      }
    }),
    Modal: Modal.extend({
      styles: {
        title: {
          fontWeight: "bold"
        }
      }
    }),
    Button: Button.extend({
      styles: {
        root: {
          overflow: "visible"
        }
      }
    }),
    Card: {
      styles: {
        root: {
          borderRadius: 8,
          boxShadow: "none"
        }
      },
      defaultProps: {
        shadow: "xs",
        bg: "white",
        px: "md",
        py: "sm"
      }
    },
    Input: {
      styles: {
        root: {
          borderRadius: 8,
          border: "1px solid #D0D5DD"
        }
      }
    },
    Drawer: {
      styles: {
        root: {
          borderRadius: 0
        }
      }
    },
    Text: {
      styles: {
        root: {
          color: "#475467"
        }
      }
    },
    Title: {
      styles: {
        root: {
          color: "#101828"
        }
      }
    }
  }
});
const NotFoundPage = () => {
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ge2, { medplum, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineProvider, { theme, stylesTransform: emotionTransform, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineEmotionProvider, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    Container$1,
    {
      style: {
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        alignItems: "center",
        height: "70vh"
      },
      children: [
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Title, { pb: 10, order: 3, children: "404 - Page Not Found" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
          lineNumber: 22,
          columnNumber: 7
        }, globalThis),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Button, { onClick: () => window.location.href = "/", children: "Go to Dashboard" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
          lineNumber: 25,
          columnNumber: 7
        }, globalThis)
      ]
    },
    void 0,
    true,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
      lineNumber: 13,
      columnNumber: 6
    },
    globalThis
  ) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
    lineNumber: 12,
    columnNumber: 5
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
    lineNumber: 11,
    columnNumber: 4
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/404Page.tsx",
    lineNumber: 10,
    columnNumber: 3
  }, globalThis);
};
function SignInPage() {
  const theme2 = useMantineTheme();
  const navigate = fe();
  return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
    SignInForm,
    {
      onSuccess: () => {
        navigate("/");
        window.location.reload();
      },
      children: [
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(DaikoLogo, { width: 50 }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/SignInPage.tsx",
          lineNumber: 17,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Title, { fz: 20, fw: 500, mt: 20, c: theme2.colors.brand[0], children: "Sign in to DAIKO" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/SignInPage.tsx",
          lineNumber: 18,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Title, { fz: 18, fw: 600, mb: 10, children: "AI First Healthcare Information System" }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/SignInPage.tsx",
          lineNumber: 21,
          columnNumber: 13
        }, this)
      ]
    },
    void 0,
    true,
    {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/components/SignInPage.tsx",
      lineNumber: 11,
      columnNumber: 9
    },
    this
  );
}
const queryClient = new QueryClient();
const layout = {
  ErrorInfo: () => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(NotFoundPage, {}, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
    lineNumber: 20,
    columnNumber: 22
  }, globalThis),
  LoadingIndicator: () => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ge2, { medplum, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineProvider, { theme, stylesTransform: emotionTransform, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineEmotionProvider, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Loading, {}, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
    lineNumber: 26,
    columnNumber: 21
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
    lineNumber: 25,
    columnNumber: 17
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
    lineNumber: 24,
    columnNumber: 13
  }, globalThis) }, void 0, false, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
    lineNumber: 23,
    columnNumber: 9
  }, globalThis),
  Layout: ({ children }) => {
    if (medplum.isLoading()) {
      return null;
    }
    if (!medplum.isAuthenticated()) {
      return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ge2, { medplum, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
        MantineProvider,
        {
          theme,
          stylesTransform: emotionTransform,
          children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineEmotionProvider, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(SignInPage, {}, void 0, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
            lineNumber: 44,
            columnNumber: 29
          }, globalThis) }, void 0, false, {
            fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
            lineNumber: 43,
            columnNumber: 25
          }, globalThis)
        },
        void 0,
        false,
        {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
          lineNumber: 39,
          columnNumber: 21
        },
        globalThis
      ) }, void 0, false, {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
        lineNumber: 38,
        columnNumber: 17
      }, globalThis);
    }
    return /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(reactExports.StrictMode, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ge2, { medplum, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(
      MantineProvider,
      {
        theme,
        stylesTransform: emotionTransform,
        children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(MantineEmotionProvider, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(ModalsProvider, { children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(App, { children }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
          lineNumber: 61,
          columnNumber: 37
        }, globalThis) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
          lineNumber: 60,
          columnNumber: 33
        }, globalThis) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
          lineNumber: 59,
          columnNumber: 29
        }, globalThis) }, void 0, false, {
          fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
          lineNumber: 58,
          columnNumber: 25
        }, globalThis)
      },
      void 0,
      false,
      {
        fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
        lineNumber: 54,
        columnNumber: 21
      },
      globalThis
    ) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
      lineNumber: 53,
      columnNumber: 17
    }, globalThis) }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/layout.tsx",
      lineNumber: 52,
      columnNumber: 13
    }, globalThis);
  }
};
const feedUrl = "https://feed.piral.cloud/api/v1/pilet/daiko-piral";
const medplum = new Lt({
  onUnauthenticated: () => {
    window.location.href = "/";
  },
  baseUrl: "https://fhir.ovok.com/",
  clientId: ""
});
const errors = {
  not_found: () => /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("div", { children: [
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("p", { className: "error", children: "Could not find the requested page. Are you sure it exists?" }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/index.tsx",
      lineNumber: 27,
      columnNumber: 13
    }, globalThis),
    /* @__PURE__ */ jsxDevRuntimeExports.jsxDEV("p", { children: "Go back" }, void 0, false, {
      fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/index.tsx",
      lineNumber: 30,
      columnNumber: 13
    }, globalThis)
  ] }, void 0, true, {
    fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/index.tsx",
    lineNumber: 26,
    columnNumber: 9
  }, globalThis)
};
const instance = createInstance({
  state: {
    components: layout,
    errorComponents: errors
  },
  plugins: [...createStandardApi()],
  requestPilets() {
    return fetch(feedUrl).then((res) => res.json()).then((res) => res.items);
  }
});
instance.root.setData("medplum", medplum);
instance.root.setData("mantinetheme", theme);
const root = createRoot(document.querySelector("#app"));
root.render(/* @__PURE__ */ jsxDevRuntimeExports.jsxDEV(Piral, { instance }, void 0, false, {
  fileName: "/Users/actimimacbook/Work/daiko-piral/piral/src/index.tsx",
  lineNumber: 52,
  columnNumber: 13
}, globalThis));
//# sourceMappingURL=index.96e54f02.js.map
